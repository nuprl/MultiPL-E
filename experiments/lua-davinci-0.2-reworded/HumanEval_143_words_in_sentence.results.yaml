language: lua
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuasbhs7r.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuasbhs7r.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpuasbhs7r.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_le170h.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpl_le170h.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpl_le170h.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, words[i])\n        end\n\
    \    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz5ak867.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkz5ak867.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_7wl0f4c.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_7wl0f4c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_7wl0f4c.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    local function is_prime(n)\n        if n <\
    \ 2 then\n            return false\n        end\n        if primes[n] ~= nil then\n\
    \            return primes[n]\n        end\n        for i = 2, math.sqrt(n) do\n\
    \            if n % i == 0 then\n                primes[n] = false\n         \
    \       return false\n            end\n        end\n        primes[n] = true\n\
    \        return true\n    end\n    for word in sentence:gmatch('%S+') do\n   \
    \     table.insert(words, word)\n    end\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(result, word)\n   \
    \     end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ll4m2r.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpq7ll4m2r.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local function\
    \ is_prime(n)\n    if n == 1 then return false end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then return false end\n    end\n    return true\n  end\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd0l5mum.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpmd0l5mum.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39cild0o.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp39cild0o.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6tx1wkd8.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6tx1wkd8.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6tx1wkd8.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local is_prime = true\n        for j = 2, #word - 1 do\n            if\
    \ word:sub(j, j) == word:sub(1, 1) then\n                is_prime = false\n  \
    \              break\n            end\n        end\n        if is_prime then\n\
    \            result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hdy6n4b.lua:40:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp0hdy6n4b.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n \
    \       for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                result[#result + 1]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local is_prime = true\n        for j = 2, #word do\n            if word:len()\
    \ % j == 0 then\n                is_prime = false\n                break\n   \
    \         end\n        end\n        if is_prime then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_q8zxb5.lua:40:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpb_q8zxb5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        for i = 2, n - 1 do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh_5n_50.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkh_5n_50.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local words = {}\n    for word in sentence:gmatch('%w+') do\n     \
    \   local len = #word\n        for _, prime in ipairs(primes) do\n           \
    \ if len == prime then\n                table.insert(words, word)\n          \
    \      break\n            end\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8cvh2p9.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpq8cvh2p9.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpq8cvh2p9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        for i = 2, n - 1 do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh_5n_50.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkh_5n_50.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    local is_prime = true\n    local word = ''\n\
    \    local sentence_length = string.len(sentence)\n    local sentence_index =\
    \ 1\n    local word_index = 1\n    local word_length = 0\n    local prime_index\
    \ = 1\n    local prime_length = 0\n    local result_index = 1\n    local result_length\
    \ = 0\n    local result_word = ''\n    local result_word_index = 1\n    local\
    \ result_word_length = 0\n    local result_word_char = ''\n    local result_word_char_index\
    \ = 1\n    local result_word_char_length = 0\n    local result_word_char_code\
    \ = 0\n    local result_word_char_code_index = 1\n    local result_word_char_code_length\
    \ = 0\n    local result_word_char_code_char = ''\n    local result_word_char_code_char_index\
    \ = 1\n    local result_word_char_code_char_length = 0\n    local result_word_char_code_char_code\
    \ = 0\n    local result_word_char_code_char_code_index = 1\n    local result_word_char_code_char_code_length\
    \ = 0\n    local result_word_char_code_char_code_char = ''\n    local result_word_char_code_char_code_char_index\
    \ = 1\n    local result_word_char_code_char_code_char_length = 0\n    local result_word_char_code_char_code_char_code\
    \ = 0\n    local result_word_char_code_char_code_char_code_index = 1\n    local\
    \ result_word_char_code_char_code_char_code_length = 0\n    local result_word_char_code_char_code_char_code_char\
    \ = ''\n    local result_word_char_code_char_code_char_code_char_index = 1\n \
    \   local result_word_char_code_char_code_char_code_char_length = 0\n    local\
    \ result_word_char_code_char_code_char_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8fncgvk2.lua:67: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for j = 2, i - 1 do\n\
    \      if i % j == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      table.insert(primes, i)\n    end\n  end\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    for _, prime in ipairs(primes)\
    \ do\n      if #word == prime then\n        table.insert(result, word)\n     \
    \   break\n      end\n    end\n  end\n  return table.concat(result, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    for i = 1, #words do\n        local word = words[i]\n  \
    \      local is_prime = true\n        for j = 2, #word do\n            if word\
    \ % j == 0 then\n                is_prime = false\n                break\n   \
    \         end\n        end\n        if is_prime then\n            table.insert(primes,\
    \ word)\n        end\n    end\n    return table.concat(primes, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_pkegh1b.lua:25:\
    \ attempt to perform arithmetic on a string value (local 'word')\nstack traceback:\n\
    \t/tmp/tmp_pkegh1b.lua:25: in local 'candidate'\n\t/tmp/tmp_pkegh1b.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n \
    \       for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            primes[#primes + 1] = i\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(words) do\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                result[#result + 1]\
    \ = word\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local primes\
    \ = {}\n  local result = {}\n  local function is_prime(num)\n    if num == 1 then\
    \ return false end\n    for i = 2, num - 1 do\n      if num % i == 0 then return\
    \ false end\n    end\n    return true\n  end\n  for i = 1, #sentence do\n    if\
    \ sentence:sub(i, i) == ' ' then\n      table.insert(words, sentence:sub(1, i\
    \ - 1))\n      sentence = sentence:sub(i + 1)\n      i = 0\n    end\n  end\n \
    \ table.insert(words, sentence)\n  for i = 1, #words do\n    if is_prime(#words[i])\
    \ then\n      table.insert(primes, words[i])\n    end\n  end\n  return table.concat(primes,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueswb3d7.lua:45:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpueswb3d7.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjue04g2.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpbjue04g2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for w in sentence:gmatch('%w+') do\n        table.insert(words, w)\n\
    \    end\n    for _, w in ipairs(words) do\n        if is_prime(#w) then\n   \
    \         table.insert(result, w)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp86eq0yxq.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp86eq0yxq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp86eq0yxq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        words[#words + 1] =\
    \ word\n    end\n    for i = 1, #words do\n        local word = words[i]\n   \
    \     local length = #word\n        local is_prime = true\n        for j = 2,\
    \ length - 1 do\n            if length % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            result[#result + 1] = word\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprarc5wea.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmprarc5wea.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, #word - 1 do\n      if word:len() % j == 0 then\n   \
    \     is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxt_rmtq.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpqxt_rmtq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    local function is_prime(n)\n        if n <\
    \ 2 then\n            return false\n        end\n        if primes[n] ~= nil then\n\
    \            return primes[n]\n        end\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                primes[n] = false\n    \
    \            return false\n            end\n        end\n        primes[n] = true\n\
    \        return true\n    end\n    for word in sentence:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(result, word)\n   \
    \     end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ result[#result + 1] = word\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbptw0mu.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvbptw0mu.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpvbptw0mu.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n == 1 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            primes[#primes + 1] = word\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_r_2zrn2.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_r_2zrn2.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_r_2zrn2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local function\
    \ is_prime(n)\n    if n < 2 then\n      return false\n    end\n    for i = 2,\
    \ math.sqrt(n) do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local result = {}\n  for _, word in ipairs(words)\
    \ do\n    if is_prime(#word) then\n      table.insert(result, word)\n    end\n\
    \  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n <= 1 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n == 1 then\n            return false\n        end\n        for i =\
    \ 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = sentence:split(' ')\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjhcva5d.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpxjhcva5d.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpxjhcva5d.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        words[#words + 1] =\
    \ word\n    end\n    for i = 1, #words do\n        local word = words[i]\n   \
    \     local is_prime = true\n        for j = 2, word:len() - 1 do\n          \
    \  if word:len() % j == 0 then\n                is_prime = false\n           \
    \     break\n            end\n        end\n        if is_prime then\n        \
    \    result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ynf93i0.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2ynf93i0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            primes[#primes + 1] = words[i]\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27s4rdnv.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp27s4rdnv.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp27s4rdnv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    local function is_prime(n)\n        if n <\
    \ 2 then\n            return false\n        end\n        for i = 2, n - 1 do\n\
    \            if n % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    for word in sentence:gmatch('%w+')\
    \ do\n        table.insert(words, word)\n    end\n    for i, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(primes, word)\n\
    \        end\n    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(primes, word)\n    end\n  end\n  return table.concat(primes, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpapaenhxk.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpapaenhxk.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpapaenhxk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(primes, word)\n    end\n  end\n  return table.concat(primes, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpapaenhxk.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpapaenhxk.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpapaenhxk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9coy2r1z.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9coy2r1z.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp9coy2r1z.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%S+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9xtdj73.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpj9xtdj73.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpj9xtdj73.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        for i = 2, n - 1 do\n            if n\
    \ % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local function word_length_is_prime(word)\n\
    \        return is_prime(#word)\n    end\n    local prime_words = {}\n    for\
    \ _, word in ipairs(words) do\n        if word_length_is_prime(word) then\n  \
    \          table.insert(prime_words, word)\n        end\n    end\n    return table.concat(prime_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnyugd0m.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpcnyugd0m.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      primes[#primes + 1] = i\n    end\n\
    \  end\n  local result = {}\n  for _, index in ipairs(primes) do\n    result[#result\
    \ + 1] = words[index]\n  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uvtibrm.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp_uvtibrm.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    for i = 2, math.sqrt(n) do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   if is_prime(#word) then\n      table.insert(words, word)\n    end\n  end\n\
    \  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        words[#words + 1] =\
    \ word\n    end\n    for i = 1, #words do\n        local word = words[i]\n   \
    \     local is_prime = true\n        for j = 2, word:len() - 1 do\n          \
    \  if word:len() % j == 0 then\n                is_prime = false\n           \
    \     break\n            end\n        end\n        if is_prime then\n        \
    \    result[#result + 1] = word\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ynf93i0.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2ynf93i0.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            primes[#primes + 1] = i\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        result[#result\
    \ + 1] = words[i]\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x4dtsc_.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp1x4dtsc_.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n == 1 then\n            return false\n        end\n        for i =\
    \ 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local res = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptolepl3j.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptolepl3j.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptolepl3j.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncpkk52l.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpncpkk52l.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpncpkk52l.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local len = #word\n        local is_prime = true\n        for j = 2,\
    \ len - 1 do\n            if len % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqljefm82.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpqljefm82.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n == 1 then\n            return false\n        end\n        for i =\
    \ 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local words = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, index in ipairs(primes) do\n        table.insert(result,\
    \ words[index])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9nsfej7.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpj9nsfej7.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        for _, prime in ipairs(primes) do\n           \
    \ if #word == prime then\n                result[#result + 1] = word\n       \
    \         break\n            end\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, #word - 1 do\n      if word:sub(j, j) == word:sub(1,\
    \ 1) then\n        is_prime = false\n        break\n      end\n    end\n    if\
    \ is_prime then\n      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt26l70mq.lua:40:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpt26l70mq.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvev9kdv5.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpvev9kdv5.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpvev9kdv5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%S+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmt_4zwy.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpgmt_4zwy.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpgmt_4zwy.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n      if n % i == 0 then\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local function is_prime(n)\n        if n < 2 then\n            return false\n\
    \        end\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, words[i])\n        end\n\
    \    end\n    return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz5ak867.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkz5ak867.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        words[#words + 1] = word\n    end\n  \
    \  local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local length = #word\n        local is_prime = true\n        for j =\
    \ 2, length - 1 do\n            if length % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            result[#result + 1] = word\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j6phxnj.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp_j6phxnj.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp341vkb9c.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp341vkb9c.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp341vkb9c.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local result\
    \ = {}\n    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for word in sentence:gmatch('%w+')\
    \ do\n        words[#words + 1] = word\n    end\n    for i = 1, #words do\n  \
    \      for j = 1, #primes do\n            if #words[i] == primes[j] then\n   \
    \             result[#result + 1] = words[i]\n            end\n        end\n \
    \   end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n == 1 then\n            return false\n        end\n        for i =\
    \ 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    for i = 1, #sentence do\n        if sentence:sub(i, i) == ' ' then\n\
    \            table.insert(words, sentence:sub(1, i - 1))\n            sentence\
    \ = sentence:sub(i + 1)\n            i = 0\n        end\n    end\n    table.insert(words,\
    \ sentence)\n    for i = 2, #words do\n        local is_prime = true\n       \
    \ for j = 2, i - 1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mrbxexx.lua:44:\
    \ expected: \"is\"\nactual: \"is a test\"\nstack traceback:\n\t/tmp/tmp7mrbxexx.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n == 1 then\n            return false\n        end\n        for i =\
    \ 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, 100 do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, word in ipairs(words) do\n        for _, prime\
    \ in ipairs(primes) do\n            if #word == prime then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = {}\n    for word in sentence:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    for i = 1, #words do\n        local\
    \ length = #words[i]\n        local is_prime = true\n        for j = 2, length\
    \ - 1 do\n            if length % j == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(primes, words[i])\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47vuuja_.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp47vuuja_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local function\
    \ is_prime(n)\n    if n < 2 then\n      return false\n    end\n    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        local is_prime = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ is_prime = false\n                break\n            end\n        end\n    \
    \    if is_prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for _, i in ipairs(primes) do\n        table.insert(result,\
    \ words[i])\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9x3nmuo.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9x3nmuo.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local function\
    \ is_prime(n)\n    if n < 2 then\n      return false\n    end\n    for i = 2,\
    \ math.sqrt(n) do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local result = {}\n  for _, word in ipairs(words)\
    \ do\n    if is_prime(#word) then\n      table.insert(result, word)\n    end\n\
    \  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00c4mgws.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp00c4mgws.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp00c4mgws.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpambun7fq.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpambun7fq.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpambun7fq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(primes, word)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6ug3bci.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_6ug3bci.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_6ug3bci.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local primes\
    \ = {}\n  for i = 2, #words do\n    local is_prime = true\n    for j = 2, i -\
    \ 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n  \
    \    end\n    end\n    if is_prime then\n      table.insert(primes, words[i])\n\
    \    end\n  end\n  return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k11mi2u.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp7k11mi2u.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 1, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsfpmqoa.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmptsfpmqoa.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptsfpmqoa.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ozuwdow.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6ozuwdow.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6ozuwdow.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local primes = {}\n    for i = 2, #words do\n        if is_prime(#words[i])\
    \ then\n            table.insert(primes, words[i])\n        end\n    end\n   \
    \ return table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq9mhmjj.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpkq9mhmjj.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpkq9mhmjj.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local function\
    \ is_prime(n)\n        if n == 1 then\n            return false\n        end\n\
    \        for i = 2, n - 1 do\n            if n % i == 0 then\n               \
    \ return false\n            end\n        end\n        return true\n    end\n \
    \   for word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n \
    \           table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
