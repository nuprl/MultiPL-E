language: lua
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr98ir9ie.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpr98ir9ie.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpr98ir9ie.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(integers, value)\n       \
    \ end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(integers, v)\n    end\n  end\n  return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(integers, value)\n    end\n  end\n \
    \ return integers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local integers\
    \ = {}\n  for i, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(integers, v)\n    end\n  end\n  return integers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      result[#result + 1] = value\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            result[#result + 1] = value\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local new_values\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(new_values, value)\n    end\n  end\n\
    \  return new_values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v % 1 == 0 then\n            table.insert(result, v)\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local new_values\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(new_values, value)\n     \
    \   end\n    end\n    return new_values\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value == math.floor(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ math.floor(v) == v then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if is_integer(value) then\n \
    \     table.insert(result, value)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73gu_oza.lua:9:\
    \ attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp73gu_oza.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp73gu_oza.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local integers\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(integers, value)\n\
    \        end\n    end\n    return integers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value == math.floor(value) then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and math.floor(value) == value then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n\
    \    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' and\
    \ v == math.floor(v) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4,\
    \ {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c',\
    \ 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ math.floor(value) == value then\n      table.insert(result, value)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n  \
    \  lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3,\
    \ 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Filter given table of any luathon values only for integers\n-- >>>\
    \ filter_integers({'a', 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc',\
    \ {}, {}})\n-- {1, 2, 3}\nlocal function filter_integers(values)\n  local result\
    \ = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {},\
    \ {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3,\
    \ 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
