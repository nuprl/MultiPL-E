---
language: lua
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if is_integer(value) then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr98ir9ie.lua:9:
    attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmpr98ir9ie.lua:9:
    in local 'candidate'\n\t/tmp/tmpr98ir9ie.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local integers = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(integers, value)
            end
        end
        return integers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value == math.floor(value) then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and v % 1 == 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local integers = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(integers, v)
        end
      end
      return integers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local integers = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(integers, value)
        end
      end
      return integers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for i, v in ipairs(values) do
            if type(v) == 'number' and v % 1 == 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and v % 1 == 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local integers = {}
      for i, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(integers, v)
        end
      end
      return integers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and v == math.floor(v) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          result[#result + 1] = value
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value == math.floor(value) then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for i, v in ipairs(values) do
            if type(v) == 'number' and v == math.floor(v) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and v % 1 == 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                result[#result + 1] = value
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local new_values = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(new_values, value)
        end
      end
      return new_values
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and v % 1 == 0 then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value == math.floor(value) then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value == math.floor(value) then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local new_values = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(new_values, value)
            end
        end
        return new_values
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for i, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for i, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v == math.floor(v) then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value == math.floor(value) then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local integers = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(integers, value)
            end
        end
        return integers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and math.floor(v) == v then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if is_integer(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73gu_oza.lua:9:
    attempt to call a nil value (global 'is_integer')\nstack traceback:\n\t/tmp/tmp73gu_oza.lua:9:
    in local 'candidate'\n\t/tmp/tmp73gu_oza.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local integers = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(integers, value)
            end
        end
        return integers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value == math.floor(value) then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and v % 1 == 0 then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and math.floor(value) == value then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, v in ipairs(values) do
            if type(v) == 'number' and v == math.floor(v) then
                table.insert(result, v)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and value % 1 == 0 then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, value in ipairs(values) do
        if type(value) == 'number' and math.floor(value) == value then
          table.insert(result, value)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
        local result = {}
        for _, value in ipairs(values) do
            if type(value) == 'number' and value % 1 == 0 then
                table.insert(result, value)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 0
  program: |-
    -- Filter given table of any luathon values only for integers
    -- >>> filter_integers({'a', 3.14, 5})
    -- {5}
    -- >>> filter_integers({1, 2, 3, 'abc', {}, {}})
    -- {1, 2, 3}
    local function filter_integers(values)
      local result = {}
      for _, v in ipairs(values) do
        if type(v) == 'number' and math.floor(v) == v then
          table.insert(result, v)
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = filter_integers
        lu.assertEquals(candidate({}), {})
        lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})
        lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
