---
name: HumanEval_136_largest_smallest_integers
language: lua
prompt: |
  -- Create a function that returns a table (a, b), where 'a' is
  -- the largest of negative integers, and 'b' is the smallest
  -- of positive integers in a table.
  -- If there is no negative or positive integers, return them as None.
  -- Examples:
  -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})
  -- {None, 1}
  -- >>> largest_smallest_integers({})
  -- {None, None}
  -- >>> largest_smallest_integers({0})
  -- {None, None}
  local function largest_smallest_integers(lst)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = largest_smallest_integers
      lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})
      lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})
      lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})
      lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})
      lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})
      lu.assertEquals(candidate({}), {None, None})
      lu.assertEquals(candidate({0}), {None, None})
      lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})
      lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})
      lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})
      lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local max_neg = nil
      local min_pos = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v > 0 then
              if b == None or v < b then
                  b = v
              end
          elseif v < 0 then
              if a == None or v > a then
                  a = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if not max_neg or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if not min_pos or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
    local min_pos, max_neg = math.huge, -math.huge
    for _, v in ipairs(lst) do
      if v > 0 then
        min_pos = math.min(min_pos, v)
      elseif v < 0 then
        max_neg = math.max(max_neg, v)
      end
    end
    return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
    local largest_negative = nil
    local smallest_positive = nil
    for _, v in ipairs(lst) do
      if v < 0 then
        if largest_negative == nil or v > largest_negative then
          largest_negative = v
        end
      elseif v > 0 then
        if smallest_positive == nil or v < smallest_positive then
          smallest_positive = v
        end
      end
    end
    return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min, max = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min == nil or v < min then
                  min = v
              end
          elseif v < 0 then
              if max == nil or v > max then
                  max = v
              end
          end
      end
      return {max, min}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local smallest_positive, largest_negative = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
    local largest_negative = nil
    local smallest_positive = nil
    for _, v in ipairs(lst) do
      if v < 0 then
        if largest_negative == nil or v > largest_negative then
          largest_negative = v
        end
      elseif v > 0 then
        if smallest_positive == nil or v < smallest_positive then
          smallest_positive = v
        end
      end
    end
    return {largest_negative, smallest_positive}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_neg, smallest_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_neg == nil or v > largest_neg then
                  largest_neg = v
              end
          elseif v > 0 then
              if smallest_pos == nil or v < smallest_pos then
                  smallest_pos = v
              end
          end
      end
      return {largest_neg, smallest_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos, max_neg = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- YOUR CODE HERE
      local a = nil
      local b = nil
      for i, v in ipairs(lst) do
          if v > 0 then
              if b == nil then
                  b = v
              elseif v < b then
                  b = v
              end
          elseif v < 0 then
              if a == nil then
                  a = v
              elseif v > a then
                  a = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local smallest_positive = nil
      local largest_negative = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- your code here
      return {None, None}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest = nil
      local smallest = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest == nil or v > largest then
                  largest = v
              end
          elseif v > 0 then
              if smallest == nil or v < smallest then
                  smallest = v
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local smallest_positive, largest_negative = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == None or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == None or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
    local largest_negative = nil
    local smallest_positive = nil
    for _, v in ipairs(lst) do
      if v < 0 then
        if largest_negative == nil or v > largest_negative then
          largest_negative = v
        end
      elseif v > 0 then
        if smallest_positive == nil or v < smallest_positive then
          smallest_positive = v
        end
      end
    end
    return {largest_negative, smallest_positive}
  end
- |2-
      local min, max = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min = math.min(min, v)
          elseif v < 0 then
              max = math.max(max, v)
          end
      end
      return {max == -math.huge and nil or max, min == math.huge and nil or min}
  end
- |2-
      -- your code here
      local a = nil
      local b = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if a == nil or v > a then
                  a = v
              end
          elseif v > 0 then
              if b == nil or v < b then
                  b = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if not max_neg or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if not min_pos or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_positive, max_negative = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_positive = math.min(min_positive, v)
          elseif v < 0 then
              max_negative = math.max(max_negative, v)
          end
      end
      return {max_negative == -math.huge and nil or max_negative,
              min_positive == math.huge and nil or min_positive}
  end
- |2-
      local largest_neg, smallest_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_neg == nil or v > largest_neg then
                  largest_neg = v
              end
          elseif v > 0 then
              if smallest_pos == nil or v < smallest_pos then
                  smallest_pos = v
              end
          end
      end
      return {largest_neg, smallest_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_neg = nil
      local smallest_pos = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_neg == nil or v > largest_neg then
                  largest_neg = v
              end
          elseif v > 0 then
              if smallest_pos == nil or v < smallest_pos then
                  smallest_pos = v
              end
          end
      end
      return {largest_neg, smallest_pos}
  end
- |2-
      -- TODO: Implement me!
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v > 0 then
              if b == None or v < b then
                  b = v
              end
          elseif v < 0 then
              if a == None or v > a then
                  a = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local max_neg, min_pos = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (max_neg == None or v > max_neg) then
              max_neg = v
          elseif v > 0 and (min_pos == None or v < min_pos) then
              min_pos = v
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local smallest = nil
      local largest = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest == nil or v < smallest then
                  smallest = v
              end
          elseif v < 0 then
              if largest == nil or v > largest then
                  largest = v
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_positive, max_negative = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_positive == nil or v < min_positive then
                  min_positive = v
              end
          elseif v < 0 then
              if max_negative == nil or v > max_negative then
                  max_negative = v
              end
          end
      end
      return {max_negative, min_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local min_pos, max_neg = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_pos = math.min(min_pos, v)
          elseif v < 0 then
              max_neg = math.max(max_neg, v)
          end
      end
      return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if not max_neg or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if not min_pos or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
    local largest_negative = nil
    local smallest_positive = nil
    for _, v in ipairs(lst) do
      if v < 0 then
        if largest_negative == nil or v > largest_negative then
          largest_negative = v
        end
      elseif v > 0 then
        if smallest_positive == nil or v < smallest_positive then
          smallest_positive = v
        end
      end
    end
    return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos, max_neg = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos, max_neg = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_pos = math.min(min_pos, v)
          elseif v < 0 then
              max_neg = math.max(max_neg, v)
          end
      end
      return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
    local largest_negative, smallest_positive = nil, nil
    for _, v in ipairs(lst) do
      if v < 0 then
        if largest_negative == nil or v > largest_negative then
          largest_negative = v
        end
      elseif v > 0 then
        if smallest_positive == nil or v < smallest_positive then
          smallest_positive = v
        end
      end
    end
    return {largest_negative, smallest_positive}
  end
- |2-
      local smallest_positive, largest_negative = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- your code here
      local max_neg = nil
      local min_pos = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local min_positive, max_negative = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_positive = math.min(min_positive, v)
          elseif v < 0 then
              max_negative = math.max(max_negative, v)
          end
      end
      return {max_negative == -math.huge and nil or max_negative,
              min_positive == math.huge and nil or min_positive}
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == None or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == None or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos, max_neg = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local min_pos = nil
      local max_neg = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      -- your code here
  end
- |2-
    local largest_negative = nil
    local smallest_positive = nil
    for _, v in ipairs(lst) do
      if v < 0 then
        if largest_negative == nil or v > largest_negative then
          largest_negative = v
        end
      elseif v > 0 then
        if smallest_positive == nil or v < smallest_positive then
          smallest_positive = v
        end
      end
    end
    return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == None or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == None or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos, max_neg = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      -- Your code here
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min = math.huge
      local max = -math.huge
      for _, v in ipairs(lst) do
          if v < 0 then
              max = math.max(max, v)
          elseif v > 0 then
              min = math.min(min, v)
          end
      end
      return {max == -math.huge and nil or max, min == math.huge and nil or min}
  end
- |2-
      local smallest_positive = nil
      local largest_negative = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min, max = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if not min or v < min then
                  min = v
              end
          elseif v < 0 then
              if not max or v > max then
                  max = v
              end
          end
      end
      return {max, min}
  end
- |2-
      -- your code here
      return {None, None}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- YOUR CODE HERE
      local a = nil
      local b = nil
      for i,v in ipairs(lst) do
          if v > 0 then
              if b == nil then
                  b = v
              elseif v < b then
                  b = v
              end
          elseif v < 0 then
              if a == nil then
                  a = v
              elseif v > a then
                  a = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local min_pos, max_neg = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_pos = math.min(min_pos, v)
          elseif v < 0 then
              max_neg = math.max(max_neg, v)
          end
      end
      return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
    -- your code here
  end
- |2-
      local largest_negative, smallest_positive
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == None or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == None or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min, max = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min == nil or v < min then
                  min = v
              end
          elseif v < 0 then
              if max == nil or v > max then
                  max = v
              end
          end
      end
      return {max, min}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == None or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == None or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_positive, max_negative = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_positive == nil or v < min_positive then
                  min_positive = v
              end
          elseif v < 0 then
              if max_negative == nil or v > max_negative then
                  max_negative = v
              end
          end
      end
      return {max_negative, min_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos, max_neg = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_pos = math.min(min_pos, v)
          elseif v < 0 then
              max_neg = math.max(max_neg, v)
          end
      end
      return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- your code here
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          elseif v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- your code here
      return {None, None}
  end
- |2-
      -- your code here
  end
- |2-
      local min_pos, max_neg = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_pos = math.min(min_pos, v)
          elseif v < 0 then
              max_neg = math.max(max_neg, v)
          end
      end
      return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
      -- your code here
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if a == None or v > a then
                  a = v
              end
          elseif v > 0 then
              if b == None or v < b then
                  b = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local smallest, largest = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if smallest == nil or v < smallest then
                  smallest = v
              end
          elseif v < 0 then
              if largest == nil or v > largest then
                  largest = v
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      local largest, smallest = None, None
      for i = 1, #lst do
          if lst[i] > 0 then
              if smallest == None or lst[i] < smallest then
                  smallest = lst[i]
              end
          elseif lst[i] < 0 then
              if largest == None or lst[i] > largest then
                  largest = lst[i]
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      local min, max = nil, nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if not min or v < min then
                  min = v
              end
          elseif v < 0 then
              if not max or v > max then
                  max = v
              end
          end
      end
      return {max, min}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_pos = nil
      local max_neg = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local max_neg, min_pos = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if not max_neg or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if not min_pos or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local min_positive, max_negative = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_positive = math.min(min_positive, v)
          elseif v < 0 then
              max_negative = math.max(max_negative, v)
          end
      end
      return {max_negative == -math.huge and nil or max_negative,
              min_positive == math.huge and nil or min_positive}
  end
- |2-
      local min, max = None, None
      for _, v in ipairs(lst) do
          if v > 0 then
              if min == None or v < min then
                  min = v
              end
          elseif v < 0 then
              if max == None or v > max then
                  max = v
              end
          end
      end
      return {max, min}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local min_positive = nil
      local max_negative = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_positive == nil or v < min_positive then
                  min_positive = v
              end
          elseif v < 0 then
              if max_negative == nil or v > max_negative then
                  max_negative = v
              end
          end
      end
      return {max_negative, min_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == None or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == None or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (largest_negative == None or v > largest_negative) then
              largest_negative = v
          elseif v > 0 and (smallest_positive == None or v < smallest_positive) then
              smallest_positive = v
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for i = 1, #lst do
          if lst[i] < 0 and (a == None or lst[i] > a) then
              a = lst[i]
          elseif lst[i] > 0 and (b == None or lst[i] < b) then
              b = lst[i]
          end
      end
      return {a, b}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v > 0 then
              if b == None or v < b then
                  b = v
              end
          elseif v < 0 then
              if a == None or v > a then
                  a = v
              end
          end
      end
      return {a, b}
  end
- |2-
      local min_pos, max_neg = math.huge, -math.huge
      for _, v in ipairs(lst) do
          if v > 0 then
              min_pos = math.min(min_pos, v)
          elseif v < 0 then
              max_neg = math.max(max_neg, v)
          end
      end
      return {max_neg == -math.huge and nil or max_neg, min_pos == math.huge and nil or min_pos}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      local min_pos = nil
      local max_neg = nil
      for _, v in ipairs(lst) do
          if v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          elseif v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest = nil
      local smallest = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest == nil or v > largest then
                  largest = v
              end
          elseif v > 0 then
              if smallest == nil or v < smallest then
                  smallest = v
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local largest = nil
      local smallest = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest == nil or v > largest then
                  largest = v
              end
          elseif v > 0 then
              if smallest == nil or v < smallest then
                  smallest = v
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
    -- your code here
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      -- your code here
      local largest = nil
      local smallest = nil
      for i, v in ipairs(lst) do
          if v < 0 then
              if largest == nil or v > largest then
                  largest = v
              end
          elseif v > 0 then
              if smallest == nil or v < smallest then
                  smallest = v
              end
          end
      end
      return {largest, smallest}
  end
- |2-
      -- TODO: Implement this function.
      local max_neg = nil
      local min_pos = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if max_neg == nil or v > max_neg then
                  max_neg = v
              end
          elseif v > 0 then
              if min_pos == nil or v < min_pos then
                  min_pos = v
              end
          end
      end
      return {max_neg, min_pos}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative, smallest_positive = nil, nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local a, b = None, None
      for _, v in ipairs(lst) do
          if v < 0 and (a == None or v > a) then
              a = v
          elseif v > 0 and (b == None or v < b) then
              b = v
          end
      end
      return {a, b}
  end
- |2-
      -- your code here
  end
- |2-
      -- your code here
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
- |2-
      local largest_negative = nil
      local smallest_positive = nil
      for _, v in ipairs(lst) do
          if v < 0 then
              if largest_negative == nil or v > largest_negative then
                  largest_negative = v
              end
          elseif v > 0 then
              if smallest_positive == nil or v < smallest_positive then
                  smallest_positive = v
              end
          end
      end
      return {largest_negative, smallest_positive}
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
