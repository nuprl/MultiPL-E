---
name: HumanEval_94_skjkasdkd
language: lua
prompt: |
  -- You are given a table of integers.
  -- You need to find the largest prime value and return the sum of its digits.
  -- Examples:
  -- >>> skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})
  -- 10
  -- >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})
  -- 25
  -- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})
  -- 13
  -- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})
  -- 11
  -- >>> skjkasdkd({0, 81, 12, 3, 1, 21})
  -- 3
  -- >>> skjkasdkd({0, 8, 1, 2, 1, 7})
  -- 7
  local function skjkasdkd(lst)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = skjkasdkd
      lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}), 10)
      lu.assertEquals(candidate({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)
      lu.assertEquals(candidate({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)
      lu.assertEquals(candidate({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)
      lu.assertEquals(candidate({0, 81, 12, 3, 1, 21}), 3)
      lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)
      lu.assertEquals(candidate({8191}), 19)
      lu.assertEquals(candidate({8191, 123456, 127, 7}), 19)
      lu.assertEquals(candidate({127, 97, 8192}), 10)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > max then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      for i = 2, n - 1 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local s = 0
      while n > 0 do
        s = s + n % 10
        n = math.floor(n / 10)
      end
      return s
    end
    local maxPrime = 0
    for _, n in ipairs(lst) do
      if isPrime(n) and n > maxPrime then maxPrime = n end
    end
    return sumDigits(maxPrime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if is_prime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = math.max(unpack(primes))
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function isPrime(n)
          if n < 2 then
              return false
          end
          for i = 2, n - 1 do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sumDigits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local maxPrime = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > maxPrime then
              maxPrime = v
          end
      end
      return sumDigits(maxPrime)
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and isPrime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if isPrime(lst[i]) and lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if isPrime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = 0
    for i = 1, #primes do
      if primes[i] > max then
        max = primes[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      return sum_digits(max_prime)
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if is_prime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max_prime = math.max(unpack(primes))
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local prime = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > prime then
              prime = v
          end
      end
      local sum = 0
      while prime > 0 do
          sum = sum + prime % 10
          prime = math.floor(prime / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              table.insert(primes, lst[i])
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if is_prime(v) and v > max then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for _, v in ipairs(lst) do
          if is_prime(v) then
              table.insert(primes, v)
          end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
          sum = sum + (max % 10)
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function isPrime(n)
          if n < 2 then
              return false
          end
          for i = 2, n - 1 do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sumDigits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local maxPrime = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > maxPrime then
              maxPrime = v
          end
      end
      return sumDigits(maxPrime)
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function isPrime(n)
          if n < 2 then
              return false
          end
          for i = 2, n - 1 do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sumDigits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > max then
              max = v
          end
      end
      return sumDigits(max)
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local n = lst[i]
      if n > 1 then
        local is_prime = true
        for j = 2, n - 1 do
          if n % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          primes[#primes + 1] = n
        end
      end
    end
    local max_prime = 0
    for i = 1, #primes do
      if primes[i] > max_prime then
        max_prime = primes[i]
      end
    end
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if is_prime(v) and v > max then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- "\tlocal primes = {}\n\tlocal max = 0\n\tfor i = 1, #lst do\n\t\tlocal n = lst[i]\n\t\tif
  n > 1 then\n\t\t\tlocal is_prime = true\n\t\t\tfor j = 2, n - 1 do\n\t\t\t\tif n
  % j == 0 then\n\t\t\t\t\tis_prime = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif
  is_prime then\n\t\t\t\tprimes[#primes + 1] = n\n\t\t\t\tif n > max then\n\t\t\t\t\tmax
  = n\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal sum = 0\n\twhile max > 0 do\n\t\tsum
  = sum + max % 10\n\t\tmax = math.floor(max / 10)\n\tend\n\treturn sum\nend"
- |2-
      local function is_prime(n)
          if n <= 1 then
              return false
          elseif n <= 3 then
              return true
          elseif n % 2 == 0 or n % 3 == 0 then
              return false
          end
          local i = 5
          while i * i <= n do
              if n % i == 0 or n % (i + 2) == 0 then
                  return false
              end
              i = i + 6
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and isPrime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    return sum_digits(max)
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    return sum_digits(max)
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local n = lst[i]
      if n > max and is_prime(n) then
        max = n
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local largestPrime = 0
    for i = 1, #lst do
      if isPrime(lst[i]) and lst[i] > largestPrime then
        largestPrime = lst[i]
      end
    end
    local sum = 0
    while largestPrime > 0 do
      sum = sum + largestPrime % 10
      largestPrime = math.floor(largestPrime / 10)
    end
    return sum
  end
- |2-
      local sum = 0
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      if n == 2 then return true end
      if n % 2 == 0 then return false end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max = 0
    for i = 1, #lst do
      if isPrime(lst[i]) and lst[i] > max then
        max = lst[i]
      end
    end
    return sumDigits(max)
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local n = lst[i]
      local is_prime = true
      for j = 2, math.sqrt(n) do
        if n % j == 0 then
          is_prime = false
          break
        end
      end
      if is_prime then
        primes[#primes + 1] = n
      end
    end
    local max = math.max(unpack(primes))
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          if n <= 1 then
              return false
          elseif n <= 3 then
              return true
          elseif n % 2 == 0 or n % 3 == 0 then
              return false
          end
          local i = 5
          while i * i <= n do
              if n % i == 0 or n % (i + 2) == 0 then
                  return false
              end
              i = i + 6
          end
          return true
      end
      local function sum_digits(n)
          local s = 0
          while n > 0 do
              s = s + n % 10
              n = math.floor(n / 10)
          end
          return s
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      return sum_digits(max_prime)
  end
- |2-
      local largest = 0
      for _, v in ipairs(lst) do
          if v > largest and is_prime(v) then
              largest = v
          end
      end
      local sum = 0
      while largest > 0 do
          sum = sum + largest % 10
          largest = math.floor(largest / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local res = 0
      while max > 0 do
          res = res + max % 10
          max = math.floor(max / 10)
      end
      return res
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if isPrime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = 0
    for i = 1, #primes do
      if primes[i] > max then
        max = primes[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if lst[i] > 1 then
              for j = 2, lst[i] do
                  if lst[i] % j == 0 then
                      break
                  end
                  if j == lst[i] then
                      primes[#primes + 1] = lst[i]
                  end
              end
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if lst[i] > 1 then
        local is_prime = true
        for j = 2, lst[i] - 1 do
          if lst[i] % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          table.insert(primes, lst[i])
        end
      end
    end
    local max_prime = 0
    for i = 1, #primes do
      if primes[i] > max_prime then
        max_prime = primes[i]
      end
    end
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
    local largest = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > largest then
        largest = v
      end
    end
    local sum = 0
    while largest > 0 do
      sum = sum + largest % 10
      largest = math.floor(largest / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = -1
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
    local function is_prime(n)
      if n < 2 then return false end
      if n == 2 then return true end
      if n % 2 == 0 then return false end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local largest_prime = 0
    for _, v in ipairs(lst) do
      if is_prime(v) and v > largest_prime then
        largest_prime = v
      end
    end
    return sum_digits(largest_prime)
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local res = 0
      while max > 0 do
          res = res + max % 10
          max = math.floor(max / 10)
      end
      return res
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if isPrime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = 0
    for i = 1, #primes do
      if primes[i] > max then
        max = primes[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, n in ipairs(lst) do
          if is_prime(n) and n > max_prime then
              max_prime = n
          end
      end
      return sum_digits(max_prime)
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if is_prime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max_prime = math.max(unpack(primes))
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local n = lst[i]
      if n > max and is_prime(n) then
        max = n
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local n = lst[i]
      if n > max and isPrime(n) then
        max = n
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local isPrime = true
      for j = 2, i - 1 do
        if i % j == 0 then
          isPrime = false
          break
        end
      end
      if isPrime then
        primes[#primes + 1] = i
      end
    end
    local maxPrime = primes[#primes]
    local sum = 0
    while maxPrime > 0 do
      sum = sum + maxPrime % 10
      maxPrime = math.floor(maxPrime / 10)
    end
    return sum
  end
- |2-
    local primes = {}
    for _, v in ipairs(lst) do
      if is_prime(v) then
        table.insert(primes, v)
      end
    end
    local max = math.max(unpack(primes))
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if lst[i] > 1 then
              local is_prime = true
              for j = 2, lst[i] - 1 do
                  if lst[i] % j == 0 then
                      is_prime = false
                      break
                  end
              end
              if is_prime then
                  table.insert(primes, lst[i])
              end
          end
      end
      local max_prime = 0
      for i = 1, #primes do
          if primes[i] > max_prime then
              max_prime = primes[i]
          end
      end
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local n = lst[i]
      if n > max and isPrime(n) then
        max = n
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function is_prime(n)
      if n <= 1 then return false end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max = 0
    for _, v in ipairs(lst) do
      if is_prime(v) and v > max then max = v end
    end
    return sum_digits(max)
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if isPrime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = primes[1]
    for i = 2, #primes do
      if primes[i] > max then
        max = primes[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      local sum = 0
      while max_prime > 0 do
          sum = sum + (max_prime % 10)
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- "\tlocal max = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v > max and is_prime(v) then\n\t\t\tmax
  = v\n\t\tend\n\tend\n\tlocal sum = 0\n\twhile max > 0 do\n\t\tsum = sum + max %
  10\n\t\tmax = math.floor(max / 10)\n\tend\n\treturn sum\nend"
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      for i = 2, math.floor(math.sqrt(n)) do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local largestPrime = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > largestPrime then
        largestPrime = v
      end
    end
    return sumDigits(largestPrime)
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local maxPrime = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > maxPrime then
        maxPrime = v
      end
    end
    return sumDigits(maxPrime)
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and isPrime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if is_prime(lst[i]) then
        table.insert(primes, lst[i])
      end
    end
    local max = math.max(unpack(primes))
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function isPrime(n)
      if n <= 1 then return false end
      for i = 2, n - 1 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local maxPrime = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > maxPrime then
        maxPrime = v
      end
    end
    return sumDigits(maxPrime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              table.insert(primes, lst[i])
          end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- "\tlocal max = 0\n\tfor _, v in ipairs(lst) do\n\t\tif v > max and is_prime(v) then\n\t\t\tmax
  = v\n\t\tend\n\tend\n\tlocal sum = 0\n\twhile max > 0 do\n\t\tsum = sum + max %
  10\n\t\tmax = math.floor(max / 10)\n\tend\n\treturn sum\nend"
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      for i = 1, #tostring(max) do
          sum = sum + tonumber(tostring(max):sub(i, i))
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          local x = lst[i]
          if x > max and is_prime(x) then
              max = x
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      return sum_digits(max_prime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local function is_prime(n)
      if n <= 1 then return false end
      if n <= 3 then return true end
      if n % 2 == 0 or n % 3 == 0 then return false end
      for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max_prime = 0
    for _, v in ipairs(lst) do
      if is_prime(v) and v > max_prime then
        max_prime = v
      end
    end
    return sum_digits(max_prime)
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > max then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local x = lst[i]
      if x > max and isPrime(x) then
        max = x
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          if n <= 1 then
              return false
          elseif n <= 3 then
              return true
          elseif n % 2 == 0 or n % 3 == 0 then
              return false
          end
          local i = 5
          while i * i <= n do
              if n % i == 0 or n % (i + 2) == 0 then
                  return false
              end
              i = i + 6
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      return sum_digits(max_prime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          local n = lst[i]
          if n > 1 then
              local is_prime = true
              for j = 2, math.sqrt(n) do
                  if n % j == 0 then
                      is_prime = false
                      break
                  end
              end
              if is_prime then
                  table.insert(primes, n)
              end
          end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and isPrime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + (max % 10)
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local n = lst[i]
      if is_prime(n) then
        primes[#primes + 1] = n
      end
    end
    local max_prime = math.max(unpack(primes))
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, n in ipairs(lst) do
          if is_prime(n) and n > max then
              max = n
          end
      end
      return sum_digits(max)
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          local n = lst[i]
          if n > 1 then
              local is_prime = true
              for j = 2, n - 1 do
                  if n % j == 0 then
                      is_prime = false
                      break
                  end
              end
              if is_prime then
                  table.insert(primes, n)
              end
          end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          local n = lst[i]
          if n > max and is_prime(n) then
              max = n
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if isPrime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = 0
    for i = 1, #primes do
      if primes[i] > max then
        max = primes[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local largest_prime = 0
    for i = 1, #lst do
      local n = lst[i]
      if is_prime(n) and n > largest_prime then
        largest_prime = n
      end
    end
    local sum = 0
    while largest_prime > 0 do
      sum = sum + largest_prime % 10
      largest_prime = math.floor(largest_prime / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          if n <= 1 then
              return false
          elseif n <= 3 then
              return true
          elseif n % 2 == 0 or n % 3 == 0 then
              return false
          end
          local i = 5
          while i * i <= n do
              if n % i == 0 or n % (i + 2) == 0 then
                  return false
              end
              i = i + 6
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local n = lst[i]
      if n > 1 then
        local is_prime = true
        for j = 2, math.floor(math.sqrt(n)) do
          if n % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          primes[#primes + 1] = n
        end
      end
    end
    local max_prime = math.max(unpack(primes))
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      if n == 2 then return true end
      if n % 2 == 0 then return false end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > max then
        max = v
      end
    end
    return sumDigits(max)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              table.insert(primes, lst[i])
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + (max % 10)
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function isPrime(n)
          if n < 2 then
              return false
          end
          for i = 2, n - 1 do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sumDigits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > max then
              max = v
          end
      end
      return sumDigits(max)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          local n = lst[i]
          if n > 1 then
              local is_prime = true
              for j = 2, n - 1 do
                  if n % j == 0 then
                      is_prime = false
                      break
                  end
              end
              if is_prime then
                  primes[#primes + 1] = n
              end
          end
      end
      local max_prime = primes[1]
      for i = 2, #primes do
          if primes[i] > max_prime then
              max_prime = primes[i]
          end
      end
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          local n = lst[i]
          if n > max and isPrime(n) then
              max = n
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for _, v in ipairs(lst) do
          if isPrime(v) then
              table.insert(primes, v)
          end
      end
      local max = math.max(unpack(primes))
      local sum = 0
      while max > 0 do
          sum = sum + (max % 10)
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
    local function is_prime(n)
      if n < 2 then return false end
      for i = 2, n - 1 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max_prime = 0
    for _, n in ipairs(lst) do
      if is_prime(n) and n > max_prime then
        max_prime = n
      end
    end
    return sum_digits(max_prime)
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.floor(math.sqrt(n)) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local s = 0
          while n > 0 do
              s = s + n % 10
              n = math.floor(n / 10)
          end
          return s
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      return sum_digits(max_prime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local primes = {}
    for _, v in ipairs(lst) do
      if isPrime(v) then
        table.insert(primes, v)
      end
    end
    local max = math.max(unpack(primes))
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local is_prime = true
      for j = 2, math.floor(math.sqrt(lst[i])) do
        if lst[i] % j == 0 then
          is_prime = false
          break
        end
      end
      if is_prime then
        table.insert(primes, lst[i])
      end
    end
    local max_prime = 0
    for i = 1, #primes do
      if primes[i] > max_prime then
        max_prime = primes[i]
      end
    end
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      if n == 2 then return true end
      if n % 2 == 0 then return false end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local maxPrime = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > maxPrime then
        maxPrime = v
      end
    end
    return sumDigits(maxPrime)
  end
- |2-
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
      local function isPrime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sumDigits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local maxPrime = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > maxPrime then
              maxPrime = v
          end
      end
      return sumDigits(maxPrime)
  end
- |2-
      local largestPrime = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > largestPrime then
              largestPrime = v
          end
      end
      local sum = 0
      while largestPrime > 0 do
          sum = sum + largestPrime % 10
          largestPrime = math.floor(largestPrime / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if isPrime(lst[i]) and lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      local n = lst[i]
      if n > 1 then
        local is_prime = true
        for j = 2, n - 1 do
          if n % j == 0 then
            is_prime = false
            break
          end
        end
        if is_prime then
          primes[#primes + 1] = n
        end
      end
    end
    local max_prime = math.max(unpack(primes))
    local sum = 0
    while max_prime > 0 do
      sum = sum + max_prime % 10
      max_prime = math.floor(max_prime / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local function is_prime(n)
          for i = 2, n - 1 do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      if n == 2 then return true end
      if n % 2 == 0 then return false end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max = 0
    for _, v in ipairs(lst) do
      if isPrime(v) and v > max then
        max = v
      end
    end
    return sumDigits(max)
  end
- |2-
      local primes = {}
      for i = 2, math.maxinteger do
          if not primes[i] then
              for j = i * 2, math.maxinteger, i do
                  primes[j] = true
              end
          end
      end
      local max = 0
      for _, v in ipairs(lst) do
          if not primes[v] and v > max then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          if n <= 1 then
              return false
          elseif n <= 3 then
              return true
          elseif n % 2 == 0 or n % 3 == 0 then
              return false
          end
          local i = 5
          while i * i <= n do
              if n % i == 0 or n % (i + 2) == 0 then
                  return false
              end
              i = i + 6
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max then
              max = v
          end
      end
      return sum_digits(max)
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          for i = 2, n - 1 do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, n in ipairs(lst) do
          if is_prime(n) and n > max_prime then
              max_prime = n
          end
      end
      return sum_digits(max_prime)
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local num = lst[i]
      if num > max and isPrime(num) then
        max = num
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      local n = lst[i]
      if n > max and is_prime(n) then
        max = n
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + (max % 10)
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
    local function isPrime(n)
      if n < 2 then return false end
      if n == 2 then return true end
      if n % 2 == 0 then return false end
      for i = 3, math.sqrt(n), 2 do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sumDigits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local maxPrime = 0
    for _, n in ipairs(lst) do
      if isPrime(n) and n > maxPrime then
        maxPrime = n
      end
    end
    return sumDigits(maxPrime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          local n = lst[i]
          local is_prime = true
          for j = 2, math.floor(math.sqrt(n)) do
              if n % j == 0 then
                  is_prime = false
                  break
              end
          end
          if is_prime then
              table.insert(primes, n)
          end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 2, #lst do
          if lst[i] > 1 then
              for j = i * 2, #lst, i do
                  lst[j] = 0
              end
          end
      end
      for i = 2, #lst do
          if lst[i] > 1 then
              table.insert(primes, lst[i])
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function is_prime(n)
      if n <= 1 then return false end
      if n <= 3 then return true end
      if n % 2 == 0 or n % 3 == 0 then return false end
      for i = 5, math.floor(math.sqrt(n)), 6 do
        if n % i == 0 or n % (i + 2) == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max_prime = 0
    for _, n in ipairs(lst) do
      if is_prime(n) and n > max_prime then
        max_prime = n
      end
    end
    return sum_digits(max_prime)
  end
- |2-
      local primes = {}
      for i = 0, #lst do
          if lst[i] > 1 then
              for j = 2, lst[i] do
                  if lst[i] % j == 0 then
                      break
                  end
                  if j == lst[i] then
                      primes[#primes + 1] = lst[i]
                  end
              end
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local largestPrime = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > largestPrime then
              largestPrime = v
          end
      end
      local sum = 0
      while largestPrime > 0 do
          sum = sum + largestPrime % 10
          largestPrime = math.floor(largestPrime / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max_prime = math.max(unpack(primes))
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if isPrime(v) and v > max then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local function is_prime(n)
      if n < 2 then return false end
      for i = 2, math.floor(math.sqrt(n)) do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local sum = 0
      while n > 0 do
        sum = sum + n % 10
        n = math.floor(n / 10)
      end
      return sum
    end
    local max = 0
    for _, n in ipairs(lst) do
      if is_prime(n) and n > max then max = n end
    end
    return sum_digits(max)
  end
- |2-
      local max = 0
      for i = 1, #lst do
          local n = lst[i]
          if n > max and isPrime(n) then
              max = n
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, n in ipairs(lst) do
          if is_prime(n) and n > max_prime then
              max_prime = n
          end
      end
      return sum_digits(max_prime)
  end
- |2-
      local largestPrime = 0
      for _, n in ipairs(lst) do
          if n > largestPrime and isPrime(n) then
              largestPrime = n
          end
      end
      local sum = 0
      while largestPrime > 0 do
          sum = sum + largestPrime % 10
          largestPrime = math.floor(largestPrime / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for _, v in ipairs(lst) do
      if v > max and is_prime(v) then
        max = v
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local max = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              table.insert(primes, lst[i])
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and is_prime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
    local primes = {}
    for i = 1, #lst do
      if is_prime(lst[i]) then
        primes[#primes + 1] = lst[i]
      end
    end
    local max = 0
    for i = 1, #primes do
      if primes[i] > max then
        max = primes[i]
      end
    end
    local sum = 0
    while max > 0 do
      sum = sum + max % 10
      max = math.floor(max / 10)
    end
    return sum
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if is_prime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = 0
      for i = 1, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local function is_prime(n)
          if n < 2 then
              return false
          end
          for i = 2, math.sqrt(n) do
              if n % i == 0 then
                  return false
              end
          end
          return true
      end
      local function sum_digits(n)
          local sum = 0
          while n > 0 do
              sum = sum + n % 10
              n = math.floor(n / 10)
          end
          return sum
      end
      local max_prime = 0
      for _, v in ipairs(lst) do
          if is_prime(v) and v > max_prime then
              max_prime = v
          end
      end
      return sum_digits(max_prime)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          local n = lst[i]
          if n > 1 then
              local is_prime = true
              for j = 2, n - 1 do
                  if n % j == 0 then
                      is_prime = false
                      break
                  end
              end
              if is_prime then
                  table.insert(primes, n)
              end
          end
      end
      local max_prime = 0
      for i = 1, #primes do
          if primes[i] > max_prime then
              max_prime = primes[i]
          end
      end
      local sum = 0
      while max_prime > 0 do
          sum = sum + max_prime % 10
          max_prime = math.floor(max_prime / 10)
      end
      return sum
  end
- |2-
    local function is_prime(n)
      if n < 2 then return false end
      for i = 2, math.sqrt(n) do
        if n % i == 0 then return false end
      end
      return true
    end
    local function sum_digits(n)
      local s = 0
      while n > 0 do
        s = s + n % 10
        n = math.floor(n / 10)
      end
      return s
    end
    local max = 0
    for _, n in ipairs(lst) do
      if is_prime(n) and n > max then max = n end
    end
    return sum_digits(max)
  end
- |2-
      local primes = {}
      for i = 1, #lst do
          if isPrime(lst[i]) then
              primes[#primes + 1] = lst[i]
          end
      end
      local max = primes[1]
      for i = 2, #primes do
          if primes[i] > max then
              max = primes[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for _, v in ipairs(lst) do
          if v > max and isPrime(v) then
              max = v
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
- |2-
      local max = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      local sum = 0
      while max > 0 do
          sum = sum + max % 10
          max = math.floor(max / 10)
      end
      return sum
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
