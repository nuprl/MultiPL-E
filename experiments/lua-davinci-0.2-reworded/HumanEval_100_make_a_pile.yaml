---
name: HumanEval_100_make_a_pile
language: lua
prompt: |
  -- Given a positive integer n, you have to make a pile of n levels of stones.
  -- The first level has n stones.
  -- The number of stones in the next level is:
  -- - the next odd number if n is odd.
  -- - the next even number if n is even.
  -- Return the number of stones in each level in a table, where element at index
  -- i represents the number of stones in the level (i+1).
  -- Examples:
  -- >>> make_a_pile(3)
  -- {3, 5, 7}
  local function make_a_pile(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = make_a_pile
      lu.assertEquals(candidate(3), {3, 5, 7})
      lu.assertEquals(candidate(4), {4, 6, 8, 10})
      lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})
      lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})
      lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = i * 2 - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i + (i % 2 == 0 and 1 or 0)
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    while n > 0 do
      table.insert(pile, n)
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + (i - 1) * 2
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    while n > 0 do
      t[#t+1] = n
      n = n % 2 == 0 and n + 1 or n + 2
    end
    return t
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
      local pile = {}
      for i = 1, n do
          table.insert(pile, n + 2 * i - 1)
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
      local t = {}
      for i = 1, n do
          t[i] = n + 2 * i - 1
      end
      return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = i + (i % 2 == 0 and 1 or 0)
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    local i = 1
    while n > 0 do
      t[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return t
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = i * 2 - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = i * 2 - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i + (i % 2 == 0 and 1 or 0)
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      n = n % 2 == 0 and n + 1 or n + 2
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local result = {}
    for i = 1, n do
      if i == 1 then
        result[i] = n
      elseif i % 2 == 0 then
        result[i] = result[i - 1] + 2
      else
        result[i] = result[i - 1] + 1
      end
    end
    return result
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = i * 2 - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i + (i % 2 == 0 and 1 or 0)
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local result = {}
    local i = 1
    while n > 0 do
      result[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return result
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = i * 2 - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = i * 2 - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local result = {}
    for i = 1, n do
      table.insert(result, n + 2 * i - 1)
    end
    return result
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = i * 2 - 1
    end
    return t
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
      local pile = {}
      local i = 1
      while n > 0 do
          pile[i] = n
          if n % 2 == 0 then
              n = n + 1
          else
              n = n + 2
          end
          i = i + 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      table.insert(pile, n + 2 * i - 1)
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
      local pile = {}
      for i = 1, n do
          if i % 2 == 0 then
              pile[i] = i + 1
          else
              pile[i] = i + 2
          end
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
      local t = {}
      for i = 1, n do
          t[i] = n + 2 * i - 1
      end
      return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + (i - 1) * 2
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      table.insert(pile, n + 2 * i - 1)
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    while n > 0 do
      table.insert(pile, n)
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n + 2 * i - 1
    end
    return t
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = 2 * i - 1
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    while n > 0 do
      table.insert(pile, n)
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      if i % 2 == 0 then
        t[i] = t[i - 1] + 2
      else
        t[i] = t[i - 1] + 1
      end
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    while n > 0 do
      t[#t+1] = n
      n = n % 2 == 0 and n + 1 or n + 2
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
    end
    return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = i * 2 - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
    local t = {}
    for i = 1, n do
      t[i] = i * 2 - 1
    end
    return t
  end
- |2-
    local pile = {}
    local i = 1
    while n > 0 do
      pile[i] = n
      if n % 2 == 0 then
        n = n + 1
      else
        n = n + 2
      end
      i = i + 1
    end
    return pile
  end
- |2-
      local pile = {}
      for i = 1, n do
          pile[i] = n + 2 * i - 1
      end
      return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      table.insert(pile, n + 2 * i - 1)
    end
    return pile
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
- |2-
      local t = {}
      for i = 1, n do
          t[i] = n + 2 * i - 1
      end
      return t
  end
- |2-
    local pile = {}
    for i = 1, n do
      pile[i] = n + 2 * i - 1
    end
    return pile
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
