name: HumanEval_113_odd_count
language: lua
prompt: "-- Given a table of strings, where each string consists of only digits, return\
  \ a table.\n-- Each element i of the output should be \"the number of odd elements\
  \ in the\n-- string i of the input.\" where all the i's should be replaced by the\
  \ number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
  -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
  \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
  \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function odd_count(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_count\n\
  \    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the\
  \ str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3', '11111111'}), {'the\
  \ number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements\
  \ 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271', '137',\
  \ '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.', 'the number\
  \ of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local ret = {}\n    for i, v in ipairs(lst) do\n        local count\
    \ = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j, j)) % 2 == 1\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    ret[i] = \"the number of odd elements \" .. count .. \"n the str\" .. count\
    \ .. \"ng \" .. count .. \" of the \" .. count .. \"nput.\"\n    end\n    return\
    \ ret\nend", "    local res = {}\n    for _, v in ipairs(lst) do\n        local\
    \ cnt = 0\n        for i = 1, #v do\n            if tonumber(v:sub(i, i)) % 2\
    \ == 1 then\n                cnt = cnt + 1\n            end\n        end\n   \
    \     table.insert(res, string.format(\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\", cnt, cnt, cnt, cnt))\n    end\n    return res\nend", " \
    \   local result = {}\n    for i, v in ipairs(lst) do\n        local count = 0\n\
    \        for j = 1, #v do\n            local digit = tonumber(v:sub(j, j))\n \
    \           if digit % 2 == 1 then\n                count = count + 1\n      \
    \      end\n        end\n        result[i] = string.format(\"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\", count, i, i, i)\n    end\n   \
    \ return result\nend", "    local result = {}\n    for i, v in ipairs(lst) do\n\
    \        local count = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j,\
    \ j)) % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        result[i] = string.format(\"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\", count, i, i, i)\n    end\n    return result\nend",
  "    local res = {}\n    for i,v in ipairs(lst) do\n        local cnt = 0\n    \
    \    for j = 1, #v do\n            if tonumber(v:sub(j,j)) % 2 == 1 then\n   \
    \             cnt = cnt + 1\n            end\n        end\n        res[i] = string.gsub(\n\
    \            \"the number of odd elements \" .. cnt .. \"n the str\" .. cnt ..\
    \ \"ng \" .. cnt .. \" of the \" .. cnt .. \"nput.\",\n            cnt, i)\n \
    \   end\n    return res\nend", "    local res = {}\n    for i, v in ipairs(lst)\
    \ do\n        local cnt = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j,\
    \ j)) % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        table.insert(res, string.format(\"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\", cnt, i, i, i))\n    end\n    return res\nend",
  "    local res = {}\n    for i, v in ipairs(lst) do\n        local count = 0\n \
    \       for j = 1, #v do\n            if tonumber(v:sub(j, j)) % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        res[i]\
    \ = string.gsub(\n            'the number of odd elements ' .. count .. 'n the\
    \ str' .. count .. 'ng ' .. count .. ' of the ' .. count .. 'nput.',\n       \
    \     '(' .. count .. ')',\n            '%1'\n        )\n    end\n    return res\n\
    end", "    local res = {}\n    for i, v in ipairs(lst) do\n        local cnt =\
    \ 0\n        for j = 1, #v do\n            if tonumber(v:sub(j, j)) % 2 == 1 then\n\
    \                cnt = cnt + 1\n            end\n        end\n        res[i] =\
    \ 'the number of odd elements ' .. cnt .. 'n the str' .. cnt .. 'ng ' .. cnt ..\
    \ ' of the ' .. cnt .. 'nput.'\n    end\n    return res\nend", "    local out\
    \ = {}\n    for i, v in ipairs(lst) do\n        local count = 0\n        for j\
    \ = 1, #v do\n            if tonumber(v:sub(j, j)) % 2 == 1 then\n           \
    \     count = count + 1\n            end\n        end\n        out[i] = 'the number\
    \ of odd elements ' .. count .. 'n the str' .. count .. 'ng ' .. count .. ' of\
    \ the ' .. count .. 'nput.'\n    end\n    return out\nend", "    local res = {}\n\
    \    for i, v in ipairs(lst) do\n        local count = 0\n        for j = 1, #v\
    \ do\n            if tonumber(v:sub(j, j)) % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n        table.insert(res, string.format(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n\
    \    end\n    return res\nend", "    local result = {}\n    for i, v in ipairs(lst)\
    \ do\n        local count = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j,\
    \ j)) % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        result[i] = string.format(\"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\", count, i, i, i)\n    end\n    return result\nend",
  "    local res = {}\n    for i, v in ipairs(lst) do\n        local cnt = 0\n   \
    \     for j = 1, #v do\n            if tonumber(v:sub(j, j)) % 2 == 1 then\n \
    \               cnt = cnt + 1\n            end\n        end\n        res[i] =\
    \ 'the number of odd elements ' .. cnt .. 'n the str' .. cnt .. 'ng ' .. cnt ..\
    \ ' of the ' .. cnt .. 'nput.'\n    end\n    return res\nend", "    local ret\
    \ = {}\n    for i, v in ipairs(lst) do\n        local count = 0\n        for c\
    \ in v:gmatch('.') do\n            if tonumber(c) % 2 == 1 then\n            \
    \    count = count + 1\n            end\n        end\n        ret[i] = ('the number\
    \ of odd elements %dn the str%dng %d of the %dnput.'):format(count, count, count,\
    \ count)\n    end\n    return ret\nend", "    local res = {}\n    for i, v in\
    \ ipairs(lst) do\n        local count = 0\n        for j = 1, #v do\n        \
    \    if tonumber(v:sub(j, j)) % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        res[i] = string.gsub(\n            'the\
    \ number of odd elements ' .. count .. 'n the str' .. count .. 'ng ' .. count\
    \ .. ' of the ' .. count .. 'nput.',\n            count,\n            i\n    \
    \    )\n    end\n    return res\nend", "    local res = {}\n    for i, v in ipairs(lst)\
    \ do\n        local cnt = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j,\
    \ j)) % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        table.insert(res, string.format(\"the number of odd elements %dn the\
    \ str%dng %d of the %dnput.\", cnt, i, i, i))\n    end\n    return res\nend",
  "  local out = {}\n  for i,v in ipairs(lst) do\n    local count = 0\n    for j =\
    \ 1, #v do\n      if tonumber(v:sub(j,j)) % 2 == 1 then\n        count = count\
    \ + 1\n      end\n    end\n    out[i] = 'the number of odd elements ' .. count\
    \ .. 'n the str' .. count .. 'ng ' .. count .. ' of the ' .. count .. 'nput.'\n\
    \  end\n  return out\nend", "    local res = {}\n    for i, v in ipairs(lst) do\n\
    \        local cnt = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j,\
    \ j)) % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        res[i] = string.gsub(\n            'the number of odd elements ' .. cnt\
    \ .. 'n the str' .. cnt .. 'ng ' .. cnt .. ' of the ' .. cnt .. 'nput.',\n   \
    \         cnt,\n            i\n        )\n    end\n    return res\nend", "   \
    \ local function replace(s)\n        local count = 0\n        for c in s:gmatch('.')\
    \ do\n            if tonumber(c) % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n        return s:gsub('%d', count)\n    end\n\
    \    return map(replace, lst)\nend", "    local res = {}\n    for i, v in ipairs(lst)\
    \ do\n        local count = 0\n        for j = 1, #v do\n            if tonumber(v:sub(j,\
    \ j)) % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        res[i] = 'the number of odd elements ' .. count .. 'n the str'\
    \ .. count .. 'ng ' .. count .. ' of the ' .. count .. 'nput.'\n    end\n    return\
    \ res\nend", "  local res = {}\n  for i, v in ipairs(lst) do\n    local count\
    \ = 0\n    for j = 1, #v do\n      if tonumber(v:sub(j, j)) % 2 == 1 then\n  \
    \      count = count + 1\n      end\n    end\n    table.insert(res, string.format(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n\
    \  end\n  return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
