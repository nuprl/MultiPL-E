name: HumanEval_117_select_words
language: lua
results:
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = \"\"\n    local consonants\
    \ = 0\n    for c in s:gmatch(\".\") do\n        if c == \" \" then\n         \
    \   if consonants == n then\n                table.insert(words, word)\n     \
    \       end\n            word = \"\"\n            consonants = 0\n        else\n\
    \            word = word .. c\n            if not c:match(\"[aeiou]\") then\n\
    \                consonants = consonants + 1\n            end\n        end\n \
    \   end\n    if consonants == n then\n        table.insert(words, word)\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse938wdw.lua:48:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpse938wdw.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for word in s:gmatch(\"%w+\") do\n\
    \        local count = 0\n        for c in word:gmatch(\"[^aeiou]\") do\n    \
    \        count = count + 1\n        end\n        if count == n then\n        \
    \    table.insert(t, word)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj__lpzdh.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpj__lpzdh.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%S+') do\n\
    \        local consonants = 0\n        for letter in word:gmatch('%a') do\n  \
    \          if not is_vowel(letter) then\n                consonants = consonants\
    \ + 1\n            end\n        end\n        if consonants == n then\n       \
    \     table.insert(words, word)\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjpcg1_gq.lua:22:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpjpcg1_gq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpjpcg1_gq.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8944vrsv.lua:20:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmp8944vrsv.lua:20: in local 'candidate'\n\t/tmp/tmp8944vrsv.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = {}\n    local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'}\n    local count = 0\n    for i = 1, #s do\n      \
    \  if s:sub(i, i) == ' ' then\n            if count == n then\n              \
    \  words[#words + 1] = table.concat(word)\n            end\n            word =\
    \ {}\n            count = 0\n        else\n            word[#word + 1] = s:sub(i,\
    \ i)\n            for j = 1, #consonants do\n                if s:sub(i, i) ==\
    \ consonants[j] then\n                    count = count + 1\n                end\n\
    \            end\n        end\n    end\n    if count == n then\n        words[#words\
    \ + 1] = table.concat(word)\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47k1dh8q.lua:48:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp47k1dh8q.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in s:gmatch('%w+') do\n    \
    \    if count_consonants(w) == n then\n            t[#t + 1] = w\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3croh8fc.lua:20:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmp3croh8fc.lua:20: in local 'candidate'\n\t/tmp/tmp3croh8fc.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\
    \t\tlocal count = 0\n\t\tfor char in word:gmatch(\"[^aeiouAEIOU]\") do\n\t\t\t\
    count = count + 1\n\t\tend\n\t\tif count == n then\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qhaeaxr.lua:20:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmp_qhaeaxr.lua:20: in local 'candidate'\n\t/tmp/tmp_qhaeaxr.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn74wjewx.lua:20:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmpn74wjewx.lua:20: in local 'candidate'\n\t/tmp/tmpn74wjewx.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = \"\"\n    local consonants\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == \"\
    \ \" then\n            if consonants == n then\n                table.insert(words,\
    \ word)\n            end\n            word = \"\"\n            consonants = 0\n\
    \        else\n            word = word .. c\n            if not c:match(\"[aeiou]\"\
    ) then\n                consonants = consonants + 1\n            end\n       \
    \ end\n    end\n    if consonants == n then\n        table.insert(words, word)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3y1p51x.lua:49:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpk3y1p51x.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for w in s:gmatch('%w+') do\n\
    \        if #w == n then\n            table.insert(words, w)\n        end\n  \
    \  end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt68ev0g.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpkt68ev0g.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = ''\n    local consonants\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == '\
    \ ' then\n            if consonants == n then\n                table.insert(words,\
    \ word)\n            end\n            word = ''\n            consonants = 0\n\
    \        else\n            word = word .. c\n            if not c:match('[aeiou]')\
    \ then\n                consonants = consonants + 1\n            end\n       \
    \ end\n    end\n    if consonants == n then\n        table.insert(words, word)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdoomy8us.lua:49:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdoomy8us.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local word = ''\n  local consonants\
    \ = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == ' ' then\n \
    \     if consonants == n then\n        table.insert(words, word)\n      end\n\
    \      word = ''\n      consonants = 0\n    else\n      word = word .. c\n   \
    \   if not c:match('[aeiouAEIOU]') then\n        consonants = consonants + 1\n\
    \      end\n    end\n  end\n  if consonants == n then\n    table.insert(words,\
    \ word)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if word:gsub('[aeiou]', ''):len() == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v4meeyx.lua:34:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp0v4meeyx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpix_qsazp.lua:20:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmpix_qsazp.lua:20: in local 'candidate'\n\t/tmp/tmpix_qsazp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        local consonants = 0\n        for letter in word:gmatch('[^aeiouAEIOU]')\
    \ do\n            consonants = consonants + 1\n        end\n        if consonants\
    \ == n then\n            table.insert(words, word)\n        end\n    end\n   \
    \ return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        local consonants = 0\n        for char in word:gmatch('[^aeiou]') do\n\
    \            consonants = consonants + 1\n        end\n        if consonants ==\
    \ n then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7p4y_qea.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7p4y_qea.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if count_consonants(word) == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zyknm4j.lua:20:\
    \ attempt to call a nil value (global 'count_consonants')\nstack traceback:\n\t\
    /tmp/tmp7zyknm4j.lua:20: in local 'candidate'\n\t/tmp/tmp7zyknm4j.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = ''\n    local consonants\
    \ = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c == '\
    \ ' then\n            if consonants == n then\n                table.insert(words,\
    \ word)\n            end\n            word = ''\n            consonants = 0\n\
    \        else\n            word = word .. c\n            if not is_vowel(c) then\n\
    \                consonants = consonants + 1\n            end\n        end\n \
    \   end\n    if consonants == n then\n        table.insert(words, word)\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeo458_xx.lua:31:\
    \ attempt to call a nil value (global 'is_vowel')\nstack traceback:\n\t/tmp/tmpeo458_xx.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpeo458_xx.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for word in s:gmatch('%w+') do\n \
    \   local count = 0\n    for letter in word:gmatch('[^aeiou]') do\n      count\
    \ = count + 1\n    end\n    if count == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60sjlgz0.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp60sjlgz0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
