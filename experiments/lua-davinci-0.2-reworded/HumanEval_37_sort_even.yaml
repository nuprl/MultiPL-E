---
name: HumanEval_37_sort_even
language: lua
prompt: |
  -- This function takes a table l and returns a table l' such that
  -- l' is identical to l in the odd indicies, while its values at the even indicies are equal
  -- to the values of the even indicies of l, but sorted.
  -- >>> sort_even({1, 2, 3})
  -- {1, 2, 3}
  -- >>> sort_even({5, 6, 3, 4})
  -- {3, 6, 5, 4}
  local function sort_even(l)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = sort_even
      lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})
      lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})
      lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              l_prime[i] = v
          else
              l_prime[i] = l[i]
          end
      end
      for i = 2, #l_prime, 2 do
          table.sort(l_prime, function(a, b) return a < b end)
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_new = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local even = {}
      local odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(even, v)
          else
              table.insert(odd, v)
          end
      end
      table.sort(even)
      local l_prime = {}
      for i, v in ipairs(odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, even[i])
      end
      return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tlocal i = 1\n\tfor
  k, v in ipairs(l) do\n\t\tif k % 2 == 0 then\n\t\t\tl_even[i] = v\n\t\t\ti = i +
  1\n\t\telse\n\t\t\tl_odd[i] = v\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor k,
  v in ipairs(l_odd) do\n\t\tl_sorted[k] = v\n\t\tl_sorted[k + 1] = l_even[k]\n\tend\n\treturn
  l_sorted\nend"
- |2-
      local l2 = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l2[i] = l[i]
          else
              local l3 = {}
              for j = i, #l do
                  if j % 2 == 0 then
                      table.insert(l3, l[j])
                  end
              end
              table.sort(l3)
              for j = i, #l do
                  if j % 2 == 0 then
                      l2[j] = l3[j - i + 1]
                  end
              end
          end
      end
      return l2
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal even = {}\n\tlocal odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 ==
  0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\ttable.sort(even)\n\tlocal
  l2 = {}\n\tfor i, v in ipairs(odd) do\n\t\ttable.insert(l2, v)\n\t\ttable.insert(l2,
  even[i])\n\tend\n\treturn l2\nend"
- "\tlocal l2 = {}\n\tlocal i = 1\n\twhile i <= #l do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l2,
  l[i])\n\t\telse\n\t\t\ttable.insert(l2, l[i])\n\t\tend\n\t\ti = i + 1\n\tend\n\ttable.sort(l2,
  function(a, b) return a < b end)\n\treturn l2\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              l_prime[i] = v
          else
              l_prime[i] = l[i]
          end
      end
      for i = 2, #l, 2 do
          local temp = l_prime[i]
          local j = i - 1
          while j > 0 and l_prime[j] > temp do
              l_prime[j + 1] = l_prime[j]
              j = j - 1
          end
          l_prime[j + 1] = temp
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted, v)
          end
      end
      table.sort(l_sorted)
      local l_new = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_new, l_sorted[1])
              table.remove(l_sorted, 1)
          else
              table.insert(l_new, v)
          end
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_sorted, v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn
  l_sorted\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 2 == 0 then
              local sub_table = {}
              for j = 1, #l do
                  if j % 2 == 0 then
                      table.insert(sub_table, l[j])
                  end
              end
              table.sort(sub_table)
              for j = 1, #sub_table do
                  table.insert(l_prime, sub_table[j])
              end
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
    local l_sorted = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_sorted, v)
      end
    end
    table.sort(l_sorted)
    local l_sorted_even = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_sorted_even, l_sorted[i/2])
      else
        table.insert(l_sorted_even, v)
      end
    end
    return l_sorted_even
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              local even_sublist = {}
              for j = i, #l, 2 do
                  table.insert(even_sublist, l[j])
              end
              table.sort(even_sublist)
              for j, v in ipairs(even_sublist) do
                  table.insert(l_prime, v)
              end
              break
          else
              table.insert(l_prime, v)
          end
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_prime, i, table.concat(sort_table(v), " "))
      else
        table.insert(l_prime, i, v)
      end
    end
    return l_prime
  end
- |2-
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted, v)
          end
      end
      table.sort(l_sorted)
      local l_sorted_even = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted_even, l_sorted[1])
              table.remove(l_sorted, 1)
          else
              table.insert(l_sorted_even, v)
          end
      end
      return l_sorted_even
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local even_indicies = {}
    local odd_indicies = {}
    local even_indicies_sorted = {}
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(even_indicies, v)
      else
        table.insert(odd_indicies, v)
      end
    end
    table.sort(even_indicies)
    for i, v in ipairs(even_indicies) do
      table.insert(even_indicies_sorted, v)
    end
    for i, v in ipairs(odd_indicies) do
      table.insert(l_prime, v)
      table.insert(l_prime, even_indicies_sorted[i])
    end
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal new_l = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 1 then\n\t\t\tnew_l[i]
  = l[i]\n\t\telse\n\t\t\tlocal temp = {}\n\t\t\tfor j = i, #l do\n\t\t\t\tif j %
  2 == 0 then\n\t\t\t\t\ttable.insert(temp, l[j])\n\t\t\t\tend\n\t\t\tend\n\t\t\ttable.sort(temp)\n\t\t\tfor
  j = i, #l do\n\t\t\t\tif j % 2 == 0 then\n\t\t\t\t\tnew_l[j] = table.remove(temp,
  1)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn new_l\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,
  v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend"
- |2-
      local l_ = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l_[i] = l[i]
          else
              local l_even = {}
              for j = i, #l, 2 do
                  table.insert(l_even, l[j])
              end
              table.sort(l_even)
              for j = i, #l, 2 do
                  l_[j] = l_even[(j - i) / 2 + 1]
              end
          end
      end
      return l_
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal even = {}\n\tlocal odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 ==
  0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\ttable.sort(even)\n\tlocal
  l_prime = {}\n\tfor i, v in ipairs(odd) do\n\t\ttable.insert(l_prime, v)\n\t\ttable.insert(l_prime,
  even[i])\n\tend\n\treturn l_prime\nend"
- |2-
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted, v)
          end
      end
      table.sort(l_sorted)
      local l_new = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_new, l_sorted[1])
              table.remove(l_sorted, 1)
          else
              table.insert(l_new, v)
          end
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local r = {}
      for i = 1, #l do
          if i % 2 == 1 then
              r[i] = l[i]
          else
              local t = {}
              for j = i, #l, 2 do
                  table.insert(t, l[j])
              end
              table.sort(t)
              for j = i, #l, 2 do
                  r[j] = t[(j - i) / 2 + 1]
              end
          end
      end
      return r
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_sorted = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_sorted, v)
      table.insert(l_sorted, l_even[i])
    end
    return l_sorted
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local even_indicies = {}
      local odd_indicies = {}
      local result = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(even_indicies, v)
          else
              table.insert(odd_indicies, v)
          end
      end
      table.sort(even_indicies)
      for i, v in ipairs(odd_indicies) do
          table.insert(result, v)
          table.insert(result, even_indicies[i])
      end
      return result
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_prime, v)
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i = 1, #l_odd
  do\n\t\ttable.insert(l_new, l_odd[i])\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local even = {}
      local odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(even, v)
          else
              table.insert(odd, v)
          end
      end
      table.sort(even)
      local l_prime = {}
      for i, v in ipairs(odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, even[i])
      end
      return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,
  v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend"
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local even_indicies = {}
      local odd_indicies = {}
      local even_indicies_sorted = {}
      local l_sorted = {}
      local i = 1
      for k, v in pairs(l) do
          if k % 2 == 0 then
              table.insert(even_indicies, v)
          else
              table.insert(odd_indicies, v)
          end
      end
      table.sort(even_indicies)
      for k, v in pairs(even_indicies) do
          table.insert(even_indicies_sorted, k, v)
      end
      for k, v in pairs(odd_indicies) do
          table.insert(l_sorted, k, v)
          table.insert(l_sorted, k + 1, even_indicies_sorted[k])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 0
  then\n\t\t\ttable.insert(l_even, l[i])\n\t\telse\n\t\t\ttable.insert(l_odd, l[i])\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal
  l_new = {}\n\tfor i = 1, #l_odd do\n\t\ttable.insert(l_new, l_odd[i])\n\t\ttable.insert(l_new,
  l_even[i])\n\tend\n\treturn l_new\nend"
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- |2-
    local even = {}
    local odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(even, v)
      else
        table.insert(odd, v)
      end
    end
    table.sort(even)
    local result = {}
    for i, v in ipairs(odd) do
      table.insert(result, v)
      table.insert(result, even[i])
    end
    return result
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l_prime[i] = l[i]
          else
              local l_even = {}
              for j = 1, #l do
                  if j % 2 == 0 then
                      table.insert(l_even, l[j])
                  end
              end
              table.sort(l_even)
              l_prime[i] = l_even[1]
          end
      end
      return l_prime
  end
- "\tlocal evens = {}\n\tlocal odds = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2
  == 0 then\n\t\t\ttable.insert(evens, v)\n\t\telse\n\t\t\ttable.insert(odds, v)\n\t\tend\n\tend\n\ttable.sort(evens)\n\tlocal
  l_prime = {}\n\tfor i, v in ipairs(odds) do\n\t\ttable.insert(l_prime, v)\n\t\ttable.insert(l_prime,
  evens[i])\n\tend\n\treturn l_prime\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- "\tlocal evens = {}\n\tlocal odds = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2
  == 0 then\n\t\t\ttable.insert(evens, v)\n\t\telse\n\t\t\ttable.insert(odds, v)\n\t\tend\n\tend\n\ttable.sort(evens)\n\tlocal
  l_prime = {}\n\tfor i, v in ipairs(odds) do\n\t\ttable.insert(l_prime, v)\n\t\ttable.insert(l_prime,
  evens[i])\n\tend\n\treturn l_prime\nend"
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- "\tlocal l_ = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 1 then\n\t\t\tl_[i] = l[i]\n\t\telse\n\t\t\tl_[i]
  = table.sort(l[i])\n\t\tend\n\tend\n\treturn l_\nend"
- |2-
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted, v)
          end
      end
      table.sort(l_sorted)
      local l_new = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_new, l_sorted[i/2])
          else
              table.insert(l_new, v)
          end
      end
      return l_new
  end
- |2-
      local l_ = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l_[i] = l[i]
          else
              local l_even = {}
              for j = 1, #l do
                  if j % 2 == 0 then
                      table.insert(l_even, l[j])
                  end
              end
              table.sort(l_even)
              for j = 1, #l_even do
                  table.insert(l_, l_even[j])
              end
              break
          end
      end
      return l_
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted, v)
          end
      end
      table.sort(l_sorted)
      local i = 1
      for _, v in ipairs(l) do
          if i % 2 == 0 then
              l[i] = l_sorted[i / 2]
          end
          i = i + 1
      end
      return l
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 2 == 0 then
        table.insert(l_prime, l[i])
      else
        table.insert(l_prime, l[i])
      end
    end
    table.sort(l_prime, function(a, b) return a < b end)
    return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for k, v in ipairs(l) do
          if k % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for k, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[k])
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_ = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 1 then\n\t\t\tl_[i] = l[i]\n\t\telse\n\t\t\tlocal
  l_even = {}\n\t\t\tfor j = i, #l, 2 do\n\t\t\t\ttable.insert(l_even, l[j])\n\t\t\tend\n\t\t\ttable.sort(l_even)\n\t\t\tfor
  j = i, #l, 2 do\n\t\t\t\tl_[j] = l_even[j / 2]\n\t\t\tend\n\t\t\tbreak\n\t\tend\n\tend\n\treturn
  l_\nend"
- |2-
      local l_ = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l_[i] = l[i]
          else
              l_[i] = sort_even_helper(l[i])
          end
      end
      return l_
  end
- "\tlocal even = {}\n\tlocal odd = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(even,
  l[i])\n\t\telse\n\t\t\ttable.insert(odd, l[i])\n\t\tend\n\tend\n\ttable.sort(even)\n\tlocal
  l_prime = {}\n\tfor i = 1, #odd do\n\t\ttable.insert(l_prime, odd[i])\n\t\ttable.insert(l_prime,
  even[i])\n\tend\n\treturn l_prime\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        l_prime[i] = v
      else
        l_prime[i] = l[i]
      end
    end
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.sort(l_prime, function(a, b) return a < b end)
      end
    end
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_ = {}\n\tfor i = 1, #l do\n\t\tif i % 2 == 1 then\n\t\t\tl_[i] = l[i]\n\t\telse\n\t\t\tlocal
  l_even = {}\n\t\t\tfor j = 1, #l do\n\t\t\t\tif j % 2 == 0 then\n\t\t\t\t\ttable.insert(l_even,
  l[j])\n\t\t\t\tend\n\t\t\tend\n\t\t\ttable.sort(l_even)\n\t\t\tl_[i] = l_even[i
  / 2]\n\t\tend\n\tend\n\treturn l_\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,
  v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend"
- |2-
      local l_odd = {}
      local l_even = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l_prime[i] = l[i]
          else
              local temp = {}
              for j = 1, #l do
                  if j % 2 == 0 then
                      table.insert(temp, l[j])
                  end
              end
              table.sort(temp)
              l_prime[i] = temp[1]
          end
      end
      return l_prime
  end
- "\tlocal l2 = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l2,
  v)\n\t\tend\n\tend\n\ttable.sort(l2)\n\tlocal i = 1\n\tfor j, v in ipairs(l) do\n\t\tif
  j % 2 == 0 then\n\t\t\tl[j] = l2[i]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn l\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(sorted, v)
          end
      end
      table.sort(sorted)
      local i = 1
      for _, v in ipairs(l) do
          if i % 2 == 0 then
              l[i] = sorted[i / 2]
          end
          i = i + 1
      end
      return l
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_odd = {}
      local l_even = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i = 1, #l do
          if i % 2 == 0 then
              table.insert(l_even, l[i])
          else
              table.insert(l_odd, l[i])
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i = 1, #l_odd do
          table.insert(l_new, l_odd[i])
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_sorted = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_sorted,
  v)\n\t\tend\n\tend\n\ttable.sort(l_sorted)\n\tlocal l_new = {}\n\tlocal j = 1\n\tfor
  i, v in ipairs(l) do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_new, l_sorted[j])\n\t\t\tj
  = j + 1\n\t\telse\n\t\t\ttable.insert(l_new, v)\n\t\tend\n\tend\n\treturn l_new\nend"
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        local evens = {}
        for j, v in ipairs(l) do
          if j % 2 == 0 then
            table.insert(evens, v)
          end
        end
        table.sort(evens)
        for j, v in ipairs(evens) do
          table.insert(l_prime, v)
        end
        break
      else
        table.insert(l_prime, v)
      end
    end
    return l_prime
  end
- |2-
    local l2 = {}
    for i = 1, #l do
      if i % 2 == 0 then
        table.insert(l2, l[i])
      end
    end
    table.sort(l2)
    local l3 = {}
    for i = 1, #l do
      if i % 2 == 0 then
        table.insert(l3, l2[i/2])
      else
        table.insert(l3, l[i])
      end
    end
    return l3
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local ret = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(ret, v)
          else
              table.insert(ret, l[i])
          end
      end
      table.sort(ret, function(a, b) return a < b end)
      return ret
  end
- |2-
      local even_indicies = {}
      local odd_indicies = {}
      local even_indicies_sorted = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(even_indicies, v)
          else
              table.insert(odd_indicies, v)
          end
      end
      table.sort(even_indicies)
      for i, v in ipairs(even_indicies) do
          table.insert(even_indicies_sorted, v)
      end
      for i, v in ipairs(odd_indicies) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, even_indicies_sorted[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local evens = {}
      local odds = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      table.sort(evens)
      local l_prime = {}
      for i, v in ipairs(odds) do
          table.insert(l_prime, v)
          table.insert(l_prime, evens[i])
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_prime, v)
          else
              table.insert(l_prime, l[i])
          end
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i = 1, #l do
          if i % 2 == 0 then
              table.insert(l_even, l[i])
          else
              table.insert(l_odd, l[i])
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i = 1, #l_odd do
          table.insert(l_prime, l_odd[i])
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        local even_subtable = {}
        for j, v in ipairs(l) do
          if j % 2 == 0 then
            table.insert(even_subtable, v)
          end
        end
        table.sort(even_subtable)
        for j, v in ipairs(even_subtable) do
          l_prime[j * 2] = v
        end
      else
        l_prime[i] = v
      end
    end
    return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local new_list = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(new_list, v)
          end
      end
      table.sort(new_list)
      local i = 1
      for j, v in ipairs(l) do
          if j % 2 == 0 then
              l[j] = new_list[i]
              i = i + 1
          end
      end
      return l
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l2 = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        l2[i] = v
      else
        l2[i] = v
      end
    end
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.sort(l2, function(a, b) return a < b end)
      end
    end
    return l2
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local even = {}
      local odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(even, v)
          else
              table.insert(odd, v)
          end
      end
      table.sort(even)
      local l_prime = {}
      for i, v in ipairs(odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, even[i])
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_sorted = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_sorted, v)
      table.insert(l_sorted, l_even[i])
    end
    return l_sorted
  end
- |2-
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_sorted, v)
          end
      end
      table.sort(l_sorted)
      local l_new = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_new, l_sorted[1])
              table.remove(l_sorted, 1)
          else
              table.insert(l_new, v)
          end
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,
  v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
    local l_prime = {}
    for i = 1, #l do
      if i % 2 == 0 then
        table.insert(l_prime, l[i])
      else
        table.insert(l_prime, l[i])
      end
    end
    table.sort(l_prime, function(a, b) return a < b end)
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i = 1, #l_odd do
          table.insert(l_new, l_odd[i])
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,
  v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend"
- |2-
      local l_prime = {}
      for i = 1, #l do
          if i % 2 == 1 then
              l_prime[i] = l[i]
          else
              local l_even = {}
              for j = i, #l do
                  if j % 2 == 0 then
                      table.insert(l_even, l[j])
                  end
              end
              table.sort(l_even)
              for j = i, #l do
                  if j % 2 == 0 then
                      l_prime[j] = l_even[j - i + 1]
                  end
              end
          end
      end
      return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_sorted, v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn
  l_sorted\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local even_indices = {}
      local odd_indices = {}
      local l_prime = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(even_indices, v)
          else
              table.insert(odd_indices, v)
          end
      end
      table.sort(even_indices)
      for i, v in ipairs(odd_indices) do
          table.insert(l_prime, v)
          table.insert(l_prime, even_indices[i])
      end
      return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_prime, v)
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_sorted, v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn
  l_sorted\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tlocal l_sorted = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tfor i, v in ipairs(l_odd) do\n\t\ttable.insert(l_sorted,
  v)\n\t\ttable.insert(l_sorted, l_even[i])\n\tend\n\treturn l_sorted\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_odd = {}
      local l_even = {}
      for i = 1, #l do
          if i % 2 == 0 then
              table.insert(l_even, l[i])
          else
              table.insert(l_odd, l[i])
          end
      end
      table.sort(l_even)
      local l_prime = {}
      for i = 1, #l_odd do
          table.insert(l_prime, l_odd[i])
          table.insert(l_prime, l_even[i])
      end
      return l_prime
  end
- "\tlocal even = {}\n\tlocal odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i % 2 ==
  0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\ttable.sort(even)\n\tlocal
  l_prime = {}\n\tfor i, v in ipairs(odd) do\n\t\ttable.insert(l_prime, v)\n\t\ttable.insert(l_prime,
  even[i])\n\tend\n\treturn l_prime\nend"
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_new = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_new, v)
          table.insert(l_new, l_even[i])
      end
      return l_new
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
    local l_prime = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_prime, v)
      else
        table.insert(l_prime, l[i])
      end
    end
    return l_prime
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      local l_sorted = {}
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
      local l_even = {}
      local l_odd = {}
      local l_sorted = {}
      for i, v in ipairs(l) do
          if i % 2 == 0 then
              table.insert(l_even, v)
          else
              table.insert(l_odd, v)
          end
      end
      table.sort(l_even)
      for i, v in ipairs(l_odd) do
          table.insert(l_sorted, v)
          table.insert(l_sorted, l_even[i])
      end
      return l_sorted
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_prime = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_prime, v)
      table.insert(l_prime, l_even[i])
    end
    return l_prime
  end
- |2-
    local l_even = {}
    local l_odd = {}
    for i, v in ipairs(l) do
      if i % 2 == 0 then
        table.insert(l_even, v)
      else
        table.insert(l_odd, v)
      end
    end
    table.sort(l_even)
    local l_new = {}
    for i, v in ipairs(l_odd) do
      table.insert(l_new, v)
      table.insert(l_new, l_even[i])
    end
    return l_new
  end
- "\tlocal evens = {}\n\tlocal odds = {}\n\tlocal l_prime = {}\n\tfor i, v in ipairs(l)
  do\n\t\tif i % 2 == 0 then\n\t\t\ttable.insert(evens, v)\n\t\telse\n\t\t\ttable.insert(odds,
  v)\n\t\tend\n\tend\n\ttable.sort(evens)\n\tfor i, v in ipairs(odds) do\n\t\ttable.insert(l_prime,
  v)\n\t\ttable.insert(l_prime, evens[i])\n\tend\n\treturn l_prime\nend"
- "\tlocal l_even = {}\n\tlocal l_odd = {}\n\tfor i, v in ipairs(l) do\n\t\tif i %
  2 == 0 then\n\t\t\ttable.insert(l_even, v)\n\t\telse\n\t\t\ttable.insert(l_odd,
  v)\n\t\tend\n\tend\n\ttable.sort(l_even)\n\tlocal l_new = {}\n\tfor i, v in ipairs(l_odd)
  do\n\t\ttable.insert(l_new, v)\n\t\ttable.insert(l_new, l_even[i])\n\tend\n\treturn
  l_new\nend"
- |2-
    local l2 = {}
    for i = 1, #l do
      if i % 2 == 0 then
        table.insert(l2, l[i])
      end
    end
    table.sort(l2)
    local l3 = {}
    for i = 1, #l do
      if i % 2 == 0 then
        table.insert(l3, l2[1])
        table.remove(l2, 1)
      else
        table.insert(l3, l[i])
      end
    end
    return l3
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
