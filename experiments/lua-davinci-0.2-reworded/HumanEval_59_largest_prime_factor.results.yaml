name: HumanEval_59_largest_prime_factor
language: lua
results:
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_prime = 2\n  while\
    \ n > largest_prime do\n    if n % largest_prime == 0 then\n      n = n / largest_prime\n\
    \    else\n      largest_prime = next_prime(largest_prime)\n    end\n  end\n \
    \ return largest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpauvibk5g.lua:12:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpauvibk5g.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpauvibk5g.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_factor = 1\n \
    \   local i = 2\n    while i <= n do\n        if n % i == 0 then\n           \
    \ largest_factor = i\n            n = n / i\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return largest_factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n           \
    \ n = n / i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav21u6i0.lua:21:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpav21u6i0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n % p ~=\
    \ 0 do\n    p = p + 1\n  end\n  if n == p then\n    return n\n  else\n    return\
    \ largest_prime_factor(n / p)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = {}\n  local i\
    \ = 2\n  while n > 1 do\n    if n % i == 0 then\n      table.insert(factors, i)\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return factors[#factors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n % p\
    \ == 0 do\n        n = n / p\n    end\n    p = 3\n    while n > 1 do\n       \
    \ while n % p == 0 do\n            n = n / p\n        end\n        p = p + 2\n\
    \    end\n    return p - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n > 1\
    \ do\n        if n % p == 0 then\n            n = n / p\n        else\n      \
    \      p = p + 1\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_factor = 1\n \
    \   local i = 2\n    while i <= n do\n        if n % i == 0 then\n           \
    \ largest_factor = i\n            n = n / i\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return largest_factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_factor = 1\n  local\
    \ factor = 2\n  while n > 1 do\n    if n % factor == 0 then\n      largest_factor\
    \ = factor\n      n = n / factor\n    else\n      factor = factor + 1\n    end\n\
    \  end\n  return largest_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n > 1 do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 2\n  \
    \  while n % largest_prime == 0 do\n        n = n / largest_prime\n    end\n \
    \   local i = 3\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            n = n / i\n            largest_prime = i\n        else\n        \
    \    i = i + 2\n        end\n    end\n    if n > largest_prime then\n        largest_prime\
    \ = n\n    end\n    return largest_prime\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_factor = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_factor = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_factor = 1\n \
    \   local factor = 2\n    while n > 1 do\n        if n % factor == 0 then\n  \
    \          largest_factor = factor\n            n = n / factor\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    return largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 2\n  \
    \  while n > largest_prime do\n        if n % largest_prime == 0 then\n      \
    \      n = n / largest_prime\n        else\n            largest_prime = largest_prime\
    \ + 1\n        end\n    end\n    return largest_prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  local max = 1\n\
    \  while i <= n do\n    if n % i == 0 then\n      max = i\n      n = n / i\n \
    \   else\n      i = i + 1\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local max = 1\n  local i = 2\n\
    \  while i <= n do\n    if n % i == 0 then\n      max = i\n      n = n / i\n \
    \   else\n      i = i + 1\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n > 1 do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\tlocal max = 1\n\
    \twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\tmax = i\n\t\t\
    else\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n           \
    \ n = n / i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbabrr9e2.lua:21:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpbabrr9e2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    local\
    \ i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local f = 2\n    while f * f\
    \ <= n do\n        if n % f == 0 then\n            n = n / f\n        else\n \
    \           f = f + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i <= n do\n\
    \t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\t\
    end\n\treturn i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n % p ~=\
    \ 0 do\n    p = next_prime(p)\n  end\n  if n == p then\n    return n\n  else\n\
    \    return largest_prime_factor(n / p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsiyqa96d.lua:9:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpsiyqa96d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsiyqa96d.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n % p ~=\
    \ 0 do\n    p = p + 1\n  end\n  if n == p then\n    return n\n  else\n    return\
    \ largest_prime_factor(n / p)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n >\
    \ 1 do\n    if n % factor == 0 then\n      n = n / factor\n    else\n      factor\
    \ = factor + 1\n    end\n  end\n  return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 1\n  local i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      largest = i\n      n = n\
    \ / i\n    else\n      i = i + 1\n    end\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    local\
    \ i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i <= n do\n\
    \t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\t\
    end\n\treturn i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    local\
    \ i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = prime_factors(n)\n\
    \    return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyoh5_w_z.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpyoh5_w_z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyoh5_w_z.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfpgtxdle.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpfpgtxdle.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfpgtxdle.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_prime = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_prime = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_factor = 1\n \
    \   local factor = 2\n    while n > 1 do\n        if n % factor == 0 then\n  \
    \          largest_factor = factor\n            n = n / factor\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    return largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_factor = 1\n  local\
    \ factor = 2\n  while n > 1 do\n    if n % factor == 0 then\n      largest_factor\
    \ = factor\n      n = n / factor\n    else\n      factor = factor + 1\n    end\n\
    \  end\n  return largest_factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n % p\
    \ == 0 do\n        n = n / p\n    end\n    p = 3\n    while n > 1 do\n       \
    \ while n % p == 0 do\n            n = n / p\n        end\n        p = p + 2\n\
    \    end\n    return p - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_prime = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_prime = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6qivi9qh.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp6qivi9qh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6qivi9qh.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_prime = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_prime = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local prime_factors = {}\n  local\
    \ i = 2\n  while n > 1 do\n    if n % i == 0 then\n      n = n / i\n      table.insert(prime_factors,\
    \ i)\n    else\n      i = i + 1\n    end\n  end\n  return prime_factors[#prime_factors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n >\
    \ 1 do\n    if n % factor == 0 then\n      n = n / factor\n    else\n      factor\
    \ = factor + 1\n    end\n  end\n  return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while n % i\
    \ ~= 0 do\n        i = i + 1\n    end\n    if n == i then\n        return n\n\
    \    else\n        return largest_prime_factor(n / i)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_factor = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_factor = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n           \
    \ n = n / i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42l1tsv8.lua:21:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp42l1tsv8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n % p\
    \ == 0 do\n        n = n / p\n    end\n    p = 3\n    while n > 1 do\n       \
    \ while n % p == 0 do\n            n = n / p\n        end\n        p = p + 2\n\
    \    end\n    return p - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            if\
    \ is_prime(i) then\n                largest = i\n            end\n           \
    \ if is_prime(n / i) then\n                largest = n / i\n            end\n\
    \        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbw9c7u0f.lua:10:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpbw9c7u0f.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbw9c7u0f.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal factor = 2\n\twhile n >\
    \ 1 do\n\t\tif n % factor == 0 then\n\t\t\tn = n / factor\n\t\telse\n\t\t\tfactor\
    \ = factor + 1\n\t\tend\n\tend\n\treturn factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, math.sqrt(n) do\n        if n % i == 0 then\n            if is_prime(i)\
    \ then\n                largest = i\n            end\n            if is_prime(n\
    \ / i) then\n                largest = n / i\n            end\n        end\n \
    \   end\n    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qipo97i.lua:10:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_qipo97i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_qipo97i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal prime_factors = {}\n\tlocal\
    \ i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(prime_factors,\
    \ i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn prime_factors[#prime_factors]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 1\n  local i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      largest = i\n      n = n\
    \ / i\n    else\n      i = i + 1\n    end\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factor = 2\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    local\
    \ i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 0\n  \
    \  local i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest_prime\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while p <= n do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n > 1 do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 1\n  local divisor\
    \ = 2\n  while n > 1 do\n    if n % divisor == 0 then\n      largest = divisor\n\
    \      n = n / divisor\n    else\n      divisor = divisor + 1\n    end\n  end\n\
    \  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n           \
    \ n = n / i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dlnn7yy.lua:21:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp5dlnn7yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n > 1 do\n\
    \    while n % p == 0 do\n      n = n / p\n    end\n    p = p + 1\n  end\n  return\
    \ p - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),\
    \ 3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),\
    \ 11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n > 1\
    \ do\n        if n % p == 0 then\n            n = n / p\n        else\n      \
    \      p = p + 1\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i * i <=\
    \ n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\
    \tend\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 1\n  \
    \  local i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest_prime\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 1\n  local i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      largest = i\n      n = n\
    \ / i\n    else\n      i = i + 1\n    end\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal largest = 1\n\tfor i = 2,\
    \ n do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\t\tn = n / i\n\t\t\ti =\
    \ i - 1\n\t\tend\n\tend\n\treturn largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwionyh3.lua:22:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpxwionyh3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\tlocal last_factor\
    \ = 1\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tlast_factor = i\n\t\t\t\
    n = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn last_factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i < n do\n\
    \t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\t\
    end\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while p <= n do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal largest_factor = 1\n\tlocal\
    \ i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tlargest_factor = i\n\
    \t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 1\n  \
    \  local i = 2\n    while i <= n do\n        if n % i == 0 then\n            largest_prime\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return largest_prime\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime_factor =\
    \ 1\n    local i = 2\n    while i <= n do\n        if n % i == 0 then\n      \
    \      largest_prime_factor = i\n            n = n / i\n        else\n       \
    \     i = i + 1\n        end\n    end\n    return largest_prime_factor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n \
    \   i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 2\n  while n >\
    \ largest do\n    if n % largest == 0 then\n      n = n / largest\n    else\n\
    \      largest = largest + 1\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while p*p <=\
    \ n do\n        if n % p == 0 then\n            n = n / p\n        else\n    \
    \        p = p + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n \
    \   i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factor = 2\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i < n\
    \ do\n        if n % i == 0 then\n            n = n / i\n        else\n      \
    \      i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile n > 1 do\n\
    \t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\t\
    end\n\treturn p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_prime = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_prime = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n %\
    \ factor ~= 0 do\n    factor = factor + 1\n  end\n  if n == factor then\n    return\
    \ n\n  else\n    return largest_prime_factor(n / factor)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n % p\
    \ == 0 do\n        n = n / p\n    end\n    p = 3\n    while n > 1 do\n       \
    \ while n % p == 0 do\n            n = n / p\n        end\n        p = p + 2\n\
    \    end\n    return p - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n > 1 do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 1\n  local i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      largest = i\n      n = n\
    \ / i\n    else\n      i = i + 1\n    end\n  end\n  return largest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest_prime = 1\n  \
    \  local factor = 2\n    while n > 1 do\n        if n % factor == 0 then\n   \
    \         largest_prime = factor\n            n = n / factor\n        else\n \
    \           factor = factor + 1\n        end\n    end\n    return largest_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while p * p <=\
    \ n do\n    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n >\
    \ 1 do\n    if n % factor == 0 then\n      n = n / factor\n    else\n      factor\
    \ = factor + 1\n    end\n  end\n  return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuv1x39vs.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpuv1x39vs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuv1x39vs.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest = 1\n  for i = 2,\
    \ n do\n    if n % i == 0 then\n      largest = i\n      n = n / i\n    end\n\
    \  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03jwhq3c.lua:21:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp03jwhq3c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local p = 2\n    while n > 1\
    \ do\n        if n % p == 0 then\n            n = n / p\n        else\n      \
    \      p = p + 1\n        end\n    end\n    return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n >\
    \ 1 do\n    if n % factor == 0 then\n      n = n / factor\n    else\n      factor\
    \ = factor + 1\n    end\n  end\n  return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i <=\
    \ n do\n        if n % i == 0 then\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n >\
    \ 1 do\n    if n % factor == 0 then\n      n = n / factor\n    else\n      factor\
    \ = factor + 1\n    end\n  end\n  return factor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = prime_factors(n)\n\
    \    local largest = 0\n    for _, v in ipairs(factors) do\n        if v > largest\
    \ then\n            largest = v\n        end\n    end\n    return largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf228888_.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpf228888_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf228888_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n > 1 do\n\
    \    if n % p == 0 then\n      n = n / p\n    else\n      p = p + 1\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile p <= n do\n\
    \t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\t\
    end\n\treturn p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n  \
    \  lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n \
    \   i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factor = 2\n  while n %\
    \ factor ~= 0 do\n    factor = factor + 1\n  end\n  if n == factor then\n    return\
    \ n\n  else\n    return largest_prime_factor(n / factor)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local factors = {}\n    local\
    \ i = 2\n    while n > 1 do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9psanj6l.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp9psanj6l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9psanj6l.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i * i\
    \ <= n do\n        if n % i == 0 then\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82wvixm3.lua:7:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp82wvixm3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp82wvixm3.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n           \
    \ n = n / i\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0uyn1zr.lua:21:\
    \ expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpo0uyn1zr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_factor = 1\n  local\
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      largest_factor = i\n\
    \      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return largest_factor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
    \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
    \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
    \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local largest = 1\n    for i\
    \ = 2, math.sqrt(n) do\n        if n % i == 0 then\n            largest = math.max(largest,\
    \ largest_prime_factor(i))\n            largest = math.max(largest, largest_prime_factor(n\
    \ / i))\n        end\n    end\n    return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w1cvpap.lua:20:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8w1cvpap.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n % p ~=\
    \ 0 do\n    p = next_prime(p)\n  end\n  local q = n / p\n  if is_prime(q) then\n\
    \    return q\n  else\n    return largest_prime_factor(q)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgatgxo8.lua:9:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmprgatgxo8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprgatgxo8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n    local i = 2\n    while i < n\
    \ do\n        if n % i == 0 then\n            return largest_prime_factor(n /\
    \ i)\n        end\n        i = i + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local largest_prime = 1\n  local\
    \ i = 2\n  while i * i <= n do\n    if n % i == 0 then\n      largest_prime =\
    \ i\n      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  if n > 1 then\n\
    \    largest_prime = n\n  end\n  return largest_prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local p = 2\n  while n % p ~=\
    \ 0 do\n    p = next_prime(p)\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),\
    \ 5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),\
    \ 7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu97x7a4n.lua:9:\
    \ attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpu97x7a4n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu97x7a4n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n\
    -- 2\nlocal function largest_prime_factor(n)\n  local i = 2\n  while i < n do\n\
    \    if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n \
    \   i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n\
    \    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63), 7)\n\
    \    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),\
    \ 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
