---
name: HumanEval_59_largest_prime_factor
language: lua
results:
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_prime = 2
      while n > largest_prime do
        if n % largest_prime == 0 then
          n = n / largest_prime
        else
          largest_prime = next_prime(largest_prime)
        end
      end
      return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpauvibk5g.lua:12:
    attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpauvibk5g.lua:12:
    in local 'candidate'\n\t/tmp/tmpauvibk5g.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_factor = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest_factor = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, n do
            if n % i == 0 then
                largest = i
                n = n / i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav21u6i0.lua:21:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpav21u6i0.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n % p ~= 0 do
        p = p + 1
      end
      if n == p then
        return n
      else
        return largest_prime_factor(n / p)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factors = {}
      local i = 2
      while n > 1 do
        if n % i == 0 then
          table.insert(factors, i)
          n = n / i
        else
          i = i + 1
        end
      end
      return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n % p == 0 do
            n = n / p
        end
        p = 3
        while n > 1 do
            while n % p == 0 do
                n = n / p
            end
            p = p + 2
        end
        return p - 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n > 1 do
            if n % p == 0 then
                n = n / p
            else
                p = p + 1
            end
        end
        return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_factor = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest_factor = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_factor = 1
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          largest_factor = factor
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n > 1 do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime = 2
        while n % largest_prime == 0 do
            n = n / largest_prime
        end
        local i = 3
        while i <= math.sqrt(n) do
            if n % i == 0 then
                n = n / i
                largest_prime = i
            else
                i = i + 2
            end
        end
        if n > largest_prime then
            largest_prime = n
        end
        return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_factor = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_factor = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_factor = 1
        local factor = 2
        while n > 1 do
            if n % factor == 0 then
                largest_factor = factor
                n = n / factor
            else
                factor = factor + 1
            end
        end
        return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime = 2
        while n > largest_prime do
            if n % largest_prime == 0 then
                n = n / largest_prime
            else
                largest_prime = largest_prime + 1
            end
        end
        return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      local max = 1
      while i <= n do
        if n % i == 0 then
          max = i
          n = n / i
        else
          i = i + 1
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local max = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          max = i
          n = n / i
        else
          i = i + 1
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n > 1 do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\tlocal max = 1\n\twhile
    i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\tmax = i\n\t\telse\n\t\t\ti
    = i + 1\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),
    5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),
    7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),
    29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, n do
            if n % i == 0 then
                largest = i
                n = n / i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbabrr9e2.lua:21:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpbabrr9e2.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local f = 2
        while f * f <= n do
            if n % f == 0 then
                n = n / f
            else
                f = f + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i <= n do\n\t\tif
    n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn
    i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n % p ~= 0 do
        p = next_prime(p)
      end
      if n == p then
        return n
      else
        return largest_prime_factor(n / p)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsiyqa96d.lua:9:
    attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpsiyqa96d.lua:9:
    in local 'candidate'\n\t/tmp/tmpsiyqa96d.lua:21: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n % p ~= 0 do
        p = p + 1
      end
      if n == p then
        return n
      else
        return largest_prime_factor(n / p)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i <= n do\n\t\tif
    n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn
    i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local factors = prime_factors(n)
        return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyoh5_w_z.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpyoh5_w_z.lua:7:
    in local 'candidate'\n\t/tmp/tmpyoh5_w_z.lua:14: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factors = prime_factors(n)
      return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfpgtxdle.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpfpgtxdle.lua:7:
    in local 'candidate'\n\t/tmp/tmpfpgtxdle.lua:14: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_prime = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_prime = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_factor = 1
        local factor = 2
        while n > 1 do
            if n % factor == 0 then
                largest_factor = factor
                n = n / factor
            else
                factor = factor + 1
            end
        end
        return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_factor = 1
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          largest_factor = factor
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n % p == 0 do
            n = n / p
        end
        p = 3
        while n > 1 do
            while n % p == 0 do
                n = n / p
            end
            p = p + 2
        end
        return p - 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_prime = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_prime = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factors = prime_factors(n)
      return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6qivi9qh.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp6qivi9qh.lua:7:
    in local 'candidate'\n\t/tmp/tmp6qivi9qh.lua:14: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_prime = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_prime = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local prime_factors = {}
      local i = 2
      while n > 1 do
        if n % i == 0 then
          n = n / i
          table.insert(prime_factors, i)
        else
          i = i + 1
        end
      end
      return prime_factors[#prime_factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while n % i ~= 0 do
            i = i + 1
        end
        if n == i then
            return n
        else
            return largest_prime_factor(n / i)
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_factor = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_factor = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, n do
            if n % i == 0 then
                largest = i
                n = n / i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42l1tsv8.lua:21:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp42l1tsv8.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n % p == 0 do
            n = n / p
        end
        p = 3
        while n > 1 do
            while n % p == 0 do
                n = n / p
            end
            p = p + 2
        end
        return p - 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, math.floor(math.sqrt(n)) do
            if n % i == 0 then
                if is_prime(i) then
                    largest = i
                end
                if is_prime(n / i) then
                    largest = n / i
                end
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbw9c7u0f.lua:10:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpbw9c7u0f.lua:10:
    in local 'candidate'\n\t/tmp/tmpbw9c7u0f.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal factor = 2\n\twhile n > 1 do\n\t\tif
    n % factor == 0 then\n\t\t\tn = n / factor\n\t\telse\n\t\t\tfactor = factor +
    1\n\t\tend\n\tend\n\treturn factor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                if is_prime(i) then
                    largest = i
                end
                if is_prime(n / i) then
                    largest = n / i
                end
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qipo97i.lua:10:
    attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp_qipo97i.lua:10:
    in local 'candidate'\n\t/tmp/tmp_qipo97i.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal prime_factors = {}\n\tlocal
    i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(prime_factors,
    i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn prime_factors[#prime_factors]\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n
    \   lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n
    \   lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n
    \   lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local factor = 2
        while n > 1 do
            if n % factor == 0 then
                n = n / factor
            else
                factor = factor + 1
            end
        end
        return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime = 0
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest_prime = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while p <= n do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n > 1 do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 1
      local divisor = 2
      while n > 1 do
        if n % divisor == 0 then
          largest = divisor
          n = n / divisor
        else
          divisor = divisor + 1
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, n do
            if n % i == 0 then
                largest = i
                n = n / i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dlnn7yy.lua:21:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp5dlnn7yy.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n > 1 do
        while n % p == 0 do
          n = n / p
        end
        p = p + 1
      end
      return p - 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n > 1 do
            if n % p == 0 then
                n = n / p
            else
                p = p + 1
            end
        end
        return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i * i <= n do\n\t\tif
    n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn
    n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest_prime = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal largest = 1\n\tfor i = 2, n
    do\n\t\tif n % i == 0 then\n\t\t\tlargest = i\n\t\t\tn = n / i\n\t\t\ti = i -
    1\n\t\tend\n\tend\n\treturn largest\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = largest_prime_factor\n    lu.assertEquals(candidate(15),
    5)\n    lu.assertEquals(candidate(27), 3)\n    lu.assertEquals(candidate(63),
    7)\n    lu.assertEquals(candidate(330), 11)\n    lu.assertEquals(candidate(13195),
    29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwionyh3.lua:22:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpxwionyh3.lua:22: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\tlocal last_factor
    = 1\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tlast_factor = i\n\t\t\tn
    = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn last_factor\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n
    \   lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n
    \   lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n
    \   lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal i = 2\n\twhile i < n do\n\t\tif
    n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn
    n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while p <= n do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal largest_factor = 1\n\tlocal
    i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tlargest_factor = i\n\t\t\tn
    = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn largest_factor\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n
    \   lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n
    \   lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n
    \   lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest_prime = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime_factor = 1
        local i = 2
        while i <= n do
            if n % i == 0 then
                largest_prime_factor = i
                n = n / i
            else
                i = i + 1
            end
        end
        return largest_prime_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return largest_prime_factor(n / i)
        end
        i = i + 1
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 2
      while n > largest do
        if n % largest == 0 then
          n = n / largest
        else
          largest = largest + 1
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while p*p <= n do
            if n % p == 0 then
                n = n / p
            else
                p = p + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return largest_prime_factor(n / i)
        end
        i = i + 1
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local factor = 2
        while n > 1 do
            if n % factor == 0 then
                n = n / factor
            else
                factor = factor + 1
            end
        end
        return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile n > 1 do\n\t\tif
    n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\tend\n\treturn
    p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_prime = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_prime = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n % factor ~= 0 do
        factor = factor + 1
      end
      if n == factor then
        return n
      else
        return largest_prime_factor(n / factor)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n % p == 0 do
            n = n / p
        end
        p = 3
        while n > 1 do
            while n % p == 0 do
                n = n / p
            end
            p = p + 2
        end
        return p - 2
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n > 1 do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest_prime = 1
        local factor = 2
        while n > 1 do
            if n % factor == 0 then
                largest_prime = factor
                n = n / factor
            else
                factor = factor + 1
            end
        end
        return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while p * p <= n do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factors = prime_factors(n)
      return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuv1x39vs.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpuv1x39vs.lua:7:
    in local 'candidate'\n\t/tmp/tmpuv1x39vs.lua:14: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest = 1
      for i = 2, n do
        if n % i == 0 then
          largest = i
          n = n / i
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03jwhq3c.lua:21:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmp03jwhq3c.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local p = 2
        while n > 1 do
            if n % p == 0 then
                n = n / p
            else
                p = p + 1
            end
        end
        return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n > 1 do
        if n % factor == 0 then
          n = n / factor
        else
          factor = factor + 1
        end
      end
      return factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local factors = prime_factors(n)
        local largest = 0
        for _, v in ipairs(factors) do
            if v > largest then
                largest = v
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf228888_.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpf228888_.lua:7:
    in local 'candidate'\n\t/tmp/tmpf228888_.lua:20: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n > 1 do
        if n % p == 0 then
          n = n / p
        else
          p = p + 1
        end
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n--
    >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--
    2\nlocal function largest_prime_factor(n)\n\tlocal p = 2\n\twhile p <= n do\n\t\tif
    n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp = p + 1\n\t\tend\n\tend\n\treturn
    p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = largest_prime_factor\n    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27),
    3)\n    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330),
    11)\n    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return largest_prime_factor(n / i)
        end
        i = i + 1
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factor = 2
      while n % factor ~= 0 do
        factor = factor + 1
      end
      if n == factor then
        return n
      else
        return largest_prime_factor(n / factor)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local factors = {}
        local i = 2
        while n > 1 do
            if n % i == 0 then
                table.insert(factors, i)
                n = n / i
            else
                i = i + 1
            end
        end
        return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factors = prime_factors(n)
      return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9psanj6l.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp9psanj6l.lua:7:
    in local 'candidate'\n\t/tmp/tmp9psanj6l.lua:14: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i * i <= n do
            if n % i == 0 then
                n = n / i
            else
                i = i + 1
            end
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local factors = prime_factors(n)
      return factors[#factors]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82wvixm3.lua:7:
    attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmp82wvixm3.lua:7:
    in local 'candidate'\n\t/tmp/tmp82wvixm3.lua:14: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, n do
            if n % i == 0 then
                largest = i
                n = n / i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0uyn1zr.lua:21:
    expected: 3, actual: 9\nstack traceback:\n\t/tmp/tmpo0uyn1zr.lua:21: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_factor = 1
      local i = 2
      while i <= n do
        if n % i == 0 then
          largest_factor = i
          n = n / i
        else
          i = i + 1
        end
      end
      return largest_factor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local largest = 1
        for i = 2, math.sqrt(n) do
            if n % i == 0 then
                largest = math.max(largest, largest_prime_factor(i))
                largest = math.max(largest, largest_prime_factor(n / i))
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w1cvpap.lua:20:
    expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8w1cvpap.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i <= n do
        if n % i == 0 then
          n = n / i
        else
          i = i + 1
        end
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n % p ~= 0 do
        p = next_prime(p)
      end
      local q = n / p
      if is_prime(q) then
        return q
      else
        return largest_prime_factor(q)
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgatgxo8.lua:9:
    attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmprgatgxo8.lua:9:
    in local 'candidate'\n\t/tmp/tmprgatgxo8.lua:22: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return largest_prime_factor(n / i)
            end
            i = i + 1
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local largest_prime = 1
      local i = 2
      while i * i <= n do
        if n % i == 0 then
          largest_prime = i
          n = n / i
        else
          i = i + 1
        end
      end
      if n > 1 then
        largest_prime = n
      end
      return largest_prime
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local p = 2
      while n % p ~= 0 do
        p = next_prime(p)
      end
      return p
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu97x7a4n.lua:9:
    attempt to call a nil value (global 'next_prime')\nstack traceback:\n\t/tmp/tmpu97x7a4n.lua:9:
    in local 'candidate'\n\t/tmp/tmpu97x7a4n.lua:17: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return the largest prime factor of n. Assume n > 1 and is not a prime.
    -- >>> largest_prime_factor(13195)
    -- 29
    -- >>> largest_prime_factor(2048)
    -- 2
    local function largest_prime_factor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return largest_prime_factor(n / i)
        end
        i = i + 1
      end
      return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_prime_factor
        lu.assertEquals(candidate(15), 5)
        lu.assertEquals(candidate(27), 3)
        lu.assertEquals(candidate(63), 7)
        lu.assertEquals(candidate(330), 11)
        lu.assertEquals(candidate(13195), 29)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
