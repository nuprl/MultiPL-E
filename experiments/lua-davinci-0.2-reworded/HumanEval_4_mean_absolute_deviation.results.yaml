name: HumanEval_4_mean_absolute_deviation
language: lua
results:
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, n in ipairs(numbers) do\n\
    \    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp259ldlta.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp259ldlta.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp259ldlta.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjylca_m.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwjylca_m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwjylca_m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1x04uyih.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1x04uyih.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1x04uyih.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxq6j39j.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxxq6j39j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxxq6j39j.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, v in pairs(numbers) do\n  \
    \      sum = sum + v\n        count = count + 1\n    end\n    local mean = sum\
    \ / count\n    local sum_of_deviations = 0\n    for _, v in pairs(numbers) do\n\
    \        sum_of_deviations = sum_of_deviations + math.abs(v - mean)\n    end\n\
    \    return sum_of_deviations / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzm_yj9f.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprzm_yj9f.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprzm_yj9f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo99fibck.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpo99fibck.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpo99fibck.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9jenk89s.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9jenk89s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9jenk89s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfo1qbkv.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmppfo1qbkv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppfo1qbkv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy16jz9lo.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpy16jz9lo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpy16jz9lo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsv9imyi4.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpsv9imyi4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsv9imyi4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1g_n30w5.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1g_n30w5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1g_n30w5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpah5hfujg.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpah5hfujg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpah5hfujg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ijwx7n7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2ijwx7n7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2ijwx7n7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjnzw6vag.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjnzw6vag.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjnzw6vag.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqhch7uv.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwqhch7uv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpwqhch7uv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7f_ajet.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpr7f_ajet.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpr7f_ajet.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpolx2v0lw.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpolx2v0lw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpolx2v0lw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcg0x9_0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkcg0x9_0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkcg0x9_0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_3qmip7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpg_3qmip7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpg_3qmip7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0_3c6es.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpe0_3c6es.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe0_3c6es.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgy80zwr.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmgy80zwr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmgy80zwr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqlq5_5pz.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqlq5_5pz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqlq5_5pz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_squares = 0\n  for _, number in pairs(numbers) do\n    sum_of_squares\
    \ = sum_of_squares + math.abs(number - mean)\n  end\n  return sum_of_squares /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ewedp8e.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0ewedp8e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0ewedp8e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe67ya5zu.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpe67ya5zu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe67ya5zu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_deviations = 0\n  for _, number in pairs(numbers) do\n    sum_of_deviations\
    \ = sum_of_deviations + math.abs(number - mean)\n  end\n  return sum_of_deviations\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2t7kxaem.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2t7kxaem.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2t7kxaem.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, n in ipairs(numbers) do\n\
    \    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkeqmqqd.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpbkeqmqqd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbkeqmqqd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpypsk_8p0.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpypsk_8p0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpypsk_8p0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_squares = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_squares = sum_of_squares + math.abs(number - mean)\n    end\n\
    \    return sum_of_squares / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2fd0vhr.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpq2fd0vhr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq2fd0vhr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jbmc320.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1jbmc320.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1jbmc320.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzi90ahe.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkzi90ahe.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkzi90ahe.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7nihvf8c.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7nihvf8c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7nihvf8c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8lf8_0sj.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8lf8_0sj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8lf8_0sj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0fai6y4.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpx0fai6y4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx0fai6y4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_deviations = 0\n  for _, number in pairs(numbers) do\n    sum_of_deviations\
    \ = sum_of_deviations + math.abs(number - mean)\n  end\n  return sum_of_deviations\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_deviations = 0\n  for _, number in pairs(numbers) do\n    sum_of_deviations\
    \ = sum_of_deviations + math.abs(number - mean)\n  end\n  return sum_of_deviations\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ggyx0oc.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8ggyx0oc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8ggyx0oc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpextttvvb.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpextttvvb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpextttvvb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3c3bz3b.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpa3c3bz3b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa3c3bz3b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkh41gtx.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkkh41gtx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkkh41gtx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqfqpcff.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwqfqpcff.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwqfqpcff.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqvcspwzg.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqvcspwzg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqvcspwzg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9e776g0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9e776g0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_9e776g0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0vq1h5vz.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0vq1h5vz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0vq1h5vz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, n in ipairs(numbers) do\n \
    \       sum = sum + n\n        count = count + 1\n    end\n    local mean = sum\
    \ / count\n    local sum_of_deviations = 0\n    for _, n in ipairs(numbers) do\n\
    \        sum_of_deviations = sum_of_deviations + math.abs(n - mean)\n    end\n\
    \    return sum_of_deviations / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgnt0o2kl.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpgnt0o2kl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgnt0o2kl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4ab05pz.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpr4ab05pz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpr4ab05pz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8varf6u.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpx8varf6u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx8varf6u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_s3vf4tj.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_s3vf4tj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_s3vf4tj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqnzlrw7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpeqnzlrw7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpeqnzlrw7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z7xfyzd.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1z7xfyzd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1z7xfyzd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8p5iqjh.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_8p5iqjh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_8p5iqjh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ylkzwjb.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2ylkzwjb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2ylkzwjb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqddbchm.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpiqddbchm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiqddbchm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_abs_diffs = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_abs_diffs = sum_of_abs_diffs + math.abs(number - mean)\n\
    \    end\n    return sum_of_abs_diffs / count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_absolute_deviations = 0\n  for _, number in pairs(numbers) do\n\
    \    sum_of_absolute_deviations = sum_of_absolute_deviations + math.abs(number\
    \ - mean)\n  end\n  return sum_of_absolute_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_absolute_differences = 0\n    for _, number\
    \ in ipairs(numbers) do\n        sum_of_absolute_differences = sum_of_absolute_differences\
    \ + math.abs(number - mean)\n    end\n    return sum_of_absolute_differences /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtd4mdj0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphtd4mdj0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmphtd4mdj0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for _, number in ipairs(numbers)\
    \ do\n        total = total + math.abs(number - mean)\n    end\n    return total\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqhnaklhh.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqhnaklhh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqhnaklhh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwl34z3pt.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwl34z3pt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwl34z3pt.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzkl2fo30.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzkl2fo30.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzkl2fo30.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzt5fvk22.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzt5fvk22.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzt5fvk22.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3rf66bpp.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3rf66bpp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3rf66bpp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_absolute_deviations = 0\n  for _, number in pairs(numbers) do\n\
    \    sum_of_absolute_deviations = sum_of_absolute_deviations + math.abs(number\
    \ - mean)\n  end\n  return sum_of_absolute_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2m9ffhoc.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2m9ffhoc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2m9ffhoc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for _, number in ipairs(numbers)\
    \ do\n        total = total + math.abs(number - mean)\n    end\n    return total\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5cs3z73i.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp5cs3z73i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5cs3z73i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmtdy8yl.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprmtdy8yl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprmtdy8yl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzpz4etug.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzpz4etug.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzpz4etug.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2q2rojkp.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2q2rojkp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2q2rojkp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpylpi1341.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpylpi1341.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpylpi1341.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn59u3f17.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpn59u3f17.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn59u3f17.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xrmqkas.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0xrmqkas.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0xrmqkas.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptrhgbfw_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmptrhgbfw_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmptrhgbfw_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gjiq90c.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6gjiq90c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6gjiq90c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplupe1hpr.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmplupe1hpr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplupe1hpr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8olp89xf.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8olp89xf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8olp89xf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hq5_xga.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9hq5_xga.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9hq5_xga.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpja2buo8t.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpja2buo8t.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpja2buo8t.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyezkpbg.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpgyezkpbg.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgyezkpbg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5307anff.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp5307anff.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5307anff.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp33rbpdje.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp33rbpdje.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp33rbpdje.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt4qvq265.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpt4qvq265.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt4qvq265.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8htb3cwd.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8htb3cwd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8htb3cwd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwesn2p1c.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwesn2p1c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwesn2p1c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa01k6bx_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpa01k6bx_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa01k6bx_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3f8liw9.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpr3f8liw9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpr3f8liw9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_j_34zzm.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_j_34zzm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_j_34zzm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2n84a9mo.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2n84a9mo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2n84a9mo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03eka19s.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp03eka19s.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp03eka19s.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwc1pk2a5.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwc1pk2a5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwc1pk2a5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7z00z_yx.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7z00z_yx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7z00z_yx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpilb3l5xa.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpilb3l5xa.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpilb3l5xa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8vcd8vhw.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8vcd8vhw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8vcd8vhw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4gs5esyt.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4gs5esyt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4gs5esyt.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9fw2hiwo.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9fw2hiwo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9fw2hiwo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuf9lpz14.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpuf9lpz14.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpuf9lpz14.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuslb17re.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpuslb17re.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpuslb17re.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo88yms8o.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpo88yms8o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpo88yms8o.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi35fgwjz.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpi35fgwjz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi35fgwjz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3cvavgos.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3cvavgos.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3cvavgos.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6b3jdcto.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6b3jdcto.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6b3jdcto.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjfef6vk.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmjfef6vk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmjfef6vk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwbt80dw2.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpwbt80dw2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwbt80dw2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, x in ipairs(numbers) do\n\
    \    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkfrk1kn7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkfrk1kn7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkfrk1kn7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49vb3lpv.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp49vb3lpv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp49vb3lpv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp8m2sqnz.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpp8m2sqnz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpp8m2sqnz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmmcb0d8e.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmmcb0d8e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmmcb0d8e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for _, x in ipairs(numbers)\
    \ do\n        total = total + math.abs(x - mean)\n    end\n    return total /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_n5o0i_k.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_n5o0i_k.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_n5o0i_k.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sbgti80.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6sbgti80.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6sbgti80.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_absolute_deviations = 0\n    for _, number in\
    \ ipairs(numbers) do\n        sum_of_absolute_deviations = sum_of_absolute_deviations\
    \ + math.abs(number - mean)\n    end\n    return sum_of_absolute_deviations /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_squares = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_squares = sum_of_squares + (number - mean)^2\n    end\n \
    \   return math.sqrt(sum_of_squares / count)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzpvhza8.lua:27:\
    \ expected: 1, actual: 1.1180339887499\nstack traceback:\n\t/tmp/tmpjzpvhza8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_wkrzvvp.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_wkrzvvp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_wkrzvvp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5nj21sb.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpu5nj21sb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu5nj21sb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhiqvyzm.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzhiqvyzm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzhiqvyzm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnesoc815.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpnesoc815.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnesoc815.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0.0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6dqw0_4.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpx6dqw0_4.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx6dqw0_4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqiyfogh0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqiyfogh0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqiyfogh0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftj0r2mh.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpftj0r2mh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpftj0r2mh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrhsqiye.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxrhsqiye.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxrhsqiye.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7tnew5b6.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7tnew5b6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7tnew5b6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(absolute_deviations, math.abs(number\
    \ - mean))\n    end\n    return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_srojb7a.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_srojb7a.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_srojb7a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpov_uby8g.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpov_uby8g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpov_uby8g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqk0zj5a.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmqk0zj5a.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmqk0zj5a.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqwhwoii.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpvqwhwoii.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpvqwhwoii.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhjh995d.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmplhjh995d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplhjh995d.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpndy_s89j.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpndy_s89j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpndy_s89j.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp155tghef.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp155tghef.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp155tghef.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyuof0on.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpgyuof0on.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpgyuof0on.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph5y96b1m.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmph5y96b1m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmph5y96b1m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2yslrwye.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2yslrwye.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2yslrwye.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9nhw1k3i.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9nhw1k3i.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9nhw1k3i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa60qdntv.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpa60qdntv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa60qdntv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxiqzk9nc.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxiqzk9nc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxiqzk9nc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6526o4jx.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6526o4jx.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6526o4jx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnyk73msa.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpnyk73msa.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnyk73msa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf1wxtt7u.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpf1wxtt7u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpf1wxtt7u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3cjrvw0x.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3cjrvw0x.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3cjrvw0x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynmg9sj.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7ynmg9sj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7ynmg9sj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj5nbpn5u.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpj5nbpn5u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpj5nbpn5u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9zcxzzl.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpz9zcxzzl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpz9zcxzzl.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiw3g36ky.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpiw3g36ky.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiw3g36ky.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxzqd3lg_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxzqd3lg_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxzqd3lg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local mean = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcidvmvod.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpcidvmvod.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcidvmvod.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprh2gzyan.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprh2gzyan.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprh2gzyan.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0urrsej3.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0urrsej3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0urrsej3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg0t6x8f3.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpg0t6x8f3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpg0t6x8f3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu1pi9dw_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpu1pi9dw_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu1pi9dw_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvtx04uj.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpfvtx04uj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfvtx04uj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiv0_djqo.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpiv0_djqo.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpiv0_djqo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6u7t7au.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpt6u7t7au.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt6u7t7au.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw4_xxo3b.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw4_xxo3b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw4_xxo3b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54982179.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp54982179.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp54982179.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_absolute_differences = 0\n    for _, number\
    \ in ipairs(numbers) do\n        sum_of_absolute_differences = sum_of_absolute_differences\
    \ + math.abs(number - mean)\n    end\n    return sum_of_absolute_differences /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfi0ip26c.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpfi0ip26c.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpfi0ip26c.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa4zu3s8m.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpa4zu3s8m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa4zu3s8m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp365p3xzh.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp365p3xzh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp365p3xzh.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpduzplod2.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpduzplod2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpduzplod2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxybh92sa.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxybh92sa.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxybh92sa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6o6y333h.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6o6y333h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6o6y333h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local mean = mean(numbers)\n  for _, x in ipairs(numbers) do\n\
    \    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8egfro85.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8egfro85.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp8egfro85.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrrpi59u.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpdrrpi59u.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdrrpi59u.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2lpd5hum.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2lpd5hum.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2lpd5hum.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5a3fg11.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpn5a3fg11.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn5a3fg11.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpor0j_tqc.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpor0j_tqc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpor0j_tqc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ad0i490.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ad0i490.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9ad0i490.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryjbaidk.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpryjbaidk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpryjbaidk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58i43jif.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp58i43jif.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp58i43jif.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_f710kh0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_f710kh0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_f710kh0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvmz442v.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpnvmz442v.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnvmz442v.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpts5r_113.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpts5r_113.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpts5r_113.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw95d1dpn.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw95d1dpn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw95d1dpn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmtobeq8z.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmtobeq8z.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmtobeq8z.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6qjq3u_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpe6qjq3u_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe6qjq3u_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_deviations = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_deviations = sum_of_deviations + math.abs(number - mean)\n\
    \    end\n    return sum_of_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa3wohab6.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpa3wohab6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpa3wohab6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpewe_d1xt.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpewe_d1xt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpewe_d1xt.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvtbd8rv.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpcvtbd8rv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcvtbd8rv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4vbhfkfn.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4vbhfkfn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp4vbhfkfn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, number in pairs(numbers) do\n   \
    \ sum = sum + number\n    count = count + 1\n  end\n  local mean = sum / count\n\
    \  local sum_of_squares = 0\n  for _, number in pairs(numbers) do\n    sum_of_squares\
    \ = sum_of_squares + math.abs(number - mean)\n  end\n  return sum_of_squares /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjiyalxg6.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjiyalxg6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjiyalxg6.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph14zvpy0.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmph14zvpy0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmph14zvpy0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjfniajs5.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjfniajs5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjfniajs5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqaeh6x7x.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqaeh6x7x.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqaeh6x7x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjekj6ec7.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjekj6ec7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpjekj6ec7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2b3kkx4e.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2b3kkx4e.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2b3kkx4e.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu4rp9fy.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmu4rp9fy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmu4rp9fy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqrp_j0j.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxqrp_j0j.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxqrp_j0j.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local sum = 0\n    local count = 0\n    for _, number in ipairs(numbers) do\n\
    \        sum = sum + number\n        count = count + 1\n    end\n    local mean\
    \ = sum / count\n    local sum_of_squares = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum_of_squares = sum_of_squares + math.abs(number - mean)\n    end\n\
    \    return sum_of_squares / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmy_7hku3.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpmy_7hku3.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmy_7hku3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgw759ct.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxgw759ct.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxgw759ct.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_clslka.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpi_clslka.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi_clslka.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local total = 0\n    for _, number in ipairs(numbers)\
    \ do\n        total = total + math.abs(number - mean)\n    end\n    return total\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zyoan5b.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3zyoan5b.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp3zyoan5b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacdlfvlz.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpacdlfvlz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpacdlfvlz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05mde1mj.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp05mde1mj.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp05mde1mj.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \   local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_x7tdlon.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_x7tdlon.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_x7tdlon.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyz9er28_.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpyz9er28_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyz9er28_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given table of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = mean(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc91ozo4i.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpc91ozo4i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpc91ozo4i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
