---
name: HumanEval_40_triples_sum_to_zero
language: lua
results:
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local seen = {}
      for i = 1, #l do
        for j = i + 1, #l do
          if seen[-l[i] - l[j]] then
            return true
          end
          seen[l[j]] = true
        end
        seen = {}
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i, a in ipairs(l) do
            for j, b in ipairs(l) do
                for k, c in ipairs(l) do
                    if i ~= j and i ~= k and j ~= k and a + b + c == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns
    true if there are three distinct elements in the table that\n-- sum to zero, and
    false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,
    3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>
    triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n--
    false\nlocal function triples_sum_to_zero(l)\n    -- TODO: implement this function\n
    \   -- Hint: use the function you wrote for the previous question\n    -- to help
    you with this one.\n    -- Hint: you can use the table.sort function to sort a
    table\n    -- in-place.\n    -- Hint: you can use the table.concat function to
    concatenate\n    -- two tables together.\n    -- Hint: you can use the table.insert
    function to insert an\n    -- element into a table.\n    -- Hint: you can use
    the table.remove function to remove an\n    -- element from a table.\n    -- Hint:
    you can use the table.unpack function to unpack a\n    -- table into a list of
    arguments.\n    -- Hint: you can use the table.pack function to pack a list\n
    \   -- of arguments into a table.\n    -- Hint: you can use the table.maxn function
    to get the number\n    -- of elements in a table.\n    -- Hint: you can use the
    table.getn function to get the number\n    -- of elements in a table.\n    --
    Hint: you can use the table.foreach function to iterate\n    -- over the elements
    of a table.\n    -- Hint: you can use the table.foreachi function to iterate\n
    \   -- over the elements of a table with their indices.\n    -- Hint: you can
    use the table.insert function to insert an\n    -- element into a table.\n    --
    Hint: you can use the table.remove function to remove an\n    -- element from
    a table.\n    -- Hint: you can use the table.getn function to get the number\n
    \   -- of elements in a table.\n    -- Hint: you can use the table.sort function
    to sort a table\n    -- in-place.\n    -- Hint: you can use the table.concat function
    to concatenate\n    -- two tables together.\n    -- Hint: you can use the table.unpack
    function to unpack a\n    -- table into a list of arguments.\n    -- Hint: you
    can use the table.pack function to pack a list\n    -- of arguments into a table.\n
    \   -- Hint: you can use the table.maxn function to get the number\n   \nlu =
    require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n
    \   lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,
    3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,
    2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,
    4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,
    3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: 'lua: /tmp/tmpfcf9o7ii.lua:69: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n do
            for j = i + 1, n do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            t[v] = true
        end
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                if i ~= j then
                    if t[-v-w] then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7mzt7hy.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl7mzt7hy.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- YOUR CODE HERE
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local sum = 0
      local count = 0
      local i = 1
      while i <= #l do
        sum = sum + l[i]
        if sum == 0 then
          count = count + 1
        end
        i = i + 1
      end
      if count >= 3 then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt047zkj.lua:38:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzt047zkj.lua:38: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8w86oon.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmph8w86oon.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: you can use a helper function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.concat function.
      -- Hint: you can use the table.insert function.
      -- Hint: you can use the table.remove function.
      -- Hint: you can use the table.unpack function.
      -- Hint: you can use the table.pack function.
      -- Hint: you can use the table.move function.
      -- Hint: you can use the table.maxn function.
      -- Hint: you can use the table.getn function.
      -- Hint: you can use the table.foreach function.
      -- Hint: you can use the table.foreachi function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- Hint: you can use the table.sort function.
      -- H
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpiklzu88c.lua:65: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        for i = 1, n do
            for j = i + 1, n do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: you may want to use the function `table.sort`
        -- which sorts a table in place.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.sort
        -- You can also use the function `table.concat` to turn a table
        -- into a string.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.concat
        -- You can also use the function `table.insert` to insert an element
        -- into a table.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.insert
        -- You can also use the function `table.remove` to remove an element
        -- from a table.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.remove
        -- You can also use the function `table.getn` to get the length of a table.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.getn
        -- You can also use the function `table.maxn` to get the length of a table.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.maxn
        -- You can also use the function `table.foreach` to iterate over a table.
        -- You can find more information about this function here:
        -- https://www.lua.org/manual/5.3/manual.html#pdf-table.foreach
        -- You can also use the function `table.foreachi` to iterate over a table.
        -- You can find more information about this function here:
        -- https://
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpima6ju9p.lua:59: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local i = 1
      local j = 1
      local k = 1
      while i <= #l do
        while j <= #l do
          while k <= #l do
            if i ~= j and i ~= k and j ~= k and l[i] + l[j] + l[k] == 0 then
              return true
            end
            k = k + 1
          end
          j = j + 1
        end
        i = i + 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl3o3sn5.lua:38:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcl3o3sn5.lua:38: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                for k, x in ipairs(l) do
                    if v ~= w and w ~= x and v ~= x and v + w + x == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1zbotkl.lua:32:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk1zbotkl.lua:32: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local t = {}
        for _, v in ipairs(l) do
            t[v] = true
        end
        for _, v in ipairs(l) do
            for _, v2 in ipairs(l) do
                if v ~= v2 and t[-v - v2] then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ucfzlc6.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ucfzlc6.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- your code here
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx2dpr2i.lua:21:
    expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpvx2dpr2i.lua:21: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local seen = {}
      for i = 1, #l do
        for j = i + 1, #l do
          if seen[-l[i] - l[j]] then
            return true
          end
          seen[l[j]] = true
        end
        seen = {}
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n do
            for j = i + 1, n do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxefq37n.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxxefq37n.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local sum = 0
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    sum = l[i] + l[j] + l[k]
                    if sum == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local function helper(l, i, j, k)
            if i > #l then
                return false
            elseif j > #l then
                return helper(l, i + 1, i + 2, i + 3)
            elseif k > #l then
                return helper(l, i, j + 1, j + 2)
            elseif l[i] + l[j] + l[k] == 0 then
                return true
            else
                return helper(l, i, j, k + 1)
            end
        end
        return helper(l, 1, 2, 3)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns
    true if there are three distinct elements in the table that\n-- sum to zero, and
    false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,
    3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>
    triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n--
    false\nlocal function triples_sum_to_zero(l)\n\tlocal i, j, k = 1, 1, 1\n\tlocal
    n = #l\n\twhile i <= n do\n\t\tj = i + 1\n\t\twhile j <= n do\n\t\t\tk = j + 1\n\t\t\twhile
    k <= n do\n\t\t\t\tif l[i] + l[j] + l[k] == 0 then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t\tk
    = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n
    \   lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,
    3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,
    2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,
    4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,
    3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp044zvpji.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp044zvpji.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bitnyzp.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4bitnyzp.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozp5r53i.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpozp5r53i.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0gvnol9.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0gvnol9.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03xh23xy.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp03xh23xy.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local i = 1
      local j = 1
      local k = 1
      while i <= #l do
        while j <= #l do
          while k <= #l do
            if i ~= j and i ~= k and j ~= k then
              if l[i] + l[j] + l[k] == 0 then
                return true
              end
            end
            k = k + 1
          end
          j = j + 1
          k = 1
        end
        i = i + 1
        j = 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local function find_triple(l)
            for i, a in ipairs(l) do
                for j, b in ipairs(l) do
                    for k, c in ipairs(l) do
                        if i ~= j and i ~= k and j ~= k then
                            if a + b + c == 0 then
                                return true
                            end
                        end
                    end
                end
            end
            return false
        end
        return find_triple(l)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bbhhjb4.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_bbhhjb4.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjrc2o8s.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqjrc2o8s.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local t = {}
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- YOUR CODE HERE
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local count = 0
      for i = 1, #l do
        for j = i+1, #l do
          for k = j+1, #l do
            if l[i] + l[j] + l[k] == 0 then
              count = count + 1
            end
          end
        end
      end
      if count > 0 then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        for i = 1, n do
            for j = i + 1, n do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function.
      -- You may want to use the function `sort_table` defined above.
      local sorted = sort_table(l)
      local i = 1
      local j = 1
      local k = 1
      while i <= #sorted do
        j = i + 1
        k = #sorted
        while j < k do
          if sorted[i] + sorted[j] + sorted[k] == 0 then
            return true
          elseif sorted[i] + sorted[j] + sorted[k] > 0 then
            k = k - 1
          else
            j = j + 1
          end
        end
        i = i + 1
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmidxgxcz.lua:17:
    attempt to call a nil value (global 'sort_table')\nstack traceback:\n\t/tmp/tmpmidxgxcz.lua:17:
    in local 'candidate'\n\t/tmp/tmpmidxgxcz.lua:41: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2prkapq.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy2prkapq.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: you may want to use the function `sort`
      -- which is defined above.
      -- Hint: you may want to use the function `binary_search`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_2`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_3`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_4`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_5`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_6`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_7`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_8`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_9`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_10`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_11`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_helper_12`
      -- which is defined above.
      -- Hint: you may want to use the function `triples_sum_to_zero_
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpd785nz67.lua:60: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl0hd221.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxl0hd221.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the function you wrote in the previous exercise
      -- to help you implement this one.
      -- Hint: you may want to use a helper function.
      -- Hint: you may want to use a table to keep track of
      -- which numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which pairs of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which triples of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which pairs of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which triples of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which pairs of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which triples of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which pairs of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which triples of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which pairs of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which triples of numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which numbers you've seen.
      -- Hint: you may want to use a table to keep track of
      -- which pairs
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpq97fljjz.lua:68: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      for i = 1, n do
        for j = i + 1, n do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszsxnkuo.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpszsxnkuo.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- check if there are at least three elements in the list
        if #l < 3 then
            return false
        end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmplsls8fkf.lua:34: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        for i = 1, n do
            for j = i + 1, n do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local t = {}
      for i, v in ipairs(l) do
        t[v] = true
      end
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          if i ~= j then
            if t[-v-w] then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      -- hint: use the function you wrote above
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02ufe1nb.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp02ufe1nb.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- your code here
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaw8uhbe3.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaw8uhbe3.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc7ben16.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmptc7ben16.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local seen = {}
        for i = 1, #l do
            for j = i + 1, #l do
                local sum = l[i] + l[j]
                if seen[-sum] then
                    return true
                end
                seen[l[j]] = true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local t = {}
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns
    true if there are three distinct elements in the table that\n-- sum to zero, and
    false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,
    3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>
    triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n--
    false\nlocal function triples_sum_to_zero(l)\n\tfor i, v in ipairs(l) do\n\t\tfor
    j, w in ipairs(l) do\n\t\t\tfor k, x in ipairs(l) do\n\t\t\t\tif i ~= j and i
    ~= k and j ~= k then\n\t\t\t\t\tif v + w + x == 0 then\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn
    false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = triples_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,
    3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,
    2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,
    4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,
    3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local function helper(l, i, j, k)
            if i > #l then
                return false
            elseif j > #l then
                return helper(l, i + 1, i + 2, i + 3)
            elseif k > #l then
                return helper(l, i, j + 1, j + 2)
            elseif l[i] + l[j] + l[k] == 0 then
                return true
            else
                return helper(l, i, j, k + 1)
            end
        end
        return helper(l, 1, 2, 3)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local t = {}
      for i, v in ipairs(l) do
        t[v] = true
      end
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          if i ~= j then
            if t[-v-w] then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- YOUR CODE HERE
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                for k, x in ipairs(l) do
                    if v + w + x == 0 and i ~= j and i ~= k and j ~= k then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd9_t53s.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdd9_t53s.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          for k, x in ipairs(l) do
            if v + w + x == 0 and i ~= j and i ~= k and j ~= k then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        -- Hint: you may want to use the function `table.sort`
        -- Hint: you may want to use the function `table.concat`
        -- Hint: you may want to use the function `table.remove`
        -- Hint: you may want to use the function `table.insert`
        -- Hint: you may want to use the function `table.unpack`
        -- Hint: you may want to use the function `table.pack`
        -- Hint: you may want to use the function `table.concat`
        -- Hint: you may want to use the function `table.remove`
        -- Hint: you may want to use the function `table.insert`
        -- Hint: you may want to use the function `table.unpack`
        -- Hint: you may want to use the function `table.pack`
        -- Hint: you may want to use the function `table.concat`
        -- Hint: you may want to use the function `table.remove`
        -- Hint: you may want to use the function `table.insert`
        -- Hint: you may want to use the function `table.unpack`
        -- Hint: you may want to use the function `table.pack`
        -- Hint: you may want to use the function `table.concat`
        -- Hint: you may want to use the function `table.remove`
        -- Hint: you may want to use the function `table.insert`
        -- Hint: you may want to use the function `table.unpack`
        -- Hint: you may want to use the function `table.pack`
        -- Hint: you may want to use the function `table.concat`
        -- Hint: you may want to use the function `table.remove`
        -- Hint: you may want to use the function `table.insert`
        -- Hint: you may want to use the function `table.unpack`
        -- Hint: you may want to use the function `table.pack`
        -- Hint: you may want to use the function `table.concat`
        -- Hint:
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpkfydfmls.lua:59: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- YOUR CODE HERE
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnw6yht1.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxnw6yht1.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      local result = false
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              result = true
            end
          end
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- YOUR CODE HERE
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_10ryqi0.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_10ryqi0.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- your code here
      local n = #l
      for i = 1, n do
        for j = i + 1, n do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        local i = 1
        while i <= n do
            local j = i + 1
            while j <= n do
                local k = j + 1
                while k <= n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                    k = k + 1
                end
                j = j + 1
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        local i = 1
        while i <= n do
            local j = i + 1
            while j <= n do
                local k = j + 1
                while k <= n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                    k = k + 1
                end
                j = j + 1
            end
            i = i + 1
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      --[[
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
      ]]
      for i = 1, #l do
        for j = i + 1, #l do
          if l[i] + l[j] == -l[i] - l[j] then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi60xbrn.lua:42:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwi60xbrn.lua:42: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- your code here
        local sum = 0
        local count = 0
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                for k, x in ipairs(l) do
                    if i ~= j and i ~= k and j ~= k then
                        sum = v + w + x
                        if sum == 0 then
                            count = count + 1
                        end
                    end
                end
            end
        end
        if count > 0 then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local seen = {}
      for i, v in ipairs(l) do
        seen[v] = true
      end
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          if i ~= j then
            local x = -(v + w)
            if seen[x] then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            t[v] = i
        end
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                if i ~= j then
                    local k = -(v + w)
                    if t[k] and t[k] ~= i and t[k] ~= j then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a36ixx6.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2a36ixx6.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local t = {}
      for i, v in ipairs(l) do
        t[v] = true
      end
      for i, v in ipairs(l) do
        for j, w in ipairs(l) do
          if i ~= j then
            if t[-v-w] then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local t = {}
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n do
        for j = i + 1, n do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the function you wrote in the previous exercise
      -- to check if there are two elements that sum to zero.
      -- If there are, then you can return true.
      -- If there are not, then you can return false.
      -- You can use a for loop to iterate over the elements of the table.
      -- You can use the function pairs to iterate over the elements of the table.
      -- You can use the function ipairs to iterate over the elements of the table.
      -- You can use the function table.sort to sort the elements of the table.
      -- You can use the function table.concat to concatenate the elements of the table.
      -- You can use the function table.insert to insert an element into the table.
      -- You can use the function table.remove to remove an element from the table.
      -- You can use the function table.unpack to unpack the elements of the table.
      -- You can use the function table.pack to pack the elements of the table.
      -- You can use the function table.maxn to find the maximum number of elements in the table.
      -- You can use the function table.getn to find the number of elements in the table.
      -- You can use the function table.setn to set the number of elements in the table.
      -- You can use the function table.foreach to iterate over the elements of the table.
      -- You can use the function table.foreachi to iterate over the elements of the table.
      -- You can use the function table.move to move the elements of the table.
      -- You can use the function table.sort to sort the elements of the table.
      -- You can use the function table.insert to insert an element into the table.
      -- You can use the function table.remove to remove an element from the table.
      -- You can use the function table.concat to concatenate the elements of the table.
      -- You can use the function table.maxn to find the maximum number of elements in the table.
      -- You can use the function table.getn to find the number of elements in the table.
      -- You can use the function table.setn to set the
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpv8gubmlf.lua:57: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35t7co4s.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmp35t7co4s.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local t = {}
        for i, v in ipairs(l) do
            t[v] = true
        end
        for i, v in ipairs(l) do
            for j, w in ipairs(l) do
                if i ~= j then
                    if t[-v-w] then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgxhe2me.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjgxhe2me.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8id71a7.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz8id71a7.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- YOUR CODE HERE
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i, a in ipairs(l) do
        for j, b in ipairs(l) do
          for k, c in ipairs(l) do
            if i ~= j and i ~= k and j ~= k and a + b + c == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      -- Hint: use the function you wrote for the previous question
      -- to check if a table contains a given value.
      -- Hint: you can use the pairs function to iterate over the elements
      -- of a table.
      -- Hint: you can use the table.sort function to sort a table.
      -- Hint: you can use the table.concat function to concatenate
      -- a table into a string.
      -- Hint: you can use the string.format function to format a string.
      -- Hint: you can use the string.sub function to get a substring.
      -- Hint: you can use the string.len function to get the length of a string.
      -- Hint: you can use the string.byte function to get the ASCII value of a character.
      -- Hint: you can use the string.char function to get the character corresponding to an ASCII value.
      -- Hint: you can use the string.gsub function to replace all occurrences of a pattern in a string.
      -- Hint: you can use the string.gmatch function to iterate over all occurrences of a pattern in a string.
      -- Hint: you can use the string.match function to get the first occurrence of a pattern in a string.
      -- Hint: you can use the string.reverse function to reverse a string.
      -- Hint: you can use the string.upper function to convert a string to uppercase.
      -- Hint: you can use the string.lower function to convert a string to lowercase.
      -- Hint: you can use the string.find function to find the first occurrence of a pattern in a string.
      -- Hint: you can use the string.gfind function to iterate over all occurrences of a pattern in a string.
      -- Hint: you can use the string.gsub function to replace all occurrences of a pattern in a string.
      -- Hint: you can use the string.match function to get the first occurrence of a pattern in a string.
      -- Hint: you can use the string.rep function to repeat a string.
      -- Hint: you can use the string.sub function to get a substring.
      -- Hint:
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpi7yyg61s.lua:56: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n - 2 do
        for j = i + 1, n - 1 do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- YOUR CODE HERE
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiycbegcf.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiycbegcf.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        for i = 1, #l do
            for j = i + 1, #l do
                for k = j + 1, #l do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local t = {}
      for _, v in ipairs(l) do
        t[v] = true
      end
      for _, v in ipairs(l) do
        for _, w in ipairs(l) do
          if v ~= w and t[-v-w] then
            return true
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      -- TODO: implement this function
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq6b_m0v.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcq6b_m0v.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n do
            for j = i + 1, n do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        -- TODO: implement this function
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln6m3mtm.lua:24:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpln6m3mtm.lua:24: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      local n = #l
      if n < 3 then
        return false
      end
      for i = 1, n do
        for j = i + 1, n do
          for k = j + 1, n do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
        local n = #l
        if n < 3 then
            return false
        end
        for i = 1, n - 2 do
            for j = i + 1, n - 1 do
                for k = j + 1, n do
                    if l[i] + l[j] + l[k] == 0 then
                        return true
                    end
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- triples_sum_to_zero takes a table of integers as an input.
    -- it returns true if there are three distinct elements in the table that
    -- sum to zero, and false otherwise.
    -- >>> triples_sum_to_zero({1, 3, 5, 0})
    -- false
    -- >>> triples_sum_to_zero({1, 3, -2, 1})
    -- true
    -- >>> triples_sum_to_zero({1, 2, 3, 7})
    -- false
    -- >>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})
    -- true
    -- >>> triples_sum_to_zero({1})
    -- false
    local function triples_sum_to_zero(l)
      for i = 1, #l do
        for j = i + 1, #l do
          for k = j + 1, #l do
            if l[i] + l[j] + l[k] == 0 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = triples_sum_to_zero
        lu.assertEquals(candidate({1, 3, 5, 0}), false)
        lu.assertEquals(candidate({1, 3, 5, -1}), false)
        lu.assertEquals(candidate({1, 3, -2, 1}), true)
        lu.assertEquals(candidate({1, 2, 3, 7}), false)
        lu.assertEquals(candidate({1, 2, 5, 7}), false)
        lu.assertEquals(candidate({2, 4, -5, 3, 9, 7}), true)
        lu.assertEquals(candidate({1}), false)
        lu.assertEquals(candidate({1, 3, 5, -100}), false)
        lu.assertEquals(candidate({100, 3, 5, -100}), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
