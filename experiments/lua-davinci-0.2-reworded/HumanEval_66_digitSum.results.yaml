---
name: HumanEval_66_digitSum
language: lua
results:
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        local n = c:byte()
        if n >= 65 and n <= 90 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:byte() >= 65 and c:byte() <= 90 then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            if s:byte(i) >= 65 and s:byte(i) <= 90 then
                sum = sum + s:byte(i)
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + string.byte(c)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local char = s:sub(i, i)
            if char:match('%u') then
                sum = sum + string.byte(char)
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        if string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then
          sum = sum + string.byte(s, i)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:byte() >= 65 and c:byte() <= 90 then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:upper() == c then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsnl5r6t.lua:37:
    expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpgsnl5r6t.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == c:upper() then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikklh265.lua:37:
    expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpikklh265.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + string.byte(c)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        local n = c:byte()
        if n >= 65 and n <= 90 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + string.byte(c)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        if s:byte(i) >= 65 and s:byte(i) <= 90 then
          sum = sum + s:byte(i)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + string.byte(c)
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local char = s:sub(i, i)
        if char:match('%u') then
          sum = sum + string.byte(char)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + string.byte(c)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:upper() == c then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpub92_g7o.lua:37:
    expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpub92_g7o.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:upper() == c then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1ex5z70.lua:37:
    expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpp1ex5z70.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:find('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        local n = c:byte()
        if n >= 65 and n <= 90 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local char = s:sub(i, i)
            if char:match('%u') then
                sum = sum + string.byte(char)
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- Write a function that takes a string as input and returns
    the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum('')\n--
    0\n-- >>> digitSum('abAB')\n-- 131\n-- >>> digitSum('abcCd')\n-- 67\n-- >>> digitSum('helloE')\n--
    69\n-- >>> digitSum('woArBld')\n-- 131\n-- >>> digitSum('aAaaaXa')\n-- 153\nlocal
    function digitSum(s)\n\tlocal sum = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,
    i)\n\t\tif c:match('%u') then\n\t\t\tsum = sum + c:byte()\n\t\tend\n\tend\n\treturn
    sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'),
    131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'),
    69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'),
    153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You
    arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local char = s:sub(i, i)
        if char:match('%u') then
          sum = sum + string.byte(char)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, string.len(s) do
        local c = string.sub(s, i, i)
        local n = string.byte(c)
        if n >= 65 and n <= 90 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:byte() >= 65 and c:byte() <= 90 then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:upper() == c then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuotsxzy.lua:37:
    expected: 151, actual: 310\nstack traceback:\n\t/tmp/tmpiuotsxzy.lua:37: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:find('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        if s:byte(i) >= 65 and s:byte(i) <= 90 then
          sum = sum + s:byte(i)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        if string.byte(s, i) >= 65 and string.byte(s, i) <= 90 then
          sum = sum + string.byte(s, i)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + string.byte(c)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + string.byte(c)
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        local n = string.byte(c)
        if n >= 65 and n <= 90 then
          sum = sum + n
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
        local sum = 0
        for i = 1, #s do
            local c = s:sub(i, i)
            if c:match('%u') then
                sum = sum + c:byte()
            end
        end
        return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Task
    -- Write a function that takes a string as input and returns the sum of the upper characters only'
    -- ASCII codes.
    -- Examples:
    -- >>> digitSum('')
    -- 0
    -- >>> digitSum('abAB')
    -- 131
    -- >>> digitSum('abcCd')
    -- 67
    -- >>> digitSum('helloE')
    -- 69
    -- >>> digitSum('woArBld')
    -- 131
    -- >>> digitSum('aAaaaXa')
    -- 153
    local function digitSum(s)
      local sum = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c:match('%u') then
          sum = sum + c:byte()
        end
      end
      return sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = digitSum
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('abAB'), 131)
        lu.assertEquals(candidate('abcCd'), 67)
        lu.assertEquals(candidate('helloE'), 69)
        lu.assertEquals(candidate('woArBld'), 131)
        lu.assertEquals(candidate('aAaaaXa'), 153)
        lu.assertEquals(candidate(' How are yOu?'), 151)
        lu.assertEquals(candidate('You arE Very Smart'), 327)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
