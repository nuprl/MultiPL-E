---
name: HumanEval_35_max_element
language: lua
results:
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i=2,#l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local m = l[1]
      for i = 2, #l do
        if l[i] > m then
          m = l[i]
        end
      end
      return m
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for _, v in ipairs(l) do
        if v > max then
          max = v
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for _, v in ipairs(l) do
        if v > max then
          max = v
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n--
    3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal
    function max_element(l)\n\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] >
    max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,
    2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}),
    124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for _, v in ipairs(l) do
        if v > max then
          max = v
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for _, v in ipairs(l) do
        if v > max then
          max = v
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, x in ipairs(l) do
            if x > max then
                max = x
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n--
    3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal
    function max_element(l)\n\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] >
    max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,
    2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}),
    124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _,v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n--
    3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal
    function max_element(l)\n\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] >
    max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,
    2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}),
    124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n--
    3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal
    function max_element(l)\n\tlocal max = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] >
    max then\n\t\t\tmax = l[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,
    2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}),
    124)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
      local max = l[1]
      for i = 2, #l do
        if l[i] > max then
          max = l[i]
        end
      end
      return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for i = 2, #l do
            if l[i] > max then
                max = l[i]
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return maximum element in the table.
    -- >>> max_element({1, 2, 3})
    -- 3
    -- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})
    -- 123
    local function max_element(l)
        local max = l[1]
        for _, v in ipairs(l) do
            if v > max then
                max = v
            end
        end
        return max
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = max_element
        lu.assertEquals(candidate({1, 2, 3}), 3)
        lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
