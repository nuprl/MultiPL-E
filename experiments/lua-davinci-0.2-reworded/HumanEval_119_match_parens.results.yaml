---
name: HumanEval_119_match_parens
language: lua
results:
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv401je_.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbv401je_.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf9z_wc_.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmplf9z_wc_.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local open, close = 0, 0
        for _, s in ipairs(lst) do
            for c in s:gmatch('%(') do open = open + 1 end
            for c in s:gmatch('%)') do close = close + 1 end
        end
        return open == close and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiyiloh9.lua:35:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpmiyiloh9.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_gk4y8.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsa_gk4y8.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kw7_nc5.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5kw7_nc5.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local a, b = lst[1], lst[2]
      local n = #a + #b
      local cnt = 0
      for i = 1, n do
        if i <= #a then
          if a:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
        else
          if b:sub(i - #a, i - #a) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return 'Yes'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_ann18w.lua:45:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0_ann18w.lua:45:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbomgje0z.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbomgje0z.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfsukvxt.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmfsukvxt.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
        local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i - n1)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return (cnt == 0) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5w5gz3h.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpb5w5gz3h.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for c in s:gmatch('.') do
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_pi8z4f.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpq_pi8z4f.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for c in s:gmatch(".") do
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu065m__.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpqu065m__.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function count_parens(s)
        local c = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            c = c + 1
          else
            c = c - 1
          end
        end
        return c
      end
      local c1, c2 = count_parens(lst[1]), count_parens(lst[2])
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 == 0 and c2 ~= 0 then
        return 'No'
      elseif c1 ~= 0 and c2 == 0 then
        return 'No'
      elseif c1 > 0 and c2 > 0 then
        return 'No'
      elseif c1 < 0 and c2 < 0 then
        return 'No'
      else
        return 'Yes'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8ys0kzv.lua:47:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpu8ys0kzv.lua:47:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function count_parens(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
        end
        return cnt
      end
      local a, b = lst[1], lst[2]
      local cnt_a, cnt_b = count_parens(a), count_parens(b)
      if cnt_a == 0 and cnt_b == 0 then
        return 'Yes'
      elseif cnt_a == 0 then
        return 'No'
      elseif cnt_b == 0 then
        return 'No'
      elseif cnt_a * cnt_b < 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8up9o_u9.lua:46:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp8up9o_u9.lua:46:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96wn6jjv.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp96wn6jjv.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for c in str:gmatch('.') do
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkbjqwif.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwkbjqwif.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8u8qsn3.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpj8u8qsn3.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oicbsos.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7oicbsos.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for c in s:gmatch('.') do
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      if is_good(s1) then
        return 'Yes'
      elseif is_good(s2) then
        return 'Yes'
      elseif is_good(s1 .. s2) then
        return 'Yes'
      elseif is_good(s2 .. s1) then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kt0_s96.lua:51:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp3kt0_s96.lua:51:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local i, j = 1, 1
      local c1, c2 = 0, 0
      while i <= n1 and j <= n2 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
        if s2:sub(j, j) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
        if c1 < 0 or c2 < 0 then
          return 'No'
        end
        i = i + 1
        j = j + 1
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      end
      if c1 > 0 then
        while i <= n1 do
          if s1:sub(i, i) == '(' then
            c1 = c1 + 1
          else
            c1 = c1 - 1
          end
          if c1 < 0 then
            return 'No'
          end
          i = i + 1
        end
      else
        while j <= n2 do
          if s2:sub(j, j) == '(' then
            c2 = c2 + 1
          else
            c2 = c2 - 1
          end
          if c2 < 0 then
            return 'No'
          end
          j = j + 1
        end
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      end
      return 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u_5_kqt.lua:73:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1u_5_kqt.lua:73:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p3ixy6q.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1p3ixy6q.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2dli_ae.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpj2dli_ae.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local str1, str2 = lst[1], lst[2]
      return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt42kgjs1.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpt42kgjs1.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7s5if_d.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpp7s5if_d.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local p1, p2 = 0, 0
      for i = 1, n1 do
        if s1:sub(i, i) == '(' then
          p1 = p1 + 1
        else
          p1 = p1 - 1
        end
      end
      for i = 1, n2 do
        if s2:sub(i, i) == '(' then
          p2 = p2 + 1
        else
          p2 = p2 - 1
        end
      end
      if p1 + p2 == 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hziu8az.lua:51:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp7hziu8az.lua:51:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local c = 0
      for i = 1, n do
        local c1 = s1:sub(i, i) == '(' and 1 or -1
        local c2 = s2:sub(i, i) == '(' and 1 or -1
        c = c + c1 + c2
        if c < 0 then return 'No' end
      end
      return c == 0 and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngiewz92.lua:31:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpngiewz92.lua:31:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofmad34s.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpofmad34s.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscw_s38c.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpscw_s38c.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy3zwck7.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpyy3zwck7.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        local s1, s2 = lst[1], lst[2]
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppocvpvsm.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmppocvpvsm.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj04txpyd.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpj04txpyd.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, #s2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 == 0 and c2 > 0 then
        return 'No'
      elseif c1 > 0 and c2 == 0 then
        return 'No'
      elseif c1 > 0 and c2 > 0 then
        return 'Yes'
      elseif c1 < 0 and c2 < 0 then
        return 'No'
      elseif c1 < 0 and c2 == 0 then
        return 'No'
      elseif c1 == 0 and c2 < 0 then
        return 'No'
      elseif c1 < 0 and c2 > 0 then
        return 'Yes'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_4jyy4d.lua:53:
    expected: \"Yes\"\nactual: nil\nstack traceback:\n\t/tmp/tmpr_4jyy4d.lua:53: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s = lst[1] .. lst[2]
      local c = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          c = c + 1
        else
          c = c - 1
        end
        if c < 0 then
          return 'No'
        end
      end
      return c == 0 and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53iamedj.lua:36:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp53iamedj.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        local s1, s2 = lst[1], lst[2]
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwde1avdz.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpwde1avdz.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6n_yg3y.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmph6n_yg3y.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2jygw2u.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpp2jygw2u.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open, close = 0, 0
      for _, s in ipairs(lst) do
        for c in s:gmatch('%(') do open = open + 1 end
        for c in s:gmatch('%)') do close = close + 1 end
      end
      return open == close and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrs8hg1y.lua:35:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpzrs8hg1y.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
        local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return cnt == 0 and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdockm28a.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpdockm28a.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuigx0x_2.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpuigx0x_2.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkwq9ymm.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwkwq9ymm.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy4l7qme.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpiy4l7qme.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0gzwwfi.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpn0gzwwfi.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2rt45ij.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp_2rt45ij.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open = 0
      local close = 0
      for _, s in ipairs(lst) do
        for c in s:gmatch('.') do
          if c == '(' then
            open = open + 1
          else
            close = close + 1
          end
        end
      end
      return (open == close) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr03yke3b.lua:41:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpr03yke3b.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc_0cfzt.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsc_0cfzt.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t5dxrkk.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0t5dxrkk.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic5dfgxc.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpic5dfgxc.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mjgnqff.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp4mjgnqff.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm5gpojr.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprm5gpojr.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local function is_good(s)
            local n = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    n = n + 1
                else
                    n = n - 1
                end
                if n < 0 then
                    return false
                end
            end
            return n == 0
        end
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcurmx4h.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpjcurmx4h.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local str1, str2 = lst[1], lst[2]
      return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqak4usyb.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpqak4usyb.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
        local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return cnt == 0 and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbp3w_f7.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptbp3w_f7.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7pf3xjd.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpd7pf3xjd.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2a8sh_j.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmps2a8sh_j.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function count_parens(s)
        local c = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            c = c + 1
          else
            c = c - 1
          end
        end
        return c
      end
      if count_parens(lst[1]) + count_parens(lst[2]) == 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel0t50m0.lua:45:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpel0t50m0.lua:45:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvle28z1_.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpvle28z1_.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
        local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i - n1)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return (cnt == 0) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0wva_l_4.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0wva_l_4.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open = 0
      local close = 0
      for _, v in ipairs(lst) do
        for _, c in ipairs(v:split('')) do
          if c == '(' then
            open = open + 1
          else
            close = close + 1
          end
        end
      end
      return open == close and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbg1e_sh.lua:18:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpfbg1e_sh.lua:18:
    in local 'candidate'\n\t/tmp/tmpfbg1e_sh.lua:32: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0b9sagc.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpd0b9sagc.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local left, right = 0, 0
        for _, v in ipairs(lst) do
            for _, c in ipairs(v) do
                if c == '(' then
                    left = left + 1
                else
                    right = right + 1
                end
            end
        end
        return left == right and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpif2iiq38.lua:32:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpif2iiq38.lua:32:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgv6i75n.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmphgv6i75n.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwk58ywn.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpgwk58ywn.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv207y3p.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbv207y3p.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open = 0
      local close = 0
      for i = 1, #lst[1] do
        if lst[1]:sub(i, i) == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
      for i = 1, #lst[2] do
        if lst[2]:sub(i, i) == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
      if open == close then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uybsyql.lua:50:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp9uybsyql.lua:50:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp550ylqwz.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp550ylqwz.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqqd3942.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpeqqd3942.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01imt6bc.lua:35:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp01imt6bc.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50fvkp60.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp50fvkp60.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function check(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return check(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ce7jxzo.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8ce7jxzo.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dusvwev.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8dusvwev.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local count = 0
            for c in s:gmatch('.') do
                if c == '(' then
                    count = count + 1
                else
                    count = count - 1
                end
                if count < 0 then
                    return false
                end
            end
            return count == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp467hp1z1.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp467hp1z1.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx9pc2vz.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsx9pc2vz.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprb2y_gll.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprb2y_gll.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzbdbd27.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwzbdbd27.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a5h6nih.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1a5h6nih.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsfd3uo4.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpfsfd3uo4.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local count = 0
            for c in s:gmatch('.') do
                if c == '(' then
                    count = count + 1
                else
                    count = count - 1
                end
                if count < 0 then
                    return false
                end
            end
            return count == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavjehl3b.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpavjehl3b.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local count = 0
            for c in s:gmatch('.') do
                if c == '(' then
                    count = count + 1
                else
                    count = count - 1
                end
                if count < 0 then
                    return false
                end
            end
            return count == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kdvt0t4.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp3kdvt0t4.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeve5wqkj.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpeve5wqkj.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3m6logf.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpu3m6logf.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyaq9iwum.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpyaq9iwum.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rn2wrta.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5rn2wrta.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4ausg5g.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpl4ausg5g.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, #s2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 < 0 or c2 < 0 then
        return 'No'
      end
      if c1 % 2 == 0 then
        return 'Yes'
      end
      if c2 % 2 == 0 then
        return 'Yes'
      end
      return 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i37v_0y.lua:46:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8i37v_0y.lua:46:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = s1:len(), s2:len()
      local c1, c2 = 0, 0
      for i = 1, n1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, n2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 == 0 and c2 ~= 0 then
        return 'No'
      elseif c1 ~= 0 and c2 == 0 then
        return 'No'
      elseif c1 < 0 and c2 > 0 then
        return 'Yes'
      elseif c1 > 0 and c2 < 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov4zfb61.lua:52:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpov4zfb61.lua:52:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgo9z278.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpcgo9z278.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function check(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return check(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzyei6hr.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpzzyei6hr.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local n1, n2 = #s1, #s2
        local n = n1 + n2
        local cnt = 0
        for i = 1, n do
            if i <= n1 then
                if s1:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
            else
                if s2:sub(i - n1, i - n1) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
            end
            if cnt < 0 then
                return 'No'
            end
        end
        return 'Yes'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ydkw5l.lua:46:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpt4ydkw5l.lua:46:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkjlud1m.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpdkjlud1m.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2giz6b_z.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp2giz6b_z.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrfeh6h0.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmrfeh6h0.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf9bupwd.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpaf9bupwd.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, #s2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 < 0 and c2 < 0 then
        return 'No'
      elseif c1 < 0 and c2 > 0 then
        return 'Yes'
      elseif c1 > 0 and c2 < 0 then
        return 'Yes'
      elseif c1 > 0 and c2 > 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcubgl74.lua:49:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpxcubgl74.lua:49:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv0ik7qh.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpgv0ik7qh.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function check(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return check(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw14_gk4.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkw14_gk4.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4u3bs7c.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp_4u3bs7c.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vwa__kg.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5vwa__kg.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open, close = 0, 0
      for i = 1, #lst[1] do
        if lst[1]:sub(i, i) == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
      for i = 1, #lst[2] do
        if lst[2]:sub(i, i) == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
      if open == close then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd56rpxh7.lua:49:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpd56rpxh7.lua:49:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yekidal.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7yekidal.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5hzpvbg.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpr5hzpvbg.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjihtyu94.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpjihtyu94.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local str1, str2 = lst[1], lst[2]
      return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsa50izb.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpvsa50izb.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kau7yaq.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp8kau7yaq.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8mn0ctk.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpu8mn0ctk.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local c1, c2 = 0, 0
        for i = 1, #s1 do
            if s1:sub(i, i) == '(' then
                c1 = c1 + 1
            else
                c1 = c1 - 1
            end
        end
        for i = 1, #s2 do
            if s2:sub(i, i) == '(' then
                c2 = c2 + 1
            else
                c2 = c2 - 1
            end
        end
        if c1 == 0 and c2 == 0 then
            return 'Yes'
        elseif c1 == 0 and c2 < 0 then
            return 'Yes'
        elseif c1 < 0 and c2 == 0 then
            return 'Yes'
        elseif c1 < 0 and c2 < 0 then
            return 'Yes'
        else
            return 'No'
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63ygw8nf.lua:47:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp63ygw8nf.lua:47:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, #s2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 == 0 and c2 < 0 then
        return 'Yes'
      elseif c1 < 0 and c2 == 0 then
        return 'Yes'
      elseif c1 < 0 and c2 < 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3scmsrp.lua:47:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpt3scmsrp.lua:47:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open, close = 0, 0
      for _, s in ipairs(lst) do
        for c in s:gmatch('%(') do open = open + 1 end
        for c in s:gmatch('%)') do close = close + 1 end
      end
      return open == close and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqz3u439.lua:35:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpoqz3u439.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyeoc4_vw.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpyeoc4_vw.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts1q9_pv.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpts1q9_pv.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9n0uv28.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpz9n0uv28.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3oz8913.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpf3oz8913.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph03_ly86.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmph03_ly86.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpga6qd42q.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpga6qd42q.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y2fg7yg.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp3y2fg7yg.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwv9fny3.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpnwv9fny3.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngaomkch.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpngaomkch.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmgjdqdp.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsmgjdqdp.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt_ti4tx.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpnt_ti4tx.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local str1, str2 = lst[1], lst[2]
      return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprd9kehgu.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmprd9kehgu.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open, close = 0, 0
      for i = 1, #lst[1] do
        if lst[1]:sub(i, i) == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
      for i = 1, #lst[2] do
        if lst[2]:sub(i, i) == '(' then
          open = open + 1
        else
          close = close + 1
        end
      end
      if open == close then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulxce101.lua:49:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpulxce101.lua:49:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsbnno1v.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpdsbnno1v.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(str)
            local cnt = 0
            for i = 1, #str do
                if str:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        local s1, s2 = lst[1], lst[2]
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq5ti0fw.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpiq5ti0fw.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e3a2gc0.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7e3a2gc0.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local s = s1 .. s2
      local cnt = 0
      for i = 1, #s do
        if s:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return 'Yes'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcodkkcm.lua:37:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpdcodkkcm.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for c in s:gmatch('.') do
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return (is_good(s1 .. s2) or is_good(s2 .. s1)) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for _, c in ipairs(str) do
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qqlmuf4.lua:36:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp0qqlmuf4.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgz7v8769.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpgz7v8769.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc3wfli_.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprc3wfli_.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local c = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            c = c + 1
          else
            c = c - 1
          end
          if c < 0 then
            return false
          end
        end
        return c == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ol2auq9.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp7ol2auq9.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdi6r1a2s.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpdi6r1a2s.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5mxbgroz.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5mxbgroz.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj8o0oqx.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkj8o0oqx.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8tu0nmo.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpq8tu0nmo.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr1zsq66.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkr1zsq66.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          local c = s:sub(i, i)
          if c == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjerwo6_w.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpjerwo6_w.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn_odk_g.lua:35:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkn_odk_g.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        local s1, s2 = lst[1], lst[2]
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpij8igsn4.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpij8igsn4.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qultr5k.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0qultr5k.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4svamlc.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpp4svamlc.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ux9sj5i.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0ux9sj5i.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = s1:len(), s2:len()
      local n = n1 + n2
      local i, j = 1, 1
      local cnt = 0
      while i <= n1 and j <= n2 do
        if s1:sub(i, i) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if s2:sub(j, j) == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
        i = i + 1
        j = j + 1
      end
      if cnt == 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vdfdq04.lua:49:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp3vdfdq04.lua:49:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      if is_good(lst[1]) and is_good(lst[2]) then
        return 'Yes'
      end
      if is_good(lst[1] .. lst[2]) then
        return 'Yes'
      end
      if is_good(lst[2] .. lst[1]) then
        return 'Yes'
      end
      return 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn3h3_cg.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpkn3h3_cg.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          local c = s:sub(i, i)
          if c == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9981diwp.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp9981diwp.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i3ktn_q.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp1i3ktn_q.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp5055yz.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpzp5055yz.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczfa6352.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpczfa6352.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local open = 0
        local close = 0
        for i = 1, #lst[1] do
            if lst[1]:sub(i, i) == '(' then
                open = open + 1
            else
                close = close + 1
            end
        end
        for i = 1, #lst[2] do
            if lst[2]:sub(i, i) == '(' then
                open = open + 1
            else
                close = close + 1
            end
        end
        if open == close then
            return 'Yes'
        else
            return 'No'
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u4alfhv.lua:50:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp1u4alfhv.lua:50:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvg8p9iw.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmvg8p9iw.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7b4ceji.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpu7b4ceji.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxwmq8zg.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpcxwmq8zg.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9s5mv_m.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpb9s5mv_m.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkm3z1bv.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpfkm3z1bv.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local s = s1 .. s2
      local cnt = 0
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return cnt == 0 and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcsb6yma.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptcsb6yma.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(str)
            local count = 0
            for i = 1, #str do
                local c = str:sub(i, i)
                if c == '(' then
                    count = count + 1
                else
                    count = count - 1
                end
                if count < 0 then
                    return false
                end
            end
            return count == 0
        end
        local str1, str2 = lst[1], lst[2]
        return is_good(str1 .. str2) or is_good(str2 .. str1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi6y_x3f.lua:37:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpqi6y_x3f.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphof7u5b2.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphof7u5b2.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local s = s1 .. s2
        local cnt = 0
        for i = 1, #s do
            if s:sub(i, i) == '(' then
                cnt = cnt + 1
            else
                cnt = cnt - 1
            end
            if cnt < 0 then
                return 'No'
            end
        end
        return 'Yes'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03gbjb93.lua:37:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp03gbjb93.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q7n7tu6.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp8q7n7tu6.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo8iz50h.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmppo8iz50h.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local str1, str2 = lst[1], lst[2]
      if is_good(str1) and is_good(str2) then
        return 'Yes'
      end
      if is_good(str1 .. str2) then
        return 'Yes'
      end
      if is_good(str2 .. str1) then
        return 'Yes'
      end
      return 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        local s1, s2 = lst[1], lst[2]
        return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2o6f8en.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpm2o6f8en.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ljjuk4s.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp9ljjuk4s.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local function is_good(s)
            local cnt = 0
            for i = 1, #s do
                if s:sub(i, i) == '(' then
                    cnt = cnt + 1
                else
                    cnt = cnt - 1
                end
                if cnt < 0 then
                    return false
                end
            end
            return cnt == 0
        end
        return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk8msg8g.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmptk8msg8g.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function check(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return check(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5whm3488.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5whm3488.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxv2olyed.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpxv2olyed.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jfwj781.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp1jfwj781.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local n1, n2 = #s1, #s2
      local n = n1 + n2
      local cnt = 0
      for i = 1, n do
        local c = (i <= n1) and s1:sub(i, i) or s2:sub(i - n1, i - n1)
        if c == '(' then
          cnt = cnt + 1
        else
          cnt = cnt - 1
        end
        if cnt < 0 then
          return 'No'
        end
      end
      return (cnt == 0) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynb8nuv3.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpynb8nuv3.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp318arop2.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp318arop2.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local s1, s2 = lst[1], lst[2]
        local n1, n2 = #s1, #s2
        local n = n1 + n2
        local cnt = 0
        for i = 1, n do
            local c = i <= n1 and s1:sub(i, i) or s2:sub(i - n1, i - n1)
            if c == '(' then
                cnt = cnt + 1
            else
                cnt = cnt - 1
            end
            if cnt < 0 then
                return 'No'
            end
        end
        return cnt == 0 and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vfjb73r.lua:39:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0vfjb73r.lua:39:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7nfj8rx.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmp_7nfj8rx.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0_t4fg3.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpq0_t4fg3.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvcd9yni.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpwvcd9yni.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, #s2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 > 0 and c2 < 0 and c1 + c2 == 0 then
        return 'Yes'
      elseif c1 < 0 and c2 > 0 and c1 + c2 == 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxg3gb7b.lua:54:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpaxg3gb7b.lua:54:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function check(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return check(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgvs72xc.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprgvs72xc.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
        local open, close = 0, 0
        for _, s in ipairs(lst) do
            for c in s:gmatch('%(') do open = open + 1 end
            for c in s:gmatch('%)') do close = close + 1 end
        end
        return (open == close) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn15hrtle.lua:35:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmpn15hrtle.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e_yolxb.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp5e_yolxb.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppj7nt8m.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpppj7nt8m.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3dqil5c.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpm3dqil5c.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe27g6q3t.lua:35:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpe27g6q3t.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouuk2kgv.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpouuk2kgv.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return (is_good(lst[1]) and is_good(lst[2])) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp437iph60.lua:35:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp437iph60.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open, close = 0, 0
      for _, s in ipairs(lst) do
        for c in s:gmatch('%(') do open = open + 1 end
        for c in s:gmatch('%)') do close = close + 1 end
      end
      return open == close and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hpsd0a0.lua:35:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmp1hpsd0a0.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function count_parens(s)
        local c = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            c = c + 1
          else
            c = c - 1
          end
        end
        return c
      end
      local c1, c2 = count_parens(lst[1]), count_parens(lst[2])
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 == 0 and c2 < 0 then
        return 'Yes'
      elseif c1 > 0 and c2 == 0 then
        return 'Yes'
      elseif c1 > 0 and c2 < 0 and c1 == -c2 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbto5giz.lua:46:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsbto5giz.lua:46:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62eok56t.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp62eok56t.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bjp1ut5.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp6bjp1ut5.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local open, close = 0, 0
      for _, v in ipairs(lst) do
        for c in v:gmatch('%(') do open = open + 1 end
        for c in v:gmatch('%)') do close = close + 1 end
      end
      return open == close and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgeeaclk.lua:35:
    expected: \"No\"\nactual: \"Yes\"\nstack traceback:\n\t/tmp/tmppgeeaclk.lua:35:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local count = 0
        for i = 1, #str do
          local c = str:sub(i, i)
          if c == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplavrbrux.lua:37:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmplavrbrux.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      local s1, s2 = lst[1], lst[2]
      return is_good(s1 .. s2) or is_good(s2 .. s1) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirza7aeu.lua:36:
    expected: \"Yes\"\nactual: true\nstack traceback:\n\t/tmp/tmpirza7aeu.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local c1, c2 = 0, 0
      for i = 1, #s1 do
        if s1:sub(i, i) == '(' then
          c1 = c1 + 1
        else
          c1 = c1 - 1
        end
      end
      for i = 1, #s2 do
        if s2:sub(i, i) == '(' then
          c2 = c2 + 1
        else
          c2 = c2 - 1
        end
      end
      if c1 == 0 and c2 == 0 then
        return 'Yes'
      elseif c1 == 0 and c2 < 0 then
        return 'Yes'
      elseif c1 < 0 and c2 == 0 then
        return 'Yes'
      elseif c1 < 0 and c2 < 0 then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbofo2fv.lua:47:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpsbofo2fv.lua:47:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function check(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return check(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfzm0n65.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmfzm0n65.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbt_tmwh.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprbt_tmwh.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfmq3f0f.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmppfmq3f0f.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm1aiy38.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpbm1aiy38.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprk9oeend.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmprk9oeend.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2adrq58.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpe2adrq58.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenpod0ep.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpenpod0ep.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local s1, s2 = lst[1], lst[2]
      local function is_good(s)
        local count = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            count = count + 1
          else
            count = count - 1
          end
          if count < 0 then
            return false
          end
        end
        return count == 0
      end
      if is_good(s1) and is_good(s2) then
        return 'Yes'
      end
      if is_good(s1 .. s2) then
        return 'Yes'
      end
      if is_good(s2 .. s1) then
        return 'Yes'
      end
      return 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_uwbjw9.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpb_uwbjw9.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(s)
        local cnt = 0
        for i = 1, #s do
          if s:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgcmn02i.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmpmgcmn02i.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local function is_good(str)
        local cnt = 0
        for i = 1, #str do
          if str:sub(i, i) == '(' then
            cnt = cnt + 1
          else
            cnt = cnt - 1
          end
          if cnt < 0 then
            return false
          end
        end
        return cnt == 0
      end
      return is_good(lst[1] .. lst[2]) and 'Yes' or 'No'
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe7xwo7j.lua:38:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmphe7xwo7j.lua:38:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You are given a table of two strings, both strings consist of open
    -- parentheses '(' or close parentheses ')' only.
    -- Your job is to check if it is possible to concatenate the two strings in
    -- some order, that the resulting string will be good.
    -- A string S is considered to be good if and only if all parentheses in S
    -- are balanced. For example: the string '(())()' is good, while the string
    -- '())' is not.
    -- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    -- Examples:
    -- >>> match_parens({'()(', ')'})
    -- 'Yes'
    -- >>> match_parens({')', ')'})
    -- 'No'
    local function match_parens(lst)
      local l, r = lst[1], lst[2]
      local lc, rc = 0, 0
      for i = 1, #l do
        if l:sub(i, i) == '(' then
          lc = lc + 1
        else
          lc = lc - 1
        end
      end
      for i = 1, #r do
        if r:sub(i, i) == '(' then
          rc = rc + 1
        else
          rc = rc - 1
        end
      end
      if lc == rc then
        return 'Yes'
      else
        return 'No'
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = match_parens
        lu.assertEquals(candidate({'()(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', ')'}), 'No')
        lu.assertEquals(candidate({'(()(())', '())())'}), 'No')
        lu.assertEquals(candidate({')())', '(()()('}), 'Yes')
        lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')
        lu.assertEquals(candidate({'()', '())'}), 'No')
        lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')
        lu.assertEquals(candidate({'((((', '((())'}), 'No')
        lu.assertEquals(candidate({')(()', '(()('}), 'No')
        lu.assertEquals(candidate({')(', ')('}), 'No')
        lu.assertEquals(candidate({'(', ')'}), 'Yes')
        lu.assertEquals(candidate({')', '('}), 'Yes')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0et1y7ge.lua:41:
    expected: \"Yes\"\nactual: \"No\"\nstack traceback:\n\t/tmp/tmp0et1y7ge.lua:41:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
