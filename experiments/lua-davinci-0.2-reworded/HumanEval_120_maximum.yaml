---
name: HumanEval_120_maximum
language: lua
prompt: "-- Given a table arr of integers and a positive integer k, return a sorted
  table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- >>>
  maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4, -4, 4},
  2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)\n-- {2}\n--
  Note:\n-- 1. The length of the table will be in the range of [1, 1000].\n-- 2. The
  elements in the table will be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal
  function maximum(arr, k)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = maximum
      lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})
      lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})
      lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})
      lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})
      lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})
      lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})
      lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})
      lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})
      lu.assertEquals(candidate({4, -4}, 2), {-4, 4})
      lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})
      lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local t = {}
      for i = 1, k do
          local m = math.mininteger
          local idx = -1
          for j = 1, #arr do
              if arr[j] > m then
                  m = arr[j]
                  idx = j
              end
          end
          if idx == -1 then break end
          t[i] = m
          table.remove(arr, idx)
      end
      return t
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, start, stop)
          local pivot = arr[stop]
          local i = start - 1
          for j = start, stop - 1 do
              if arr[j] < pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[i + 1], arr[stop] = arr[stop], arr[i + 1]
          return i + 1
      end
      local function quick_select(arr, start, stop, k)
          if start >= stop then
              return
          end
          local pivot = partition(arr, start, stop)
          if pivot == k then
              return
          elseif pivot > k then
              quick_select(arr, start, pivot - 1, k)
          else
              quick_select(arr, pivot + 1, stop, k)
          end
      end
      quick_select(arr, 1, #arr, #arr - k + 1)
      local res = {}
      for i = 1, k do
          res[i] = arr[#arr - k + i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, #arr do
          if arr[i] > t[1] then
              t[1] = arr[i]
              table.sort(t)
          end
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local max_idx = -1
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_idx = j
              end
          end
          t[i] = max
          table.remove(arr, max_idx)
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local pivot = partition(arr, left, right)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, left, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, right, k)
          end
      end
      local function sort(arr, k)
          local n = #arr
          for i = 1, k do
              local min = i
              for j = i + 1, n do
                  if arr[j] < arr[min] then
                      min = j
                  end
              end
              arr[i], arr[min] = arr[min], arr[i]
          end
      end
      local n = #arr
      if k == n then
          sort(arr, k)
      else
          quickSelect(arr, 1, n, n - k + 1)
          sort(arr, k)
      end
      return arr
  end
- |2-
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local max_index = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_index = j
              end
          end
          res[i] = max
          table.remove(arr, max_index)
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if k == n then
          return arr
      end
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] < pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quick_select(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local i = partition(arr, l, r)
          if i == k then
              return arr[i]
          elseif i < k then
              return quick_select(arr, i + 1, r, k)
          else
              return quick_select(arr, l, i - 1, k)
          end
      end
      quick_select(arr, 1, n, n - k + 1)
      local res = {}
      for i = 1, k do
          res[i] = arr[n - k + i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local pivot = partition(arr, left, right)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, left, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, right, k)
          end
      end
      local function sort(arr, k)
          local ret = {}
          for i = 1, k do
              ret[i] = quickSelect(arr, 1, #arr, i)
          end
          return ret
      end
      return sort(arr, k)
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local m = partition(arr, l, r)
              quick_sort(arr, l, m - 1)
              quick_sort(arr, m + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          return arr
      end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local pivot = partition(arr, left, right)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, left, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, right, k)
          end
      end
      quickSelect(arr, 1, len, k)
      table.sort(arr, 1, k)
      return arr
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return
          end
          local p = partition(arr, l, r)
          if p == k then
              return
          elseif p < k then
              quickSelect(arr, p + 1, r, k)
          else
              quickSelect(arr, l, p - 1, k)
          end
      end
      quickSelect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local heap = {}
      local heap_size = 0
      local function heap_push(x)
          heap_size = heap_size + 1
          heap[heap_size] = x
          local i = heap_size
          while i > 1 do
              local j = math.floor(i / 2)
              if heap[j] < heap[i] then
                  heap[i], heap[j] = heap[j], heap[i]
                  i = j
              else
                  break
              end
          end
      end
      local function heap_pop()
          local x = heap[1]
          heap[1] = heap[heap_size]
          heap_size = heap_size - 1
          local i = 1
          while i * 2 <= heap_size do
              local j = i * 2
              if j + 1 <= heap_size and heap[j + 1] > heap[j] then
                  j = j + 1
              end
              if heap[i] < heap[j] then
                  heap[i], heap[j] = heap[j], heap[i]
                  i = j
              else
                  break
              end
          end
          return x
      end
      for i = 1, #arr do
          if heap_size < k then
              heap_push(arr[i])
          elseif arr[i] > heap[1] then
              heap_pop()
              heap_push(arr[i])
          end
      end
      local ans = {}
      for i = 1, k do
          ans[i] = heap_pop()
      end
      return ans
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local m = partition(arr, l, r)
              quick_sort(arr, l, m - 1)
              quick_sort(arr, m + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local index = 0
          for j = 1, len do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          res[i] = max
          arr[index] = -math.huge
      end
      return res
  end
- |2-
      local function partition(arr, lo, hi)
          local pivot = arr[hi]
          local i = lo
          for j = lo, hi - 1 do
              if arr[j] >= pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[hi] = arr[hi], arr[i]
          return i
      end
      local function quickselect(arr, lo, hi, k)
          if lo >= hi then
              return
          end
          local p = partition(arr, lo, hi)
          if p == k then
              return
          elseif p < k then
              quickselect(arr, p + 1, hi, k)
          else
              quickselect(arr, lo, p - 1, k)
          end
      end
      quickselect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      table.sort(heap)
      for i = k + 1, len do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              table.sort(heap)
          end
      end
      return heap
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, l, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, r, k)
          end
      end
      local function quickSort(arr, l, r)
          if l < r then
              local pivot = partition(arr, l, r)
              quickSort(arr, l, pivot - 1)
              quickSort(arr, pivot + 1, r)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local m = -math.huge
          local idx = 0
          for j = 1, #arr do
              if arr[j] > m then
                  m = arr[j]
                  idx = j
              end
          end
          t[i] = m
          table.remove(arr, idx)
      end
      return t
  end
- |2-
      local n = #arr
      if k == n then
          table.sort(arr)
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      table.sort(heap)
      for i = k + 1, n do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              table.sort(heap)
          end
      end
      return heap
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k > len then k = len end
      local res = {}
      for i = 1, k do
          local max = arr[i]
          local idx = i
          for j = i + 1, len do
              if arr[j] > max then
                  max = arr[j]
                  idx = j
              end
          end
          res[i] = max
          arr[idx] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left + 1
          local j = right
          while true do
              while i <= j and arr[i] >= pivot do
                  i = i + 1
              end
              while i <= j and arr[j] <= pivot do
                  j = j - 1
              end
              if i >= j then
                  break
              end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[left], arr[j] = arr[j], arr[left]
          return j
      end
      local function quick_select(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local pivot = partition(arr, left, right)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quick_select(arr, left, pivot - 1, k)
          else
              return quick_select(arr, pivot + 1, right, k)
          end
      end
      local function sort(arr, left, right)
          if left >= right then
              return
          end
          local pivot = partition(arr, left, right)
          sort(arr, left, pivot - 1)
          sort(arr, pivot + 1, right)
      end
      local n = #arr
      quick_select(arr, 1, n, n - k + 1)
      sort(arr, 1, n - k)
      return arr
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local mid = partition(arr, l, r)
              quick_sort(arr, l, mid - 1)
              quick_sort(arr, mid + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quick_select(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quick_select(arr, l, pivot - 1, k)
          else
              return quick_select(arr, pivot + 1, r, k)
          end
      end
      local function quick_select_k(arr, k)
          local res = {}
          for i = 1, k do
              res[i] = quick_select(arr, 1, #arr, i)
          end
          return res
      end
      return quick_select_k(arr, k)
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = arr[i]
          local max_index = i
          for j = i + 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_index = j
              end
          end
          arr[max_index] = arr[i]
          arr[i] = max
          t[i] = max
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local mid = partition(arr, left, right)
              quick_sort(arr, left, mid - 1)
              quick_sort(arr, mid + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local ret = {}
      for i = 1, k do
          local max = -1000
          local index = 1
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          ret[i] = max
          table.remove(arr, index)
      end
      return ret
  end
- |2-
      local len = #arr
      local t = {}
      for i = 1, len do
          t[i] = arr[i]
      end
      table.sort(t)
      local res = {}
      for i = 1, k do
          res[i] = t[len - i + 1]
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l - 1
          for j = l, r - 1 do
              if arr[j] >= pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[i + 1], arr[r] = arr[r], arr[i + 1]
          return i + 1
      end
      local function quickselect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local p = partition(arr, l, r)
          if p == k then
              return arr[p]
          elseif p < k then
              return quickselect(arr, p + 1, r, k)
          else
              return quickselect(arr, l, p - 1, k)
          end
      end
      quickselect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k == len then return arr end
      local max = {}
      for i = 1, k do
          max[i] = arr[i]
      end
      for i = k + 1, len do
          local j = 1
          while j <= k and max[j] > arr[i] do
              j = j + 1
          end
          if j <= k then
              for m = k, j + 1, -1 do
                  max[m] = max[m - 1]
              end
              max[j] = arr[i]
          end
      end
      return max
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local idx = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  idx = j
              end
          end
          res[i] = max
          table.remove(arr, idx)
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k >= n then return arr end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, n)
      local res = {}
      for i = n, n - k + 1, -1 do
          table.insert(res, arr[i])
      end
      return res
  end
- |2-
      table.sort(arr, function(a, b) return a > b end)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local p = partition(arr, l, r)
          if p == k then
              return arr[p]
          elseif p > k then
              return quickSelect(arr, l, p - 1, k)
          else
              return quickSelect(arr, p + 1, r, k)
          end
      end
      local function quickSort(arr, l, r)
          if l < r then
              local p = partition(arr, l, r)
              quickSort(arr, l, p - 1)
              quickSort(arr, p + 1, r)
          end
      end
      local n = #arr
      quickSort(arr, 1, n)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local len = #arr
      if k > len then
          k = len
      end
      local t = {}
      for i = 1, len do
          local v = arr[i]
          local j = #t
          while j > 0 and v > t[j] do
              j = j - 1
          end
          if j < k then
              table.insert(t, j + 1, v)
              if #t > k then
                  table.remove(t)
              end
          end
      end
      return t
  end
- |2-
      local n = #arr
      if k == n then
          return arr
      end
      local function partition(l, r)
          local pivot = arr[l]
          local i = l
          for j = l + 1, r do
              if arr[j] > pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[l], arr[i] = arr[i], arr[l]
          return i
      end
      local l, r = 1, n
      while l <= r do
          local m = partition(l, r)
          if m == k then
              break
          elseif m < k then
              l = m + 1
          else
              r = m - 1
          end
      end
      return arr
  end
- |2-
      local n = #arr
      local function partition(arr, left, right)
          local pivot = arr[right]
          local i = left - 1
          for j = left, right - 1 do
              if arr[j] >= pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[i + 1], arr[right] = arr[right], arr[i + 1]
          return i + 1
      end
      local function quickselect(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local pivot = partition(arr, left, right)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickselect(arr, left, pivot - 1, k)
          else
              return quickselect(arr, pivot + 1, right, k)
          end
      end
      quickselect(arr, 1, n, k)
      return arr
  end
- |2-
      local n = #arr
      if k == n then
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 1, -1 do
          heapify(heap, i, k)
      end
      for i = k + 1, n do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              heapify(heap, 1, k)
          end
      end
      return heap
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
    local n = #arr
    local t = {}
    for i = 1, n do
      local x = arr[i]
      local j = #t
      while j > 0 and x > t[j] do
        j = j - 1
      end
      if j < k then
        table.insert(t, j + 1, x)
        if #t > k then
          table.remove(t)
        end
      end
    end
    return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l + 1
          local j = r
          while true do
              while i <= r and arr[i] >= pivot do
                  i = i + 1
              end
              while j >= l + 1 and arr[j] <= pivot do
                  j = j - 1
              end
              if i >= j then
                  break
              end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[l], arr[j] = arr[j], arr[l]
          return j
      end
      local function quickSelect(arr, l, r, k)
          if l >= r then
              return
          end
          local j = partition(arr, l, r)
          if j == k then
              return
          elseif j > k then
              quickSelect(arr, l, j - 1, k)
          else
              quickSelect(arr, j + 1, r, k)
          end
      end
      quickSelect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local function partition(arr, l, r)
          local i, j = l, r
          local pivot = arr[l]
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_select(arr, l, r, k)
          local i = partition(arr, l, r)
          if i == k then
              return
          elseif i < k then
              quick_select(arr, i + 1, r, k)
          else
              quick_select(arr, l, i - 1, k)
          end
      end
      quick_select(arr, 1, #arr, #arr - k + 1)
      local res = {}
      for i = #arr - k + 1, #arr do
          res[#res + 1] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] < pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return
          end
          local p = partition(arr, l, r)
          if p == k then
              return
          elseif p < k then
              quickSelect(arr, p + 1, r, k)
          else
              quickSelect(arr, l, p - 1, k)
          end
      end
      quickSelect(arr, 1, #arr, #arr - k + 1)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          local j = 1
          while j <= k and res[j] < arr[i] do
              j = j + 1
          end
          if j <= k then
              table.insert(res, j, arr[i])
              table.remove(res)
          end
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, left, right, k)
          if left == right then return arr[left] end
          local pivot = partition(arr, left, right)
          if pivot == k then return arr[pivot] end
          if pivot > k then
              return quickSelect(arr, left, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, right, k)
          end
      end
      local res = {}
      for i = 1, k do
          res[i] = quickSelect(arr, 1, len, i)
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k >= len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          for j = 1, k do
              if arr[i] > res[j] then
                  table.remove(res, j)
                  table.insert(res, j, arr[i])
                  break
              end
          end
      end
      return res
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k >= n then return arr end
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickselect(arr, l, r, k)
          if l == r then return arr[l] end
          local i = partition(arr, l, r)
          if i == k then return arr[i] end
          if i > k then
              return quickselect(arr, l, i - 1, k)
          else
              return quickselect(arr, i + 1, r, k)
          end
      end
      local pivot = quickselect(arr, 1, n, k)
      local res = {}
      for i = 1, n do
          if arr[i] >= pivot then
              res[#res + 1] = arr[i]
          end
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function maxHeapify(arr, i, n)
          local l = i * 2
          local r = i * 2 + 1
          local largest = i
          if l <= n and arr[l] > arr[largest] then
              largest = l
          end
          if r <= n and arr[r] > arr[largest] then
              largest = r
          end
          if largest ~= i then
              arr[i], arr[largest] = arr[largest], arr[i]
              maxHeapify(arr, largest, n)
          end
      end
      local function buildMaxHeap(arr, n)
          for i = math.floor(n / 2), 1, -1 do
              maxHeapify(arr, i, n)
          end
      end
      local function heapSort(arr, n)
          buildMaxHeap(arr, n)
          for i = n, 2, -1 do
              arr[1], arr[i] = arr[i], arr[1]
              maxHeapify(arr, 1, i - 1)
          end
      end
      heapSort(arr, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if k == n then
          table.sort(arr)
          return arr
      end
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, n do
          local j = 1
          while j <= k and arr[i] > t[j] do
              j = j + 1
          end
          if j <= k then
              for l = k, j + 1, -1 do
                  t[l] = t[l - 1]
              end
              t[j] = arr[i]
          end
      end
      return t
  end
- |2-
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, #arr do
          if arr[i] > t[1] then
              t[1] = arr[i]
              table.sort(t)
          end
      end
      return t
  end
- |2-
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 2, -1 do
          heap[i], heap[1] = heap[1], heap[i]
          local j = 1
          while j * 2 <= i - 1 do
              local m = j * 2
              if m + 1 <= i - 1 and heap[m + 1] < heap[m] then
                  m = m + 1
              end
              if heap[j] <= heap[m] then
                  break
              end
              heap[j], heap[m] = heap[m], heap[j]
              j = m
          end
      end
      for i = k + 1, #arr do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              local j = 1
              while j * 2 <= k do
                  local m = j * 2
                  if m + 1 <= k and heap[m + 1] < heap[m] then
                      m = m + 1
                  end
                  if heap[j] <= heap[m] then
                      break
                  end
                  heap[j], heap[m] = heap[m], heap[j]
                  j = m
              end
          end
      end
      for i = k, 2, -1 do
          heap[i], heap[1] = heap[1], heap[i]
          local j = 1
          while j * 2 <= i - 1 do
              local m = j * 2
              if m + 1 <= i - 1 and heap[m + 1] < heap[m] then
                  m = m + 1
              end
              if heap[j] <= heap[m] then
                  break
              end
              heap[j], heap[m] = heap[m], heap[j]
              j = m
          end
      end
      return heap
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          return arr
      end
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      local heap = Heap.new(result, function(a, b) return a > b end)
      for i = k + 1, len do
          if arr[i] > heap:peek() then
              heap:pop()
              heap:push(arr[i])
          end
      end
      return heap:to_table()
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local index = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          table.insert(t, max)
          table.remove(arr, index)
      end
      return t
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local m = partition(arr, l, r)
              quick_sort(arr, l, m - 1)
              quick_sort(arr, m + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if n == k then
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, n do
          local x = arr[i]
          local j = 1
          while j <= k and heap[j] > x do
              j = j + 1
          end
          if j <= k then
              for l = k, j + 1, -1 do
                  heap[l] = heap[l - 1]
              end
              heap[j] = x
          end
      end
      return heap
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l + 1
          local j = r
          while true do
              while i <= r and arr[i] >= pivot do i = i + 1 end
              while j >= l + 1 and arr[j] <= pivot do j = j - 1 end
              if i >= j then break end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[l], arr[j] = arr[j], arr[l]
          return j
      end
      local function quickSelect(arr, l, r, k)
          if l == r then return arr[l] end
          local j = partition(arr, l, r)
          if j == k then return arr[j] end
          if j > k then return quickSelect(arr, l, j - 1, k) end
          return quickSelect(arr, j + 1, r, k)
      end
      quickSelect(arr, 1, len, k)
      return arr
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k == len then return arr end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      local function heapify(arr, i, len)
          local left = 2 * i
          local right = 2 * i + 1
          local largest = i
          if left <= len and arr[left] > arr[largest] then
              largest = left
          end
          if right <= len and arr[right] > arr[largest] then
              largest = right
          end
          if largest ~= i then
              arr[i], arr[largest] = arr[largest], arr[i]
              heapify(arr, largest, len)
          end
      end
      local function build_heap(arr, len)
          for i = math.floor(len / 2), 1, -1 do
              heapify(arr, i, len)
          end
      end
      build_heap(res, k)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              heapify(res, 1, k)
          end
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickselect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local p = partition(arr, l, r)
          if p == k then
              return arr[p]
          elseif p > k then
              return quickselect(arr, l, p - 1, k)
          else
              return quickselect(arr, p + 1, r, k)
          end
      end
      local function sort(arr, k)
          local n = #arr
          for i = 1, k do
              for j = i + 1, n do
                  if arr[i] < arr[j] then
                      arr[i], arr[j] = arr[j], arr[i]
                  end
              end
          end
          return arr
      end
      local n = #arr
      if k == n then
          return sort(arr, k)
      else
          local pivot = quickselect(arr, 1, n, k)
          local res = {}
          for i = 1, n do
              if arr[i] >= pivot then
                  res[#res + 1] = arr[i]
              end
          end
          return res
      end
  end
- |2-
      local function partition(arr, lo, hi)
          local pivot = arr[hi]
          local i = lo
          for j = lo, hi - 1 do
              if arr[j] < pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[hi] = arr[hi], arr[i]
          return i
      end
      local function select(arr, lo, hi, k)
          if lo == hi then
              return arr[lo]
          end
          local p = partition(arr, lo, hi)
          if p == k then
              return arr[p]
          elseif p < k then
              return select(arr, p + 1, hi, k)
          else
              return select(arr, lo, p - 1, k)
          end
      end
      local function quick_sort(arr, lo, hi)
          if lo < hi then
              local p = partition(arr, lo, hi)
              quick_sort(arr, lo, p - 1)
              quick_sort(arr, p + 1, hi)
          end
      end
      local n = #arr
      local k = math.min(k, n)
      local res = {}
      for i = 1, k do
          res[i] = select(arr, 1, n, n - i + 1)
      end
      quick_sort(res, 1, k)
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local index = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          table.insert(t, max)
          table.remove(arr, index)
      end
      return t
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k == n then return arr end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_select(arr, left, right, k)
          if left == right then return arr[left] end
          local pivot_index = partition(arr, left, right)
          if pivot_index == k then return arr[pivot_index] end
          if pivot_index > k then
              return quick_select(arr, left, pivot_index - 1, k)
          else
              return quick_select(arr, pivot_index + 1, right, k)
          end
      end
      local pivot = quick_select(arr, 1, n, k)
      local res = {}
      for i = 1, n do
          if arr[i] >= pivot then
              res[#res + 1] = arr[i]
          end
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          table.insert(res, arr[i])
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              table.remove(res, 1)
              table.insert(res, arr[i])
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          return arr
      end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, len)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local index = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          table.insert(t, max)
          table.remove(arr, index)
      end
      return t
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local p = partition(arr, l, r)
              quick_sort(arr, l, p - 1)
              quick_sort(arr, p + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      if k == 0 then return {} end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 2, -1 do
          if heap[i] < heap[i // 2] then
              heap[i], heap[i // 2] = heap[i // 2], heap[i]
          end
      end
      for i = k + 1, #arr do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              for j = 1, k // 2 do
                  if heap[j] > heap[j * 2] or heap[j] > heap[j * 2 + 1] then
                      if heap[j * 2] < heap[j * 2 + 1] then
                          heap[j], heap[j * 2] = heap[j * 2], heap[j]
                      else
                          heap[j], heap[j * 2 + 1] = heap[j * 2 + 1], heap[j]
                      end
                  end
              end
          end
      end
      return heap
  end
- |2-
      local heap = {}
      local heap_size = 0
      local function heap_push(x)
          heap_size = heap_size + 1
          heap[heap_size] = x
          local i = heap_size
          while i > 1 do
              local j = math.floor(i / 2)
              if heap[j] < heap[i] then
                  heap[i], heap[j] = heap[j], heap[i]
                  i = j
              else
                  break
              end
          end
      end
      local function heap_pop()
          local x = heap[1]
          heap[1] = heap[heap_size]
          heap_size = heap_size - 1
          local i = 1
          while i * 2 <= heap_size do
              local j = i * 2
              if j + 1 <= heap_size and heap[j + 1] > heap[j] then
                  j = j + 1
              end
              if heap[i] < heap[j] then
                  heap[i], heap[j] = heap[j], heap[i]
                  i = j
              else
                  break
              end
          end
          return x
      end
      for i = 1, #arr do
          if heap_size < k then
              heap_push(arr[i])
          elseif arr[i] > heap[1] then
              heap_pop()
              heap_push(arr[i])
          end
      end
      local res = {}
      for i = 1, k do
          res[i] = heap_pop()
      end
      return res
  end
- |2-
      local len = #arr
      if k == 0 then
          return {}
      elseif k == len then
          return arr
      end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, len)
      local res = {}
      for i = len, len - k + 1, -1 do
          table.insert(res, arr[i])
      end
      return res
  end
- |2-
      local n = #arr
      if k == n then
          table.sort(arr)
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, n do
          table.sort(heap)
          if arr[i] > heap[1] then
              heap[1] = arr[i]
          end
      end
      table.sort(heap)
      return heap
  end
- |2-
      local function partition(arr, l, r)
          local i, j = l, r
          local pivot = arr[l]
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l >= r then
              return
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return
          elseif pivot > k then
              quickSelect(arr, l, pivot - 1, k)
          else
              quickSelect(arr, pivot + 1, r, k)
          end
      end
      quickSelect(arr, 1, #arr, #arr - k + 1)
      local res = {}
      for i = #arr - k + 1, #arr do
          res[#res + 1] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k >= n then return arr end
      local t = {}
      for i = 1, n do
          t[i] = arr[i]
      end
      table.sort(t)
      local res = {}
      for i = 1, k do
          res[i] = t[n - i + 1]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 2, -1 do
          if heap[i] < heap[i // 2] then
              heap[i], heap[i // 2] = heap[i // 2], heap[i]
          end
      end
      for i = k + 1, #arr do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              for j = 1, k, 2 do
                  if heap[j] > heap[j + 1] then
                      heap[j], heap[j + 1] = heap[j + 1], heap[j]
                  end
              end
          end
      end
      return heap
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local ret = {}
      for i = 1, k do
          ret[i] = arr[i]
      end
      return ret
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local i = partition(arr, l, r)
              quick_sort(arr, l, i - 1)
              quick_sort(arr, i + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          return arr
      end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left + 1
          local j = right
          while true do
              while i <= j and arr[i] >= pivot do
                  i = i + 1
              end
              while i <= j and arr[j] <= pivot do
                  j = j - 1
              end
              if i > j then
                  break
              end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[left], arr[j] = arr[j], arr[left]
          return j
      end
      local function quick_select(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local j = partition(arr, left, right)
          if j == k then
              return arr[j]
          elseif j > k then
              return quick_select(arr, left, j - 1, k)
          else
              return quick_select(arr, j + 1, right, k)
          end
      end
      quick_select(arr, 1, len, k)
      return arr
  end
- |2-
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 2, -1 do
          if heap[i] < heap[i // 2] then
              heap[i], heap[i // 2] = heap[i // 2], heap[i]
          end
      end
      for i = k + 1, #arr do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              for j = 1, k // 2 do
                  if heap[j] > heap[j * 2] and heap[j] > heap[j * 2 + 1] then
                      break
                  elseif heap[j * 2] > heap[j * 2 + 1] then
                      heap[j], heap[j * 2] = heap[j * 2], heap[j]
                  else
                      heap[j], heap[j * 2 + 1] = heap[j * 2 + 1], heap[j]
                  end
              end
          end
      end
      return heap
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local mid = partition(arr, left, right)
              quick_sort(arr, left, mid - 1)
              quick_sort(arr, mid + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local m = partition(arr, l, r)
              quick_sort(arr, l, m - 1)
              quick_sort(arr, m + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local result = {}
      for i = 1, k do
          result[i] = arr[i]
      end
      return result
  end
- |2-
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, #arr do
          if arr[i] > t[1] then
              t[1] = arr[i]
              table.sort(t)
          end
      end
      return t
  end
- |2-
      local n = #arr
      local function partition(arr, l, r)
          local i, j = l, r
          local pivot = arr[l]
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local i = partition(arr, l, r)
          if i == k then
              return arr[i]
          elseif i > k then
              return quickSelect(arr, l, i - 1, k)
          else
              return quickSelect(arr, i + 1, r, k)
          end
      end
      local function quickSort(arr, l, r)
          if l < r then
              local i = partition(arr, l, r)
              quickSort(arr, l, i - 1)
              quickSort(arr, i + 1, r)
          end
      end
      quickSelect(arr, 1, n, k)
      quickSort(arr, 1, k)
      return arr
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, len do
          local min = heap[1]
          if arr[i] > min then
              heap[1] = arr[i]
              local j = 1
              while j < k do
                  local l = j * 2
                  local r = l + 1
                  if r <= k then
                      if heap[l] < heap[r] then
                          if heap[j] > heap[l] then
                              heap[j], heap[l] = heap[l], heap[j]
                              j = l
                          else
                              break
                          end
                      else
                          if heap[j] > heap[r] then
                              heap[j], heap[r] = heap[r], heap[j]
                              j = r
                          else
                              break
                          end
                      end
                  else
                      if heap[j] > heap[l] then
                          heap[j], heap[l] = heap[l], heap[j]
                          j = l
                      else
                          break
                      end
                  end
              end
          end
      end
      return heap
  end
- |2-
      local function partition(arr, lo, hi)
          local pivot = arr[hi]
          local i = lo
          for j = lo, hi - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[hi] = arr[hi], arr[i]
          return i
      end
      local function quickselect(arr, lo, hi, k)
          if lo >= hi then
              return
          end
          local p = partition(arr, lo, hi)
          if p == k then
              return
          elseif p < k then
              quickselect(arr, p + 1, hi, k)
          else
              quickselect(arr, lo, p - 1, k)
          end
      end
      quickselect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local n = #arr
      local t = {}
      for i = 1, n do
          local v = arr[i]
          local j = i
          while j > 1 and v > t[j - 1] do
              t[j] = t[j - 1]
              j = j - 1
          end
          t[j] = v
          if i > k then
              table.remove(t, 1)
          end
      end
      return t
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local pivot = partition(arr, l, r)
              quick_sort(arr, l, pivot - 1)
              quick_sort(arr, pivot + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k >= n then return arr end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, n do
          local j = 1
          while j <= k and res[j] < arr[i] do
              j = j + 1
          end
          if j <= k then
              for l = k, j + 1, -1 do
                  res[l] = res[l - 1]
              end
              res[j] = arr[i]
          end
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r + 1
          while true do
              repeat i = i + 1 until arr[i] >= pivot or i == r
              repeat j = j - 1 until arr[j] <= pivot or j == l
              if i >= j then break end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[l], arr[j] = arr[j], arr[l]
          return j
      end
      local function select(arr, l, r, k)
          if l == r then return arr[l] end
          local j = partition(arr, l, r)
          local n = j - l + 1
          if n == k then return arr[j]
          elseif n > k then return select(arr, l, j - 1, k)
          else return select(arr, j + 1, r, k - n) end
      end
      local function sort(arr, l, r)
          if l >= r then return end
          local j = partition(arr, l, r)
          sort(arr, l, j - 1)
          sort(arr, j + 1, r)
      end
      local n = #arr
      local m = select(arr, 1, n, k)
      sort(arr, 1, n)
      local t = {}
      for i = 1, n do
          if arr[i] >= m then
              t[#t + 1] = arr[i]
              if #t == k then break end
          end
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k == len then return arr end
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, len do
          if arr[i] > t[1] then
              t[1] = arr[i]
              table.sort(t)
          end
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = #arr - k + 1, #arr do
          res[#res + 1] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left + 1
          local j = right
          while true do
              while i <= j and arr[i] >= pivot do
                  i = i + 1
              end
              while i <= j and arr[j] <= pivot do
                  j = j - 1
              end
              if i >= j then
                  break
              end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[left], arr[j] = arr[j], arr[left]
          return j
      end
      local function quickSelect(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local pivot = partition(arr, left, right)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, left, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, right, k)
          end
      end
      quickSelect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local heap = {}
      local heap_size = 0
      local function heap_push(x)
          heap_size = heap_size + 1
          heap[heap_size] = x
          local i = heap_size
          while i > 1 do
              local p = math.floor(i / 2)
              if heap[p] < heap[i] then
                  heap[p], heap[i] = heap[i], heap[p]
                  i = p
              else
                  break
              end
          end
      end
      local function heap_pop()
          local ret = heap[1]
          heap[1] = heap[heap_size]
          heap_size = heap_size - 1
          local i = 1
          while i * 2 <= heap_size do
              local l = i * 2
              local r = i * 2 + 1
              local m = l
              if r <= heap_size and heap[r] > heap[l] then
                  m = r
              end
              if heap[i] < heap[m] then
                  heap[i], heap[m] = heap[m], heap[i]
                  i = m
              else
                  break
              end
          end
          return ret
      end
      for i = 1, #arr do
          if heap_size < k then
              heap_push(arr[i])
          elseif arr[i] > heap[1] then
              heap_pop()
              heap_push(arr[i])
          end
      end
      local ret = {}
      for i = 1, k do
          ret[i] = heap_pop()
      end
      return ret
  end
- |2-
      local function heapify(arr, i, n)
          local l, r, largest = 2 * i, 2 * i + 1, i
          if l <= n and arr[l] > arr[largest] then
              largest = l
          end
          if r <= n and arr[r] > arr[largest] then
              largest = r
          end
          if largest ~= i then
              arr[i], arr[largest] = arr[largest], arr[i]
              heapify(arr, largest, n)
          end
      end
      local function build_heap(arr, n)
          for i = math.floor(n / 2), 1, -1 do
              heapify(arr, i, n)
          end
      end
      local function heap_sort(arr, n)
          build_heap(arr, n)
          for i = n, 2, -1 do
              arr[1], arr[i] = arr[i], arr[1]
              heapify(arr, 1, i - 1)
          end
      end
      heap_sort(arr, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local mid = partition(arr, left, right)
              quick_sort(arr, left, mid - 1)
              quick_sort(arr, mid + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local max_idx = 0
          for j = 1, len do
              if arr[j] > max then
                  max = arr[j]
                  max_idx = j
              end
          end
          res[i] = max
          arr[max_idx] = -math.huge
      end
      return res
  end
- |2-
      local function partition(arr, lo, hi)
          local pivot = arr[hi]
          local i = lo
          for j = lo, hi - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[hi] = arr[hi], arr[i]
          return i
      end
      local function quick_select(arr, lo, hi, k)
          if lo >= hi then
              return
          end
          local p = partition(arr, lo, hi)
          if p == k then
              return
          elseif p > k then
              quick_select(arr, lo, p - 1, k)
          else
              quick_select(arr, p + 1, hi, k)
          end
      end
      quick_select(arr, 1, #arr, k)
      return arr
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          local j = 1
          while j <= k do
              if arr[i] > res[j] then
                  table.remove(res, j)
                  table.insert(res, j, arr[i])
                  break
              end
              j = j + 1
          end
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local max_i = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_i = j
              end
          end
          table.insert(t, max)
          table.remove(arr, max_i)
      end
      return t
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local result = {}
      for i = 1, k do
          local max = -math.huge
          local index = 0
          for j = 1, len do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          table.insert(result, max)
          arr[index] = -math.huge
      end
      return result
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, l, r)
          if l < r then
              local pivot = partition(arr, l, r)
              quickSort(arr, l, pivot - 1)
              quickSort(arr, pivot + 1, r)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local m = partition(arr, l, r)
              quick_sort(arr, l, m - 1)
              quick_sort(arr, m + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local max_index = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_index = j
              end
          end
          res[i] = max
          table.remove(arr, max_index)
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l - 1
          for j = l, r - 1 do
              if arr[j] > pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[i + 1], arr[r] = arr[r], arr[i + 1]
          return i + 1
      end
      local function quick_select(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local p = partition(arr, l, r)
          if p == k then
              return arr[p]
          elseif p < k then
              return quick_select(arr, p + 1, r, k)
          else
              return quick_select(arr, l, p - 1, k)
          end
      end
      local function quick_select_k(arr, k)
          local res = {}
          for i = 1, k do
              res[i] = quick_select(arr, 1, #arr, i)
          end
          return res
      end
      return quick_select_k(arr, k)
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local index = 0
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          table.insert(t, max)
          table.remove(arr, index)
      end
      return t
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local max_idx = nil
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_idx = j
              end
          end
          t[i] = max
          table.remove(arr, max_idx)
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      table.sort(heap)
      for i = k + 1, len do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              table.sort(heap)
          end
      end
      return heap
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] >= pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, l, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, r, k)
          end
      end
      quickSelect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = arr[i]
          local max_index = i
          for j = i + 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_index = j
              end
          end
          arr[max_index] = arr[i]
          arr[i] = max
          t[i] = max
      end
      return t
  end
- |2-
      local heap = {}
      local heap_size = 0
      local function heap_insert(x)
          heap_size = heap_size + 1
          heap[heap_size] = x
          local i = heap_size
          while i > 1 do
              local p = math.floor(i / 2)
              if heap[p] < heap[i] then
                  heap[p], heap[i] = heap[i], heap[p]
                  i = p
              else
                  break
              end
          end
      end
      local function heap_pop()
          local ret = heap[1]
          heap[1] = heap[heap_size]
          heap_size = heap_size - 1
          local i = 1
          while i * 2 <= heap_size do
              local l = i * 2
              local r = i * 2 + 1
              local max = l
              if r <= heap_size and heap[r] > heap[l] then
                  max = r
              end
              if heap[i] < heap[max] then
                  heap[i], heap[max] = heap[max], heap[i]
                  i = max
              else
                  break
              end
          end
          return ret
      end
      for i = 1, #arr do
          if heap_size < k then
              heap_insert(arr[i])
          else
              if arr[i] > heap[1] then
                  heap_pop()
                  heap_insert(arr[i])
              end
          end
      end
      local ret = {}
      for i = 1, k do
          ret[i] = heap_pop()
      end
      return ret
  end
- |2-
      local function partition(arr, low, high)
          local pivot = arr[high]
          local i = low - 1
          for j = low, high - 1 do
              if arr[j] > pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[i + 1], arr[high] = arr[high], arr[i + 1]
          return i + 1
      end
      local function quickSort(arr, low, high)
          if low < high then
              local pi = partition(arr, low, high)
              quickSort(arr, low, pi - 1)
              quickSort(arr, pi + 1, high)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if n <= k then
          table.sort(arr)
          return arr
      end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      table.sort(heap)
      for i = k + 1, n do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              table.sort(heap)
          end
      end
      return heap
  end
- |2-
      local n = #arr
      if k == n then
          return arr
      end
      local function partition(arr, lo, hi)
          local i, j = lo, hi
          local v = arr[lo]
          while i < j do
              while i < j and arr[j] <= v do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= v do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = v
          return i
      end
      local function sort(arr, lo, hi)
          if lo >= hi then
              return
          end
          local p = partition(arr, lo, hi)
          if p == k then
              return
          elseif p > k then
              sort(arr, lo, p - 1)
          else
              sort(arr, p + 1, hi)
          end
      end
      sort(arr, 1, n)
      return arr
  end
- |2-
      local n = #arr
      if k == n then
          table.sort(arr)
          return arr
      end
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, n do
          if arr[i] > t[1] then
              t[1] = arr[i]
              table.sort(t)
          end
      end
      return t
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local idx = 0
          for j = 1, len do
              if arr[j] > max then
                  max = arr[j]
                  idx = j
              end
          end
          table.insert(res, max)
          arr[idx] = -math.huge
      end
      return res
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k == n then return arr end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 2, -1 do
          local j = i
          while j > 1 do
              local p = math.floor(j / 2)
              if heap[p] < heap[j] then
                  heap[p], heap[j] = heap[j], heap[p]
                  j = p
              else
                  break
              end
          end
      end
      for i = k + 1, n do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              local j = 1
              while j * 2 <= k do
                  local l = j * 2
                  local r = l + 1
                  if r <= k and heap[l] < heap[r] then
                      l = r
                  end
                  if heap[j] < heap[l] then
                      heap[j], heap[l] = heap[l], heap[j]
                      j = l
                  else
                      break
                  end
              end
          end
      end
      return heap
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local mid = partition(arr, left, right)
              quick_sort(arr, left, mid - 1)
              quick_sort(arr, mid + 1, right)
          end
      end
      quick_sort(arr, 1, len)
      local res = {}
      for i = len, len - k + 1, -1 do
          table.insert(res, arr[i])
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k == len then return arr end
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l + 1
          local j = r
          while true do
              while i <= r and arr[i] >= pivot do i = i + 1 end
              while j >= l + 1 and arr[j] <= pivot do j = j - 1 end
              if i >= j then break end
              arr[i], arr[j] = arr[j], arr[i]
          end
          arr[l], arr[j] = arr[j], arr[l]
          return j
      end
      local function quick_select(arr, l, r, k)
          if l == r then return arr[l] end
          local j = partition(arr, l, r)
          if j == k then return arr[j] end
          if j > k then return quick_select(arr, l, j - 1, k) end
          return quick_select(arr, j + 1, r, k)
      end
      quick_select(arr, 1, len, k)
      return arr
  end
- |2-
      local n = #arr
      if k == 0 then
          return {}
      elseif k == n then
          return arr
      end
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, l, r, k)
          local i = partition(arr, l, r)
          if i == k then
              return
          elseif i < k then
              quickSelect(arr, i + 1, r, k)
          else
              quickSelect(arr, l, i - 1, k)
          end
      end
      quickSelect(arr, 1, n, n - k + 1)
      return arr
  end
- |2-
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local max_idx = -1
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  max_idx = j
              end
          end
          res[i] = max
          table.remove(arr, max_idx)
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          local j = 1
          while j <= k do
              if arr[i] > res[j] then
                  for l = k, j + 1, -1 do
                      res[l] = res[l - 1]
                  end
                  res[j] = arr[i]
                  break
              end
              j = j + 1
          end
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local m = -math.huge
          local j = 0
          for i, v in ipairs(arr) do
              if v > m then
                  m = v
                  j = i
              end
          end
          table.insert(t, m)
          table.remove(arr, j)
      end
      return t
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          local j = 1
          while j <= k do
              if arr[i] > res[j] then
                  table.remove(res, j)
                  table.insert(res, j, arr[i])
                  break
              end
              j = j + 1
          end
      end
      return res
  end
- |2-
      local len = #arr
      if k > len then
          k = len
      end
      local res = {}
      for i = 1, k do
          local max = -math.huge
          local max_index = -1
          for j = 1, len do
              if arr[j] > max then
                  max = arr[j]
                  max_index = j
              end
          end
          res[i] = max
          arr[max_index] = -math.huge
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local max = {}
      for i = 1, k do
          local max_i = i
          for j = i + 1, len do
              if arr[j] > arr[max_i] then
                  max_i = j
              end
          end
          max[i] = arr[max_i]
          arr[max_i] = arr[i]
      end
      return max
  end
- |2-
      local n = #arr
      if k == 0 then
          return {}
      elseif k == n then
          return arr
      end
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] < pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quick_select(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local p = partition(arr, l, r)
          if p == k then
              return arr[p]
          elseif p < k then
              return quick_select(arr, p + 1, r, k)
          else
              return quick_select(arr, l, p - 1, k)
          end
      end
      local function sort(arr, l, r)
          if l >= r then
              return
          end
          local p = partition(arr, l, r)
          sort(arr, l, p - 1)
          sort(arr, p + 1, r)
      end
      local pivot = quick_select(arr, 1, n, k)
      local i = 1
      for j = 1, n do
          if arr[j] >= pivot then
              arr[i], arr[j] = arr[j], arr[i]
              i = i + 1
          end
      end
      sort(arr, 1, i - 1)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function quickSort(arr, l, r)
          if l >= r then return end
          local i, j = l, r
          local pivot = arr[i]
          while i < j do
              while i < j and arr[j] <= pivot do j = j - 1 end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do i = i + 1 end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          quickSort(arr, l, i - 1)
          quickSort(arr, i + 1, r)
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      if k == n then
          return arr
      end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_select(arr, left, right, k)
          if left == right then
              return arr[left]
          end
          local mid = partition(arr, left, right)
          if mid == k then
              return arr[mid]
          elseif mid < k then
              return quick_select(arr, mid + 1, right, k)
          else
              return quick_select(arr, left, mid - 1, k)
          end
      end
      local function sort(arr, left, right)
          if left < right then
              local mid = partition(arr, left, right)
              sort(arr, left, mid - 1)
              sort(arr, mid + 1, right)
          end
      end
      quick_select(arr, 1, n, k)
      sort(arr, 1, k)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k == len then
          table.sort(arr)
          return arr
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] > pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, l, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, r, k)
          end
      end
      quickSelect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l
          for j = l, r - 1 do
              if arr[j] >= pivot then
                  arr[i], arr[j] = arr[j], arr[i]
                  i = i + 1
              end
          end
          arr[i], arr[r] = arr[r], arr[i]
          return i
      end
      local function quickselect(arr, l, r, k)
          if l == r then
              return
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return
          elseif pivot < k then
              quickselect(arr, pivot + 1, r, k)
          else
              quickselect(arr, l, pivot - 1, k)
          end
      end
      quickselect(arr, 1, #arr, k)
      return arr
  end
- |2-
      local n = #arr
      if k == n then
          table.sort(arr)
          return arr
      end
      local t = {}
      for i = 1, k do
          t[i] = arr[i]
      end
      table.sort(t)
      for i = k + 1, n do
          local j = 1
          while j <= k and t[j] < arr[i] do
              j = j + 1
          end
          if j <= k then
              table.insert(t, j, arr[i])
              table.remove(t)
          end
      end
      return t
  end
- |2-
      local len = #arr
      local t = {}
      for i = 1, len do
          local v = arr[i]
          local j = #t
          while j > 0 and v > t[j] do
              j = j - 1
          end
          if j < k then
              table.insert(t, j + 1, v)
              if #t > k then
                  table.remove(t)
              end
          end
      end
      return t
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[l]
          local i = l
          local j = r
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, l, r)
          if l < r then
              local m = partition(arr, l, r)
              quick_sort(arr, l, m - 1)
              quick_sort(arr, m + 1, r)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if k > len then
          k = len
      end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          if arr[i] > res[1] then
              res[1] = arr[i]
              table.sort(res)
          end
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, k do
          local max = -math.huge
          local index = -1
          for j = 1, #arr do
              if arr[j] > max then
                  max = arr[j]
                  index = j
              end
          end
          t[i] = max
          table.remove(arr, index)
      end
      return t
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k >= len then return arr end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, len)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quick_sort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quick_sort(arr, left, pivot - 1)
              quick_sort(arr, pivot + 1, right)
          end
      end
      quick_sort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              if i < j then
                  arr[i] = arr[j]
                  i = i + 1
              end
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              if i < j then
                  arr[j] = arr[i]
                  j = j - 1
              end
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k == len then return arr end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      table.sort(res)
      for i = k + 1, len do
          local j = 1
          while j <= k do
              if arr[i] > res[j] then
                  table.remove(res, k)
                  table.insert(res, j, arr[i])
                  break
              end
              j = j + 1
          end
      end
      return res
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k >= n then return arr end
      local heap = {}
      for i = 1, k do
          heap[i] = arr[i]
      end
      for i = k, 1, -1 do
          heapify(heap, i, k)
      end
      for i = k + 1, n do
          if arr[i] > heap[1] then
              heap[1] = arr[i]
              heapify(heap, 1, k)
          end
      end
      return heap
  end
- |2-
      local n = #arr
      if n == 0 then return {} end
      if k == 0 then return {} end
      if k >= n then return arr end
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSelect(arr, left, right, k)
          if left == right then return arr[left] end
          local pivot = partition(arr, left, right)
          if pivot == k then return arr[pivot] end
          if pivot > k then
              return quickSelect(arr, left, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, right, k)
          end
      end
      local res = {}
      for i = 1, k do
          res[i] = quickSelect(arr, 1, n, i)
      end
      return res
  end
- |2-
      local len = #arr
      if len == 0 then return {} end
      if k == 0 then return {} end
      if k == len then return arr end
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      local heap = Heap.new(res, function(a, b) return a > b end)
      for i = k + 1, len do
          if arr[i] > heap:top() then
              heap:pop()
              heap:push(arr[i])
          end
      end
      return heap:sort()
  end
- |2-
      local function partition(arr, l, r)
          local pivot = arr[r]
          local i = l - 1
          for j = l, r - 1 do
              if arr[j] <= pivot then
                  i = i + 1
                  arr[i], arr[j] = arr[j], arr[i]
              end
          end
          arr[i + 1], arr[r] = arr[r], arr[i + 1]
          return i + 1
      end
      local function quickSelect(arr, l, r, k)
          if l == r then
              return arr[l]
          end
          local pivot = partition(arr, l, r)
          if pivot == k then
              return arr[pivot]
          elseif pivot > k then
              return quickSelect(arr, l, pivot - 1, k)
          else
              return quickSelect(arr, pivot + 1, r, k)
          end
      end
      local function sort(arr, k)
          local n = #arr
          for i = 1, k do
              quickSelect(arr, i, n, i)
          end
      end
      sort(arr, k)
      return arr
  end
- |2-
      local function partition(arr, left, right)
          local pivot = arr[left]
          local i = left
          local j = right
          while i < j do
              while i < j and arr[j] <= pivot do
                  j = j - 1
              end
              arr[i] = arr[j]
              while i < j and arr[i] >= pivot do
                  i = i + 1
              end
              arr[j] = arr[i]
          end
          arr[i] = pivot
          return i
      end
      local function quickSort(arr, left, right)
          if left < right then
              local pivot = partition(arr, left, right)
              quickSort(arr, left, pivot - 1)
              quickSort(arr, pivot + 1, right)
          end
      end
      quickSort(arr, 1, #arr)
      local res = {}
      for i = 1, k do
          res[i] = arr[i]
      end
      return res
  end
- |2-
      local n = #arr
      local t = {}
      for i = 1, n do
          local x = arr[i]
          local j = i
          while j > 1 and t[j - 1] < x do
              t[j] = t[j - 1]
              j = j - 1
          end
          t[j] = x
          if i > k then
              table.remove(t, 1)
          end
      end
      return t
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
