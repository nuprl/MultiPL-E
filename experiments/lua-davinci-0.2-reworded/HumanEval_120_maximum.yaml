name: HumanEval_120_maximum
language: lua
prompt: "-- Given a table arr of integers and a positive integer k, return a sorted\
  \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- >>>\
  \ maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4, -4,\
  \ 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)\n\
  -- {2}\n-- Note:\n-- 1. The length of the table will be in the range of [1, 1000].\n\
  -- 2. The elements in the table will be in the range of [-1000, 1000].\n-- 3. 0\
  \ <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = 1, k do\n        local m = math.mininteger\n\
    \        local idx = -1\n        for j = 1, #arr do\n            if arr[j] > m\
    \ then\n                m = arr[j]\n                idx = j\n            end\n\
    \        end\n        if idx == -1 then break end\n        t[i] = m\n        table.remove(arr,\
    \ idx)\n    end\n    return t\nend", "    local len = #arr\n    if k == 0 then\n\
    \        return {}\n    elseif k == len then\n        table.sort(arr)\n      \
    \  return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ start, stop)\n        local pivot = arr[stop]\n        local i = start - 1\n\
    \        for j = start, stop - 1 do\n            if arr[j] < pivot then\n    \
    \            i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n    \
    \        end\n        end\n        arr[i + 1], arr[stop] = arr[stop], arr[i +\
    \ 1]\n        return i + 1\n    end\n    local function quick_select(arr, start,\
    \ stop, k)\n        if start >= stop then\n            return\n        end\n \
    \       local pivot = partition(arr, start, stop)\n        if pivot == k then\n\
    \            return\n        elseif pivot > k then\n            quick_select(arr,\
    \ start, pivot - 1, k)\n        else\n            quick_select(arr, pivot + 1,\
    \ stop, k)\n        end\n    end\n    quick_select(arr, 1, #arr, #arr - k + 1)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[#arr - k + i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n\
    \    table.sort(t)\n    for i = k + 1, #arr do\n        if arr[i] > t[1] then\n\
    \            t[1] = arr[i]\n            table.sort(t)\n        end\n    end\n\
    \    return t\nend", "    local function partition(arr, left, right)\n       \
    \ local pivot = arr[left]\n        local i = left\n        local j = right\n \
    \       while i < j do\n            while i < j and arr[j] <= pivot do\n     \
    \           j = j - 1\n            end\n            if i < j then\n          \
    \      arr[i] = arr[j]\n                i = i + 1\n            end\n         \
    \   while i < j and arr[i] >= pivot do\n                i = i + 1\n          \
    \  end\n            if i < j then\n                arr[j] = arr[i]\n         \
    \       j = j - 1\n            end\n        end\n        arr[i] = pivot\n    \
    \    return i\n    end\n    local function quickSort(arr, left, right)\n     \
    \   if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local t = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local max_idx = -1\n        for j = 1, #arr do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n                max_idx = j\n    \
    \        end\n        end\n        t[i] = max\n        table.remove(arr, max_idx)\n\
    \    end\n    return t\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function sort(arr, k)\n\
    \        local n = #arr\n        for i = 1, k do\n            local min = i\n\
    \            for j = i + 1, n do\n                if arr[j] < arr[min] then\n\
    \                    min = j\n                end\n            end\n         \
    \   arr[i], arr[min] = arr[min], arr[i]\n        end\n    end\n    local n = #arr\n\
    \    if k == n then\n        sort(arr, k)\n    else\n        quickSelect(arr,\
    \ 1, n, n - k + 1)\n        sort(arr, k)\n    end\n    return arr\nend", "   \
    \ local res = {}\n    for i = 1, k do\n        local max = -math.huge\n      \
    \  local max_index = 0\n        for j = 1, #arr do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n                max_index = j\n        \
    \    end\n        end\n        res[i] = max\n        table.remove(arr, max_index)\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if k == n then\n        return arr\n    end\n \
    \   local function partition(arr, l, r)\n        local pivot = arr[r]\n      \
    \  local i = l\n        for j = l, r - 1 do\n            if arr[j] < pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n     \
    \   return i\n    end\n    local function quick_select(arr, l, r, k)\n       \
    \ if l == r then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i <\
    \ k then\n            return quick_select(arr, i + 1, r, k)\n        else\n  \
    \          return quick_select(arr, l, i - 1, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[n - k + i]\n    end\n    return res\nend", "    local len = #arr\n    if\
    \ k == 0 then\n        return {}\n    elseif k == len then\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function sort(arr, k)\n\
    \        local ret = {}\n        for i = 1, k do\n            ret[i] = quickSelect(arr,\
    \ 1, #arr, i)\n        end\n        return ret\n    end\n    return sort(arr,\
    \ k)\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if len == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= len then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == 0 then\n        return {}\n    elseif\
    \ k == len then\n        return arr\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quickSelect(arr, left, pivot - 1, k)\n        else\n       \
    \     return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ quickSelect(arr, 1, len, k)\n    table.sort(arr, 1, k)\n    return arr\nend",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n     \
    \   return i\n    end\n    local function quickSelect(arr, l, r, k)\n        if\
    \ l == r then\n            return\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickSelect(arr, p + 1, r, k)\n        else\n            quickSelect(arr,\
    \ l, p - 1, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1,\
    \ k do\n        result[i] = arr[i]\n    end\n    return result\nend", "    local\
    \ heap = {}\n    local heap_size = 0\n    local function heap_push(x)\n      \
    \  heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n\
    \        while i > 1 do\n            local j = math.floor(i / 2)\n           \
    \ if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        local x = heap[1]\n\
    \        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n      \
    \  local i = 1\n        while i * 2 <= heap_size do\n            local j = i *\
    \ 2\n            if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n      \
    \          j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if heap_size < k then\n\
    \            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n       \
    \     heap_pop()\n            heap_push(arr[i])\n        end\n    end\n    local\
    \ ans = {}\n    for i = 1, k do\n        ans[i] = heap_pop()\n    end\n    return\
    \ ans\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    if\
    \ k == len then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        local max = -math.huge\n        local\
    \ index = 0\n        for j = 1, len do\n            if arr[j] > max then\n   \
    \             max = arr[j]\n                index = j\n            end\n     \
    \   end\n        res[i] = max\n        arr[index] = -math.huge\n    end\n    return\
    \ res\nend", "    local function partition(arr, lo, hi)\n        local pivot =\
    \ arr[hi]\n        local i = lo\n        for j = lo, hi - 1 do\n            if\
    \ arr[j] >= pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n    \
    \            i = i + 1\n            end\n        end\n        arr[i], arr[hi]\
    \ = arr[hi], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ lo, hi, k)\n        if lo >= hi then\n            return\n        end\n    \
    \    local p = partition(arr, lo, hi)\n        if p == k then\n            return\n\
    \        elseif p < k then\n            quickselect(arr, p + 1, hi, k)\n     \
    \   else\n            quickselect(arr, lo, p - 1, k)\n        end\n    end\n \
    \   quickselect(arr, 1, #arr, k)\n    return arr\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, len do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quickSelect(arr, l, pivot - 1, k)\n        else\n        \
    \    return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local pivot\
    \ = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n         \
    \   quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1,\
    \ #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend", "    local t = {}\n    for i = 1, k do\n       \
    \ local m = -math.huge\n        local idx = 0\n        for j = 1, #arr do\n  \
    \          if arr[j] > m then\n                m = arr[j]\n                idx\
    \ = j\n            end\n        end\n        t[i] = m\n        table.remove(arr,\
    \ idx)\n    end\n    return t\nend", "    local n = #arr\n    if k == n then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local heap = {}\n \
    \   for i = 1, k do\n        heap[i] = arr[i]\n    end\n    table.sort(heap)\n\
    \    for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            table.sort(heap)\n        end\n    end\n    return heap\n\
    end", "    local len = #arr\n    if len == 0 then return {} end\n    if k > len\
    \ then k = len end\n    local res = {}\n    for i = 1, k do\n        local max\
    \ = arr[i]\n        local idx = i\n        for j = i + 1, len do\n           \
    \ if arr[j] > max then\n                max = arr[j]\n                idx = j\n\
    \            end\n        end\n        res[i] = max\n        arr[idx] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left + 1\n        local j\
    \ = right\n        while true do\n            while i <= j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            while i <= j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i >= j then\n                break\n            end\n            arr[i],\
    \ arr[j] = arr[j], arr[i]\n        end\n        arr[left], arr[j] = arr[j], arr[left]\n\
    \        return j\n    end\n    local function quick_select(arr, left, right,\
    \ k)\n        if left == right then\n            return arr[left]\n        end\n\
    \        local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quick_select(arr, left, pivot - 1, k)\n        else\n            return quick_select(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function sort(arr, left,\
    \ right)\n        if left >= right then\n            return\n        end\n   \
    \     local pivot = partition(arr, left, right)\n        sort(arr, left, pivot\
    \ - 1)\n        sort(arr, pivot + 1, right)\n    end\n    local n = #arr\n   \
    \ quick_select(arr, 1, n, n - k + 1)\n    sort(arr, 1, n - k)\n    return arr\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local mid = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, mid - 1)\n            quick_sort(arr,\
    \ mid + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n \
    \       if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quick_select(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quick_select(arr, l, pivot - 1, k)\n        else\n       \
    \     return quick_select(arr, pivot + 1, r, k)\n        end\n    end\n    local\
    \ function quick_select_k(arr, k)\n        local res = {}\n        for i = 1,\
    \ k do\n            res[i] = quick_select(arr, 1, #arr, i)\n        end\n    \
    \    return res\n    end\n    return quick_select_k(arr, k)\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, k do\n        local max = arr[i]\n\
    \        local max_index = i\n        for j = i + 1, #arr do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n                max_index = j\n  \
    \          end\n        end\n        arr[max_index] = arr[i]\n        arr[i] =\
    \ max\n        t[i] = max\n    end\n    return t\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local mid = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, mid - 1)\n            quick_sort(arr,\
    \ mid + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local ret = {}\n\
    \    for i = 1, k do\n        local max = -1000\n        local index = 1\n   \
    \     for j = 1, #arr do\n            if arr[j] > max then\n                max\
    \ = arr[j]\n                index = j\n            end\n        end\n        ret[i]\
    \ = max\n        table.remove(arr, index)\n    end\n    return ret\nend", "  \
    \  local len = #arr\n    local t = {}\n    for i = 1, len do\n        t[i] = arr[i]\n\
    \    end\n    table.sort(t)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = t[len - i + 1]\n    end\n    return res\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n\
    \        for j = l, r - 1 do\n            if arr[j] >= pivot then\n          \
    \      i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n          \
    \  end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n       \
    \ return i + 1\n    end\n    local function quickselect(arr, l, r, k)\n      \
    \  if l == r then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p <\
    \ k then\n            return quickselect(arr, p + 1, r, k)\n        else\n   \
    \         return quickselect(arr, l, p - 1, k)\n        end\n    end\n    quickselect(arr,\
    \ 1, #arr, k)\n    return arr\nend", "    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i < j then\n\
    \                arr[i] = arr[j]\n                i = i + 1\n            end\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            if i < j then\n                arr[j] = arr[i]\n\
    \                j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local len = #arr\n    if len == 0 then return {} end\n    if k == 0\
    \ then return {} end\n    if k == len then return arr end\n    local max = {}\n\
    \    for i = 1, k do\n        max[i] = arr[i]\n    end\n    for i = k + 1, len\
    \ do\n        local j = 1\n        while j <= k and max[j] > arr[i] do\n     \
    \       j = j + 1\n        end\n        if j <= k then\n            for m = k,\
    \ j + 1, -1 do\n                max[m] = max[m - 1]\n            end\n       \
    \     max[j] = arr[i]\n        end\n    end\n    return max\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local res = {}\n    for\
    \ i = 1, k do\n        local max = -math.huge\n        local idx = 0\n       \
    \ for j = 1, #arr do\n            if arr[j] > max then\n                max =\
    \ arr[j]\n                idx = j\n            end\n        end\n        res[i]\
    \ = max\n        table.remove(arr, idx)\n    end\n    return res\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, n)\n    local res = {}\n    for i = n, n - k + 1, -1 do\n\
    \        table.insert(res, arr[i])\n    end\n    return res\nend", "    table.sort(arr,\
    \ function(a, b) return a > b end)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local p = partition(arr, l, r)\n        if p ==\
    \ k then\n            return arr[p]\n        elseif p > k then\n            return\
    \ quickSelect(arr, l, p - 1, k)\n        else\n            return quickSelect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    local function quickSort(arr, l, r)\n\
    \        if l < r then\n            local p = partition(arr, l, r)\n         \
    \   quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n\
    \    end\n    local n = #arr\n    quickSort(arr, 1, n)\n    local res = {}\n \
    \   for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", " \
    \   local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n  \
    \      result[i] = arr[i]\n    end\n    return result\nend", "    local len =\
    \ #arr\n    if k > len then\n        k = len\n    end\n    local t = {}\n    for\
    \ i = 1, len do\n        local v = arr[i]\n        local j = #t\n        while\
    \ j > 0 and v > t[j] do\n            j = j - 1\n        end\n        if j < k\
    \ then\n            table.insert(t, j + 1, v)\n            if #t > k then\n  \
    \              table.remove(t)\n            end\n        end\n    end\n    return\
    \ t\nend", "    local n = #arr\n    if k == n then\n        return arr\n    end\n\
    \    local function partition(l, r)\n        local pivot = arr[l]\n        local\
    \ i = l\n        for j = l + 1, r do\n            if arr[j] > pivot then\n   \
    \             i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n   \
    \         end\n        end\n        arr[l], arr[i] = arr[i], arr[l]\n        return\
    \ i\n    end\n    local l, r = 1, n\n    while l <= r do\n        local m = partition(l,\
    \ r)\n        if m == k then\n            break\n        elseif m < k then\n \
    \           l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    return arr\nend", "    local n = #arr\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[right]\n        local i = left - 1\n\
    \        for j = left, right - 1 do\n            if arr[j] >= pivot then\n   \
    \             i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n   \
    \         end\n        end\n        arr[i + 1], arr[right] = arr[right], arr[i\
    \ + 1]\n        return i + 1\n    end\n    local function quickselect(arr, left,\
    \ right, k)\n        if left == right then\n            return arr[left]\n   \
    \     end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quickselect(arr, left, pivot - 1, k)\n        else\n       \
    \     return quickselect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ quickselect(arr, 1, n, k)\n    return arr\nend", "    local n = #arr\n    if\
    \ k == n then\n        return arr\n    end\n    local heap = {}\n    for i = 1,\
    \ k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n        heapify(heap,\
    \ i, k)\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            heapify(heap, 1, k)\n        end\n\
    \    end\n    return heap\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "  local n = #arr\n  local t\
    \ = {}\n  for i = 1, n do\n    local x = arr[i]\n    local j = #t\n    while j\
    \ > 0 and x > t[j] do\n      j = j - 1\n    end\n    if j < k then\n      table.insert(t,\
    \ j + 1, x)\n      if #t > k then\n        table.remove(t)\n      end\n    end\n\
    \  end\n  return t\nend", "    local function partition(arr, left, right)\n  \
    \      local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l + 1\n        local j = r\n        while true do\n       \
    \     while i <= r and arr[i] >= pivot do\n                i = i + 1\n       \
    \     end\n            while j >= l + 1 and arr[j] <= pivot do\n             \
    \   j = j - 1\n            end\n            if i >= j then\n                break\n\
    \            end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n \
    \       arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n\
    \        end\n        local j = partition(arr, l, r)\n        if j == k then\n\
    \            return\n        elseif j > k then\n            quickSelect(arr, l,\
    \ j - 1, k)\n        else\n            quickSelect(arr, j + 1, r, k)\n       \
    \ end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return arr\nend", "    local\
    \ function partition(arr, l, r)\n        local i, j = l, r\n        local pivot\
    \ = arr[l]\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_select(arr, l, r, k)\n  \
    \      local i = partition(arr, l, r)\n        if i == k then\n            return\n\
    \        elseif i < k then\n            quick_select(arr, i + 1, r, k)\n     \
    \   else\n            quick_select(arr, l, i - 1, k)\n        end\n    end\n \
    \   quick_select(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n    for i =\
    \ #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n  \
    \  if k == len then\n        table.sort(arr)\n        return arr\n    end\n  \
    \  local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n   \
    \ table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            res[1] = arr[i]\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] < pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\n\
    \        end\n        local p = partition(arr, l, r)\n        if p == k then\n\
    \            return\n        elseif p < k then\n            quickSelect(arr, p\
    \ + 1, r, k)\n        else\n            quickSelect(arr, l, p - 1, k)\n      \
    \  end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ result = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return\
    \ result\nend", "    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if k == 0 then\n        return {}\n  \
    \  elseif k == len then\n        return arr\n    end\n    local res = {}\n   \
    \ for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n   \
    \ for i = k + 1, len do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res)\n     \
    \   end\n    end\n    return res\nend", "    local len = #arr\n    if len == 0\
    \ then return {} end\n    if k == 0 then return {} end\n    if k >= len then return\
    \ arr end\n    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, left, right, k)\n        if left\
    \ == right then return arr[left] end\n        local pivot = partition(arr, left,\
    \ right)\n        if pivot == k then return arr[pivot] end\n        if pivot >\
    \ k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr, 1,\
    \ len, i)\n    end\n    return res\nend", "    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local len = #arr\n    if k == 0 then\n        return {}\n    elseif\
    \ k >= len then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        for j = 1, k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, j)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n        end\n    end\n \
    \   return res\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k >= n then return arr end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then return arr[i] end\n        if i > k then\n   \
    \         return quickselect(arr, l, i - 1, k)\n        else\n            return\
    \ quickselect(arr, i + 1, r, k)\n        end\n    end\n    local pivot = quickselect(arr,\
    \ 1, n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot\
    \ then\n            res[#res + 1] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function maxHeapify(arr,\
    \ i, n)\n        local l = i * 2\n        local r = i * 2 + 1\n        local largest\
    \ = i\n        if l <= n and arr[l] > arr[largest] then\n            largest =\
    \ l\n        end\n        if r <= n and arr[r] > arr[largest] then\n         \
    \   largest = r\n        end\n        if largest ~= i then\n            arr[i],\
    \ arr[largest] = arr[largest], arr[i]\n            maxHeapify(arr, largest, n)\n\
    \        end\n    end\n    local function buildMaxHeap(arr, n)\n        for i\
    \ = math.floor(n / 2), 1, -1 do\n            maxHeapify(arr, i, n)\n        end\n\
    \    end\n    local function heapSort(arr, n)\n        buildMaxHeap(arr, n)\n\
    \        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n  \
    \          maxHeapify(arr, 1, i - 1)\n        end\n    end\n    heapSort(arr,\
    \ #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend", "    local n = #arr\n    if k == n then\n      \
    \  table.sort(arr)\n        return arr\n    end\n    local t = {}\n    for i =\
    \ 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n    for i = k +\
    \ 1, n do\n        local j = 1\n        while j <= k and arr[i] > t[j] do\n  \
    \          j = j + 1\n        end\n        if j <= k then\n            for l =\
    \ k, j + 1, -1 do\n                t[l] = t[l - 1]\n            end\n        \
    \    t[j] = arr[i]\n        end\n    end\n    return t\nend", "    local t = {}\n\
    \    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n    for\
    \ i = k + 1, #arr do\n        if arr[i] > t[1] then\n            t[1] = arr[i]\n\
    \            table.sort(t)\n        end\n    end\n    return t\nend", "    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 2, -1 do\n        heap[i], heap[1] = heap[1], heap[i]\n        local j\
    \ = 1\n        while j * 2 <= i - 1 do\n            local m = j * 2\n        \
    \    if m + 1 <= i - 1 and heap[m + 1] < heap[m] then\n                m = m +\
    \ 1\n            end\n            if heap[j] <= heap[m] then\n               \
    \ break\n            end\n            heap[j], heap[m] = heap[m], heap[j]\n  \
    \          j = m\n        end\n    end\n    for i = k + 1, #arr do\n        if\
    \ arr[i] > heap[1] then\n            heap[1] = arr[i]\n            local j = 1\n\
    \            while j * 2 <= k do\n                local m = j * 2\n          \
    \      if m + 1 <= k and heap[m + 1] < heap[m] then\n                    m = m\
    \ + 1\n                end\n                if heap[j] <= heap[m] then\n     \
    \               break\n                end\n                heap[j], heap[m] =\
    \ heap[m], heap[j]\n                j = m\n            end\n        end\n    end\n\
    \    for i = k, 2, -1 do\n        heap[i], heap[1] = heap[1], heap[i]\n      \
    \  local j = 1\n        while j * 2 <= i - 1 do\n            local m = j * 2\n\
    \            if m + 1 <= i - 1 and heap[m + 1] < heap[m] then\n              \
    \  m = m + 1\n            end\n            if heap[j] <= heap[m] then\n      \
    \          break\n            end\n            heap[j], heap[m] = heap[m], heap[j]\n\
    \            j = m\n        end\n    end\n    return heap\nend", "    local len\
    \ = #arr\n    if k == 0 then\n        return {}\n    elseif k == len then\n  \
    \      return arr\n    end\n    local result = {}\n    for i = 1, k do\n     \
    \   result[i] = arr[i]\n    end\n    local heap = Heap.new(result, function(a,\
    \ b) return a > b end)\n    for i = k + 1, len do\n        if arr[i] > heap:peek()\
    \ then\n            heap:pop()\n            heap:push(arr[i])\n        end\n \
    \   end\n    return heap:to_table()\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local index = 0\n        for j = 1, #arr do\n            if arr[j] >\
    \ max then\n                max = arr[j]\n                index = j\n        \
    \    end\n        end\n        table.insert(t, max)\n        table.remove(arr,\
    \ index)\n    end\n    return t\nend", "    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n\
    \            local m = partition(arr, l, r)\n            quick_sort(arr, l, m\
    \ - 1)\n            quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == k then\n        return arr\n    end\n \
    \   local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k, n do\n        local x = arr[i]\n        local j = 1\n        while\
    \ j <= k and heap[j] > x do\n            j = j + 1\n        end\n        if j\
    \ <= k then\n            for l = k, j + 1, -1 do\n                heap[l] = heap[l\
    \ - 1]\n            end\n            heap[j] = x\n        end\n    end\n    return\
    \ heap\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if len == 0 then return {} end\n    if k == 0 then return {} end\n    if\
    \ k >= len then return arr end\n    local function partition(arr, l, r)\n    \
    \    local pivot = arr[l]\n        local i = l + 1\n        local j = r\n    \
    \    while true do\n            while i <= r and arr[i] >= pivot do i = i + 1\
    \ end\n            while j >= l + 1 and arr[j] <= pivot do j = j - 1 end\n   \
    \         if i >= j then break end\n            arr[i], arr[j] = arr[j], arr[i]\n\
    \        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then return arr[l]\
    \ end\n        local j = partition(arr, l, r)\n        if j == k then return arr[j]\
    \ end\n        if j > k then return quickSelect(arr, l, j - 1, k) end\n      \
    \  return quickSelect(arr, j + 1, r, k)\n    end\n    quickSelect(arr, 1, len,\
    \ k)\n    return arr\nend", "    local len = #arr\n    if len == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == len then return arr end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   local function heapify(arr, i, len)\n        local left = 2 * i\n        local\
    \ right = 2 * i + 1\n        local largest = i\n        if left <= len and arr[left]\
    \ > arr[largest] then\n            largest = left\n        end\n        if right\
    \ <= len and arr[right] > arr[largest] then\n            largest = right\n   \
    \     end\n        if largest ~= i then\n            arr[i], arr[largest] = arr[largest],\
    \ arr[i]\n            heapify(arr, largest, len)\n        end\n    end\n    local\
    \ function build_heap(arr, len)\n        for i = math.floor(len / 2), 1, -1 do\n\
    \            heapify(arr, i, len)\n        end\n    end\n    build_heap(res, k)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            heapify(res, 1, k)\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quickselect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local p\
    \ = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickselect(arr, l, p - 1, k)\n\
    \        else\n            return quickselect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function sort(arr, k)\n        local n = #arr\n        for\
    \ i = 1, k do\n            for j = i + 1, n do\n                if arr[i] < arr[j]\
    \ then\n                    arr[i], arr[j] = arr[j], arr[i]\n                end\n\
    \            end\n        end\n        return arr\n    end\n    local n = #arr\n\
    \    if k == n then\n        return sort(arr, k)\n    else\n        local pivot\
    \ = quickselect(arr, 1, n, k)\n        local res = {}\n        for i = 1, n do\n\
    \            if arr[i] >= pivot then\n                res[#res + 1] = arr[i]\n\
    \            end\n        end\n        return res\n    end\nend", "    local function\
    \ partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n\
    \        for j = lo, hi - 1 do\n            if arr[j] < pivot then\n         \
    \       arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n         \
    \   end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return\
    \ i\n    end\n    local function select(arr, lo, hi, k)\n        if lo == hi then\n\
    \            return arr[lo]\n        end\n        local p = partition(arr, lo,\
    \ hi)\n        if p == k then\n            return arr[p]\n        elseif p < k\
    \ then\n            return select(arr, p + 1, hi, k)\n        else\n         \
    \   return select(arr, lo, p - 1, k)\n        end\n    end\n    local function\
    \ quick_sort(arr, lo, hi)\n        if lo < hi then\n            local p = partition(arr,\
    \ lo, hi)\n            quick_sort(arr, lo, p - 1)\n            quick_sort(arr,\
    \ p + 1, hi)\n        end\n    end\n    local n = #arr\n    local k = math.min(k,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = select(arr, 1,\
    \ n, n - i + 1)\n    end\n    quick_sort(res, 1, k)\n    return res\nend", " \
    \   local t = {}\n    for i = 1, k do\n        local max = -math.huge\n      \
    \  local index = 0\n        for j = 1, #arr do\n            if arr[j] > max then\n\
    \                max = arr[j]\n                index = j\n            end\n  \
    \      end\n        table.insert(t, max)\n        table.remove(arr, index)\n \
    \   end\n    return t\nend", "    local n = #arr\n    if n == 0 then return {}\
    \ end\n    if k == 0 then return {} end\n    if k == n then return arr end\n \
    \   local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_select(arr, left, right, k)\n        if left == right\
    \ then return arr[left] end\n        local pivot_index = partition(arr, left,\
    \ right)\n        if pivot_index == k then return arr[pivot_index] end\n     \
    \   if pivot_index > k then\n            return quick_select(arr, left, pivot_index\
    \ - 1, k)\n        else\n            return quick_select(arr, pivot_index + 1,\
    \ right, k)\n        end\n    end\n    local pivot = quick_select(arr, 1, n, k)\n\
    \    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n  \
    \          res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend",
  "    local len = #arr\n    if k == len then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        table.insert(res,\
    \ arr[i])\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            table.remove(res, 1)\n            table.insert(res,\
    \ arr[i])\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == 0 then\n        return {}\n    elseif\
    \ k == len then\n        return arr\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, len)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local index = 0\n        for j = 1, #arr do\n            if arr[j] >\
    \ max then\n                max = arr[j]\n                index = j\n        \
    \    end\n        end\n        table.insert(t, max)\n        table.remove(arr,\
    \ index)\n    end\n    return t\nend", "    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n\
    \            local p = partition(arr, l, r)\n            quick_sort(arr, l, p\
    \ - 1)\n            quick_sort(arr, p + 1, r)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quick_sort(arr,\
    \ left, pivot - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    if k == 0 then return\
    \ {} end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i // 2] then\n  \
    \          heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        end\n    end\n\
    \    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            for j = 1, k // 2 do\n                if heap[j] > heap[j\
    \ * 2] or heap[j] > heap[j * 2 + 1] then\n                    if heap[j * 2] <\
    \ heap[j * 2 + 1] then\n                        heap[j], heap[j * 2] = heap[j\
    \ * 2], heap[j]\n                    else\n                        heap[j], heap[j\
    \ * 2 + 1] = heap[j * 2 + 1], heap[j]\n                    end\n             \
    \   end\n            end\n        end\n    end\n    return heap\nend", "    local\
    \ heap = {}\n    local heap_size = 0\n    local function heap_push(x)\n      \
    \  heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n\
    \        while i > 1 do\n            local j = math.floor(i / 2)\n           \
    \ if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        local x = heap[1]\n\
    \        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n      \
    \  local i = 1\n        while i * 2 <= heap_size do\n            local j = i *\
    \ 2\n            if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n      \
    \          j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if heap_size < k then\n\
    \            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n       \
    \     heap_pop()\n            heap_push(arr[i])\n        end\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = heap_pop()\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if k == 0 then\n        return {}\n  \
    \  elseif k == len then\n        return arr\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local\
    \ res = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend", "    local n = #arr\n    if k == n then\n    \
    \    table.sort(arr)\n        return arr\n    end\n    local heap = {}\n    for\
    \ i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, n do\n      \
    \  table.sort(heap)\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \        end\n    end\n    table.sort(heap)\n    return heap\nend", "    local\
    \ function partition(arr, l, r)\n        local i, j = l, r\n        local pivot\
    \ = arr[l]\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l >= r then\n            return\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return\n        elseif pivot\
    \ > k then\n            quickSelect(arr, l, pivot - 1, k)\n        else\n    \
    \        quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, #arr, #arr - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n\
    \        res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local n =\
    \ #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n \
    \   if k >= n then return arr end\n    local t = {}\n    for i = 1, n do\n   \
    \     t[i] = arr[i]\n    end\n    table.sort(t)\n    local res = {}\n    for i\
    \ = 1, k do\n        res[i] = t[n - i + 1]\n    end\n    return res\nend", " \
    \   local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local heap = {}\n    for\
    \ i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n  \
    \      if heap[i] < heap[i // 2] then\n            heap[i], heap[i // 2] = heap[i\
    \ // 2], heap[i]\n        end\n    end\n    for i = k + 1, #arr do\n        if\
    \ arr[i] > heap[1] then\n            heap[1] = arr[i]\n            for j = 1,\
    \ k, 2 do\n                if heap[j] > heap[j + 1] then\n                   \
    \ heap[j], heap[j + 1] = heap[j + 1], heap[j]\n                end\n         \
    \   end\n        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ ret = {}\n    for i = 1, k do\n        ret[i] = arr[i]\n    end\n    return\
    \ ret\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_sort(arr, l, r)\n       \
    \ if l < r then\n            local i = partition(arr, l, r)\n            quick_sort(arr,\
    \ l, i - 1)\n            quick_sort(arr, i + 1, r)\n        end\n    end\n   \
    \ quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    if k ==\
    \ len then\n        return arr\n    end\n    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left + 1\n      \
    \  local j = right\n        while true do\n            while i <= j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            while i\
    \ <= j and arr[j] <= pivot do\n                j = j - 1\n            end\n  \
    \          if i > j then\n                break\n            end\n           \
    \ arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[left], arr[j] = arr[j],\
    \ arr[left]\n        return j\n    end\n    local function quick_select(arr, left,\
    \ right, k)\n        if left == right then\n            return arr[left]\n   \
    \     end\n        local j = partition(arr, left, right)\n        if j == k then\n\
    \            return arr[j]\n        elseif j > k then\n            return quick_select(arr,\
    \ left, j - 1, k)\n        else\n            return quick_select(arr, j + 1, right,\
    \ k)\n        end\n    end\n    quick_select(arr, 1, len, k)\n    return arr\n\
    end", "    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n  \
    \  end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i // 2] then\n    \
    \        heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        end\n    end\n\
    \    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            for j = 1, k // 2 do\n                if heap[j] > heap[j\
    \ * 2] and heap[j] > heap[j * 2 + 1] then\n                    break\n       \
    \         elseif heap[j * 2] > heap[j * 2 + 1] then\n                    heap[j],\
    \ heap[j * 2] = heap[j * 2], heap[j]\n                else\n                 \
    \   heap[j], heap[j * 2 + 1] = heap[j * 2 + 1], heap[j]\n                end\n\
    \            end\n        end\n    end\n    return heap\nend", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quick_sort(arr, left, mid - 1)\n\
    \            quick_sort(arr, mid + 1, right)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k do\n    \
    \    result[i] = arr[i]\n    end\n    return result\nend", "    local t = {}\n\
    \    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n    for\
    \ i = k + 1, #arr do\n        if arr[i] > t[1] then\n            t[1] = arr[i]\n\
    \            table.sort(t)\n        end\n    end\n    return t\nend", "    local\
    \ n = #arr\n    local function partition(arr, l, r)\n        local i, j = l, r\n\
    \        local pivot = arr[l]\n        while i < j do\n            while i < j\
    \ and arr[j] <= pivot do\n                j = j - 1\n            end\n       \
    \     arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n      \
    \          i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    local function quickSort(arr, l, r)\n        if l < r\
    \ then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, k)\n    quickSort(arr, 1, k)\n    return arr\nend", "    local len = #arr\n\
    \    if len == 0 then return {} end\n    if k == 0 then return {} end\n    if\
    \ k >= len then return arr end\n    local heap = {}\n    for i = 1, k do\n   \
    \     heap[i] = arr[i]\n    end\n    for i = k, len do\n        local min = heap[1]\n\
    \        if arr[i] > min then\n            heap[1] = arr[i]\n            local\
    \ j = 1\n            while j < k do\n                local l = j * 2\n       \
    \         local r = l + 1\n                if r <= k then\n                  \
    \  if heap[l] < heap[r] then\n                        if heap[j] > heap[l] then\n\
    \                            heap[j], heap[l] = heap[l], heap[j]\n           \
    \                 j = l\n                        else\n                      \
    \      break\n                        end\n                    else\n        \
    \                if heap[j] > heap[r] then\n                            heap[j],\
    \ heap[r] = heap[r], heap[j]\n                            j = r\n            \
    \            else\n                            break\n                       \
    \ end\n                    end\n                else\n                    if heap[j]\
    \ > heap[l] then\n                        heap[j], heap[l] = heap[l], heap[j]\n\
    \                        j = l\n                    else\n                   \
    \     break\n                    end\n                end\n            end\n \
    \       end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n        for j\
    \ = lo, hi - 1 do\n            if arr[j] > pivot then\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n      \
    \  end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return i\n    end\n\
    \    local function quickselect(arr, lo, hi, k)\n        if lo >= hi then\n  \
    \          return\n        end\n        local p = partition(arr, lo, hi)\n   \
    \     if p == k then\n            return\n        elseif p < k then\n        \
    \    quickselect(arr, p + 1, hi, k)\n        else\n            quickselect(arr,\
    \ lo, p - 1, k)\n        end\n    end\n    quickselect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local n = #arr\n    local t = {}\n    for i = 1, n do\n    \
    \    local v = arr[i]\n        local j = i\n        while j > 1 and v > t[j -\
    \ 1] do\n            t[j] = t[j - 1]\n            j = j - 1\n        end\n   \
    \     t[j] = v\n        if i > k then\n            table.remove(t, 1)\n      \
    \  end\n    end\n    return t\nend", "    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n\
    \            local pivot = partition(arr, l, r)\n            quick_sort(arr, l,\
    \ pivot - 1)\n            quick_sort(arr, pivot + 1, r)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ n == 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then\
    \ return arr end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        local j = 1\n\
    \        while j <= k and res[j] < arr[i] do\n            j = j + 1\n        end\n\
    \        if j <= k then\n            for l = k, j + 1, -1 do\n               \
    \ res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n        end\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r + 1\n        while true do\n            repeat i = i + 1 until arr[i] >= pivot\
    \ or i == r\n            repeat j = j - 1 until arr[j] <= pivot or j == l\n  \
    \          if i >= j then break end\n            arr[i], arr[j] = arr[j], arr[i]\n\
    \        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n\
    \    local function select(arr, l, r, k)\n        if l == r then return arr[l]\
    \ end\n        local j = partition(arr, l, r)\n        local n = j - l + 1\n \
    \       if n == k then return arr[j]\n        elseif n > k then return select(arr,\
    \ l, j - 1, k)\n        else return select(arr, j + 1, r, k - n) end\n    end\n\
    \    local function sort(arr, l, r)\n        if l >= r then return end\n     \
    \   local j = partition(arr, l, r)\n        sort(arr, l, j - 1)\n        sort(arr,\
    \ j + 1, r)\n    end\n    local n = #arr\n    local m = select(arr, 1, n, k)\n\
    \    sort(arr, 1, n)\n    local t = {}\n    for i = 1, n do\n        if arr[i]\
    \ >= m then\n            t[#t + 1] = arr[i]\n            if #t == k then break\
    \ end\n        end\n    end\n    return t\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if len == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == len then return arr end\n    local t\
    \ = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n\
    \    for i = k + 1, len do\n        if arr[i] > t[1] then\n            t[1] =\
    \ arr[i]\n            table.sort(t)\n        end\n    end\n    return t\nend",
  "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left + 1\n        local j\
    \ = right\n        while true do\n            while i <= j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            while i <= j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i >= j then\n                break\n            end\n            arr[i],\
    \ arr[j] = arr[j], arr[i]\n        end\n        arr[left], arr[j] = arr[j], arr[left]\n\
    \        return j\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n\
    \    return arr\nend", "    local heap = {}\n    local heap_size = 0\n    local\
    \ function heap_push(x)\n        heap_size = heap_size + 1\n        heap[heap_size]\
    \ = x\n        local i = heap_size\n        while i > 1 do\n            local\
    \ p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n             \
    \   heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n\
    \                break\n            end\n        end\n    end\n    local function\
    \ heap_pop()\n        local ret = heap[1]\n        heap[1] = heap[heap_size]\n\
    \        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <=\
    \ heap_size do\n            local l = i * 2\n            local r = i * 2 + 1\n\
    \            local m = l\n            if r <= heap_size and heap[r] > heap[l]\
    \ then\n                m = r\n            end\n            if heap[i] < heap[m]\
    \ then\n                heap[i], heap[m] = heap[m], heap[i]\n                i\
    \ = m\n            else\n                break\n            end\n        end\n\
    \        return ret\n    end\n    for i = 1, #arr do\n        if heap_size < k\
    \ then\n            heap_push(arr[i])\n        elseif arr[i] > heap[1] then\n\
    \            heap_pop()\n            heap_push(arr[i])\n        end\n    end\n\
    \    local ret = {}\n    for i = 1, k do\n        ret[i] = heap_pop()\n    end\n\
    \    return ret\nend", "    local function heapify(arr, i, n)\n        local l,\
    \ r, largest = 2 * i, 2 * i + 1, i\n        if l <= n and arr[l] > arr[largest]\
    \ then\n            largest = l\n        end\n        if r <= n and arr[r] > arr[largest]\
    \ then\n            largest = r\n        end\n        if largest ~= i then\n \
    \           arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr,\
    \ largest, n)\n        end\n    end\n    local function build_heap(arr, n)\n \
    \       for i = math.floor(n / 2), 1, -1 do\n            heapify(arr, i, n)\n\
    \        end\n    end\n    local function heap_sort(arr, n)\n        build_heap(arr,\
    \ n)\n        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            heapify(arr, 1, i - 1)\n        end\n    end\n    heap_sort(arr,\
    \ #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(arr, left, right)\n   \
    \     if left < right then\n            local mid = partition(arr, left, right)\n\
    \            quick_sort(arr, left, mid - 1)\n            quick_sort(arr, mid +\
    \ 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ local max = -math.huge\n        local max_idx = 0\n        for j = 1, len do\n\
    \            if arr[j] > max then\n                max = arr[j]\n            \
    \    max_idx = j\n            end\n        end\n        res[i] = max\n       \
    \ arr[max_idx] = -math.huge\n    end\n    return res\nend", "    local function\
    \ partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n\
    \        for j = lo, hi - 1 do\n            if arr[j] > pivot then\n         \
    \       arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n         \
    \   end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return\
    \ i\n    end\n    local function quick_select(arr, lo, hi, k)\n        if lo >=\
    \ hi then\n            return\n        end\n        local p = partition(arr, lo,\
    \ hi)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            quick_select(arr, lo, p - 1, k)\n        else\n            quick_select(arr,\
    \ p + 1, hi, k)\n        end\n    end\n    quick_select(arr, 1, #arr, k)\n   \
    \ return arr\nend", "    local len = #arr\n    if len == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k >= len then return arr end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        local j = 1\n        while j <= k do\n   \
    \         if arr[i] > res[j] then\n                table.remove(res, j)\n    \
    \            table.insert(res, j, arr[i])\n                break\n           \
    \ end\n            j = j + 1\n        end\n    end\n    return res\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local t = {}\n \
    \   for i = 1, k do\n        local max = -math.huge\n        local max_i = 0\n\
    \        for j = 1, #arr do\n            if arr[j] > max then\n              \
    \  max = arr[j]\n                max_i = j\n            end\n        end\n   \
    \     table.insert(t, max)\n        table.remove(arr, max_i)\n    end\n    return\
    \ t\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local result = {}\n    for i = 1, k do\n   \
    \     local max = -math.huge\n        local index = 0\n        for j = 1, len\
    \ do\n            if arr[j] > max then\n                max = arr[j]\n       \
    \         index = j\n            end\n        end\n        table.insert(result,\
    \ max)\n        arr[index] = -math.huge\n    end\n    return result\nend", " \
    \   local function partition(arr, l, r)\n        local pivot = arr[l]\n      \
    \  local i = l\n        local j = r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local max_index = 0\n        for j = 1, #arr do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n                max_index = j\n  \
    \          end\n        end\n        res[i] = max\n        table.remove(arr, max_index)\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1\
    \ do\n            if arr[j] > pivot then\n                i = i + 1\n        \
    \        arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n     \
    \   arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n \
    \   local function quick_select(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quick_select(arr, p + 1, r, k)\n        else\n           \
    \ return quick_select(arr, l, p - 1, k)\n        end\n    end\n    local function\
    \ quick_select_k(arr, k)\n        local res = {}\n        for i = 1, k do\n  \
    \          res[i] = quick_select(arr, 1, #arr, i)\n        end\n        return\
    \ res\n    end\n    return quick_select_k(arr, k)\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, k do\n        local max = -math.huge\n\
    \        local index = 0\n        for j = 1, #arr do\n            if arr[j] >\
    \ max then\n                max = arr[j]\n                index = j\n        \
    \    end\n        end\n        table.insert(t, max)\n        table.remove(arr,\
    \ index)\n    end\n    return t\nend", "    local t = {}\n    for i = 1, k do\n\
    \        local max = -math.huge\n        local max_idx = nil\n        for j =\
    \ 1, #arr do\n            if arr[j] > max then\n                max = arr[j]\n\
    \                max_idx = j\n            end\n        end\n        t[i] = max\n\
    \        table.remove(arr, max_idx)\n    end\n    return t\nend", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n  \
    \  if k == len then\n        table.sort(arr)\n        return arr\n    end\n  \
    \  local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n \
    \   table.sort(heap)\n    for i = k + 1, len do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            table.sort(heap)\n        end\n   \
    \ end\n    return heap\nend", "    local function partition(arr, l, r)\n     \
    \   local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n \
    \           if arr[j] >= pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local t = {}\n    for i = 1, k do\n        local max = arr[i]\n\
    \        local max_index = i\n        for j = i + 1, #arr do\n            if arr[j]\
    \ > max then\n                max = arr[j]\n                max_index = j\n  \
    \          end\n        end\n        arr[max_index] = arr[i]\n        arr[i] =\
    \ max\n        t[i] = max\n    end\n    return t\nend", "    local heap = {}\n\
    \    local heap_size = 0\n    local function heap_insert(x)\n        heap_size\
    \ = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n\
    \        while i > 1 do\n            local p = math.floor(i / 2)\n           \
    \ if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n\
    \                i = p\n            else\n                break\n            end\n\
    \        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n\
    \        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n      \
    \  local i = 1\n        while i * 2 <= heap_size do\n            local l = i *\
    \ 2\n            local r = i * 2 + 1\n            local max = l\n            if\
    \ r <= heap_size and heap[r] > heap[l] then\n                max = r\n       \
    \     end\n            if heap[i] < heap[max] then\n                heap[i], heap[max]\
    \ = heap[max], heap[i]\n                i = max\n            else\n          \
    \      break\n            end\n        end\n        return ret\n    end\n    for\
    \ i = 1, #arr do\n        if heap_size < k then\n            heap_insert(arr[i])\n\
    \        else\n            if arr[i] > heap[1] then\n                heap_pop()\n\
    \                heap_insert(arr[i])\n            end\n        end\n    end\n\
    \    local ret = {}\n    for i = 1, k do\n        ret[i] = heap_pop()\n    end\n\
    \    return ret\nend", "    local function partition(arr, low, high)\n       \
    \ local pivot = arr[high]\n        local i = low - 1\n        for j = low, high\
    \ - 1 do\n            if arr[j] > pivot then\n                i = i + 1\n    \
    \            arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n \
    \       arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\
    \    end\n    local function quickSort(arr, low, high)\n        if low < high\
    \ then\n            local pi = partition(arr, low, high)\n            quickSort(arr,\
    \ low, pi - 1)\n            quickSort(arr, pi + 1, high)\n        end\n    end\n\
    \    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ n <= k then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    table.sort(heap)\n\
    \    for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            table.sort(heap)\n        end\n    end\n    return heap\n\
    end", "    local n = #arr\n    if k == n then\n        return arr\n    end\n \
    \   local function partition(arr, lo, hi)\n        local i, j = lo, hi\n     \
    \   local v = arr[lo]\n        while i < j do\n            while i < j and arr[j]\
    \ <= v do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= v do\n                i = i + 1\n     \
    \       end\n            arr[j] = arr[i]\n        end\n        arr[i] = v\n  \
    \      return i\n    end\n    local function sort(arr, lo, hi)\n        if lo\
    \ >= hi then\n            return\n        end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            sort(arr, lo, p - 1)\n        else\n            sort(arr, p + 1,\
    \ hi)\n        end\n    end\n    sort(arr, 1, n)\n    return arr\nend", "    local\
    \ n = #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n\
    \    table.sort(t)\n    for i = k + 1, n do\n        if arr[i] > t[1] then\n \
    \           t[1] = arr[i]\n            table.sort(t)\n        end\n    end\n \
    \   return t\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  local max = -math.huge\n        local idx = 0\n        for j = 1, len do\n\
    \            if arr[j] > max then\n                max = arr[j]\n            \
    \    idx = j\n            end\n        end\n        table.insert(res, max)\n \
    \       arr[idx] = -math.huge\n    end\n    return res\nend", "    local n = #arr\n\
    \    if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k\
    \ == n then return arr end\n    local heap = {}\n    for i = 1, k do\n       \
    \ heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n        local j = i\n  \
    \      while j > 1 do\n            local p = math.floor(j / 2)\n            if\
    \ heap[p] < heap[j] then\n                heap[p], heap[j] = heap[j], heap[p]\n\
    \                j = p\n            else\n                break\n            end\n\
    \        end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[l] < heap[r] then\n                    l =\
    \ r\n                end\n                if heap[j] < heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            quick_sort(arr, left, mid - 1)\n\
    \            quick_sort(arr, mid + 1, right)\n        end\n    end\n    quick_sort(arr,\
    \ 1, len)\n    local res = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res,\
    \ arr[i])\n    end\n    return res\nend", "    local len = #arr\n    if len ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k == len then\
    \ return arr end\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l + 1\n        local j = r\n        while true do\n\
    \            while i <= r and arr[i] >= pivot do i = i + 1 end\n            while\
    \ j >= l + 1 and arr[j] <= pivot do j = j - 1 end\n            if i >= j then\
    \ break end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n      \
    \  arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n    local function\
    \ quick_select(arr, l, r, k)\n        if l == r then return arr[l] end\n     \
    \   local j = partition(arr, l, r)\n        if j == k then return arr[j] end\n\
    \        if j > k then return quick_select(arr, l, j - 1, k) end\n        return\
    \ quick_select(arr, j + 1, r, k)\n    end\n    quick_select(arr, 1, len, k)\n\
    \    return arr\nend", "    local n = #arr\n    if k == 0 then\n        return\
    \ {}\n    elseif k == n then\n        return arr\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        local i = partition(arr, l, r)\n        if i == k then\n \
    \           return\n        elseif i < k then\n            quickSelect(arr, i\
    \ + 1, r, k)\n        else\n            quickSelect(arr, l, i - 1, k)\n      \
    \  end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n    return arr\nend",
  "    local res = {}\n    for i = 1, k do\n        local max = -math.huge\n     \
    \   local max_idx = -1\n        for j = 1, #arr do\n            if arr[j] > max\
    \ then\n                max = arr[j]\n                max_idx = j\n          \
    \  end\n        end\n        res[i] = max\n        table.remove(arr, max_idx)\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        local j = 1\n        while j <= k do\n     \
    \       if arr[i] > res[j] then\n                for l = k, j + 1, -1 do\n   \
    \                 res[l] = res[l - 1]\n                end\n                res[j]\
    \ = arr[i]\n                break\n            end\n            j = j + 1\n  \
    \      end\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local t = {}\n    for i = 1, k do\n        local m = -math.huge\n\
    \        local j = 0\n        for i, v in ipairs(arr) do\n            if v > m\
    \ then\n                m = v\n                j = i\n            end\n      \
    \  end\n        table.insert(t, m)\n        table.remove(arr, j)\n    end\n  \
    \  return t\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        local j = 1\n        while j <= k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, j)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend", "    local len = #arr\n    if k >\
    \ len then\n        k = len\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        local max = -math.huge\n        local max_index = -1\n        for j =\
    \ 1, len do\n            if arr[j] > max then\n                max = arr[j]\n\
    \                max_index = j\n            end\n        end\n        res[i] =\
    \ max\n        arr[max_index] = -math.huge\n    end\n    return res\nend", " \
    \   local len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= len then return arr end\n    local max = {}\n    for i =\
    \ 1, k do\n        local max_i = i\n        for j = i + 1, len do\n          \
    \  if arr[j] > arr[max_i] then\n                max_i = j\n            end\n \
    \       end\n        max[i] = arr[max_i]\n        arr[max_i] = arr[i]\n    end\n\
    \    return max\nend", "    local n = #arr\n    if k == 0 then\n        return\
    \ {}\n    elseif k == n then\n        return arr\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l\n  \
    \      for j = l, r - 1 do\n            if arr[j] < pivot then\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n\
    \        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n\
    \    local function quick_select(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local p = partition(arr, l, r)\n \
    \       if p == k then\n            return arr[p]\n        elseif p < k then\n\
    \            return quick_select(arr, p + 1, r, k)\n        else\n           \
    \ return quick_select(arr, l, p - 1, k)\n        end\n    end\n    local function\
    \ sort(arr, l, r)\n        if l >= r then\n            return\n        end\n \
    \       local p = partition(arr, l, r)\n        sort(arr, l, p - 1)\n        sort(arr,\
    \ p + 1, r)\n    end\n    local pivot = quick_select(arr, 1, n, k)\n    local\
    \ i = 1\n    for j = 1, n do\n        if arr[j] >= pivot then\n            arr[i],\
    \ arr[j] = arr[j], arr[i]\n            i = i + 1\n        end\n    end\n    sort(arr,\
    \ 1, i - 1)\n    return arr\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quick_sort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function quickSort(arr, l, r)\n        if l >= r then\
    \ return end\n        local i, j = l, r\n        local pivot = arr[i]\n      \
    \  while i < j do\n            while i < j and arr[j] <= pivot do j = j - 1 end\n\
    \            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do i\
    \ = i + 1 end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        quickSort(arr, l, i - 1)\n        quickSort(arr, i + 1, r)\n    end\n\
    \    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ k == n then\n        return arr\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_select(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local mid = partition(arr, left, right)\n        if mid\
    \ == k then\n            return arr[mid]\n        elseif mid < k then\n      \
    \      return quick_select(arr, mid + 1, right, k)\n        else\n           \
    \ return quick_select(arr, left, mid - 1, k)\n        end\n    end\n    local\
    \ function sort(arr, left, right)\n        if left < right then\n            local\
    \ mid = partition(arr, left, right)\n            sort(arr, left, mid - 1)\n  \
    \          sort(arr, mid + 1, right)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, k)\n    sort(arr, 1, k)\n    return arr\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quickSelect(arr, l, pivot - 1, k)\n        else\n        \
    \    return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, #arr, k)\n    return arr\nend", "    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] >= pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return\n        end\n        local\
    \ pivot = partition(arr, l, r)\n        if pivot == k then\n            return\n\
    \        elseif pivot < k then\n            quickselect(arr, pivot + 1, r, k)\n\
    \        else\n            quickselect(arr, l, pivot - 1, k)\n        end\n  \
    \  end\n    quickselect(arr, 1, #arr, k)\n    return arr\nend", "    local n =\
    \ #arr\n    if k == n then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local t = {}\n    for i = 1, k do\n        t[i] = arr[i]\n    end\n    table.sort(t)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and t[j] <\
    \ arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n    \
    \        table.insert(t, j, arr[i])\n            table.remove(t)\n        end\n\
    \    end\n    return t\nend", "    local len = #arr\n    local t = {}\n    for\
    \ i = 1, len do\n        local v = arr[i]\n        local j = #t\n        while\
    \ j > 0 and v > t[j] do\n            j = j - 1\n        end\n        if j < k\
    \ then\n            table.insert(t, j + 1, v)\n            if #t > k then\n  \
    \              table.remove(t)\n            end\n        end\n    end\n    return\
    \ t\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, l, r)\n        if l < r then\n            local m = partition(arr,\
    \ l, r)\n            quick_sort(arr, l, m - 1)\n            quick_sort(arr, m\
    \ + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n  \
    \  if k > len then\n        k = len\n    end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i =\
    \ k + 1, len do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n\
    \            table.sort(res)\n        end\n    end\n    return res\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            if i < j then\n                arr[i] = arr[j]\n   \
    \             i = i + 1\n            end\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local t = {}\n    for\
    \ i = 1, k do\n        local max = -math.huge\n        local index = -1\n    \
    \    for j = 1, #arr do\n            if arr[j] > max then\n                max\
    \ = arr[j]\n                index = j\n            end\n        end\n        t[i]\
    \ = max\n        table.remove(arr, index)\n    end\n    return t\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            if i < j then\n                arr[i] = arr[j]\n       \
    \         i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n     \
    \   res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if len == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= len then return arr end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_sort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quick_sort(arr, left, pivot\
    \ - 1)\n            quick_sort(arr, pivot + 1, right)\n        end\n    end\n\
    \    quick_sort(arr, 1, len)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quick_sort(arr, left, pivot - 1)\n            quick_sort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n\
    \    if len == 0 then return {} end\n    if k == 0 then return {} end\n    if\
    \ k == len then return arr end\n    local res = {}\n    for i = 1, k do\n    \
    \    res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        local j = 1\n        while j <= k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, k)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then return\
    \ arr end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k, 1, -1 do\n        heapify(heap, i, k)\n    end\n    for\
    \ i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            heapify(heap, 1, k)\n        end\n    end\n    return heap\nend",
  "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot] end\n        if pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend", " \
    \   local len = #arr\n    if len == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == len then return arr end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    local heap = Heap.new(res, function(a,\
    \ b) return a > b end)\n    for i = k + 1, len do\n        if arr[i] > heap:top()\
    \ then\n            heap:pop()\n            heap:push(arr[i])\n        end\n \
    \   end\n    return heap:sort()\nend", "    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l - 1\n        for j = l, r -\
    \ 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n  \
    \      arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local pivot = partition(arr, l, r)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, l, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n\
    \    local function sort(arr, k)\n        local n = #arr\n        for i = 1, k\
    \ do\n            quickSelect(arr, i, n, i)\n        end\n    end\n    sort(arr,\
    \ k)\n    return arr\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    local t = {}\n    for i = 1, n do\n        local\
    \ x = arr[i]\n        local j = i\n        while j > 1 and t[j - 1] < x do\n \
    \           t[j] = t[j - 1]\n            j = j - 1\n        end\n        t[j]\
    \ = x\n        if i > k then\n            table.remove(t, 1)\n        end\n  \
    \  end\n    return t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
