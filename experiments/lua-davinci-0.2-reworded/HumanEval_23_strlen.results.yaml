---
name: HumanEval_23_strlen
language: lua
results:
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local i = 0
      while string[i] do
        i = i + 1
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrm6dmbk.lua:18:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxrm6dmbk.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local i = 0
      while string[i] do
        i = i + 1
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxzwugpj.lua:18:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpnxzwugpj.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('.', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, count = string:gsub("[^\128-\193]", "")
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('.', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, count = string:gsub("[^\128-\193]", "")
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local i = 0
        while string[i + 1] do
            i = i + 1
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiivzr1j_.lua:18:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpiivzr1j_.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub(".", "")
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('[^\128-\193]', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local i = 0
        while string[i + 1] do
            i = i + 1
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v70iuqt.lua:18:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp_v70iuqt.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local i = 0
        for _ in string:gmatch('.') do
            i = i + 1
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub('[^\128-\193]', '')
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub("[^\128-\193]", "")
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local i = 0
      for _ in string:gmatch('.') do
        i = i + 1
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local length = 0
        for i = 1, #string do
            length = length + 1
        end
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local i = 0
      for _ in string:gmatch('.') do
        i = i + 1
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, count = string:gsub("[^\128-\193]", "")
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, count = string:gsub("[^\128-\193]", "")
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, count = string:gsub("[^\128-\193]", "")
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('.', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, count = string:gsub("[^\128-\193]", "")
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('[^\128-\193]', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local i = 0
      for _ in string:gmatch('.') do
        i = i + 1
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('.', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub('[^\128-\193]', '')
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, count = string:gsub(".", "")
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local _, length = string:gsub("[^\128-\193]", "")
        return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local i = 0
        for _ in string:gmatch('.') do
            i = i + 1
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local i = 0
        for _ in string:gmatch('.') do
            i = i + 1
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local i = 0
      while string[i + 1] do
        i = i + 1
      end
      return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s1dfjo2.lua:18:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp2s1dfjo2.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        local i = 0
        while string[i] do
            i = i + 1
        end
        return i
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdemwmvr.lua:18:
    expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpxdemwmvr.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      local _, length = string:gsub('[^\128-\193]', '')
      return length
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
      return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return length of given string
    -- >>> strlen('')
    -- 0
    -- >>> strlen('abc')
    -- 3
    local function strlen(string)
        return #string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = strlen
        lu.assertEquals(candidate(''), 0)
        lu.assertEquals(candidate('x'), 1)
        lu.assertEquals(candidate('asdasnakj'), 9)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
