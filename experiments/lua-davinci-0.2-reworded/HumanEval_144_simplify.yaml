---
name: HumanEval_144_simplify
language: lua
prompt: |
  -- Your task is to implement a function that will simplify the expression
  -- x * n. The function returns true if x * n evaluates to a whole number and false
  -- otherwise. Both x and n, are string representation of a fraction, and have the following format,
  -- <numerator>/<denominator> where both numerator and denominator are positive whole numbers.
  -- You can assume that x, and n are valid fractions, and do not have zero as denominator.
  -- >>> simplify('1/5', '5/1')
  -- true
  -- >>> simplify('1/6', '2/1')
  -- false
  -- >>> simplify('7/10', '10/2')
  -- false
  local function simplify(x, n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = simplify
      lu.assertEquals(candidate('1/5', '5/1'), true)
      lu.assertEquals(candidate('1/6', '2/1'), false)
      lu.assertEquals(candidate('5/1', '3/1'), true)
      lu.assertEquals(candidate('7/10', '10/2'), false)
      lu.assertEquals(candidate('2/10', '50/10'), true)
      lu.assertEquals(candidate('7/2', '4/2'), true)
      lu.assertEquals(candidate('11/6', '6/1'), true)
      lu.assertEquals(candidate('2/3', '5/2'), false)
      lu.assertEquals(candidate('5/2', '3/5'), false)
      lu.assertEquals(candidate('2/4', '8/4'), true)
      lu.assertEquals(candidate('2/4', '4/2'), true)
      lu.assertEquals(candidate('1/5', '5/1'), true)
      lu.assertEquals(candidate('1/5', '1/5'), false)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
      local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local result_numerator = x_numerator * n_numerator
      local result_denominator = x_denominator * n_denominator
      return result_numerator % result_denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    return result % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      x_num, x_den = tonumber(x_num), tonumber(x_den)
      n_num, n_den = tonumber(n_num), tonumber(n_den)
      local res_num = x_num * n_num
      local res_den = x_den * n_den
      local res = res_num / res_den
      return res % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      if numerator % denominator == 0 then
          return true
      else
          return false
      end
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = tonumber(x_num) * tonumber(n_den)
    local den = tonumber(x_den) * tonumber(n_num)
    return num % den == 0
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      if numerator % denominator == 0 then
          return true
      else
          return false
      end
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local result_numerator = x_numerator * n_numerator
      local result_denominator = x_denominator * n_denominator
      local result = result_numerator / result_denominator
      return result % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local x_numerator = tonumber(x_numerator)
      local x_denominator = tonumber(x_denominator)
      local n_numerator = tonumber(n_numerator)
      local n_denominator = tonumber(n_denominator)
      local result = x_numerator * n_denominator * n_numerator * x_denominator
      if result % (x_denominator * n_denominator) == 0 then
          return true
      else
          return false
      end
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    -- TODO: Implement me
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      local gcd = math.gcd(numerator, denominator)
      return numerator / gcd == denominator / gcd
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify(x)
      local n, d = x:match('(%d+)/(%d+)')
      n, d = tonumber(n), tonumber(d)
      local g = gcd(n, d)
      return n / g, d / g
    end
    local xn, xd = simplify(x)
    local nn, nd = simplify(n)
    local l = lcm(xd, nd)
    return xn * l / xd == nn * l / nd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    local gcd = math.gcd(numerator, denominator)
    return numerator / gcd == denominator / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
      local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      local gcd = math.gcd(numerator, denominator)
      return numerator / gcd == denominator / gcd
  end
- |2-
      local x_num, x_den = x:match("(%d+)/(%d+)")
      local n_num, n_den = n:match("(%d+)/(%d+)")
      local num = x_num * n_den
      local den = x_den * n_num
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    return result_numerator % result_denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    return result % 1 == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function is_whole(x)
      return x % 1 == 0
    end
    local function to_number(x)
      return tonumber(x:match('(%d+)/(%d+)'))
    end
    local x_numerator, x_denominator = to_number(x)
    local n_numerator, n_denominator = to_number(n)
    local lcm_denominator = lcm(x_denominator, n_denominator)
    local x_numerator_lcm = x_numerator * (lcm_denominator / x_denominator)
    local n_numerator_lcm = n_numerator * (lcm_denominator / n_denominator)
    local result = x_numerator_lcm * n_numerator_lcm
    return is_whole(result)
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = tonumber(x_num) * tonumber(n_den)
    local den = tonumber(x_den) * tonumber(n_num)
    return num % den == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return den / gcd == num / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
    local xn = x * n
    return xn % 1 == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local l = lcm(x_denominator, n_denominator)
    return (x_numerator * l / x_denominator) % (n_numerator * l / n_denominator) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
      local function gcd(a, b)
          while b ~= 0 do
              local r = a % b
              a = b
              b = r
          end
          return a
      end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match("(%d+)/(%d+)")
      local gcd_ = gcd(numerator, denominator)
      return numerator / gcd_, denominator / gcd_
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local lcm_ = lcm(x_denominator, n_denominator)
    return (x_numerator * lcm_ / x_denominator) % (n_numerator * lcm_ / n_denominator) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
      n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
      local result = x_numerator * n_denominator * n_numerator * x_denominator
      return result % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    local gcd = math.gcd(numerator, denominator)
    numerator = numerator / gcd
    denominator = denominator / gcd
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local result_numerator = x_numerator * n_numerator
      local result_denominator = x_denominator * n_denominator
      local result = result_numerator / result_denominator
      return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator = tonumber(x_numerator)
    local x_denominator = tonumber(x_denominator)
    local n_numerator = tonumber(n_numerator)
    local n_denominator = tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    if result % 1 == 0 then
      return true
    else
      return false
    end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
    local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      num = num / gcd
      den = den / gcd
      return num % den == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function parse(s)
      local n, d = s:match('(%d+)/(%d+)')
      return tonumber(n), tonumber(d)
    end
    local xn, xd = parse(x)
    local nn, nd = parse(n)
    local l = lcm(xd, nd)
    return (xn * l / xd) * (nn * l / nd) % l == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    num = num / gcd
    den = den / gcd
    return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      return num % den == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      local gcd = math.gcd(numerator, denominator)
      numerator = numerator / gcd
      denominator = denominator / gcd
      return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local xn = x * n
    return xn == math.floor(xn)
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return (a * b) / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match("(%d+)/(%d+)")
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local l = lcm(x_denominator, n_denominator)
    return (x_numerator * (l / x_denominator)) % (n_numerator * (l / n_denominator)) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      num = num / gcd
      den = den / gcd
      return num % den == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function parse(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      return tonumber(numerator), tonumber(denominator)
    end
    local xn, xd = parse(x)
    local nn, nd = parse(n)
    local l = lcm(xd, nd)
    return (xn * l / xd) % (nn * l / nd) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local xn, xd = simplify(x)
    local nn, nd = simplify(n)
    local l = lcm(xd, nd)
    return l % (xn * nn) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    return result_numerator % result_denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
      local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
    -- your code here
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return (a * b) / gcd(a, b)
    end
    local function simplify(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local xn, xd = simplify(x)
    local nn, nd = simplify(n)
    local l = lcm(xd, nd)
    return (l / xd) * xn == (l / nd) * nn
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local result_numerator = x_numerator * n_numerator
      local result_denominator = x_denominator * n_denominator
      return result_numerator % result_denominator == 0
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match("(%d+)/(%d+)")
      local gcd_ = gcd(numerator, denominator)
      return numerator / gcd_, denominator / gcd_
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local lcm_ = lcm(x_denominator, n_denominator)
    return (lcm_ / x_denominator) * x_numerator == (lcm_ / n_denominator) * n_numerator
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local x_numerator, x_denominator = x_numerator * n_denominator, x_denominator * n_numerator
    local gcd = math.gcd(x_numerator, x_denominator)
    x_numerator, x_denominator = x_numerator / gcd, x_denominator / gcd
    return x_numerator % x_denominator == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    num = num / gcd
    den = den / gcd
    return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function parse(s)
      local n, d = s:match('(%d+)/(%d+)')
      return tonumber(n), tonumber(d)
    end
    local xn, xd = parse(x)
    local nn, nd = parse(n)
    return lcm(xd, nd) % (xn * nn) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      return num % den == 0
  end
- "  local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,
  a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n
  \ local function to_number(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n
  \   return tonumber(numerator) / tonumber(denominator)\n  end\n  local function
  to_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local
  g = gcd(numerator, denominator)\n    return string.format('%d/%d', numerator / g,
  denominator / g)\n  end\n  local function is_integer(x)\n    return x % 1 == 0\n
  \ end\n  local function multiply(x, n)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n
  \   local numerator_n, denominator_n = n:match('(%d+)/(%d+)')\n    return string.format('%d/%d',
  numerator * numerator_n, denominator * denominator_n)\n  end\n  local function divide(x,
  n)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local numerator_n,
  denominator_n = n:match('(%d+)/(%d+)')\n    return string.format('%d/%d', numerator
  * denominator_n, denominator * numerator_n)\n  end\n  local function add(x, n)\n
  \   local numerator, denominator = x:match('(%d+)/(%d+)')\n    local numerator_n,
  denominator_n = n:match('(%d+)/(%d+)')\n    local l = lcm(denominator, denominator_n)\n
  \   return string.format('%d/%d', numerator * l / denominator + numerator_n * l
  / denominator_n, l)\n "
- |2-
    -- your code here
  end
- |2-
    -- your code here
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
    local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local x_numerator = x_numerator * n_denominator
    local x_denominator = x_denominator * n_numerator
    local x_numerator, x_denominator = math.floor(x_numerator), math.floor(x_denominator)
    return x_numerator % x_denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local result_numerator = x_numerator * n_numerator
      local result_denominator = x_denominator * n_denominator
      local result = result_numerator / result_denominator
      return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    local gcd = math.gcd(numerator, denominator)
    numerator = numerator / gcd
    denominator = denominator / gcd
    return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      numerator, denominator = tonumber(numerator), tonumber(denominator)
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local l = lcm(x_denominator, n_denominator)
    return l % (x_numerator * n_numerator) == 0
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    x_num, x_den = tonumber(x_num), tonumber(x_den)
    n_num, n_den = tonumber(n_num), tonumber(n_den)
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    num = num / gcd
    den = den / gcd
    return num % den == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function to_num(x)
      local num, den = x:match('(%d+)/(%d+)')
      return tonumber(num), tonumber(den)
    end
    local x_num, x_den = to_num(x)
    local n_num, n_den = to_num(n)
    local l = lcm(x_den, n_den)
    return (x_num * l / x_den) % (n_num * l / n_den) == 0
  end
- |2-
    -- TODO: Implement me
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      local gcd = math.gcd(numerator, denominator)
      numerator = numerator / gcd
      denominator = denominator / gcd
      return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function is_whole(x)
      return x % 1 == 0
    end
    local function to_num(x)
      return tonumber(x)
    end
    local function to_str(x)
      return tostring(x)
    end
    local function to_frac(x)
      local num, den = x:match('(%d+)/(%d+)')
      return to_num(num), to_num(den)
    end
    local function to_str_frac(x)
      local num, den = x:match('(%d+)/(%d+)')
      return to_str(num), to_str(den)
    end
    local function mul(x, n)
      local x_num, x_den = to_frac(x)
      local n_num, n_den = to_frac(n)
      local num = x_num * n_num
      local den = x_den * n_den
      return to_str(num) .. '/' .. to_str(den)
    end
    local function simplify_frac(x)
      local num, den = to_frac(x)
      local g = gcd(num, den)
      return to_str(num / g) .. '/' .. to_str(den / g)
    end
    local function is_simplified(x)
      local num, den = to_frac(x)
      return num == 1 or den == 1
    end
    local function is_whole_frac(x)
      local num, den = to_frac(x)
      return is_whole(num / den)
    end
    local function is_whole_mul(x, n)
      local x_num, x_den = to_frac(x)
      local n_num, n_den = to_frac(n)
      local l
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local result_numerator = x_numerator * n_numerator
      local result_denominator = x_denominator * n_denominator
      local result = result_numerator / result_denominator
      return result % 1 == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = tonumber(x_numerator) * tonumber(n_denominator)
      local denominator = tonumber(x_denominator) * tonumber(n_numerator)
      return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
    local numerator = x_numerator * n_numerator
    local denominator = x_denominator * n_denominator
    local gcd = math.gcd(numerator, denominator)
    numerator = numerator / gcd
    denominator = denominator / gcd
    return numerator % denominator == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    num = num / gcd
    den = den / gcd
    return num % den == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      numerator, denominator = tonumber(numerator), tonumber(denominator)
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local l = lcm(x_denominator, n_denominator)
    return (x_numerator * l / x_denominator) % (n_numerator * l / n_denominator) == 0
  end
- |2-
      local x_num, x_den = x:match("(%d+)/(%d+)")
      local n_num, n_den = n:match("(%d+)/(%d+)")
      local x_num, x_den = tonumber(x_num), tonumber(x_den)
      local n_num, n_den = tonumber(n_num), tonumber(n_den)
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      num = num / gcd
      den = den / gcd
      return num % den == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return gcd == den
  end
- |2-
    local xn = x * n
    return xn % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return den / gcd == num / gcd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator = tonumber(x_numerator)
    local x_denominator = tonumber(x_denominator)
    local n_numerator = tonumber(n_numerator)
    local n_denominator = tonumber(n_denominator)
    local result = x_numerator * n_denominator
    local result_denominator = x_denominator * n_numerator
    if result % result_denominator == 0 then
      return true
    else
      return false
    end
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local x_numerator = tonumber(x_numerator)
      local x_denominator = tonumber(x_denominator)
      local n_numerator = tonumber(n_numerator)
      local n_denominator = tonumber(n_denominator)
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      local result = numerator / denominator
      if result % 1 == 0 then
          return true
      else
          return false
      end
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
      local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
      local x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)
      local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)
      local result = x_numerator * n_denominator * n_numerator * x_denominator
      return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function parse(s)
      local n, d = s:match('(%d+)/(%d+)')
      return tonumber(n), tonumber(d)
    end
    local xn, xd = parse(x)
    local nn, nd = parse(n)
    return lcm(xd, nd) % (xd * nn) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
    local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
    local result = (x_numerator * n_denominator) / (x_denominator * n_numerator)
    return result % 1 == 0
  end
- |2-
    local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
    local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local l = lcm(x_denominator, n_denominator)
    return (x_numerator * l / x_denominator) % (n_numerator * l / n_denominator) == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      num = num / gcd
      den = den / gcd
      return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_num, x_den = x:match("(%d+)/(%d+)")
    local n_num, n_den = n:match("(%d+)/(%d+)")
    local num = x_num * n_den
    local den = x_den * n_num
    return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator = tonumber(x_numerator)
    local x_denominator = tonumber(x_denominator)
    local n_numerator = tonumber(n_numerator)
    local n_denominator = tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    if result % (x_denominator * n_denominator) == 0 then
      return true
    else
      return false
    end
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_num, x_den = x:match("(%d+)/(%d+)")
    local n_num, n_den = n:match("(%d+)/(%d+)")
    local num = x_num * n_den
    local den = x_den * n_num
    return num % den == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      local gcd = math.gcd(num, den)
      return num / gcd == den / gcd
  end
- |2-
      local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
      local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
      local x_numerator = tonumber(x_numerator)
      local x_denominator = tonumber(x_denominator)
      local n_numerator = tonumber(n_numerator)
      local n_denominator = tonumber(n_denominator)
      local result = x_numerator * n_denominator * n_numerator * x_denominator
      if result % 1 == 0 then
          return true
      else
          return false
      end
  end
- |2-
      local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
      local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
      local numerator = x_numerator * n_denominator
      local denominator = x_denominator * n_numerator
      return numerator % denominator == 0
  end
- |2-
      local function gcd(a, b)
          if b == 0 then
              return a
          else
              return gcd(b, a % b)
          end
      end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify_fraction(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify_fraction(x)
    local n_numerator, n_denominator = simplify_fraction(n)
    local l = lcm(x_denominator, n_denominator)
    return (l / x_denominator) * x_numerator == (l / n_denominator) * n_numerator
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    return (x_num * n_den) % (x_den * n_num) == 0
  end
- |2-
      local x_num, x_den = x:match('(%d+)/(%d+)')
      local n_num, n_den = n:match('(%d+)/(%d+)')
      local num = x_num * n_num
      local den = x_den * n_den
      return num % den == 0
  end
- |2-
    local x_num, x_den = x:match("(%d+)/(%d+)")
    local n_num, n_den = n:match("(%d+)/(%d+)")
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local function gcd(a, b)
      if b == 0 then return a end
      return gcd(b, a % b)
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function to_num(s)
      local num, den = s:match('(%d+)/(%d+)')
      return tonumber(num), tonumber(den)
    end
    local x_num, x_den = to_num(x)
    local n_num, n_den = to_num(n)
    return (x_num * n_den) % (x_den * n_num) == 0
  end
- |2-
      local x_numerator, x_denominator = x:match("(%d+)/(%d+)")
      local n_numerator, n_denominator = n:match("(%d+)/(%d+)")
      local x_numerator = tonumber(x_numerator)
      local x_denominator = tonumber(x_denominator)
      local n_numerator = tonumber(n_numerator)
      local n_denominator = tonumber(n_denominator)
      local result = x_numerator * n_denominator * n_numerator * x_denominator
      if result % x_denominator == 0 then
          return true
      else
          return false
      end
  end
- |2-
      local function gcd(a, b)
          while b ~= 0 do
              a, b = b, a % b
          end
          return a
      end
      local function lcm(a, b)
          return a * b / gcd(a, b)
      end
      local function simplify_fraction(x)
          local numerator, denominator = x:match('(%d+)/(%d+)')
          numerator, denominator = tonumber(numerator), tonumber(denominator)
          local g = gcd(numerator, denominator)
          return numerator / g, denominator / g
      end
      local x_numerator, x_denominator = simplify_fraction(x)
      local n_numerator, n_denominator = simplify_fraction(n)
      local l = lcm(x_denominator, n_denominator)
      return (l / x_denominator) * x_numerator % l == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    return result_numerator % result_denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local function gcd(a, b)
      while b ~= 0 do
        a, b = b, a % b
      end
      return a
    end
    local function lcm(a, b)
      return a * b / gcd(a, b)
    end
    local function simplify(x)
      local numerator, denominator = x:match('(%d+)/(%d+)')
      numerator, denominator = tonumber(numerator), tonumber(denominator)
      local g = gcd(numerator, denominator)
      return numerator / g, denominator / g
    end
    local x_numerator, x_denominator = simplify(x)
    local n_numerator, n_denominator = simplify(n)
    local l = lcm(x_denominator, n_denominator)
    return (l / x_denominator) * x_numerator % l == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    local gcd = math.gcd(numerator, denominator)
    numerator = numerator / gcd
    denominator = denominator / gcd
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    return result_numerator % result_denominator == 0
  end
- |2-
    local x_num, x_den = x:match("(%d+)/(%d+)")
    local n_num, n_den = n:match("(%d+)/(%d+)")
    local num = x_num * n_num
    local den = x_den * n_den
    return num % den == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = tonumber(x_numerator) * tonumber(n_denominator)
    local denominator = tonumber(x_denominator) * tonumber(n_numerator)
    return numerator % denominator == 0
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local x_numerator = tonumber(x_numerator)
    local x_denominator = tonumber(x_denominator)
    local n_numerator = tonumber(n_numerator)
    local n_denominator = tonumber(n_denominator)
    local result = x_numerator * n_denominator * n_numerator * x_denominator
    if result % 1 == 0 then
      return true
    else
      return false
    end
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local numerator = x_numerator * n_denominator
    local denominator = x_denominator * n_numerator
    local gcd = math.gcd(numerator, denominator)
    return numerator / gcd == denominator / gcd
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
- |2-
    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')
    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')
    local result_numerator = x_numerator * n_numerator
    local result_denominator = x_denominator * n_denominator
    local result = result_numerator / result_denominator
    return result % 1 == 0
  end
- |2-
    local x_num, x_den = x:match('(%d+)/(%d+)')
    local n_num, n_den = n:match('(%d+)/(%d+)')
    local num = x_num * n_num
    local den = x_den * n_den
    local gcd = math.gcd(num, den)
    return num / gcd == den / gcd
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
