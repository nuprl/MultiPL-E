name: HumanEval_144_simplify
language: lua
prompt: "-- Your task is to implement a function that will simplify the expression\n\
  -- x * n. The function returns true if x * n evaluates to a whole number and false\n\
  -- otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n-- <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n-- You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n-- >>> simplify('1/5', '5/1')\n-- true\n\
  -- >>> simplify('1/6', '2/1')\n-- false\n-- >>> simplify('7/10', '10/2')\n-- false\n\
  local function simplify(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = simplify\n\
  \    lu.assertEquals(candidate('1/5', '5/1'), true)\n    lu.assertEquals(candidate('1/6',\
  \ '2/1'), false)\n    lu.assertEquals(candidate('5/1', '3/1'), true)\n    lu.assertEquals(candidate('7/10',\
  \ '10/2'), false)\n    lu.assertEquals(candidate('2/10', '50/10'), true)\n    lu.assertEquals(candidate('7/2',\
  \ '4/2'), true)\n    lu.assertEquals(candidate('11/6', '6/1'), true)\n    lu.assertEquals(candidate('2/3',\
  \ '5/2'), false)\n    lu.assertEquals(candidate('5/2', '3/5'), false)\n    lu.assertEquals(candidate('2/4',\
  \ '8/4'), true)\n    lu.assertEquals(candidate('2/4', '4/2'), true)\n    lu.assertEquals(candidate('1/5',\
  \ '5/1'), true)\n    lu.assertEquals(candidate('1/5', '1/5'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n \
    \   local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local result_numerator = x_numerator * n_numerator\n\
    \    local result_denominator = x_denominator * n_denominator\n    return result_numerator\
    \ % result_denominator == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator\n  return result\
    \ % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den\
    \ * n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\n\
    end", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n    x_num, x_den = tonumber(x_num), tonumber(x_den)\n\
    \    n_num, n_den = tonumber(n_num), tonumber(n_den)\n    local res_num = x_num\
    \ * n_num\n    local res_den = x_den * n_den\n    local res = res_num / res_den\n\
    \    return res % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  x_numerator, x_denominator\
    \ = tonumber(x_numerator), tonumber(x_denominator)\n  n_numerator, n_denominator\
    \ = tonumber(n_numerator), tonumber(n_denominator)\n  local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n  return result % 1 == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    if numerator % denominator == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  local x_num, x_den =\
    \ x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local\
    \ num = tonumber(x_num) * tonumber(n_den)\n  local den = tonumber(x_den) * tonumber(n_num)\n\
    \  return num % den == 0\nend", "    local function gcd(a, b)\n        if b ==\
    \ 0 then\n            return a\n        else\n            return gcd(b, a % b)\n\
    \        end\n    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    if numerator % denominator == 0 then\n        return true\n\
    \    else\n        return false\n    end\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local result_numerator = x_numerator * n_numerator\n    local result_denominator\
    \ = x_denominator * n_denominator\n    local result = result_numerator / result_denominator\n\
    \    return result % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  \
    \  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local x_numerator = tonumber(x_numerator)\n\
    \    local x_denominator = tonumber(x_denominator)\n    local n_numerator = tonumber(n_numerator)\n\
    \    local n_denominator = tonumber(n_denominator)\n    local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n    if result % (x_denominator\
    \ * n_denominator) == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \    local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n   \
    \ return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  local result = result_numerator / result_denominator\n\
    \  return result % 1 == 0\nend", "  -- TODO: Implement me\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    local gcd = math.gcd(numerator,\
    \ denominator)\n    return numerator / gcd == denominator / gcd\nend", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  local result = result_numerator / result_denominator\n\
    \  return result % 1 == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  local\
    \ function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n\
    \  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local\
    \ function simplify(x)\n    local n, d = x:match('(%d+)/(%d+)')\n    n, d = tonumber(n),\
    \ tonumber(d)\n    local g = gcd(n, d)\n    return n / g, d / g\n  end\n  local\
    \ xn, xd = simplify(x)\n  local nn, nd = simplify(n)\n  local l = lcm(xd, nd)\n\
    \  return xn * l / xd == nn * l / nd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "    local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  return numerator / gcd == denominator / gcd\nend", "    local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = tonumber(x_numerator)\
    \ * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator) *\
    \ tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    return numerator / gcd == denominator\
    \ / gcd\nend", "    local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n    local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n    local num = x_num * n_den\n    local den\
    \ = x_den * n_num\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  return result_numerator % result_denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local x_numerator, x_denominator = tonumber(x_numerator),\
    \ tonumber(x_denominator)\n  local n_numerator, n_denominator = tonumber(n_numerator),\
    \ tonumber(n_denominator)\n  local result = x_numerator * n_denominator * n_numerator\
    \ * x_denominator\n  return result % 1 == 0\nend", "  local function gcd(a, b)\n\
    \    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function is_whole(x)\n\
    \    return x % 1 == 0\n  end\n  local function to_number(x)\n    return tonumber(x:match('(%d+)/(%d+)'))\n\
    \  end\n  local x_numerator, x_denominator = to_number(x)\n  local n_numerator,\
    \ n_denominator = to_number(n)\n  local lcm_denominator = lcm(x_denominator, n_denominator)\n\
    \  local x_numerator_lcm = x_numerator * (lcm_denominator / x_denominator)\n \
    \ local n_numerator_lcm = n_numerator * (lcm_denominator / n_denominator)\n  local\
    \ result = x_numerator_lcm * n_numerator_lcm\n  return is_whole(result)\nend",
  "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = tonumber(x_num) * tonumber(n_den)\n  local den = tonumber(x_den)\
    \ * tonumber(n_num)\n  return num % den == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return den /\
    \ gcd == num / gcd\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  local\
    \ xn = x * n\n  return xn % 1 == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    return numerator % denominator == 0\nend", "  local function\
    \ gcd(a, b)\n    while b ~= 0 do\n      a, b = b, a % b\n    end\n    return a\n\
    \  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local\
    \ function simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  return (x_numerator * l / x_denominator) % (n_numerator *\
    \ l / n_denominator) == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "    local function\
    \ gcd(a, b)\n        while b ~= 0 do\n            local r = a % b\n          \
    \  a = b\n            b = r\n        end\n        return a\n    end", "  local\
    \ function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n\
    \  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local\
    \ function simplify_fraction(x)\n    local numerator, denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local gcd_ = gcd(numerator, denominator)\n    return numerator\
    \ / gcd_, denominator / gcd_\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n\
    \  local n_numerator, n_denominator = simplify_fraction(n)\n  local lcm_ = lcm(x_denominator,\
    \ n_denominator)\n  return (x_numerator * lcm_ / x_denominator) % (n_numerator\
    \ * lcm_ / n_denominator) == 0\nend", "    local x_numerator, x_denominator =\
    \ x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n\
    \    n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    return result % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local\
    \ n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  return num % den == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \    local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n   \
    \ return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  local result = result_numerator / result_denominator\n\
    \  return result % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local numerator = x_numerator * n_denominator\n    local denominator = x_denominator\
    \ * n_numerator\n    return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  local gcd = math.gcd(numerator, denominator)\n  numerator =\
    \ numerator / gcd\n  denominator = denominator / gcd\n  return numerator % denominator\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local result_numerator\
    \ = x_numerator * n_numerator\n    local result_denominator = x_denominator *\
    \ n_denominator\n    local result = result_numerator / result_denominator\n  \
    \  return result % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator\
    \ = tonumber(x_numerator)\n  local x_denominator = tonumber(x_denominator)\n \
    \ local n_numerator = tonumber(n_numerator)\n  local n_denominator = tonumber(n_denominator)\n\
    \  local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \  if result % 1 == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "  -- TODO: implement this function\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\n\
    end", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n\
    \  local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  return num % den == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local x_numerator, x_denominator =\
    \ x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function parse(s)\n    local n, d = s:match('(%d+)/(%d+)')\n\
    \    return tonumber(n), tonumber(d)\n  end\n  local xn, xd = parse(x)\n  local\
    \ nn, nd = parse(n)\n  local l = lcm(xd, nd)\n  return (xn * l / xd) * (nn * l\
    \ / nd) % l == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator / result_denominator\n  return result % 1 ==\
    \ 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local\
    \ n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator\
    \ * n_denominator\n  local denominator = x_denominator * n_numerator\n  return\
    \ numerator % denominator == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  return num % den == 0\nend", "  local x_num, x_den\
    \ = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local\
    \ num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return\
    \ numerator % denominator == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    return num % den == 0\nend", "    local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "    local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n    local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \    local num = x_num * n_num\n    local den = x_den * n_den\n    local gcd =\
    \ math.gcd(num, den)\n    return num / gcd == den / gcd\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    local gcd = math.gcd(numerator,\
    \ denominator)\n    numerator = numerator / gcd\n    denominator = denominator\
    \ / gcd\n    return numerator % denominator == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  return num % den == 0\nend", "  local xn = x *\
    \ n\n  return xn == math.floor(xn)\nend", "    local function gcd(a, b)\n    \
    \    if b == 0 then\n            return a\n        else\n            return gcd(b,\
    \ a % b)\n        end\n    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "  local\
    \ function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n\
    \  end\n  local function lcm(a, b)\n    return (a * b) / gcd(a, b)\n  end\n  local\
    \ function simplify_fraction(x)\n    local numerator, denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local g = gcd(numerator, denominator)\n    return numerator\
    \ / g, denominator / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n\
    \  local n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  return (x_numerator * (l / x_denominator)) % (n_numerator\
    \ * (l / n_denominator)) == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    return numerator % denominator == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "  local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n \
    \   return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function parse(x)\n    local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n    return tonumber(numerator), tonumber(denominator)\n\
    \  end\n  local xn, xd = parse(x)\n  local nn, nd = parse(n)\n  local l = lcm(xd,\
    \ nd)\n  return (xn * l / xd) % (nn * l / nd) == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local function gcd(a, b)\n    while b ~= 0 do\n      a, b = b,\
    \ a % b\n    end\n    return a\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify(x)\n    local numerator,\
    \ denominator = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local xn, xd = simplify(x)\n\
    \  local nn, nd = simplify(n)\n  local l = lcm(xd, nd)\n  return l % (xn * nn)\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local result\
    \ = x_numerator * n_denominator * n_numerator * x_denominator\n  return result\
    \ % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  return result_numerator % result_denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "    local\
    \ x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator,\
    \ n_denominator = n:match(\"(%d+)/(%d+)\")\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "  -- your code here\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return (a * b) / gcd(a, b)\n  end\n  local function\
    \ simplify(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n   \
    \ local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local xn, xd = simplify(x)\n  local nn, nd = simplify(n)\n  local\
    \ l = lcm(xd, nd)\n  return (l / xd) * xn == (l / nd) * nn\nend", "    local function\
    \ gcd(a, b)\n        if b == 0 then\n            return a\n        else\n    \
    \        return gcd(b, a % b)\n        end\n    end", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local result_numerator = x_numerator * n_numerator\n\
    \    local result_denominator = x_denominator * n_denominator\n    return result_numerator\
    \ % result_denominator == 0\nend", "    local function gcd(a, b)\n        if b\
    \ == 0 then\n            return a\n        else\n            return gcd(b, a %\
    \ b)\n        end\n    end", "    local function gcd(a, b)\n        if b == 0\
    \ then\n            return a\n        else\n            return gcd(b, a % b)\n\
    \        end\n    end", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local x_numerator, x_denominator = tonumber(x_numerator),\
    \ tonumber(x_denominator)\n  local n_numerator, n_denominator = tonumber(n_numerator),\
    \ tonumber(n_denominator)\n  local result = x_numerator * n_denominator * n_numerator\
    \ * x_denominator\n  return result % 1 == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  local result = result_numerator / result_denominator\n\
    \  return result % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match(\"(%d+)/(%d+)\")\n    local gcd_ = gcd(numerator, denominator)\n\
    \    return numerator / gcd_, denominator / gcd_\n  end\n  local x_numerator,\
    \ x_denominator = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local lcm_ = lcm(x_denominator, n_denominator)\n  return (lcm_ / x_denominator)\
    \ * x_numerator == (lcm_ / n_denominator) * n_numerator\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local x_numerator, x_denominator = tonumber(x_numerator),\
    \ tonumber(x_denominator)\n  local n_numerator, n_denominator = tonumber(n_numerator),\
    \ tonumber(n_denominator)\n  local x_numerator, x_denominator = x_numerator *\
    \ n_denominator, x_denominator * n_numerator\n  local gcd = math.gcd(x_numerator,\
    \ x_denominator)\n  x_numerator, x_denominator = x_numerator / gcd, x_denominator\
    \ / gcd\n  return x_numerator % x_denominator == 0\nend", "  local x_num, x_den\
    \ = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local\
    \ num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  num = num / gcd\n  den = den / gcd\n  return num % den == 0\nend", " \
    \ local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator = x_numerator\
    \ * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator / result_denominator\n  return result % 1 ==\
    \ 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n    return\
    \ gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a,\
    \ b)\n  end\n  local function parse(s)\n    local n, d = s:match('(%d+)/(%d+)')\n\
    \    return tonumber(n), tonumber(d)\n  end\n  local xn, xd = parse(x)\n  local\
    \ nn, nd = parse(n)\n  return lcm(xd, nd) % (xn * nn) == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator * n_denominator\n\
    \    local denominator = x_denominator * n_numerator\n    return numerator % denominator\
    \ == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "  local x_num,\
    \ x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    return num % den == 0\nend", "  local function gcd(a, b)\n\
    \    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function to_number(x)\n\
    \    local numerator, denominator = x:match('(%d+)/(%d+)')\n    return tonumber(numerator)\
    \ / tonumber(denominator)\n  end\n  local function to_fraction(x)\n    local numerator,\
    \ denominator = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator, denominator)\n\
    \    return string.format('%d/%d', numerator / g, denominator / g)\n  end\n  local\
    \ function is_integer(x)\n    return x % 1 == 0\n  end\n  local function multiply(x,\
    \ n)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local numerator_n,\
    \ denominator_n = n:match('(%d+)/(%d+)')\n    return string.format('%d/%d', numerator\
    \ * numerator_n, denominator * denominator_n)\n  end\n  local function divide(x,\
    \ n)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local numerator_n,\
    \ denominator_n = n:match('(%d+)/(%d+)')\n    return string.format('%d/%d', numerator\
    \ * denominator_n, denominator * numerator_n)\n  end\n  local function add(x,\
    \ n)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local numerator_n,\
    \ denominator_n = n:match('(%d+)/(%d+)')\n    local l = lcm(denominator, denominator_n)\n\
    \    return string.format('%d/%d', numerator * l / denominator + numerator_n *\
    \ l / denominator_n, l)\n ", "  -- your code here\nend", "  -- your code here\n\
    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator = x_numerator\
    \ * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator / result_denominator\n  return result % 1 ==\
    \ 0\nend", "  local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\")\n  local\
    \ n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local x_numerator\
    \ = x_numerator * n_denominator\n  local x_denominator = x_denominator * n_numerator\n\
    \  local x_numerator, x_denominator = math.floor(x_numerator), math.floor(x_denominator)\n\
    \  return x_numerator % x_denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local result_numerator\
    \ = x_numerator * n_numerator\n    local result_denominator = x_denominator *\
    \ n_denominator\n    local result = result_numerator / result_denominator\n  \
    \  return result % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "  local function gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b,\
    \ a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n\
    \  local function simplify_fraction(x)\n    local numerator, denominator = x:match('(%d+)/(%d+)')\n\
    \    numerator, denominator = tonumber(numerator), tonumber(denominator)\n   \
    \ local g = gcd(numerator, denominator)\n    return numerator / g, denominator\
    \ / g\n  end\n  local x_numerator, x_denominator = simplify_fraction(x)\n  local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n  local l = lcm(x_denominator,\
    \ n_denominator)\n  return l % (x_numerator * n_numerator) == 0\nend", "    local\
    \ function gcd(a, b)\n        if b == 0 then\n            return a\n        else\n\
    \            return gcd(b, a % b)\n        end\n    end", "  local x_num, x_den\
    \ = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  x_num,\
    \ x_den = tonumber(x_num), tonumber(x_den)\n  n_num, n_den = tonumber(n_num),\
    \ tonumber(n_den)\n  local num = x_num * n_num\n  local den = x_den * n_den\n\
    \  local gcd = math.gcd(num, den)\n  num = num / gcd\n  den = den / gcd\n  return\
    \ num % den == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return\
    \ a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function to_num(x)\n    local num, den = x:match('(%d+)/(%d+)')\n\
    \    return tonumber(num), tonumber(den)\n  end\n  local x_num, x_den = to_num(x)\n\
    \  local n_num, n_den = to_num(n)\n  local l = lcm(x_den, n_den)\n  return (x_num\
    \ * l / x_den) % (n_num * l / n_den) == 0\nend", "  -- TODO: Implement me\nend",
  "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator / result_denominator\n  return result % 1 ==\
    \ 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  local gcd = math.gcd(num, den)\n  return num / gcd == den / gcd\nend",
  "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator *\
    \ n_denominator\n    local denominator = x_denominator * n_numerator\n    local\
    \ gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n  \
    \  denominator = denominator / gcd\n    return numerator % denominator == 0\n\
    end", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local\
    \ n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  return (x_numerator\
    \ * n_denominator) % (x_denominator * n_numerator) == 0\nend", "  local function\
    \ gcd(a, b)\n    if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n\
    \  local function lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function\
    \ is_whole(x)\n    return x % 1 == 0\n  end\n  local function to_num(x)\n    return\
    \ tonumber(x)\n  end\n  local function to_str(x)\n    return tostring(x)\n  end\n\
    \  local function to_frac(x)\n    local num, den = x:match('(%d+)/(%d+)')\n  \
    \  return to_num(num), to_num(den)\n  end\n  local function to_str_frac(x)\n \
    \   local num, den = x:match('(%d+)/(%d+)')\n    return to_str(num), to_str(den)\n\
    \  end\n  local function mul(x, n)\n    local x_num, x_den = to_frac(x)\n    local\
    \ n_num, n_den = to_frac(n)\n    local num = x_num * n_num\n    local den = x_den\
    \ * n_den\n    return to_str(num) .. '/' .. to_str(den)\n  end\n  local function\
    \ simplify_frac(x)\n    local num, den = to_frac(x)\n    local g = gcd(num, den)\n\
    \    return to_str(num / g) .. '/' .. to_str(den / g)\n  end\n  local function\
    \ is_simplified(x)\n    local num, den = to_frac(x)\n    return num == 1 or den\
    \ == 1\n  end\n  local function is_whole_frac(x)\n    local num, den = to_frac(x)\n\
    \    return is_whole(num / den)\n  end\n  local function is_whole_mul(x, n)\n\
    \    local x_num, x_den = to_frac(x)\n    local n_num, n_den = to_frac(n)\n  \
    \  local l", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den\
    \ = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local den = x_den *\
    \ n_den\n  return num % den == 0\nend", "    local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \    local result_numerator = x_numerator * n_numerator\n    local result_denominator\
    \ = x_denominator * n_denominator\n    local result = result_numerator / result_denominator\n\
    \    return result % 1 == 0\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n    local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n    return numerator % denominator == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n\
    \  local denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return\
    \ numerator % denominator == 0\nend", "    local function gcd(a, b)\n        if\
    \ b == 0 then\n            return a\n        else\n            return gcd(b, a\
    \ % b)\n        end\n    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator,\
    \ x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n  local n_numerator,\
    \ n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n  local numerator\
    \ = x_numerator * n_numerator\n  local denominator = x_denominator * n_denominator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n    local numerator = x_numerator *\
    \ n_denominator\n    local denominator = x_denominator * n_numerator\n    return\
    \ numerator % denominator == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den / gcd\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  num = num /\
    \ gcd\n  den = den / gcd\n  return num % den == 0\nend", "  local x_num, x_den\
    \ = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local\
    \ num = x_num * n_num\n  local den = x_den * n_den\n  return num % den == 0\n\
    end", "  local function gcd(a, b)\n    if b == 0 then return a end\n    return\
    \ gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b / gcd(a,\
    \ b)\n  end\n  local function simplify_fraction(x)\n    local numerator, denominator\
    \ = x:match('(%d+)/(%d+)')\n    numerator, denominator = tonumber(numerator),\
    \ tonumber(denominator)\n    local g = gcd(numerator, denominator)\n    return\
    \ numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator =\
    \ simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (x_numerator * l / x_denominator)\
    \ % (n_numerator * l / n_denominator) == 0\nend", "    local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n    local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n    local x_num,\
    \ x_den = tonumber(x_num), tonumber(x_den)\n    local n_num, n_den = tonumber(n_num),\
    \ tonumber(n_den)\n    local num = x_num * n_num\n    local den = x_den * n_den\n\
    \    local gcd = math.gcd(num, den)\n    num = num / gcd\n    den = den / gcd\n\
    \    return num % den == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ gcd == den\nend", "  local xn = x * n\n  return xn % 1 == 0\nend", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return den / gcd == num / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  return (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0\n\
    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator = tonumber(x_numerator)\n\
    \  local x_denominator = tonumber(x_denominator)\n  local n_numerator = tonumber(n_numerator)\n\
    \  local n_denominator = tonumber(n_denominator)\n  local result = x_numerator\
    \ * n_denominator\n  local result_denominator = x_denominator * n_numerator\n\
    \  if result % result_denominator == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n  local\
    \ n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n  local\
    \ den = x_den * n_den\n  return num % den == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n    local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n    local x_numerator = tonumber(x_numerator)\n  \
    \  local x_denominator = tonumber(x_denominator)\n    local n_numerator = tonumber(n_numerator)\n\
    \    local n_denominator = tonumber(n_denominator)\n    local numerator = x_numerator\
    \ * n_denominator\n    local denominator = x_denominator * n_numerator\n    local\
    \ result = numerator / denominator\n    if result % 1 == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = x_numerator * n_denominator\n  local denominator = x_denominator\
    \ * n_numerator\n  return numerator % denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  local result = result_numerator / result_denominator\n  return result % 1 ==\
    \ 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n    local n_num,\
    \ n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n    local den\
    \ = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return num / gcd ==\
    \ den / gcd\nend", "    local x_numerator, x_denominator = x:match(\"(%d+)/(%d+)\"\
    )\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\")\n    local\
    \ x_numerator, x_denominator = tonumber(x_numerator), tonumber(x_denominator)\n\
    \    local n_numerator, n_denominator = tonumber(n_numerator), tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    return result % 1 == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "  local function gcd(a, b)\n    if b == 0 then return a end\n \
    \   return gcd(b, a % b)\n  end\n  local function lcm(a, b)\n    return a * b\
    \ / gcd(a, b)\n  end\n  local function parse(s)\n    local n, d = s:match('(%d+)/(%d+)')\n\
    \    return tonumber(n), tonumber(d)\n  end\n  local xn, xd = parse(x)\n  local\
    \ nn, nd = parse(n)\n  return lcm(xd, nd) % (xd * nn) == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local result = (x_numerator * n_denominator) /\
    \ (x_denominator * n_numerator)\n  return result % 1 == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n  local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local function gcd(a, b)\n    while b ~= 0 do\n      a, b = b,\
    \ a % b\n    end\n    return a\n  end\n  local function lcm(a, b)\n    return\
    \ a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n    local numerator,\
    \ denominator = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator\
    \ = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (x_numerator * l / x_denominator)\
    \ % (n_numerator * l / n_denominator) == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    num =\
    \ num / gcd\n    den = den / gcd\n    return num % den == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "  local x_num, x_den = x:match(\"\
    (%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n  local num =\
    \ x_num * n_den\n  local den = x_den * n_num\n  return num % den == 0\nend", " \
    \ local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local x_numerator = tonumber(x_numerator)\n\
    \  local x_denominator = tonumber(x_denominator)\n  local n_numerator = tonumber(n_numerator)\n\
    \  local n_denominator = tonumber(n_denominator)\n  local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n  if result % (x_denominator\
    \ * n_denominator) == 0 then\n    return true\n  else\n    return false\n  end\n\
    end", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_num, x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num,\
    \ n_den = n:match(\"(%d+)/(%d+)\")\n  local num = x_num * n_den\n  local den =\
    \ x_den * n_num\n  return num % den == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    local gcd = math.gcd(num, den)\n    return\
    \ num / gcd == den / gcd\nend", "    local x_numerator, x_denominator = x:match(\"\
    (%d+)/(%d+)\")\n    local n_numerator, n_denominator = n:match(\"(%d+)/(%d+)\"\
    )\n    local x_numerator = tonumber(x_numerator)\n    local x_denominator = tonumber(x_denominator)\n\
    \    local n_numerator = tonumber(n_numerator)\n    local n_denominator = tonumber(n_denominator)\n\
    \    local result = x_numerator * n_denominator * n_numerator * x_denominator\n\
    \    if result % 1 == 0 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \    local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n    local numerator\
    \ = x_numerator * n_denominator\n    local denominator = x_denominator * n_numerator\n\
    \    return numerator % denominator == 0\nend", "    local function gcd(a, b)\n\
    \        if b == 0 then\n            return a\n        else\n            return\
    \ gcd(b, a % b)\n        end\n    end", "  local function gcd(a, b)\n    if b\
    \ == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify_fraction(x)\n\
    \    local numerator, denominator = x:match('(%d+)/(%d+)')\n    local g = gcd(numerator,\
    \ denominator)\n    return numerator / g, denominator / g\n  end\n  local x_numerator,\
    \ x_denominator = simplify_fraction(x)\n  local n_numerator, n_denominator = simplify_fraction(n)\n\
    \  local l = lcm(x_denominator, n_denominator)\n  return (l / x_denominator) *\
    \ x_numerator == (l / n_denominator) * n_numerator\nend", "  local x_num, x_den\
    \ = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n  return\
    \ (x_num * n_den) % (x_den * n_num) == 0\nend", "    local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \    local n_num, n_den = n:match('(%d+)/(%d+)')\n    local num = x_num * n_num\n\
    \    local den = x_den * n_den\n    return num % den == 0\nend", "  local x_num,\
    \ x_den = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\"\
    )\n  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local function gcd(a, b)\n \
    \   if b == 0 then return a end\n    return gcd(b, a % b)\n  end\n  local function\
    \ lcm(a, b)\n    return a * b / gcd(a, b)\n  end\n  local function to_num(s)\n\
    \    local num, den = s:match('(%d+)/(%d+)')\n    return tonumber(num), tonumber(den)\n\
    \  end\n  local x_num, x_den = to_num(x)\n  local n_num, n_den = to_num(n)\n \
    \ return (x_num * n_den) % (x_den * n_num) == 0\nend", "    local x_numerator,\
    \ x_denominator = x:match(\"(%d+)/(%d+)\")\n    local n_numerator, n_denominator\
    \ = n:match(\"(%d+)/(%d+)\")\n    local x_numerator = tonumber(x_numerator)\n\
    \    local x_denominator = tonumber(x_denominator)\n    local n_numerator = tonumber(n_numerator)\n\
    \    local n_denominator = tonumber(n_denominator)\n    local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n    if result % x_denominator\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend",
  "    local function gcd(a, b)\n        while b ~= 0 do\n            a, b = b, a\
    \ % b\n        end\n        return a\n    end\n    local function lcm(a, b)\n\
    \        return a * b / gcd(a, b)\n    end\n    local function simplify_fraction(x)\n\
    \        local numerator, denominator = x:match('(%d+)/(%d+)')\n        numerator,\
    \ denominator = tonumber(numerator), tonumber(denominator)\n        local g =\
    \ gcd(numerator, denominator)\n        return numerator / g, denominator / g\n\
    \    end\n    local x_numerator, x_denominator = simplify_fraction(x)\n    local\
    \ n_numerator, n_denominator = simplify_fraction(n)\n    local l = lcm(x_denominator,\
    \ n_denominator)\n    return (l / x_denominator) * x_numerator % l == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator = x_numerator\
    \ * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  return result_numerator % result_denominator == 0\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  return numerator % denominator == 0\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local numerator = tonumber(x_numerator) * tonumber(n_denominator)\n  local\
    \ denominator = tonumber(x_denominator) * tonumber(n_numerator)\n  return numerator\
    \ % denominator == 0\nend", "  local function gcd(a, b)\n    while b ~= 0 do\n\
    \      a, b = b, a % b\n    end\n    return a\n  end\n  local function lcm(a,\
    \ b)\n    return a * b / gcd(a, b)\n  end\n  local function simplify(x)\n    local\
    \ numerator, denominator = x:match('(%d+)/(%d+)')\n    numerator, denominator\
    \ = tonumber(numerator), tonumber(denominator)\n    local g = gcd(numerator, denominator)\n\
    \    return numerator / g, denominator / g\n  end\n  local x_numerator, x_denominator\
    \ = simplify(x)\n  local n_numerator, n_denominator = simplify(n)\n  local l =\
    \ lcm(x_denominator, n_denominator)\n  return (l / x_denominator) * x_numerator\
    \ % l == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n\
    \  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = x_numerator * n_denominator\n  local denominator = x_denominator * n_numerator\n\
    \  local gcd = math.gcd(numerator, denominator)\n  numerator = numerator / gcd\n\
    \  denominator = denominator / gcd\n  return numerator % denominator == 0\nend",
  "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator,\
    \ n_denominator = n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n\
    \  local denominator = x_denominator * n_numerator\n  return numerator % denominator\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local result_numerator\
    \ = x_numerator * n_numerator\n  local result_denominator = x_denominator * n_denominator\n\
    \  return result_numerator % result_denominator == 0\nend", "  local x_num, x_den\
    \ = x:match(\"(%d+)/(%d+)\")\n  local n_num, n_den = n:match(\"(%d+)/(%d+)\")\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  return num % den\
    \ == 0\nend", "  local x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n \
    \ local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n  local numerator\
    \ = tonumber(x_numerator) * tonumber(n_denominator)\n  local denominator = tonumber(x_denominator)\
    \ * tonumber(n_numerator)\n  return numerator % denominator == 0\nend", "  local\
    \ x_numerator, x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator\
    \ = n:match('(%d+)/(%d+)')\n  local x_numerator = tonumber(x_numerator)\n  local\
    \ x_denominator = tonumber(x_denominator)\n  local n_numerator = tonumber(n_numerator)\n\
    \  local n_denominator = tonumber(n_denominator)\n  local result = x_numerator\
    \ * n_denominator * n_numerator * x_denominator\n  if result % 1 == 0 then\n \
    \   return true\n  else\n    return false\n  end\nend", "  local x_numerator,\
    \ x_denominator = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator =\
    \ n:match('(%d+)/(%d+)')\n  local numerator = x_numerator * n_denominator\n  local\
    \ denominator = x_denominator * n_numerator\n  local gcd = math.gcd(numerator,\
    \ denominator)\n  return numerator / gcd == denominator / gcd\nend", "  local\
    \ x_num, x_den = x:match('(%d+)/(%d+)')\n  local n_num, n_den = n:match('(%d+)/(%d+)')\n\
    \  local num = x_num * n_num\n  local den = x_den * n_den\n  local gcd = math.gcd(num,\
    \ den)\n  return num / gcd == den / gcd\nend", "  local x_numerator, x_denominator\
    \ = x:match('(%d+)/(%d+)')\n  local n_numerator, n_denominator = n:match('(%d+)/(%d+)')\n\
    \  local result_numerator = x_numerator * n_numerator\n  local result_denominator\
    \ = x_denominator * n_denominator\n  local result = result_numerator / result_denominator\n\
    \  return result % 1 == 0\nend", "  local x_num, x_den = x:match('(%d+)/(%d+)')\n\
    \  local n_num, n_den = n:match('(%d+)/(%d+)')\n  local num = x_num * n_num\n\
    \  local den = x_den * n_den\n  local gcd = math.gcd(num, den)\n  return num /\
    \ gcd == den / gcd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
