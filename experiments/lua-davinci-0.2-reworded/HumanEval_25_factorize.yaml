---
name: HumanEval_25_factorize
language: lua
prompt: |
  -- Return table of prime factors of given integer in the order from smallest to largest.
  -- Each of the factors should be tableed number of times corresponding to how many times it appeares in factorization.
  -- Input number should be equal to the product of all factors
  -- >>> factorize(8)
  -- {2, 2, 2}
  -- >>> factorize(25)
  -- {5, 5}
  -- >>> factorize(70)
  -- {2, 5, 7}
  local function factorize(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = factorize
      lu.assertEquals(candidate(2), {2})
      lu.assertEquals(candidate(4), {2, 2})
      lu.assertEquals(candidate(8), {2, 2, 2})
      lu.assertEquals(candidate(57), {3, 19})
      lu.assertEquals(candidate(3249), {3, 3, 19, 19})
      lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})
      lu.assertEquals(candidate(20577), {3, 19, 19, 19})
      lu.assertEquals(candidate(18), {2, 3, 3})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    for i = 2, n do
      if n % i == 0 then
        table.insert(factors, i)
        n = n / i
        i = i - 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              n = n / divisor
              table.insert(factors, divisor)
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              n = n / divisor
              table.insert(factors, divisor)
          end
          divisor = divisor + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        factors[#factors + 1] = d
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      for i = 2, n do
          while n % i == 0 do
              n = n / i
              table.insert(factors, i)
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local divisor = 2
    while n > 1 do
      if n % divisor == 0 then
        table.insert(factors, divisor)
        n = n / divisor
      else
        divisor = divisor + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      while n % 2 == 0 do
          table.insert(factors, 2)
          n = n / 2
      end
      for i = 3, math.sqrt(n), 2 do
          while n % i == 0 do
              table.insert(factors, i)
              n = n / i
          end
      end
      if n > 2 then
          table.insert(factors, n)
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        factors[#factors + 1] = d
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        factors[#factors + 1] = d
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        table.insert(factors, d)
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              table.insert(factors, factor)
              n = n / factor
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              table.insert(factors, factor)
              n = n / factor
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              n = n / divisor
              table.insert(factors, divisor)
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      for i = 2, n do
          while n % i == 0 do
              table.insert(factors, i)
              n = n / i
          end
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal divisor = 2\n\twhile n > 1 do\n\t\tif n % divisor
  == 0 then\n\t\t\tfactors[#factors + 1] = divisor\n\t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor
  = divisor + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local i = 2
    while n > 1 do
      if n % i == 0 then
        table.insert(factors, i)
        n = n / i
      else
        i = i + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              n = n / factor
              table.insert(factors, factor)
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              n = n / factor
              table.insert(factors, factor)
          end
          factor = factor + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          if n % divisor == 0 then
              table.insert(factors, divisor)
              n = n / divisor
          else
              divisor = divisor + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          while n % i == 0 do
              table.insert(factors, i)
              n = n / i
          end
          i = i + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          if n % divisor == 0 then
              table.insert(factors, divisor)
              n = n / divisor
          else
              divisor = divisor + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal divisor = 2\n\twhile n > 1 do\n\t\twhile n % divisor
  == 0 do\n\t\t\tn = n / divisor\n\t\t\ttable.insert(factors, divisor)\n\t\tend\n\t\tdivisor
  = divisor + 1\n\tend\n\treturn factors\nend"
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        table.insert(factors, d)
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          if n % divisor == 0 then
              table.insert(factors, divisor)
              n = n / divisor
          else
              divisor = divisor + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
    local factors = {}
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        table.insert(factors, factor)
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
    local factors = {}
    local divisor = 2
    while n > 1 do
      if n % divisor == 0 then
        table.insert(factors, divisor)
        n = n / divisor
      else
        divisor = divisor + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local divisor = 2
    while n > 1 do
      if n % divisor == 0 then
        table.insert(factors, divisor)
        n = n / divisor
      else
        divisor = divisor + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              n = n / divisor
              table.insert(factors, divisor)
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              table.insert(factors, factor)
              n = n / factor
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        table.insert(factors, d)
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        table.insert(factors, d)
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              table.insert(factors, factor)
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local i = 2
    while n > 1 do
      if n % i == 0 then
        table.insert(factors, i)
        n = n / i
      else
        i = i + 1
      end
    end
    return factors
  end
- "\tlocal factors = {}\n\tlocal divisor = 2\n\twhile n > 1 do\n\t\twhile n % divisor
  == 0 do\n\t\t\ttable.insert(factors, divisor)\n\t\t\tn = n / divisor\n\t\tend\n\t\tdivisor
  = divisor + 1\n\tend\n\treturn factors\nend"
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          if n % factor == 0 then
              table.insert(factors, factor)
              n = n / factor
          else
              factor = factor + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- "\tlocal factors = {}\n\tlocal divisor = 2\n\twhile n > 1 do\n\t\tif n % divisor
  == 0 then\n\t\t\ttable.insert(factors, divisor)\n\t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor
  = divisor + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local i = 2
    while n > 1 do
      if n % i == 0 then
        table.insert(factors, i)
        n = n / i
      else
        i = i + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      for i = 2, n do
          while n % i == 0 do
              table.insert(factors, i)
              n = n / i
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          if n % divisor == 0 then
              table.insert(factors, divisor)
              n = n / divisor
          else
              divisor = divisor + 1
          end
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\tfactors[#factors
  + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              n = n / factor
              table.insert(factors, factor)
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        factors[#factors + 1] = d
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\tfactors[#factors
  + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      while n % 2 == 0 do
          table.insert(factors, 2)
          n = n / 2
      end
      for i = 3, math.sqrt(n), 2 do
          while n % i == 0 do
              table.insert(factors, i)
              n = n / i
          end
      end
      if n > 2 then
          table.insert(factors, n)
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\tfactors[#factors
  + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              table.insert(factors, factor)
              n = n / factor
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              table.insert(factors, i)
              n = n / i
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\tif n % d == 0 then\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\telse\n\t\t\td = d + 1\n\t\tend\n\tend\n\treturn factors\nend"
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\tfactors[#factors
  + 1] = d\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- "\tlocal factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,
  i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local factor = 2
    while n > 1 do
      if n % factor == 0 then
        table.insert(factors, factor)
        n = n / factor
      else
        factor = factor + 1
      end
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local divisor = 2
    while n > 1 do
      while n % divisor == 0 do
        table.insert(factors, divisor)
        n = n / divisor
      end
      divisor = divisor + 1
    end
    return factors
  end
- "\tlocal factors = {}\n\tlocal d = 2\n\twhile n > 1 do\n\t\twhile n % d == 0 do\n\t\t\ttable.insert(factors,
  d)\n\t\t\tn = n / d\n\t\tend\n\t\td = d + 1\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        table.insert(factors, d)
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          while n % i == 0 do
              n = n / i
              table.insert(factors, i)
          end
          i = i + 1
      end
      return factors
  end
- "\tlocal factors = {}\n\tlocal divisor = 2\n\twhile n > 1 do\n\t\tif n % divisor
  == 0 then\n\t\t\ttable.insert(factors, divisor)\n\t\t\tn = n / divisor\n\t\telse\n\t\t\tdivisor
  = divisor + 1\n\t\tend\n\tend\n\treturn factors\nend"
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local i = 2
      while n > 1 do
          if n % i == 0 then
              n = n / i
              table.insert(factors, i)
          else
              i = i + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local factor = 2
      while n > 1 do
          while n % factor == 0 do
              n = n / factor
              table.insert(factors, factor)
          end
          factor = factor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          if n % divisor == 0 then
              table.insert(factors, divisor)
              n = n / divisor
          else
              divisor = divisor + 1
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
    local factors = {}
    local d = 2
    while n > 1 do
      while n % d == 0 do
        table.insert(factors, d)
        n = n / d
      end
      d = d + 1
    end
    return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local divisor = 2
      while n > 1 do
          while n % divisor == 0 do
              table.insert(factors, divisor)
              n = n / divisor
          end
          divisor = divisor + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      for i = 2, n do
          while n % i == 0 do
              table.insert(factors, i)
              n = n / i
          end
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              factors[#factors + 1] = d
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      local d = 2
      while n > 1 do
          while n % d == 0 do
              table.insert(factors, d)
              n = n / d
          end
          d = d + 1
      end
      return factors
  end
- |2-
      local factors = {}
      while n % 2 == 0 do
          table.insert(factors, 2)
          n = n / 2
      end
      local factor = 3
      while n > 1 do
          while n % factor == 0 do
              table.insert(factors, factor)
              n = n / factor
          end
          factor = factor + 2
      end
      return factors
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
