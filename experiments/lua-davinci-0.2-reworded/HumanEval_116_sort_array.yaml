---
name: HumanEval_116_sort_array
language: lua
prompt: |
  -- In this Kata, you have to sort a table of non-negative integers according to
  -- number of ones in their binary representation in ascending order.
  -- For similar number of ones, sort based on decimal value.
  -- It must be implemented like this:
  -- >>> sort_array({1, 5, 2, 3, 4})
  -- {1, 2, 3, 4, 5}
  -- >>> sort_array({-2, -3, -4, -5, -6})
  -- {-6, -5, -4, -3, -2}
  -- >>> sort_array({1, 0, 2, 3, 4})
  -- {0, 1, 2, 3, 4}
  local function sort_array(arr)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = sort_array
      lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})
      lu.assertEquals(candidate({-2, -3, -4, -5, -6}), {-4, -2, -6, -5, -3})
      lu.assertEquals(candidate({1, 0, 2, 3, 4}), {0, 1, 2, 4, 3})
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})
      lu.assertEquals(candidate({3, 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})
      lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
      lu.assertEquals(candidate({2, 4, 8, 16, 32}), {2, 4, 8, 16, 32})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local c = 0
      while n > 0 do
        c = c + n % 2
        n = math.floor(n / 2)
      end
      return c
    end
    table.sort(arr, function(a, b)
      local oa, ob = count_ones(a), count_ones(b)
      if oa == ob then
        return a < b
      else
        return oa < ob
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + n % 2
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('[^1]', ''):len()
      local b_ones = b:gsub('[^1]', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local t = {}
      while n > 0 do
        table.insert(t, n % 2)
        n = math.floor(n / 2)
      end
      return table.concat(t):reverse()
    end
    local t = {}
    for i = 1, #arr do
      t[i] = to_binary(arr[i])
    end
    table.sort(t, cmp)
    for i = 1, #t do
      t[i] = tonumber(t[i], 2)
    end
    return t
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local bin = {}
      while n > 0 do
        table.insert(bin, n % 2)
        n = math.floor(n / 2)
      end
      return table.concat(bin):reverse()
    end
    local function to_decimal(bin)
      local n = 0
      for i = 1, bin:len() do
        n = n + (2 ^ (i - 1)) * bin:sub(i, i)
      end
      return n
    end
    local bin_arr = {}
    for i = 1, #arr do
      bin_arr[i] = to_binary(arr[i])
    end
    table.sort(bin_arr, cmp)
    for i = 1, #bin_arr do
      arr[i] = to_decimal(bin_arr[i])
    end
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a1 = a:count('1')
      local b1 = b:count('1')
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end
    local function to_bin(n)
      local t = {}
      while n > 0 do
        table.insert(t, n % 2)
        n = math.floor(n / 2)
      end
      return table.concat(t):reverse()
    end
    local function to_dec(s)
      local n = 0
      for i = 1, #s do
        n = n * 2 + (s:sub(i, i) == '1' and 1 or 0)
      end
      return n
    end
    local t = {}
    for i = 1, #arr do
      table.insert(t, to_bin(arr[i]))
    end
    table.sort(t, cmp)
    for i = 1, #t do
      t[i] = to_dec(t[i])
    end
    return t
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local bin = ''
      while n > 0 do
        local r = n % 2
        bin = r .. bin
        n = (n - r) / 2
      end
      return bin
    end
    local function to_decimal(bin)
      local n = 0
      for i = 1, bin:len() do
        n = n + bin:sub(i, i) * 2 ^ (bin:len() - i)
      end
      return n
    end
    local function sort(arr)
      local bin_arr = {}
      for i = 1, #arr do
        bin_arr[i] = to_binary(arr[i])
      end
      table.sort(bin_arr, compare)
      for i = 1, #arr do
        arr[i] = to_decimal(bin_arr[i])
      end
      return arr
    end
    return sort(arr)
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local c = 0
      while n > 0 do
        c = c + n % 2
        n = math.floor(n / 2)
      end
      return c
    end
    table.sort(arr, function(a, b)
      local a1, b1 = count_ones(a), count_ones(b)
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(x)
      local n = 0
      while x > 0 do
        n = n + (x % 2)
        x = math.floor(x / 2)
      end
      return n
    end
    table.sort(arr, function(a, b)
      local a1, b1 = ones(a), ones(b)
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a1, b1 = a:count('1'), b:count('1')
      if a1 == b1 then return a < b end
      return a1 < b1
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:to_binary():count('1')
      local b_ones = b:to_binary():count('1')
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:count_ones()
      local b_ones = b:count_ones()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a1, b1 = a:count_ones(), b:count_ones()
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local ones = 0
      while n > 0 do
        if n % 2 == 1 then
          ones = ones + 1
        end
        n = math.floor(n / 2)
      end
      return ones
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:count('1')
      local b_ones = b:count('1')
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      return n:to_binary()
    end
    local function to_number(s)
      return s:to_number()
    end
    return arr:map(to_binary):sort(compare):map(to_number)
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('[^1]', ''):len()
      local b_ones = b:gsub('[^1]', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local ones = 0
      while n > 0 do
        ones = ones + (n % 2)
        n = math.floor(n / 2)
      end
      return ones
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local ones_a = a:gsub('0', ''):len()
      local ones_b = b:gsub('0', ''):len()
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a1, b1 = ones(a), ones(b)
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('[^1]', ''):len()
      local b_ones = b:gsub('[^1]', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + n % 2
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local count_a = count_ones(a)
      local count_b = count_ones(b)
      if count_a == count_b then
        return a < b
      else
        return count_a < count_b
      end
    end)
    return arr
  end
- |2-
    local function sort_by_ones(a, b)
      local ones_a = a:gsub('0', ''):len()
      local ones_b = b:gsub('0', ''):len()
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, sort_by_ones)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a1, b1 = ones(a), ones(b)
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
      local function count_ones(n)
          local count = 0
          while n > 0 do
              if n % 2 == 1 then
                  count = count + 1
              end
              n = math.floor(n / 2)
          end
          return count
      end
      table.sort(arr, function(a, b)
          local a_ones = count_ones(a)
          local b_ones = count_ones(b)
          if a_ones == b_ones then
              return a < b
          else
              return a_ones < b_ones
          end
      end)
      return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_bin(n)
      local bin = {}
      while n > 0 do
        table.insert(bin, n % 2)
        n = math.floor(n / 2)
      end
      return table.concat(bin):reverse()
    end
    local bin_arr = {}
    for _, n in ipairs(arr) do
      table.insert(bin_arr, to_bin(n))
    end
    table.sort(bin_arr, cmp)
    local res = {}
    for _, bin in ipairs(bin_arr) do
      table.insert(res, tonumber(bin, 2))
    end
    return res
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    local function cmp(a, b)
      local ones_a, ones_b = count_ones(a), count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(x)
      local count = 0
      while x > 0 do
        count = count + (x % 2)
        x = math.floor(x / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local c = 0
      while n > 0 do
        c = c + (n % 2)
        n = math.floor(n / 2)
      end
      return c
    end
    table.sort(arr, function(a, b)
      local c_a, c_b = count_ones(a), count_ones(b)
      if c_a == c_b then
        return a < b
      else
        return c_a < c_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local ones = 0
      while n > 0 do
        ones = ones + (n % 2)
        n = math.floor(n / 2)
      end
      return ones
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(x)
      local n = 0
      while x > 0 do
        n = n + (x % 2)
        x = math.floor(x / 2)
      end
      return n
    end
    local function cmp(a, b)
      local na, nb = count_ones(a), count_ones(b)
      if na == nb then
        return a < b
      else
        return na < nb
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local c = 0
      while n > 0 do
        c = c + n % 2
        n = math.floor(n / 2)
      end
      return c
    end
    table.sort(arr, function(a, b)
      local oa, ob = ones(a), ones(b)
      if oa == ob then
        return a < b
      else
        return oa < ob
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a1 = ones(a)
      local b1 = ones(b)
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(num)
      local count = 0
      while num > 0 do
        count = count + (num % 2)
        num = math.floor(num / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(num)
      local count = 0
      while num > 0 do
        count = count + (num % 2)
        num = math.floor(num / 2)
      end
      return count
    end
    local function sort_by_ones(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, sort_by_ones)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    local function cmp(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:count('1')
      local b_ones = b:count('1')
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(x)
      local n = 0
      while x > 0 do
        n = n + (x % 2)
        x = math.floor(x / 2)
      end
      return n
    end
    table.sort(arr, function(a, b)
      local na, nb = count_ones(a), count_ones(b)
      if na == nb then
        return a < b
      else
        return na < nb
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a1, b1 = ones(a), ones(b)
      if a1 == b1 then
        return a < b
      else
        return a1 < b1
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = ones(a)
      local ones_b = ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    local function cmp(a, b)
      local ones_a = ones(a)
      local ones_b = ones(b)
      if ones_a ~= ones_b then
        return ones_a < ones_b
      else
        return a < b
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:to_bits():count(1)
      local b_ones = b:to_bits():count(1)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function bitcount(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = bitcount(a)
      local b_ones = bitcount(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local c = 0
      while n > 0 do
        c = c + (n % 2)
        n = math.floor(n / 2)
      end
      return c
    end
    table.sort(arr, function(a, b)
      local oa, ob = ones(a), ones(b)
      if oa == ob then
        return a < b
      else
        return oa < ob
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local bin = ''
      while n > 0 do
        bin = tostring(n % 2) .. bin
        n = math.floor(n / 2)
      end
      return bin
    end
    local bin_arr = {}
    for i, v in ipairs(arr) do
      bin_arr[i] = to_binary(v)
    end
    table.sort(bin_arr, compare)
    for i, v in ipairs(bin_arr) do
      bin_arr[i] = tonumber(v, 2)
    end
    return bin_arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + n % 2
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('[^1]', ''):len()
      local b_ones = b:gsub('[^1]', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local bin = ''
      while n > 0 do
        local rest = n % 2
        bin = rest .. bin
        n = (n - rest) / 2
      end
      return bin
    end
    local function sort_by_binary(arr)
      local sorted = {}
      for i = 1, #arr do
        local bin = to_binary(arr[i])
        table.insert(sorted, bin)
      end
      table.sort(sorted, compare)
      return sorted
    end
    local function to_decimal(bin)
      local n = 0
      for i = 1, #bin do
        n = n + 2 ^ (i - 1) * tonumber(bin:sub(i, i))
      end
      return n
    end
    local function sort_by_decimal(arr)
      local sorted = {}
      for i = 1, #arr do
        local dec = to_decimal(arr[i])
        table.insert(sorted, dec)
      end
      return sorted
    end
    return sort_by_decimal(sort_by_binary(arr))
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(num)
      local count = 0
      while num > 0 do
        count = count + (num % 2)
        num = math.floor(num / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(a)
      local res = {}
      while a > 0 do
        res[#res + 1] = a % 2
        a = math.floor(a / 2)
      end
      return table.concat(res):reverse()
    end
    local function to_decimal(a)
      local res = 0
      for i = 1, #a do
        res = res + a:sub(i, i) * 2 ^ (i - 1)
      end
      return res
    end
    local function sort(arr)
      local res = {}
      for i = 1, #arr do
        res[i] = to_binary(arr[i])
      end
      table.sort(res, compare)
      for i = 1, #res do
        res[i] = to_decimal(res[i])
      end
      return res
    end
    return sort(arr)
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local bin = ''
      while n > 0 do
        bin = tostring(n % 2) .. bin
        n = math.floor(n / 2)
      end
      return bin
    end
    local function to_decimal(n)
      local dec = 0
      for i = 1, n:len() do
        dec = dec + n:sub(i, i) * 2 ^ (n:len() - i)
      end
      return dec
    end
    table.sort(arr, function(a, b)
      return cmp(to_binary(a), to_binary(b))
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:count_ones()
      local b_ones = b:count_ones()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = ones(a)
      local b_ones = ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local bin_arr = {}
    for _, v in ipairs(arr) do
      table.insert(bin_arr, string.format('%b', v))
    end
    table.sort(bin_arr, cmp)
    for i, v in ipairs(bin_arr) do
      bin_arr[i] = tonumber(v, 2)
    end
    return bin_arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function get_ones(n)
      local ones = 0
      while n > 0 do
        ones = ones + (n % 2)
        n = math.floor(n / 2)
      end
      return ones
    end
    table.sort(arr, function(a, b)
      local ones_a, ones_b = get_ones(a), get_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = ones(a)
      local ones_b = ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(num)
      local count = 0
      while num > 0 do
        if num % 2 == 1 then
          count = count + 1
        end
        num = math.floor(num / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local result = ''
      while n > 0 do
        result = (n % 2) .. result
        n = math.floor(n / 2)
      end
      return result
    end
    local function to_decimal(s)
      local result = 0
      for i = 1, s:len() do
        result = result + s:sub(i, i) * 2 ^ (s:len() - i)
      end
      return result
    end
    table.sort(arr, function(a, b)
      return compare(to_binary(a), to_binary(b))
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function compare(a, b)
      local ones_a = a:gsub('0', ''):len()
      local ones_b = b:gsub('0', ''):len()
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    local function to_binary(n)
      local bin = ''
      while n > 0 do
        bin = tostring(n % 2) .. bin
        n = math.floor(n / 2)
      end
      return bin
    end
    local function to_decimal(bin)
      local n = 0
      for i = 1, bin:len() do
        n = n + 2 ^ (bin:len() - i) * tonumber(bin:sub(i, i))
      end
      return n
    end
    local function sort(arr)
      local bin_arr = {}
      for i = 1, #arr do
        bin_arr[i] = to_binary(arr[i])
      end
      table.sort(bin_arr, compare)
      for i = 1, #arr do
        arr[i] = to_decimal(bin_arr[i])
      end
      return arr
    end
    return sort(arr)
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        n = n & (n - 1)
        count = count + 1
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local c = 0
      while n > 0 do
        c = c + n % 2
        n = math.floor(n / 2)
      end
      return c
    end
    table.sort(arr, function(a, b)
      local c = count_ones(a) - count_ones(b)
      if c == 0 then
        return a < b
      else
        return c < 0
      end
    end)
    return arr
  end
- |2-
    local function ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = ones(a)
      local ones_b = ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    local function compare(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + n % 2
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local bin = ''
      while n > 0 do
        bin = tostring(n % 2) .. bin
        n = math.floor(n / 2)
      end
      return bin
    end
    table.sort(arr, function(a, b)
      return compare(to_binary(a), to_binary(b))
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + n % 2
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    local function to_binary(n)
      local res = ''
      while n > 0 do
        res = (n % 2) .. res
        n = math.floor(n / 2)
      end
      return res
    end
    local sorted = {}
    for _, n in ipairs(arr) do
      table.insert(sorted, to_binary(n))
    end
    table.sort(sorted, cmp)
    for i, n in ipairs(sorted) do
      sorted[i] = tonumber(n, 2)
    end
    return sorted
  end
- |2-
    table.sort(arr, function(a, b)
      local a_ones = a:gsub('0', ''):len()
      local b_ones = b:gsub('0', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local a_ones = a:count_ones()
      local b_ones = b:count_ones()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, cmp)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
      local function count_ones(n)
          local count = 0
          while n > 0 do
              count = count + (n % 2)
              n = math.floor(n / 2)
          end
          return count
      end
      table.sort(arr, function(a, b)
          local ones_a = count_ones(a)
          local ones_b = count_ones(b)
          if ones_a == ones_b then
              return a < b
          else
              return ones_a < ones_b
          end
      end)
      return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + n % 2
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        if n % 2 == 1 then
          count = count + 1
        end
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local a_ones = count_ones(a)
      local b_ones = count_ones(b)
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end)
    return arr
  end
- |2-
    local function compare(a, b)
      local a_ones = a:gsub('[^1]', ''):len()
      local b_ones = b:gsub('[^1]', ''):len()
      if a_ones == b_ones then
        return a < b
      else
        return a_ones < b_ones
      end
    end
    table.sort(arr, compare)
    return arr
  end
- |2-
    local function count_ones(n)
      local count = 0
      while n > 0 do
        count = count + (n % 2)
        n = math.floor(n / 2)
      end
      return count
    end
    table.sort(arr, function(a, b)
      local ones_a = count_ones(a)
      local ones_b = count_ones(b)
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end)
    return arr
  end
- |2-
    local function cmp(a, b)
      local ones_a = a:gsub('0', ''):len()
      local ones_b = b:gsub('0', ''):len()
      if ones_a == ones_b then
        return a < b
      else
        return ones_a < ones_b
      end
    end
    table.sort(arr, cmp)
    return arr
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
