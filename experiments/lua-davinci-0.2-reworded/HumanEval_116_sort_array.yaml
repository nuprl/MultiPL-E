name: HumanEval_116_sort_array
language: lua
prompt: "-- In this Kata, you have to sort a table of non-negative integers according\
  \ to\n-- number of ones in their binary representation in ascending order.\n-- For\
  \ similar number of ones, sort based on decimal value.\n-- It must be implemented\
  \ like this:\n-- >>> sort_array({1, 5, 2, 3, 4})\n-- {1, 2, 3, 4, 5}\n-- >>> sort_array({-2,\
  \ -3, -4, -5, -6})\n-- {-6, -5, -4, -3, -2}\n-- >>> sort_array({1, 0, 2, 3, 4})\n\
  -- {0, 1, 2, 3, 4}\nlocal function sort_array(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({1, 5, 2, 3, 4}), {1, 2, 4, 3, 5})\n    lu.assertEquals(candidate({-2,\
  \ -3, -4, -5, -6}), {-4, -2, -6, -5, -3})\n    lu.assertEquals(candidate({1, 0,\
  \ 2, 3, 4}), {0, 1, 2, 4, 3})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}), {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77})\n    lu.assertEquals(candidate({3,\
  \ 6, 44, 12, 32, 5}), {32, 3, 5, 6, 12, 44})\n    lu.assertEquals(candidate({2,\
  \ 4, 8, 16, 32}), {2, 4, 8, 16, 32})\n    lu.assertEquals(candidate({2, 4, 8, 16,\
  \ 32}), {2, 4, 8, 16, 32})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function count_ones(n)\n    local count = 0\n    while n >\
    \ 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local c = 0\n    while\
    \ n > 0 do\n      c = c + n % 2\n      n = math.floor(n / 2)\n    end\n    return\
    \ c\n  end\n  table.sort(arr, function(a, b)\n    local oa, ob = count_ones(a),\
    \ count_ones(b)\n    if oa == ob then\n      return a < b\n    else\n      return\
    \ oa < ob\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function cmp(a, b)\n    local a_ones = a:gsub('[^1]', ''):len()\n\
    \    local b_ones = b:gsub('[^1]', ''):len()\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n \
    \ local function to_binary(n)\n    local t = {}\n    while n > 0 do\n      table.insert(t,\
    \ n % 2)\n      n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\n\
    \  end\n  local t = {}\n  for i = 1, #arr do\n    t[i] = to_binary(arr[i])\n \
    \ end\n  table.sort(t, cmp)\n  for i = 1, #t do\n    t[i] = tonumber(t[i], 2)\n\
    \  end\n  return t\nend", "  local function count_ones(n)\n    local count = 0\n\
    \    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  local function to_binary(n)\n    local bin = {}\n    while n > 0 do\n\
    \      table.insert(bin, n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ table.concat(bin):reverse()\n  end\n  local function to_decimal(bin)\n    local\
    \ n = 0\n    for i = 1, bin:len() do\n      n = n + (2 ^ (i - 1)) * bin:sub(i,\
    \ i)\n    end\n    return n\n  end\n  local bin_arr = {}\n  for i = 1, #arr do\n\
    \    bin_arr[i] = to_binary(arr[i])\n  end\n  table.sort(bin_arr, cmp)\n  for\
    \ i = 1, #bin_arr do\n    arr[i] = to_decimal(bin_arr[i])\n  end\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n\
    \    local a1 = a:count('1')\n    local b1 = b:count('1')\n    if a1 == b1 then\n\
    \      return a < b\n    else\n      return a1 < b1\n    end\n  end\n  local function\
    \ to_bin(n)\n    local t = {}\n    while n > 0 do\n      table.insert(t, n % 2)\n\
    \      n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\n\
    \  end\n  local function to_dec(s)\n    local n = 0\n    for i = 1, #s do\n  \
    \    n = n * 2 + (s:sub(i, i) == '1' and 1 or 0)\n    end\n    return n\n  end\n\
    \  local t = {}\n  for i = 1, #arr do\n    table.insert(t, to_bin(arr[i]))\n \
    \ end\n  table.sort(t, cmp)\n  for i = 1, #t do\n    t[i] = to_dec(t[i])\n  end\n\
    \  return t\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  local function to_binary(n)\n    local bin = ''\n    while n > 0 do\n\
    \      local r = n % 2\n      bin = r .. bin\n      n = (n - r) / 2\n    end\n\
    \    return bin\n  end\n  local function to_decimal(bin)\n    local n = 0\n  \
    \  for i = 1, bin:len() do\n      n = n + bin:sub(i, i) * 2 ^ (bin:len() - i)\n\
    \    end\n    return n\n  end\n  local function sort(arr)\n    local bin_arr =\
    \ {}\n    for i = 1, #arr do\n      bin_arr[i] = to_binary(arr[i])\n    end\n\
    \    table.sort(bin_arr, compare)\n    for i = 1, #arr do\n      arr[i] = to_decimal(bin_arr[i])\n\
    \    end\n    return arr\n  end\n  return sort(arr)\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local c = 0\n    while n > 0 do\n \
    \     c = c + n % 2\n      n = math.floor(n / 2)\n    end\n    return c\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a1, b1 = count_ones(a), count_ones(b)\n\
    \    if a1 == b1 then\n      return a < b\n    else\n      return a1 < b1\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(x)\n    local n =\
    \ 0\n    while x > 0 do\n      n = n + (x % 2)\n      x = math.floor(x / 2)\n\
    \    end\n    return n\n  end\n  table.sort(arr, function(a, b)\n    local a1,\
    \ b1 = ones(a), ones(b)\n    if a1 == b1 then\n      return a < b\n    else\n\
    \      return a1 < b1\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function cmp(a, b)\n    local a1, b1 = a:count('1'), b:count('1')\n  \
    \  if a1 == b1 then return a < b end\n    return a1 < b1\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:to_binary():count('1')\n    local b_ones = b:to_binary():count('1')\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n\
    \ % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a1, b1 = a:count_ones(), b:count_ones()\n\
    \    if a1 == b1 then\n      return a < b\n    else\n      return a1 < b1\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local\
    \ b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function count_ones(n)\n    local ones =\
    \ 0\n    while n > 0 do\n      if n % 2 == 1 then\n        ones = ones + 1\n \
    \     end\n      n = math.floor(n / 2)\n    end\n    return ones\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  local function compare(a,\
    \ b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function compare(a, b)\n    local a_ones = ones(a)\n    local\
    \ b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   n = math.floor(n / 2)\n    end\n    return count\n  end\n  local function\
    \ compare(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function compare(a, b)\n    local a_ones = a:count('1')\n    local b_ones\
    \ = b:count('1')\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n\
    \    return n:to_binary()\n  end\n  local function to_number(s)\n    return s:to_number()\n\
    \  end\n  return arr:map(to_binary):sort(compare):map(to_number)\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr, compare)\n\
    \  return arr\nend", "  local function cmp(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('[^1]', ''):len()\n    local b_ones = b:gsub('[^1]',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local ones = 0\n    while n > 0 do\n     \
    \ ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return ones\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local ones_a = a:gsub('0', ''):len()\n\
    \    local ones_b = b:gsub('0', ''):len()\n    if ones_a == ones_b then\n    \
    \  return a < b\n    else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function ones(n)\n    local count = 0\n\
    \    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n   \
    \   end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function compare(a, b)\n    local ones_a = count_ones(a)\n   \
    \ local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a <\
    \ b\n    else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n     \
    \ n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a1, b1 = ones(a), ones(b)\n    if a1 == b1 then\n      return\
    \ a < b\n    else\n      return a1 < b1\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('[^1]',\
    \ ''):len()\n    local b_ones = b:gsub('[^1]', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n\
    \ = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones ==\
    \ b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local count_a\
    \ = count_ones(a)\n    local count_b = count_ones(b)\n    if count_a == count_b\
    \ then\n      return a < b\n    else\n      return count_a < count_b\n    end\n\
    \  end)\n  return arr\nend", "  local function sort_by_ones(a, b)\n    local ones_a\
    \ = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend", "  local\
    \ function ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local a1, b1 = ones(a), ones(b)\n    if\
    \ a1 == b1 then\n      return a < b\n    else\n      return a1 < b1\n    end\n\
    \  end)\n  return arr\nend", "    local function count_ones(n)\n        local\
    \ count = 0\n        while n > 0 do\n            if n % 2 == 1 then\n        \
    \        count = count + 1\n            end\n            n = math.floor(n / 2)\n\
    \        end\n        return count\n    end\n    table.sort(arr, function(a, b)\n\
    \        local a_ones = count_ones(a)\n        local b_ones = count_ones(b)\n\
    \        if a_ones == b_ones then\n            return a < b\n        else\n  \
    \          return a_ones < b_ones\n        end\n    end)\n    return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  local function to_bin(n)\n    local bin = {}\n    while n >\
    \ 0 do\n      table.insert(bin, n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return table.concat(bin):reverse()\n  end\n  local bin_arr = {}\n  for _,\
    \ n in ipairs(arr) do\n    table.insert(bin_arr, to_bin(n))\n  end\n  table.sort(bin_arr,\
    \ cmp)\n  local res = {}\n  for _, bin in ipairs(bin_arr) do\n    table.insert(res,\
    \ tonumber(bin, 2))\n  end\n  return res\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  local function cmp(a, b)\n    local ones_a, ones_b = count_ones(a),\
    \ count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, cmp)\n  return\
    \ arr\nend", "  local function count_ones(x)\n    local count = 0\n    while x\
    \ > 0 do\n      count = count + (x % 2)\n      x = math.floor(x / 2)\n    end\n\
    \    return count\n  end\n  local function compare(a, b)\n    local ones_a = count_ones(a)\n\
    \    local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return\
    \ a < b\n    else\n      return ones_a < ones_b\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n     \
    \ n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones ==\
    \ b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n  \
    \  end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n / 2)\n\
    \    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local c_a,\
    \ c_b = count_ones(a), count_ones(b)\n    if c_a == c_b then\n      return a <\
    \ b\n    else\n      return c_a < c_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local ones = 0\n    while n > 0 do\n     \
    \ ones = ones + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return ones\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(x)\n    local n = 0\n    while x > 0 do\n \
    \     n = n + (x % 2)\n      x = math.floor(x / 2)\n    end\n    return n\n  end\n\
    \  local function cmp(a, b)\n    local na, nb = count_ones(a), count_ones(b)\n\
    \    if na == nb then\n      return a < b\n    else\n      return na < nb\n  \
    \  end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local c = 0\n    while n > 0 do\n      c = c + n % 2\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ oa, ob = ones(a), ones(b)\n    if oa == ob then\n      return a < b\n    else\n\
    \      return oa < ob\n    end\n  end)\n  return arr\nend", "  local function\
    \ ones(n)\n    local count = 0\n    while n > 0 do\n      count = count + (n %\
    \ 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a1 = ones(a)\n    local b1 = ones(b)\n    if a1 ==\
    \ b1 then\n      return a < b\n    else\n      return a1 < b1\n    end\n  end)\n\
    \  return arr\nend", "  local function cmp(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(num)\n    local count\
    \ = 0\n    while num > 0 do\n      count = count + (num % 2)\n      num = math.floor(num\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(num)\n    local count\
    \ = 0\n    while num > 0 do\n      count = count + (num % 2)\n      num = math.floor(num\
    \ / 2)\n    end\n    return count\n  end\n  local function sort_by_ones(a, b)\n\
    \    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, sort_by_ones)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  local function cmp(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr, cmp)\n\
    \  return arr\nend", "  local function cmp(a, b)\n    local a_ones = a:count('1')\n\
    \    local b_ones = b:count('1')\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function ones(n)\n    local count = 0\n \
    \   while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n    \
    \  end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(x)\n\
    \    local n = 0\n    while x > 0 do\n      n = n + (x % 2)\n      x = math.floor(x\
    \ / 2)\n    end\n    return n\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ na, nb = count_ones(a), count_ones(b)\n    if na == nb then\n      return a\
    \ < b\n    else\n      return na < nb\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n     \
    \ n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a1, b1 = ones(a), ones(b)\n    if a1 == b1 then\n      return\
    \ a < b\n    else\n      return a1 < b1\n    end\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = ones(a)\n    local ones_b = ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n     \
    \ n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = ones(a)\n    local b_ones = ones(b)\n    if a_ones ==\
    \ b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n  \
    \  end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  local\
    \ function cmp(a, b)\n    local ones_a = ones(a)\n    local ones_b = ones(b)\n\
    \    if ones_a ~= ones_b then\n      return ones_a < ones_b\n    else\n      return\
    \ a < b\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local\
    \ function count_ones(n)\n    local count = 0\n    while n > 0 do\n      count\
    \ = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return\
    \ count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n\
    \    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:to_bits():count(1)\n\
    \    local b_ones = b:to_bits():count(1)\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n     \
    \ end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function bitcount(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = bitcount(a)\n    local b_ones = bitcount(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local c = 0\n    while n > 0 do\n      c = c + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return c\n  end\n  table.sort(arr, function(a, b)\n    local\
    \ oa, ob = ones(a), ones(b)\n    if oa == ob then\n      return a < b\n    else\n\
    \      return oa < ob\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n % 2 == 1\
    \ then\n        count = count + 1\n      end\n      n = math.floor(n / 2)\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function count_ones(n)\n    local count = 0\n  \
    \  while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n     \
    \ end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n   \
    \   n = math.floor(n / 2)\n    end\n    return bin\n  end\n  local bin_arr = {}\n\
    \  for i, v in ipairs(arr) do\n    bin_arr[i] = to_binary(v)\n  end\n  table.sort(bin_arr,\
    \ compare)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i] = tonumber(v, 2)\n\
    \  end\n  return bin_arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count\
    \ + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + n % 2\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function compare(a, b)\n    local\
    \ a_ones = a:gsub('[^1]', ''):len()\n    local b_ones = b:gsub('[^1]', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  local function to_binary(n)\n    local bin = ''\n\
    \    while n > 0 do\n      local rest = n % 2\n      bin = rest .. bin\n     \
    \ n = (n - rest) / 2\n    end\n    return bin\n  end\n  local function sort_by_binary(arr)\n\
    \    local sorted = {}\n    for i = 1, #arr do\n      local bin = to_binary(arr[i])\n\
    \      table.insert(sorted, bin)\n    end\n    table.sort(sorted, compare)\n \
    \   return sorted\n  end\n  local function to_decimal(bin)\n    local n = 0\n\
    \    for i = 1, #bin do\n      n = n + 2 ^ (i - 1) * tonumber(bin:sub(i, i))\n\
    \    end\n    return n\n  end\n  local function sort_by_decimal(arr)\n    local\
    \ sorted = {}\n    for i = 1, #arr do\n      local dec = to_decimal(arr[i])\n\
    \      table.insert(sorted, dec)\n    end\n    return sorted\n  end\n  return\
    \ sort_by_decimal(sort_by_binary(arr))\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a, b)\n    local\
    \ a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n \
    \   if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(num)\n\
    \    local count = 0\n    while num > 0 do\n      count = count + (num % 2)\n\
    \      num = math.floor(num / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local\
    \ function to_binary(a)\n    local res = {}\n    while a > 0 do\n      res[#res\
    \ + 1] = a % 2\n      a = math.floor(a / 2)\n    end\n    return table.concat(res):reverse()\n\
    \  end\n  local function to_decimal(a)\n    local res = 0\n    for i = 1, #a do\n\
    \      res = res + a:sub(i, i) * 2 ^ (i - 1)\n    end\n    return res\n  end\n\
    \  local function sort(arr)\n    local res = {}\n    for i = 1, #arr do\n    \
    \  res[i] = to_binary(arr[i])\n    end\n    table.sort(res, compare)\n    for\
    \ i = 1, #res do\n      res[i] = to_decimal(res[i])\n    end\n    return res\n\
    \  end\n  return sort(arr)\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  local function to_binary(n)\n    local bin = ''\n    while\
    \ n > 0 do\n      bin = tostring(n % 2) .. bin\n      n = math.floor(n / 2)\n\
    \    end\n    return bin\n  end\n  local function to_decimal(n)\n    local dec\
    \ = 0\n    for i = 1, n:len() do\n      dec = dec + n:sub(i, i) * 2 ^ (n:len()\
    \ - i)\n    end\n    return dec\n  end\n  table.sort(arr, function(a, b)\n   \
    \ return cmp(to_binary(a), to_binary(b))\n  end)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:count_ones()\n    local b_ones = b:count_ones()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function ones(n)\n \
    \   local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = ones(a)\n    local\
    \ b_ones = ones(b)\n    if a_ones == b_ones then\n      return a < b\n    else\n\
    \      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      if n % 2 == 1\
    \ then\n        count = count + 1\n      end\n      n = math.floor(n / 2)\n  \
    \  end\n    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones\
    \ = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function compare(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function cmp(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local bin_arr = {}\n  for _, v in\
    \ ipairs(arr) do\n    table.insert(bin_arr, string.format('%b', v))\n  end\n \
    \ table.sort(bin_arr, cmp)\n  for i, v in ipairs(bin_arr) do\n    bin_arr[i] =\
    \ tonumber(v, 2)\n  end\n  return bin_arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  table.sort(arr, function(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end)\n  return arr\nend", "  local function\
    \ get_ones(n)\n    local ones = 0\n    while n > 0 do\n      ones = ones + (n\
    \ % 2)\n      n = math.floor(n / 2)\n    end\n    return ones\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a, ones_b = get_ones(a), get_ones(b)\n    if\
    \ ones_a == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = ones(a)\n    local ones_b = ones(b)\n   \
    \ if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(num)\n    local count = 0\n    while num >\
    \ 0 do\n      if num % 2 == 1 then\n        count = count + 1\n      end\n   \
    \   num = math.floor(num / 2)\n    end\n    return count\n  end\n  local function\
    \ compare(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n   \
    \ local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  local function\
    \ to_binary(n)\n    local result = ''\n    while n > 0 do\n      result = (n %\
    \ 2) .. result\n      n = math.floor(n / 2)\n    end\n    return result\n  end\n\
    \  local function to_decimal(s)\n    local result = 0\n    for i = 1, s:len()\
    \ do\n      result = result + s:sub(i, i) * 2 ^ (s:len() - i)\n    end\n    return\
    \ result\n  end\n  table.sort(arr, function(a, b)\n    return compare(to_binary(a),\
    \ to_binary(b))\n  end)\n  return arr\nend", "  local function compare(a, b)\n\
    \    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n\
    \    if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  count = count + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n \
    \   local ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a\
    \ < b\n    else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function compare(a, b)\n    local ones_a\
    \ = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end\n  local function to_binary(n)\n    local bin = ''\n    while\
    \ n > 0 do\n      bin = tostring(n % 2) .. bin\n      n = math.floor(n / 2)\n\
    \    end\n    return bin\n  end\n  local function to_decimal(bin)\n    local n\
    \ = 0\n    for i = 1, bin:len() do\n      n = n + 2 ^ (bin:len() - i) * tonumber(bin:sub(i,\
    \ i))\n    end\n    return n\n  end\n  local function sort(arr)\n    local bin_arr\
    \ = {}\n    for i = 1, #arr do\n      bin_arr[i] = to_binary(arr[i])\n    end\n\
    \    table.sort(bin_arr, compare)\n    for i = 1, #arr do\n      arr[i] = to_decimal(bin_arr[i])\n\
    \    end\n    return arr\n  end\n  return sort(arr)\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n\
    \      if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend", "  table.sort(arr,\
    \ function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones =\
    \ b:gsub('0', ''):len()\n    if a_ones == b_ones then\n      return a < b\n  \
    \  else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local count = 0\n    while n > 0 do\n    \
    \  n = n & (n - 1)\n      count = count + 1\n    end\n    return count\n  end\n\
    \  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n    local\
    \ b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a < b\n \
    \   else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\nend", " \
    \ local function count_ones(n)\n    local c = 0\n    while n > 0 do\n      c =\
    \ c + n % 2\n      n = math.floor(n / 2)\n    end\n    return c\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local c = count_ones(a) - count_ones(b)\n    if c == 0 then\n\
    \      return a < b\n    else\n      return c < 0\n    end\n  end)\n  return arr\n\
    end", "  local function ones(n)\n    local count = 0\n    while n > 0 do\n   \
    \   if n % 2 == 1 then\n        count = count + 1\n      end\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = ones(a)\n    local ones_b = ones(b)\n    if ones_a == ones_b\
    \ then\n      return a < b\n    else\n      return ones_a < ones_b\n    end\n\
    \  end)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count = count + 1\n\
    \      end\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n  local\
    \ function compare(a, b)\n    local ones_a = count_ones(a)\n    local ones_b =\
    \ count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n    else\n\
    \      return ones_a < ones_b\n    end\n  end\n  table.sort(arr, compare)\n  return\
    \ arr\nend", "  local function cmp(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function count_ones(n)\n    local count =\
    \ 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  local function compare(a, b)\n   \
    \ local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  table.sort(arr, compare)\n  return arr\nend", "  local function\
    \ count_ones(n)\n    local count = 0\n    while n > 0 do\n      count = count\
    \ + (n % 2)\n      n = math.floor(n / 2)\n    end\n    return count\n  end\n \
    \ table.sort(arr, function(a, b)\n    local ones_a = count_ones(a)\n    local\
    \ ones_b = count_ones(b)\n    if ones_a == ones_b then\n      return a < b\n \
    \   else\n      return ones_a < ones_b\n    end\n  end)\n  return arr\nend", " \
    \ table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n \
    \   local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n     \
    \ return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function count_ones(n)\n    local count = 0\n    while n\
    \ > 0 do\n      count = count + n % 2\n      n = math.floor(n / 2)\n    end\n\
    \    return count\n  end\n  table.sort(arr, function(a, b)\n    local a_ones =\
    \ count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones == b_ones then\n\
    \      return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n\
    \  return arr\nend", "  local function cmp(a, b)\n    local a_ones = a:gsub('0',\
    \ ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones\
    \ then\n      return a < b\n    else\n      return a_ones < b_ones\n    end\n\
    \  end\n  table.sort(arr, cmp)\n  return arr\nend", "  local function compare(a,\
    \ b)\n    local a_ones = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0',\
    \ ''):len()\n    if a_ones == b_ones then\n      return a < b\n    else\n    \
    \  return a_ones < b_ones\n    end\n  end\n  local function to_binary(n)\n   \
    \ local bin = ''\n    while n > 0 do\n      bin = tostring(n % 2) .. bin\n   \
    \   n = math.floor(n / 2)\n    end\n    return bin\n  end\n  table.sort(arr, function(a,\
    \ b)\n    return compare(to_binary(a), to_binary(b))\n  end)\n  return arr\nend",
  "  local function count_ones(n)\n    local count = 0\n    while n > 0 do\n     \
    \ count = count + n % 2\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ compare)\n  return arr\nend", "  local function count_ones(n)\n    local count\
    \ = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n    local\
    \ count = 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n    local a_ones\
    \ = a:gsub('0', ''):len()\n    local b_ones = b:gsub('0', ''):len()\n    if a_ones\
    \ == b_ones then\n      return a < b\n    else\n      return a_ones < b_ones\n\
    \    end\n  end\n  local function to_binary(n)\n    local res = ''\n    while\
    \ n > 0 do\n      res = (n % 2) .. res\n      n = math.floor(n / 2)\n    end\n\
    \    return res\n  end\n  local sorted = {}\n  for _, n in ipairs(arr) do\n  \
    \  table.insert(sorted, to_binary(n))\n  end\n  table.sort(sorted, cmp)\n  for\
    \ i, n in ipairs(sorted) do\n    sorted[i] = tonumber(n, 2)\n  end\n  return sorted\n\
    end", "  table.sort(arr, function(a, b)\n    local a_ones = a:gsub('0', ''):len()\n\
    \    local b_ones = b:gsub('0', ''):len()\n    if a_ones == b_ones then\n    \
    \  return a < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return\
    \ arr\nend", "  local function cmp(a, b)\n    local a_ones = a:count_ones()\n\
    \    local b_ones = b:count_ones()\n    if a_ones == b_ones then\n      return\
    \ a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n  table.sort(arr,\
    \ cmp)\n  return arr\nend", "  local function count_ones(n)\n    local count =\
    \ 0\n    while n > 0 do\n      count = count + (n % 2)\n      n = math.floor(n\
    \ / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a, b)\n \
    \   local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n    if ones_a\
    \ == ones_b then\n      return a < b\n    else\n      return ones_a < ones_b\n\
    \    end\n  end)\n  return arr\nend", "    local function count_ones(n)\n    \
    \    local count = 0\n        while n > 0 do\n            count = count + (n %\
    \ 2)\n            n = math.floor(n / 2)\n        end\n        return count\n \
    \   end\n    table.sort(arr, function(a, b)\n        local ones_a = count_ones(a)\n\
    \        local ones_b = count_ones(b)\n        if ones_a == ones_b then\n    \
    \        return a < b\n        else\n            return ones_a < ones_b\n    \
    \    end\n    end)\n    return arr\nend", "  local function count_ones(n)\n  \
    \  local count = 0\n    while n > 0 do\n      count = count + n % 2\n      n =\
    \ math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr, function(a,\
    \ b)\n    local a_ones = count_ones(a)\n    local b_ones = count_ones(b)\n   \
    \ if a_ones == b_ones then\n      return a < b\n    else\n      return a_ones\
    \ < b_ones\n    end\n  end)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      if n % 2 == 1 then\n        count\
    \ = count + 1\n      end\n      n = math.floor(n / 2)\n    end\n    return count\n\
    \  end\n  table.sort(arr, function(a, b)\n    local a_ones = count_ones(a)\n \
    \   local b_ones = count_ones(b)\n    if a_ones == b_ones then\n      return a\
    \ < b\n    else\n      return a_ones < b_ones\n    end\n  end)\n  return arr\n\
    end", "  local function compare(a, b)\n    local a_ones = a:gsub('[^1]', ''):len()\n\
    \    local b_ones = b:gsub('[^1]', ''):len()\n    if a_ones == b_ones then\n \
    \     return a < b\n    else\n      return a_ones < b_ones\n    end\n  end\n \
    \ table.sort(arr, compare)\n  return arr\nend", "  local function count_ones(n)\n\
    \    local count = 0\n    while n > 0 do\n      count = count + (n % 2)\n    \
    \  n = math.floor(n / 2)\n    end\n    return count\n  end\n  table.sort(arr,\
    \ function(a, b)\n    local ones_a = count_ones(a)\n    local ones_b = count_ones(b)\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end)\n  return arr\nend", "  local function cmp(a, b)\n\
    \    local ones_a = a:gsub('0', ''):len()\n    local ones_b = b:gsub('0', ''):len()\n\
    \    if ones_a == ones_b then\n      return a < b\n    else\n      return ones_a\
    \ < ones_b\n    end\n  end\n  table.sort(arr, cmp)\n  return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
