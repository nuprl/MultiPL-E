---
language: lua
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifyqg038.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpifyqg038.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return x == y + z or y == x + z or z == x + y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki6z_s37.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpki6z_s37.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74oqquyu.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp74oqquyu.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx04euyyf.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx04euyyf.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuokav4g3.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuokav4g3.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac7g49wd.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpac7g49wd.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oivt01s.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1oivt01s.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkby7ynt.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmkby7ynt.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sblrps6.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sblrps6.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwvh0397.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcwvh0397.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5izjea2.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk5izjea2.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9j8w9rh.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9j8w9rh.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        local sum = x + y + z
        if x == sum - y - z or y == sum - x - z or z == sum - x - y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmz_e_wx.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkmz_e_wx.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      local sum = x + y + z
      if x == sum - y - z or y == sum - x - z or z == sum - x - y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp556ipdmj.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp556ipdmj.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return x == y + z or y == x + z or z == x + y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki6z_s37.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpki6z_s37.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (math.floor(x) == x and math.floor(y) == y and math.floor(z) == z)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv23_q0h.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbv23_q0h.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z or y == x + z or z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk32ioqp.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnk32ioqp.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if (x + y == z) or (x + z == y) or (y + z == x) then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzj4cs4o.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmppzj4cs4o.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      local sum = x + y + z
      if sum % 1 == 0 then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b_np1tu.lua:27:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9b_np1tu.lua:27: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x == math.floor(x) and y == math.floor(y) and z == math.floor(z))
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9hj4wq7.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9hj4wq7.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z or y == x + z or z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk32ioqp.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnk32ioqp.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return x == y + z or y == x + z or z == x + y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki6z_s37.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpki6z_s37.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if (x == y + z) or (y == x + z) or (z == x + y) then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp507sx7oq.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp507sx7oq.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j3u0azf.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4j3u0azf.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulz1lkz8.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpulz1lkz8.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9km1zw7v.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9km1zw7v.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (math.floor(x) == x and math.floor(y) == y and math.floor(z) == z)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqu0pvig.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnqu0pvig.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpulz1lkz8.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpulz1lkz8.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9km1zw7v.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9km1zw7v.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxyywiy9.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbxyywiy9.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gu77lkl.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5gu77lkl.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x + y == z) or (x + z == y) or (y + z == x) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputgyuvij.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmputgyuvij.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x + y == z) or (x + z == y) or (y + z == x) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputgyuvij.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmputgyuvij.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        local sum = x + y + z
        if x == sum - y - z or y == sum - x - z or z == sum - x - y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmz_e_wx.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkmz_e_wx.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if (x + y == z) or (x + z == y) or (y + z == x) then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzj4cs4o.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmppzj4cs4o.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        local sum = x + y + z
        if x == sum - y - z then
            return true
        elseif y == sum - x - z then
            return true
        elseif z == sum - x - y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk6lvh94.lua:30:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmk6lvh94.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhh6qii4.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdhh6qii4.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (math.floor(x) == x and math.floor(y) == y and math.floor(z) == z)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv23_q0h.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbv23_q0h.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9km1zw7v.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9km1zw7v.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z then
            return true
        elseif y == x + z then
            return true
        elseif z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7ku5xuo.lua:30:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk7ku5xuo.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x + y == z) or (x + z == y) or (y + z == x) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputgyuvij.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmputgyuvij.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z then
        return true
      elseif y == x + z then
        return true
      elseif z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0lcfkm_v.lua:30:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0lcfkm_v.lua:30: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z or y == x + z or z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk32ioqp.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnk32ioqp.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      local sum = x + y + z
      return sum % 1 == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl729m6a5.lua:23:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl729m6a5.lua:23: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z or y == x + z or z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk32ioqp.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnk32ioqp.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      local sum = x + y + z
      return (sum % 1 == 0) and (x == sum - y - z or y == sum - x - z or z == sum - x - y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg152ahpw.lua:23:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg152ahpw.lua:23: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j3u0azf.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4j3u0azf.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x == y + z) or (y == x + z) or (z == x + y) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tw7gt80.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5tw7gt80.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9km1zw7v.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9km1zw7v.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return x == y + z or y == x + z or z == x + y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7hr4p38.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc7hr4p38.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z or y == x + z or z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk32ioqp.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnk32ioqp.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if (x == y + z) or (y == x + z) or (z == x + y) then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp507sx7oq.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp507sx7oq.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac7g49wd.lua:20:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpac7g49wd.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      if x == y + z or y == x + z or z == x + y then
        return true
      else
        return false
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk32ioqp.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnk32ioqp.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x == y + z) or (y == x + z) or (z == x + y) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tw7gt80.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5tw7gt80.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return x == y + z or y == x + z or z == x + y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7hr4p38.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc7hr4p38.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return x == y + z or y == x + z or z == x + y
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki6z_s37.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpki6z_s37.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x == y + z) or (y == x + z) or (z == x + y) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tw7gt80.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5tw7gt80.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if (x + y == z) or (x + z == y) or (y + z == x) then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputgyuvij.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmputgyuvij.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        if x == y + z or y == x + z or z == x + y then
            return true
        else
            return false
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j3u0azf.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4j3u0azf.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7unw5q.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2q7unw5q.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1umxue4.lua:29:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1umxue4.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_9x8jks.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_9x8jks.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
        return (x + y == z) or (x + z == y) or (y + z == x)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- Create a function that takes 3 numbers.
    -- Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    -- Returns false in any other cases.
    -- Examples
    -- >>> any_int(5, 2, 7)
    -- true
    -- >>> any_int(3, 2, 2)
    -- false
    -- >>> any_int(3, -2, 1)
    -- true
    -- >>> any_int(3.6, -2.2, 2)
    -- false
    local function any_int(x, y, z)
      return (x == y + z) or (y == x + z) or (z == x + y)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = any_int
        lu.assertEquals(candidate(2, 3, 1), true)
        lu.assertEquals(candidate(2.5, 2, 3), false)
        lu.assertEquals(candidate(1.5, 5, 3.5), false)
        lu.assertEquals(candidate(2, 6, 2), false)
        lu.assertEquals(candidate(4, 2, 2), true)
        lu.assertEquals(candidate(2.2, 2.2, 2.2), false)
        lu.assertEquals(candidate(-4, 6, 2), true)
        lu.assertEquals(candidate(2, 1, 1), true)
        lu.assertEquals(candidate(3, 4, 7), true)
        lu.assertEquals(candidate(3.0, 4, 7), false)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
