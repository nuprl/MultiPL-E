name: HumanEval_92_any_int
language: lua
results:
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifyqg038.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpifyqg038.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki6z_s37.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpki6z_s37.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74oqquyu.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp74oqquyu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx04euyyf.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx04euyyf.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuokav4g3.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuokav4g3.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac7g49wd.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpac7g49wd.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oivt01s.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1oivt01s.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkby7ynt.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmkby7ynt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxynr9wds.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxynr9wds.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1qlj31f.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1qlj31f.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sblrps6.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sblrps6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwvh0397.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcwvh0397.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ct14zv4.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ct14zv4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5izjea2.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk5izjea2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9j8w9rh.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9j8w9rh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniwswnbi.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpniwswnbi.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    if x == sum - y - z or y == sum - x - z or z == sum - x\
    \ - y then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmz_e_wx.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkmz_e_wx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  if x == sum - y - z or y == sum - x - z or z == sum - x -\
    \ y then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp556ipdmj.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp556ipdmj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssu15pyd.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpssu15pyd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc85fpbt8.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc85fpbt8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
