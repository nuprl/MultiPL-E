---
name: HumanEval_18_how_many_times
language: lua
results:
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        local j = 1
        while i <= #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
                i = i + #substring
            else
                i = i + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z8h3wuz.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7z8h3wuz.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local pos = 1
        while true do
            pos = string.find(string, substring, pos, true)
            if not pos then
                break
            end
            count = count + 1
            pos = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        local index = string.find(string, substring, start)
        while index do
            count = count + 1
            start = index + 1
            index = string.find(string, substring, start)
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 1
      while index <= #string do
        local i, j = string:find(substring, index, true)
        if i == nil then
          break
        end
        count = count + 1
        index = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3g6ajeu.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpw3g6ajeu.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        local last_start = 1
        while true do
            start = string.find(string, substring, start, true)
            if start == nil then
                break
            end
            count = count + 1
            start = start + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        local j = 1
        while i <= #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
                i = i + #substring
            else
                i = i + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmbvpihx.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpgmbvpihx.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i + 1, true)
        if i == nil then
          break
        end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      local j = 1
      while i <= #string do
        if string:sub(i, i + #substring - 1) == substring then
          count = count + 1
          i = i + #substring
        else
          i = i + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmb8eb6v.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpnmb8eb6v.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then break end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local i = string.find(string, substring, start, true)
            if i == nil then
                break
            end
            count = count + 1
            start = i + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local last_index = 0
        while true do
            local index = string:find(substring, last_index + 1, true)
            if not index then
                break
            end
            count = count + 1
            last_index = index
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 1
      while index <= #string do
        local i, j = string:find(substring, index, true)
        if i == nil then
          break
        end
        count = count + 1
        index = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvyz1rqd.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpuvyz1rqd.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start_index = 1
        while true do
            local start_index, end_index = string.find(string, substring, start_index)
            if start_index == nil then
                break
            end
            count = count + 1
            start_index = end_index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Find how many times a given substring can be found in the original
    string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>
    how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\nlocal
    function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos = 1\n\twhile
    true do\n\t\tpos = string:find(substring, pos, true)\n\t\tif not pos then break
    end\n\t\tcount = count + 1\n\t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n
    \   lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',
    'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john
    doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local pos = 1
        while true do
            local new_pos = string:find(substring, pos, true)
            if new_pos then
                count = count + 1
                pos = new_pos + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      if string == '' or substring == '' then
        return 0
      end
      local count = 0
      local i = 1
      while i <= #string do
        local j = string.find(string, substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while index <= #string do
            local i, j = string.find(string, substring, index, true)
            if i then
                count = count + 1
                index = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v3uqjr4.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp2v3uqjr4.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then break end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local index = string:find(substring, start, true)
        if not index then
          break
        end
        count = count + 1
        start = index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while i < #string do
        local j = string:find(substring, i + 1, true)
        if j then
          count = count + 1
          i = j
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 0
        while true do
            index = string.find(string, substring, index + 1, true)
            if index == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i + 1, true)
        if i == nil then
          break
        end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then
          break
        end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string:find(substring, i + 1, true)
            if i == nil then break end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while index <= #string do
            local i, j = string.find(string, substring, index, true)
            if i then
                count = count + 1
                index = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15we5w5f.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp15we5w5f.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local pos = string:find(substring, start, true)
        if not pos then break end
        count = count + 1
        start = pos + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      for i = 1, #string do
        if string:sub(i, i + #substring - 1) == substring then
          count = count + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        for i = 1, #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local start_index = string.find(string, substring, start, true)
        if start_index == nil then
          break
        end
        count = count + 1
        start = start_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then break end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while index <= #string do
            local i, j = string.find(string, substring, index, true)
            if i then
                count = count + 1
                index = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgi72d6y.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmprgi72d6y.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        local j = 1
        while i <= #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
                i = i + #substring
            else
                i = i + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj57xajwn.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpj57xajwn.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i + 1, true)
        if i == nil then
          break
        end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string:find(substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 0
      while true do
        index = string.find(string, substring, index + 1, true)
        if not index then
          break
        end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string:find(substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local index = string:find(substring, start, true)
        if not index then
          break
        end
        count = count + 1
        start = index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            local j = string.find(string, substring, i + 1, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while index <= #string do
            local next_index = string:find(substring, index, true)
            if next_index then
                count = count + 1
                index = next_index + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while true do
            local next_index = string:find(substring, index, true)
            if next_index then
                count = count + 1
                index = next_index + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then break end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start_pos = 1
        while true do
            local pos = string:find(substring, start_pos, true)
            if not pos then break end
            count = count + 1
            start_pos = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        local j = 1
        while i <= #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
                i = i + #substring
            else
                i = i + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnofqrnt.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmppnofqrnt.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            i = string.find(string, substring, i, true)
            if i == nil then
                break
            end
            count = count + 1
            i = i + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while index <= #string do
            local i, j = string.find(string, substring, index, true)
            if i then
                count = count + 1
                index = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr17zapc.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzr17zapc.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 0
        while true do
            index = string.find(string, substring, index + 1, true)
            if index == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local pos = string:find(substring, start, true)
        if not pos then break end
        count = count + 1
        start = pos + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then
          break
        end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then
          break
        end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 0
        while true do
            index = string.find(string, substring, index + 1, true)
            if index == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then
          break
        end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string.find(string, substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      for i = 1, #string - #substring + 1 do
        if string:sub(i, i + #substring - 1) == substring then
          count = count + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local start, finish = string.find(string, substring, i)
        if start then
          count = count + 1
          i = finish + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrr7lu8e.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqrr7lu8e.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local i = 0
        local count = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        i = string.find(string, substring, i, true)
        if i == nil then break end
        count = count + 1
        i = i + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then break end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      local j = 0
      while i < string.len(string) do
        j = string.find(string, substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i+1, true)
        if i == nil then break end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            i = string.find(string, substring, i, true)
            if i == nil then
                break
            end
            count = count + 1
            i = i + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start_index = 1
        while true do
            local start_index, end_index = string.find(string, substring, start_index)
            if start_index == nil then
                break
            end
            count = count + 1
            start_index = end_index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then
          break
        end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local pos = string:find(substring, start, true)
        if not pos then
          break
        end
        count = count + 1
        start = pos + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local last_found = 0
        while true do
            local found = string.find(string, substring, last_found + 1, true)
            if found == nil then
                break
            end
            count = count + 1
            last_found = found
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        for i = 1, #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        local j = 1
        while i <= #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
                i = i + #substring
            else
                i = i + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04kdd_yz.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp04kdd_yz.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            i = string.find(string, substring, i, true)
            if i == nil then
                break
            end
            count = count + 1
            i = i + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        for i = 1, #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 1
      while index <= #string do
        local i, j = string.find(string, substring, index, true)
        if i == nil then
          break
        end
        count = count + 1
        index = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cjozb5m.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3cjozb5m.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      local stop = #substring
      while start <= #string do
        if string:sub(start, stop) == substring then
          count = count + 1
          start = start + 1
          stop = stop + 1
        else
          start = start + 1
          stop = stop + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local index = string:find(substring, start, true)
        if not index then
          break
        end
        count = count + 1
        start = index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i + 1, true)
        if i == nil then
          break
        end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start_pos = 1
        while true do
            local pos = string:find(substring, start_pos, true)
            if not pos then
                break
            end
            count = count + 1
            start_pos = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start_index = 1
        while true do
            local index = string.find(string, substring, start_index, true)
            if index then
                count = count + 1
                start_index = index + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if j == nil then break end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local from, to = string.find(string, substring, start, true)
            if from == nil then
                break
            end
            count = count + 1
            start = to + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq13qwvvk.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpq13qwvvk.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string:find(substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while true do
            index = string.find(string, substring, index, true)
            if index == nil then
                break
            end
            count = count + 1
            index = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        if string == '' or substring == '' then
            return 0
        end
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i + 1, true)
        if i == nil then
          break
        end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while true do
            index = string.find(string, substring, index, true)
            if index == nil then
                break
            end
            count = count + 1
            index = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      local finish = #substring
      while finish <= #string do
        if string:sub(start, finish) == substring then
          count = count + 1
        end
        start = start + 1
        finish = finish + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local last_found = 0
        while true do
            local found = string.find(string, substring, last_found + 1, true)
            if not found then
                break
            end
            count = count + 1
            last_found = found
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string.find(string, substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local from, to = string.find(string, substring, start, true)
        if from == nil then break end
        count = count + 1
        start = to + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhfu3pr2.lua:25:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpxhfu3pr2.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local pos = string:find(substring, start, true)
        if not pos then break end
        count = count + 1
        start = pos + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while true do
            local i, j = string.find(string, substring, index, true)
            if i == nil then
                break
            end
            count = count + 1
            index = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdqyu38y.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpzdqyu38y.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 0
      while true do
        i = string:find(substring, i + 1, true)
        if i == nil then break end
        count = count + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while index <= #string do
            local i, j = string.find(string, substring, index, true)
            if i then
                count = count + 1
                index = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1c3k7jvj.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1c3k7jvj.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        while true do
            local i, j = string.find(string, substring, index, true)
            if i == nil then
                break
            end
            count = count + 1
            index = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrc_g2dh.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmptrc_g2dh.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start_index = 1
        while true do
            local start_index, end_index = string.find(string, substring, start_index)
            if start_index == nil then
                break
            end
            count = count + 1
            start_index = end_index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then break end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        for i = 1, #string do
            if string:sub(i, i + #substring - 1) == substring then
                count = count + 1
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local s, e = string.find(string, substring)
      while s do
        count = count + 1
        s, e = string.find(string, substring, e + 1)
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k_bun1y.lua:23:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_k_bun1y.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then break end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      local j = 1
      while i <= #string do
        if string:sub(i, i + #substring - 1) == substring then
          count = count + 1
          i = i + #substring
        else
          i = i + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjimzlga.lua:28:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqjimzlga.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local pos = 1
        while true do
            pos = string:find(substring, pos, true)
            if not pos then
                break
            end
            count = count + 1
            pos = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then
          break
        end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local index = 1
        local length = #substring
        while index <= #string do
            local i, j = string:find(substring, index, true)
            if i then
                count = count + 1
                index = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xzj2dyw.lua:29:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp6xzj2dyw.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j then
          count = count + 1
          i = j + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local pos = string:find(substring, start, true)
            if not pos then
                break
            end
            count = count + 1
            start = pos + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local pos = string:find(substring, start, true)
        if not pos then
          break
        end
        count = count + 1
        start = pos + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while true do
        local j = string.find(string, substring, i, true)
        if not j then break end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if not j then break end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j then
                count = count + 1
                i = j + 1
            else
                break
            end
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then
                break
            end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 1
      while true do
        local next_index = string:find(substring, index, true)
        if next_index then
          count = count + 1
          index = next_index + 1
        else
          break
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 1
      while index <= #string do
        local i, j = string:find(substring, index, true)
        if i == nil then
          break
        end
        count = count + 1
        index = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv5n6dw1.lua:27:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqv5n6dw1.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      while i <= #string do
        local j = string:find(substring, i, true)
        if j == nil then break end
        count = count + 1
        i = j + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local index = string:find(substring, start, true)
        if not index then
          break
        end
        count = count + 1
        start = index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start_index = 1
      while true do
        local start_index, end_index = string.find(string, substring, start_index)
        if start_index == nil then
          break
        end
        count = count + 1
        start_index = end_index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then break end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local start = 1
      while true do
        local pos = string:find(substring, start, true)
        if not pos then
          break
        end
        count = count + 1
        start = pos + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local start = 1
        while true do
            local index = string:find(substring, start, true)
            if not index then break end
            count = count + 1
            start = index + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while i <= #string do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local index = 1
      while true do
        index = string.find(string, substring, index, true)
        if not index then
          break
        end
        count = count + 1
        index = index + 1
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 0
        while true do
            i = string:find(substring, i + 1, true)
            if i == nil then
                break
            end
            count = count + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
      local count = 0
      local i = 1
      local j = 1
      local n = #string
      local m = #substring
      while i <= n do
        if string:sub(i, i + m - 1) == substring then
          count = count + 1
          i = i + m
        else
          i = i + 1
        end
      end
      return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddiv4ns.lua:30:
    expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpjddiv4ns.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Find how many times a given substring can be found in the original string. Count overlaping cases.
    -- >>> how_many_times('', 'a')
    -- 0
    -- >>> how_many_times('aaa', 'a')
    -- 3
    -- >>> how_many_times('aaaa', 'aa')
    -- 3
    local function how_many_times(string, substring)
        local count = 0
        local i = 1
        while true do
            local j = string.find(string, substring, i, true)
            if j == nil then
                break
            end
            count = count + 1
            i = j + 1
        end
        return count
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = how_many_times
        lu.assertEquals(candidate('', 'x'), 0)
        lu.assertEquals(candidate('xyxyxyx', 'x'), 4)
        lu.assertEquals(candidate('cacacacac', 'cac'), 4)
        lu.assertEquals(candidate('john doe', 'john'), 1)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
