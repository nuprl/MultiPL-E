---
name: HumanEval_11_string_xor
language: lua
results:
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        local ai = tonumber(a:sub(i, i))
        local bi = tonumber(b:sub(i, i))
        table.insert(result, ai ~ bi)
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x ~= y then
                result = result .. '1'
            else
                result = result .. '0'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        local x = a:sub(i, i)
        local y = b:sub(i, i)
        if x ~= y then
          result[i] = '1'
        else
          result[i] = '0'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local res = {}
        for i = 1, #a do
            res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
        end
        return table.concat(res)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_char = a:sub(i, i)
            local b_char = b:sub(i, i)
            if a_char == b_char then
                table.insert(result, '0')
            else
                table.insert(result, '1')
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        local length = math.max(#a, #b)
        for i = 1, length do
            local x = tonumber(a:sub(i, i)) or 0
            local y = tonumber(b:sub(i, i)) or 0
            local z = x ~ y
            result = result .. z
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal res = {}\n\tfor i =
    1, #a do\n\t\tres[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\tend\n\treturn
    table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n
    \   lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',
    '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = tonumber(a:sub(i, i))
            local y = tonumber(b:sub(i, i))
            local z = x ~ y
            table.insert(result, z)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        local a_bit = a:sub(i, i)
        local b_bit = b:sub(i, i)
        if a_bit == b_bit then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                table.insert(result, '0')
            else
                table.insert(result, '1')
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = tonumber(a:sub(i, i)) or 0
            local y = tonumber(b:sub(i, i)) or 0
            result = result .. tostring(x ~ y)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local res = {}
      for i = 1, #a do
        res[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(res)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = tonumber(a:sub(i, i)) or 0
            local y = tonumber(b:sub(i, i)) or 0
            table.insert(result, (x + y) % 2)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            local xor_bit = (a_bit == b_bit) and '0' or '1'
            result = result .. xor_bit
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor
    i = 1, #a do\n\t\tresult = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\tend\n\treturn
    result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',
    '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x == y then
                table.insert(result, '0')
            else
                table.insert(result, '1')
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i) == "1" and 1 or 0
            local y = b:sub(i, i) == "1" and 1 or 0
            if x ~= y then
                result = result .. "1"
            else
                result = result .. "0"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i) == '1' and 1 or 0
            local y = b:sub(i, i) == '1' and 1 or 0
            table.insert(result, x ~= y and '1' or '0')
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tfor
    i = 1, #a do\n\t\tresult = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')\n\tend\n\treturn
    result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',
    '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result[i] = '0'
            else
            result[i] = '1'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = ''\n\tlocal
    a_len = #a\n\tlocal b_len = #b\n\tlocal max_len = math.max(a_len, b_len)\n\tfor
    i = 1, max_len do\n\t\tlocal a_bit = a:sub(i, i)\n\t\tlocal b_bit = b:sub(i, i)\n\t\tif
    a_bit == b_bit then\n\t\t\tresult = result .. '0'\n\t\telse\n\t\t\tresult = result
    .. '1'\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',
    '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',
    '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            local xor_bit = (a_bit == '1' and b_bit == '0') or (a_bit == '0' and b_bit == '1')
            result = result .. (xor_bit and '1' or '0')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                table.insert(result, '0')
            else
                table.insert(result, '1')
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = \"\"\n\tfor
    i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result ..
    \"0\"\n\t\telse\n\t\t\tresult = result .. \"1\"\n\t\tend\n\tend\n\treturn result\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n
    \   lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',
    '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local ai = a:sub(i, i)
            local bi = b:sub(i, i)
            result = result .. (ai == bi and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x ~= y then
                result[i] = '1'
            else
                result[i] = '0'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = tonumber(a:sub(i, i))
            local y = tonumber(b:sub(i, i))
            local z = x ~ y
            table.insert(result, z)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = {}\n\tfor
    i = 1, #a do\n\t\tresult[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\tend\n\treturn
    table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n
    \   lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',
    '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            local xor_bit = a_bit ~= b_bit and '1' or '0'
            table.insert(result, xor_bit)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i) == "1" and 1 or 0
            local y = b:sub(i, i) == "1" and 1 or 0
            if x ~= y then
                result = result .. "1"
            else
                result = result .. "0"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      local len = math.max(#a, #b)
      for i = 1, len do
        local x = tonumber(a:sub(i, i)) or 0
        local y = tonumber(b:sub(i, i)) or 0
        result = result .. tostring(x ~ y)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local xor = {}
        for i = 1, #a do
            xor[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
        end
        return table.concat(xor)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x, y = a:sub(i, i), b:sub(i, i)
            local r = xor(x, y)
            table.insert(result, r)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2n9m2brt.lua:9:
    attempt to call a nil value (global 'xor')\nstack traceback:\n\t/tmp/tmp2n9m2brt.lua:9:
    in local 'candidate'\n\t/tmp/tmp2n9m2brt.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local ret = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          ret = ret .. '0'
        else
          ret = ret .. '1'
        end
      end
      return ret
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = \"\"\n\tfor
    i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result ..
    \"0\"\n\t\telse\n\t\t\tresult = result .. \"1\"\n\t\tend\n\tend\n\treturn result\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n
    \   lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',
    '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        local x = a:sub(i, i)
        local y = b:sub(i, i)
        if x ~= y then
          result[i] = '1'
        else
          result[i] = '0'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x ~= y then
                result[i] = '1'
            else
                result[i] = '0'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i) == '1' and 1 or 0
            local y = b:sub(i, i) == '1' and 1 or 0
            local z = x ~ y
            table.insert(result, z and '1' or '0')
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3fschx_.lua:20:
    expected: \"010010\"\nactual: \"111111\"\nstack traceback:\n\t/tmp/tmpa3fschx_.lua:20:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local res = ''
        for i = 1, #a do
            res = res .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            local z = x ~= y and '1' or '0'
            table.insert(result, z)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        local a_bit = a:sub(i, i)
        local b_bit = b:sub(i, i)
        local xor_bit = a_bit == b_bit and "0" or "1"
        result = result .. xor_bit
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            local a_num = tonumber(a_bit)
            local b_num = tonumber(b_bit)
            if a_num and b_num then
                result[i] = (a_num + b_num) % 2
            elseif a_num then
                result[i] = a_num
            elseif b_num then
                result[i] = b_num
            else
                result[i] = 0
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_char = a:sub(i, i)
            local b_char = b:sub(i, i)
            local a_int = tonumber(a_char)
            local b_int = tonumber(b_char)
            local xor_int = a_int ~ b_int
            local xor_char = tostring(xor_int)
            table.insert(result, xor_char)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = tonumber(a:sub(i, i)) or 0
            local y = tonumber(b:sub(i, i)) or 0
            result = result .. tostring(x ~ y)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local res = ""
        for i = 1, #a do
            res = res .. (a:sub(i, i) == b:sub(i, i) and "0" or "1")
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        local ai = a:sub(i, i)
        local bi = b:sub(i, i)
        if ai == bi then
          result[i] = '0'
        else
          result[i] = '1'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            local xor_bit = a_bit == b_bit and '0' or '1'
            result = result .. xor_bit
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                table.insert(result, '0')
            else
                table.insert(result, '1')
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            local z = x ~= y and '1' or '0'
            result = result .. z
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local xor = ""
        for i = 1, #a do
            xor = xor .. (a:sub(i, i) == b:sub(i, i) and "0" or "1")
        end
        return xor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            if a_bit == b_bit then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        local ai = tonumber(a:sub(i, i))
        local bi = tonumber(b:sub(i, i))
        if ai == bi then
          result[i] = '0'
        else
          result[i] = '1'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = tonumber(a:sub(i, i)) or 0
            local y = tonumber(b:sub(i, i)) or 0
            local z = x ~ y
            table.insert(result, z)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local r = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                r = r .. "0"
            else
                r = r .. "1"
            end
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      local len = math.max(#a, #b)
      for i = 1, len do
        local x = a:sub(i, i) == '1' and 1 or 0
        local y = b:sub(i, i) == '1' and 1 or 0
        local z = x ~ y
        result[i] = z == 1 and '1' or '0'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i) == '1' and 1 or 0
            local y = b:sub(i, i) == '1' and 1 or 0
            local z = x ~ y
            table.insert(result, z == 1 and '1' or '0')
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local r = ''
        for i = 1, #a do
            r = r .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
        end
        return r
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_bit = tonumber(a:sub(i, i))
            local b_bit = tonumber(b:sub(i, i))
            local xor_bit = a_bit ~ b_bit
            table.insert(result, xor_bit)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local res = ""
        for i = 1, #a do
            res = res .. tostring(a:sub(i, i) ~= b:sub(i, i))
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57_rhi18.lua:16:
    expected: \"010010\"\nactual: \"falsetruefalsefalsetruefalse\"\nstack traceback:\n\t/tmp/tmp57_rhi18.lua:16:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local ai = a:sub(i, i)
            local bi = b:sub(i, i)
            if ai == bi then
                result[i] = '0'
            else
                result[i] = '1'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result[i] = '0'
        else
          result[i] = '1'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = \"\"\n\tfor
    i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result ..
    \"0\"\n\t\telse\n\t\t\tresult = result .. \"1\"\n\t\tend\n\tend\n\treturn result\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n
    \   lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',
    '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local ai = a:sub(i, i)
            local bi = b:sub(i, i)
            if ai == bi then
                result[i] = '0'
            else
                result[i] = '1'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result[i] = '0'
            else
            result[i] = '1'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x ~= y then
                result[i] = '1'
            else
                result[i] = '0'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x ~= y then
                result[i] = '1'
            else
                result[i] = '0'
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, math.max(#a, #b) do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x == y then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = {}\n\tfor
    i = 1, #a do\n\t\tresult[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n\tend\n\treturn
    table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n
    \   lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',
    '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform
    binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',
    '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal xor = {}\n\tfor i =
    1, #a do\n\t\txor[i] = a:sub(i, i) ~= b:sub(i, i) and '1' or '0'\n\tend\n\treturn
    table.concat(xor)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n
    \   lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',
    '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        result = result .. (a:sub(i, i) == b:sub(i, i) and '0' or '1')
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ""
      for i = 1, #a do
        local a_bit = a:sub(i, i)
        local b_bit = b:sub(i, i)
        if a_bit == b_bit then
          result = result .. "0"
        else
          result = result .. "1"
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. '0'
            else
                result = result .. '1'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        local a_bit = a:sub(i, i)
        local b_bit = b:sub(i, i)
        if a_bit == b_bit then
          result[i] = '0'
        else
          result[i] = '1'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ''
        for i = 1, #a do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x ~= y then
                result = result .. '1'
            else
                result = result .. '0'
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        for i = 1, #a do
            local a_bit = a:sub(i, i)
            local b_bit = b:sub(i, i)
            local xor_bit = a_bit ~= b_bit and '1' or '0'
            table.insert(result, xor_bit)
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = ""
        for i = 1, #a do
            if a:sub(i, i) == b:sub(i, i) then
                result = result .. "0"
            else
                result = result .. "1"
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        result[i] = a:sub(i, i) == b:sub(i, i) and '0' or '1'
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = {}
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result[i] = '0'
        else
          result[i] = '1'
        end
      end
      return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
        local result = {}
        local len = math.max(#a, #b)
        for i = 1, len do
            local x = a:sub(i, i)
            local y = b:sub(i, i)
            if x == y then
                table.insert(result, '0')
            else
                table.insert(result, '1')
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Input are two strings a and b consisting only of 1s and 0s.
    -- Perform binary XOR on these inputs and return result also as a string.
    -- >>> string_xor('010', '110')
    -- '100'
    local function string_xor(a, b)
      local result = ''
      for i = 1, #a do
        if a:sub(i, i) == b:sub(i, i) then
          result = result .. '0'
        else
          result = result .. '1'
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = string_xor
        lu.assertEquals(candidate('111000', '101010'), '010010')
        lu.assertEquals(candidate('1', '1'), '0')
        lu.assertEquals(candidate('0101', '0000'), '0101')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
