---
name: HumanEval_24_largest_divisor
language: lua
results:
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxput6a9.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpoxput6a9.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkdd569e.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpgkdd569e.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = math.floor(n / 2)
      while i > 1 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4f3s3rtj.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp4f3s3rtj.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3w812u2.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpz3w812u2.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywz7av87.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpywz7av87.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = math.floor(n / 2)
      while i > 1 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local largest = 1
      for i = 2, n - 1 do
        if n % i == 0 then
          largest = i
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01giw8ah.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp01giw8ah.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n-1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpl8oxm0.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmplpl8oxm0.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n-1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1h3s6zq.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmps1h3s6zq.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n-1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhbrjxbe.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpqhbrjxbe.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest_divisor = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest_divisor = i
            end
        end
        return largest_divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n-1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local largest = 1
      for i = 2, n - 1 do
        if n % i == 0 then
          largest = i
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = 2
        while n % divisor ~= 0 do
            divisor = divisor + 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwo3cr3fk.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpwo3cr3fk.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n/2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = 2
      while n % divisor ~= 0 do
        divisor = divisor + 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_3ojw41.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpi_3ojw41.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = 2
      while n % divisor ~= 0 do
        divisor = divisor + 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwy85bkt.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfwy85bkt.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = math.floor(n/2)
      while d > 1 do
        if n % d == 0 then
          return d
        end
        d = d - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = n - 1
      while n % d ~= 0 do
        d = d - 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n / 2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 2, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n/2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk1jnvk6.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpmk1jnvk6.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local largest = 1
      for i = 2, n - 1 do
        if n % i == 0 then
          largest = i
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = math.floor(n / 2)
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp84rzyi.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqp84rzyi.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfd457gg.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdfd457gg.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9rgmnqu.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpq9rgmnqu.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcha4hohw.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpcha4hohw.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk09y4z8z.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk09y4z8z.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return n
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlxshug8.lua:18:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzlxshug8.lua:18: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = math.floor(n/2)
        while d > 1 do
            if n % d == 0 then
                return d
            end
            d = d - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 2, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0m46uq6.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpv0m46uq6.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdri70yre.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdri70yre.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n-1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n / 2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaw3krg27.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpaw3krg27.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = 2
        while n % divisor ~= 0 do
            divisor = divisor + 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxagip34.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuxagip34.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = math.floor(n/2)
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = math.floor(n/2), 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local largest = 1
      for i = 2, n - 1 do
        if n % i == 0 then
          largest = i
        end
      end
      return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = n - 1
      while n % d ~= 0 do
        d = d - 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n-1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return nil
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while d < n do
        if n % d == 0 then
          return d
        end
        d = d + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1v0kp9x.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc1v0kp9x.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 0
        for i = 1, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0izmdqk.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpn0izmdqk.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0kutbwd.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpi0kutbwd.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2s4do2x.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpe2s4do2x.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = 2
      while n % divisor ~= 0 do
        divisor = divisor + 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvu897l2.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdvu897l2.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = n - 1
        while n % d ~= 0 do
            d = d - 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pgle64l.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_pgle64l.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n/2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xclmynv.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp6xclmynv.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbenh5pl.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpzbenh5pl.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n-1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bgy853m.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp5bgy853m.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuh66zcn.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmuh66zcn.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 2, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n-1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51erovao.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp51erovao.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n / 2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn94g0hkl.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpn94g0hkl.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- For a given number n, find the largest number that divides n evenly,
    smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\tlocal
    i = 2\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\treturn n / i\n\t\tend\n\t\ti
    = i + 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),
    1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),
    50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n / 2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2aja4n4.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpv2aja4n4.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while d < n do
        if n % d == 0 then
          return d
        end
        d = d + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg8zpgz23.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpg8zpgz23.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while d < n do
            if n % d == 0 then
                return d
            end
            d = d + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6vvn5b7.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpc6vvn5b7.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = n - 1
        while i > 0 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while d < n do
            if n % d == 0 then
                return d
            end
            d = d + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptehdfb6t.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmptehdfb6t.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 2, -1 do
            if n % i == 0 then
                return i
            end
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n-1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01w0992t.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp01w0992t.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while (n % divisor ~= 0) do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d3wqe7x.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp7d3wqe7x.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while n % divisor ~= 0 do
            divisor = divisor - 1
        end
        return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q21vlnu.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp5q21vlnu.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local divisor = n - 1
      while n % divisor ~= 0 do
        divisor = divisor - 1
      end
      return divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe90r4ov_.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpe90r4ov_.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = 2
      while i < n do
        if n % i == 0 then
          return n / i
        end
        i = i + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ev9q4e0.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1ev9q4e0.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm0jtxyj.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjm0jtxyj.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local divisor = n - 1
        while divisor > 0 do
            if n % divisor == 0 then
                return divisor
            end
            divisor = divisor - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      for i = n - 1, 1, -1 do
        if n % i == 0 then
          return i
        end
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while n % d ~= 0 do
        d = d + 1
      end
      return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbrclm1r.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvbrclm1r.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local largest_divisor = 1
      for i = 2, n - 1 do
        if n % i == 0 then
          largest_divisor = i
        end
      end
      return largest_divisor
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        for i = n - 1, 1, -1 do
            if n % i == 0 then
                return i
            end
        end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = math.floor(n/2)
        while i > 1 do
            if n % i == 0 then
                return i
            end
            i = i - 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while n % d ~= 0 do
            d = d + 1
        end
        return d
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5h1trbz.lua:15:
    expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpe5h1trbz.lua:15: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local d = 2
        while d < n do
            if n % d == 0 then
                return d
            end
            d = d + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rykvc70.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp5rykvc70.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- For a given number n, find the largest number that divides n evenly,
    smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\tlocal
    i = math.floor(n/2)\n\twhile i > 1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\ti
    = i - 1\n\tend\n\treturn 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),
    1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),
    50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local largest = 1
        for i = 2, n - 1 do
            if n % i == 0 then
                largest = i
            end
        end
        return largest
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
        local i = 2
        while i < n do
            if n % i == 0 then
                return n / i
            end
            i = i + 1
        end
        return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local i = n - 1
      while i > 0 do
        if n % i == 0 then
          return i
        end
        i = i - 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given number n, find the largest number that divides n evenly, smaller than n
    -- >>> largest_divisor(15)
    -- 5
    local function largest_divisor(n)
      local d = 2
      while d < n do
        if n % d == 0 then
          return d
        end
        d = d + 1
      end
      return 1
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = largest_divisor
        lu.assertEquals(candidate(3), 1)
        lu.assertEquals(candidate(7), 1)
        lu.assertEquals(candidate(10), 5)
        lu.assertEquals(candidate(100), 50)
        lu.assertEquals(candidate(49), 7)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sfjgob2.lua:20:
    expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp7sfjgob2.lua:20: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
