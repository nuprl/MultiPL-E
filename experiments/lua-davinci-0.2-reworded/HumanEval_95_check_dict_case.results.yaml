language: lua
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlhji7jn.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzlhji7jn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z3qg462.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7z3qg462.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:lower() ==\
    \ k then\n                lower = false\n            end\n            if upper\
    \ and not k:upper() == k then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneds8toh.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpneds8toh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == 'string' then\n            if key:lower() ~= key\
    \ then\n                lower = false\n            end\n            if key:upper()\
    \ ~= key then\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8_mhace.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl8_mhace.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qy1fday.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9qy1fday.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxlhzuj2.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmxlhzuj2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_y69eiq.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_y69eiq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match('%u') then\n                lower = false\n\
    \            else\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzvgn0f.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxzvgn0f.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            lower = lower and k == string.lower(k)\n\
    \            upper = upper and k == string.upper(k)\n        else\n          \
    \  return false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3prrp3gi.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3prrp3gi.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = lower_case and k == string.lower(k)\n            end\n\
    \            if upper_case then\n                upper_case = upper_case and k\
    \ == string.upper(k)\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqdp6ebg.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqdp6ebg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthc10tc0.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpthc10tc0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ea9k5i3.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1ea9k5i3.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lowercase =\
    \ true\n    local uppercase = true\n    for k, v in pairs(dict) do\n        if\
    \ type(k) ~= 'string' then\n            return false\n        end\n        if\
    \ lowercase then\n            lowercase = k == k:lower()\n        end\n      \
    \  if uppercase then\n            uppercase = k == k:upper()\n        end\n  \
    \  end\n    return lowercase or uppercase\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iyajj_0.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1iyajj_0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr13dwu0.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptr13dwu0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if not dict then\n        return false\n    end\n    local is_lower = false\n\
    \    local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacfu1wxt.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpacfu1wxt.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            lower_case = lower_case\
    \ and k == string.lower(k)\n            upper_case = upper_case and k == string.upper(k)\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7r8_vgn.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm7r8_vgn.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower = true\n  local upper = true\n  for k, v in pairs(dict) do\n  \
    \  if type(k) == 'string' then\n      if not k:match('^%l+$') then\n        lower\
    \ = false\n      end\n      if not k:match('^%u+$') then\n        upper = false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn8x4003.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsn8x4003.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if not string.match(k,\
    \ '^%l+$') then\n                lower_case = false\n            end\n       \
    \     if not string.match(k, '^%u+$') then\n                upper_case = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76xwvdo0.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp76xwvdo0.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not k:match('^%u+$') then\n\
    \                upper = false\n            end\n            if not k:match('^%l+$')\
    \ then\n                lower = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ye4dugq.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ye4dugq.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == 'string' then\n            if key ~= string.lower(key)\
    \ then\n                lower = false\n            end\n            if key ~=\
    \ string.upper(key) then\n                upper = false\n            end\n   \
    \     else\n            return false\n        end\n    end\n    return lower or\
    \ upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph99lpl1t.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph99lpl1t.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = 0\n    local upper = 0\n    for k, v in pairs(dict) do\n  \
    \      if type(k) == 'string' then\n            if string.lower(k) == k then\n\
    \                lower = lower + 1\n            elseif string.upper(k) == k then\n\
    \                upper = upper + 1\n            end\n        end\n    end\n  \
    \  if lower == 0 and upper == 0 then\n        return false\n    elseif lower ==\
    \ 0 and upper > 0 then\n        return true\n    elseif lower > 0 and upper ==\
    \ 0 then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0qz1vsq.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn0qz1vsq.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower = true\n  local upper = true\n  for k, v in pairs(dict) do\n  \
    \  if type(k) == 'string' then\n      lower = lower and k == string.lower(k)\n\
    \      upper = upper and k == string.upper(k)\n    else\n      return false\n\
    \    end\n  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e_27os7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1e_27os7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            lower = lower and k == string.lower(k)\n\
    \            upper = upper and k == string.upper(k)\n        else\n          \
    \  return false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3prrp3gi.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3prrp3gi.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if type(dict) ~= 'table' then\n        return false\n    end\n    if #dict\
    \ == 0 then\n        return false\n    end\n    local lower_case = true\n    local\
    \ upper_case = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k ~= k:lower() then\n\
    \            lower_case = false\n        end\n        if k ~= k:upper() then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4y805dd.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr4y805dd.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k ~= string.lower(k) then\n                lower = false\n   \
    \         end\n            if k ~= string.upper(k) then\n                upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfxa8gp.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmwfxa8gp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if string.lower(k) ~= k then\n               \
    \ lower = false\n            end\n            if string.upper(k) ~= k then\n \
    \               upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hqv9nko.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_hqv9nko.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            lower = lower and k == string.lower(k)\n\
    \            upper = upper and k == string.upper(k)\n        else\n          \
    \  return false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3prrp3gi.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3prrp3gi.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not string.match(k, '^%l+$')\
    \ then\n                lower = false\n            end\n            if not string.match(k,\
    \ '^%u+$') then\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo79_bky4.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo79_bky4.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if not k:match('^%l+$') then\n                lower\
    \ = false\n            end\n            if not k:match('^%u+$') then\n       \
    \         upper = false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2229kv9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph2229kv9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k ~= string.lower(k) then\n                lower\
    \ = false\n            end\n            if k ~= string.upper(k) then\n       \
    \         upper = false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zej_xle.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6zej_xle.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = lower_case and k == string.lower(k)\n            end\n\
    \            if upper_case then\n                upper_case = upper_case and k\
    \ == string.upper(k)\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqdp6ebg.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqdp6ebg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function.\n    local lower = true\n    local upper\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) == 'string'\
    \ then\n            if string.lower(key) ~= key then\n                lower =\
    \ false\n            end\n            if string.upper(key) ~= key then\n     \
    \           upper = false\n            end\n        else\n            return false\n\
    \        end\n    end\n    if lower or upper then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8dunzh4.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt8dunzh4.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local is_lower = false\n\
    \    local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kxgu0l2.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5kxgu0l2.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = lower_case and k == string.lower(k)\n            end\n\
    \            if upper_case then\n                upper_case = upper_case and k\
    \ == string.upper(k)\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqdp6ebg.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqdp6ebg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match('%u') then\n                lower = false\n\
    \            else\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzvgn0f.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxzvgn0f.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if not k:match('^%u+$')\
    \ then\n                upper_case = false\n            end\n            if not\
    \ k:match('^%l+$') then\n                lower_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_soenb3m.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_soenb3m.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower = true\n  local upper = true\n  for k, _ in pairs(dict) do\n  \
    \  if type(k) == 'string' then\n      if k:match('%u') then\n        lower = false\n\
    \      else\n        upper = false\n      end\n    else\n      return false\n\
    \    end\n  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tnvw96d.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6tnvw96d.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppg642zqy.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppg642zqy.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and string.match(k,\
    \ '[A-Z]') then\n                lower = false\n            end\n            if\
    \ upper and string.match(k, '[a-z]') then\n                upper = false\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc12let7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyc12let7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function.\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k:lower() ~= k then\n                lower = false\n         \
    \   end\n            if k:upper() ~= k then\n                upper = false\n \
    \           end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3s7y4pl.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk3s7y4pl.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower, upper = true, true\n    for k, v in pairs(dict) do\n       \
    \ if type(k) == 'string' then\n            if k:lower() ~= k then\n          \
    \      lower = false\n            end\n            if k:upper() ~= k then\n  \
    \              upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65pok9xb.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp65pok9xb.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local is_upper = true\n    local is_lower = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                is_lower = false\n            else\n                is_upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_upper or is_lower\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qn1tst4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0qn1tst4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not k:match('^%u+$') then\n\
    \                upper = false\n            end\n            if not k:match('^%l+$')\
    \ then\n                lower = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ye4dugq.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ye4dugq.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if dict == nil or next(dict) == nil then\n        return false\n    end\n\
    \    local is_lower = false\n    local is_upper = false\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() == k then\n\
    \                is_lower = true\n            elseif k:upper() == k then\n   \
    \             is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaotusc6s.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaotusc6s.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:lower() ==\
    \ k then\n                lower = false\n            end\n            if upper\
    \ and not k:upper() == k then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneds8toh.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpneds8toh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower = true\n  local upper = true\n  for k, v in pairs(dict) do\n  \
    \  if type(k) == 'string' then\n      if lower and k ~= k:lower() then\n     \
    \   lower = false\n      end\n      if upper and k ~= k:upper() then\n       \
    \ upper = false\n      end\n    else\n      return false\n    end\n  end\n  return\
    \ lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sv3f7ca.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6sv3f7ca.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:lower() ==\
    \ k then\n                lower = false\n            end\n            if upper\
    \ and not k:upper() == k then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneds8toh.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpneds8toh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower then\n            \
    \    lower = k == string.lower(k)\n            end\n            if upper then\n\
    \                upper = k == string.upper(k)\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzxi14tf.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzxi14tf.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:lower() ==\
    \ k then\n                lower = false\n            end\n            if upper\
    \ and not k:upper() == k then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneds8toh.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpneds8toh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:lower() ==\
    \ k then\n                lower = false\n            end\n            if upper\
    \ and not k:upper() == k then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneds8toh.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpneds8toh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower, upper = true, true\n    for k, v in pairs(dict) do\n       \
    \ if type(k) == 'string' then\n            if k ~= k:lower() then\n          \
    \      lower = false\n            end\n            if k ~= k:upper() then\n  \
    \              upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay3n8pu_.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpay3n8pu_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local is_lower = false\n    local is_upper = false\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() == k then\n\
    \                is_lower = true\n            elseif k:upper() == k then\n   \
    \             is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdt1dkzl.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzdt1dkzl.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k ~= string.lower(k) then\n               \
    \ lower = false\n            end\n            if k ~= string.upper(k) then\n \
    \               upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l73okcq.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4l73okcq.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then return false end\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string' then\
    \ return false end\n        if k:match('%u') then\n            lower = false\n\
    \        else\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufoepcyr.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpufoepcyr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k ~= string.lower(k) then\n                lower\
    \ = false\n            end\n            if k ~= string.upper(k) then\n       \
    \         upper = false\n            end\n        else\n            lower = false\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh1fgfis.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjh1fgfis.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, _ in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j6_nz_v.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4j6_nz_v.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if type(dict) ~= 'table' then\n        return false\n    end\n    if #dict\
    \ == 0 then\n        return false\n    end\n    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k:lower() ~= k then\n\
    \            lower = false\n        end\n        if k:upper() ~= k then\n    \
    \        upper = false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75jmr5d4.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp75jmr5d4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if not k:match('^%l+$') then\n                lower\
    \ = false\n            end\n            if not k:match('^%u+$') then\n       \
    \         upper = false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2229kv9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph2229kv9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower_case = true\n  local upper_case = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if k:lower() ~= k then\n        lower_case\
    \ = false\n      end\n      if k:upper() ~= k then\n        upper_case = false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprab2p_pz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprab2p_pz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower_case = true\n  local upper_case = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if k:lower() ~= k then\n        lower_case\
    \ = false\n      end\n      if k:upper() ~= k then\n        upper_case = false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprab2p_pz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprab2p_pz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:lower() ~= k then\n                lower = false\n\
    \            end\n            if k:upper() ~= k then\n                upper =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5aoticq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu5aoticq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if not string.match(k,\
    \ '^%l+$') then\n                lower_case = false\n            end\n       \
    \     if not string.match(k, '^%u+$') then\n                upper_case = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76xwvdo0.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp76xwvdo0.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3e2a4d7.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpj3e2a4d7.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if not string.match(k,\
    \ '^%l+$') then\n                lower_case = false\n            end\n       \
    \     if not string.match(k, '^%u+$') then\n                upper_case = false\n\
    \            end\n        else\n            lower_case = false\n            upper_case\
    \ = false\n        end\n    end\n    return lower_case or upper_case\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2y9xqdv.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph2y9xqdv.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k ~= string.lower(k) then\n               \
    \ lower = false\n            end\n            if k ~= string.upper(k) then\n \
    \               upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l73okcq.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4l73okcq.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k ~= string.lower(k) then\n                lower = false\n   \
    \         end\n            if k ~= string.upper(k) then\n                upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfxa8gp.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmwfxa8gp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if not string.match(k,\
    \ '^%l+$') then\n                lower_case = false\n            end\n       \
    \     if not string.match(k, '^%u+$') then\n                upper_case = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76xwvdo0.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp76xwvdo0.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:match('%u') then\n                lower =\
    \ false\n            else\n                upper = false\n            end\n  \
    \      else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6xa7bff.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp6xa7bff.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower_case = true\n  local upper_case = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if k:match('%u') then\n        lower_case\
    \ = false\n      else\n        upper_case = false\n      end\n    else\n     \
    \ return false\n    end\n  end\n  return lower_case or upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaymofjj1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaymofjj1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:match('%u') then\n                lower =\
    \ false\n            else\n                upper = false\n            end\n  \
    \      else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6xa7bff.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp6xa7bff.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower = true\n  local upper = true\n  for k,v in pairs(dict) do\n   \
    \ if type(k) == 'string' then\n      if k:lower() ~= k then\n        lower = false\n\
    \      end\n      if k:upper() ~= k then\n        upper = false\n      end\n \
    \   else\n      return false\n    end\n  end\n  return lower or upper\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd2zw53c.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdd2zw53c.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not k:match('^%l+$') then\n\
    \                lower = false\n            end\n            if not k:match('^%u+$')\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlnib38_.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptlnib38_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local lower_case = true\n  local upper_case = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if k:lower() ~= k then\n        lower_case\
    \ = false\n      end\n      if k:upper() ~= k then\n        upper_case = false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprab2p_pz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprab2p_pz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \tlocal lower_case = true\n\tlocal upper_case = true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) == 'string' then\n\t\t\tif k ~= k:lower() then\n\t\t\t\t\
    lower_case = false\n\t\t\tend\n\t\t\tif k ~= k:upper() then\n\t\t\t\tupper_case\
    \ = false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpallxev1a.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpallxev1a.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case and not string.match(k,\
    \ '^%l+$') then\n                lower_case = false\n            end\n       \
    \     if upper_case and not string.match(k, '^%u+$') then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmmar5v2.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvmmar5v2.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not k:match('^%l+$') then\n\
    \                lower = false\n            end\n            if not k:match('^%u+$')\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlnib38_.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptlnib38_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k:lower() ~= k then\n                lower = false\n         \
    \   end\n            if k:upper() ~= k then\n                upper = false\n \
    \           end\n        else\n            return false\n        end\n    end\n\
    \    if lower or upper then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgn8e_yvm.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgn8e_yvm.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k:lower() ~= k then\n                lower\
    \ = false\n            end\n            if k:upper() ~= k then\n             \
    \   upper = false\n            end\n        else\n            return false\n \
    \       end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjfqgq9c.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmjfqgq9c.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower then\n            \
    \    lower = k == string.lower(k)\n            end\n            if upper then\n\
    \                upper = k == string.upper(k)\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzxi14tf.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzxi14tf.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%l') then\n\
    \                upper_case = false\n            elseif k:match('%u') then\n \
    \               lower_case = false\n            end\n        else\n          \
    \  return false\n        end\n    end\n    return lower_case or upper_case\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhgkfpqx.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmhgkfpqx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if string.lower(k) ~= k then\n                lower\
    \ = false\n            end\n            if string.upper(k) ~= k then\n       \
    \         upper = false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcejs4o_b.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcejs4o_b.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case and k ~=\
    \ k:lower() then\n                lower_case = false\n            end\n      \
    \      if upper_case and k ~= k:upper() then\n                upper_case = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzd3iu3kg.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzd3iu3kg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match('%u') then\n                lower = false\n\
    \            else\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzvgn0f.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxzvgn0f.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k:lower() ~= k\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k:upper() ~= k then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5ybyz0x.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn5ybyz0x.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match('%u') then\n                lower = false\n\
    \            else\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzvgn0f.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxzvgn0f.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k ~= string.lower(k) then\n                lower = false\n   \
    \         end\n            if k ~= string.upper(k) then\n                upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfxa8gp.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmwfxa8gp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not k:match('^%l+$') then\n\
    \                lower = false\n            end\n            if not k:match('^%u+$')\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlnib38_.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptlnib38_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, _ in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnckqql0b.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnckqql0b.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if not string.match(k, '^%l+$') then\n          \
    \      lower = false\n            end\n            if not string.match(k, '^%u+$')\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq2_eat8.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzq2_eat8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match('%u') then\n                lower = false\n\
    \            else\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzvgn0f.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxzvgn0f.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:match('^%l+$')\
    \ then\n                lower = false\n            end\n            if upper and\
    \ not k:match('^%u+$') then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1x7nf6c.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm1x7nf6c.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:match('%u') then\n    \
    \            lower = false\n            else\n                upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaf3rct4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjaf3rct4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local count = 0\n    local count1 =\
    \ 0\n    for k,v in pairs(dict) do\n        if type(k) == \"string\" then\n  \
    \          if k == string.lower(k) then\n                count = count + 1\n \
    \           elseif k == string.upper(k) then\n                count1 = count1\
    \ + 1\n            end\n        end\n    end\n    if count == 0 and count1 ==\
    \ 0 then\n        return false\n    elseif count == 0 and count1 ~= 0 then\n \
    \       return true\n    elseif count ~= 0 and count1 == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp781eh8.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgp781eh8.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj3e2a4d7.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpj3e2a4d7.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- your code here\n    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) == 'string' then\n            if\
    \ not string.match(k, '^%l+$') then\n                lower = false\n         \
    \   end\n            if not string.match(k, '^%u+$') then\n                upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadlfvnkj.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpadlfvnkj.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:lower() ~= k then\n                lower = false\n\
    \            end\n            if k:upper() ~= k then\n                upper =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5aoticq.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu5aoticq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, _ in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j6_nz_v.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4j6_nz_v.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if not k:find('^%l+$') then\n\
    \                lower = false\n            end\n            if not k:find('^%u+$')\
    \ then\n                upper = false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbf7ouky.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmbf7ouky.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if next(dict) == nil then\n        return false\n    end\n    local lower\
    \ = true\n    local upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k ~= string.lower(k) then\n               \
    \ lower = false\n            end\n            if k ~= string.upper(k) then\n \
    \               upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l73okcq.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4l73okcq.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case_keys = true\n    local upper_case_keys = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) == 'string' then\n            if lower_case_keys\
    \ then\n                lower_case_keys = string.lower(k) == k\n            end\n\
    \            if upper_case_keys then\n                upper_case_keys = string.upper(k)\
    \ == k\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case_keys or upper_case_keys\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0z1vd2h1.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0z1vd2h1.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local count = 0\n    local count2 =\
    \ 0\n    for k,v in pairs(dict) do\n        if type(k) == \"string\" then\n  \
    \          if k == string.lower(k) then\n                count = count + 1\n \
    \           elseif k == string.upper(k) then\n                count2 = count2\
    \ + 1\n            end\n        end\n    end\n    if count == 0 and count2 ==\
    \ 0 then\n        return false\n    elseif count == 0 and count2 ~= 0 then\n \
    \       return true\n    elseif count ~= 0 and count2 == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg277vw3r.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg277vw3r.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k ~= string.lower(k) then\n                lower = false\n   \
    \         end\n            if k ~= string.upper(k) then\n                upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if lower or upper then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfxa8gp.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmwfxa8gp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case and string.upper(k)\
    \ == k then\n                lower_case = false\n            end\n           \
    \ if upper_case and string.lower(k) == k then\n                upper_case = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5g1nxu_.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb5g1nxu_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local upper = true\n    local lower = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() == k then\n   \
    \             upper = false\n            elseif k:upper() == k then\n        \
    \        lower = false\n            else\n                return false\n     \
    \       end\n        else\n            return false\n        end\n    end\n  \
    \  return upper or lower\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprh5e_v0f.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprh5e_v0f.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- YOUR CODE HERE\n    local lower = true\n    local upper = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) == 'string' then\n            if\
    \ not string.match(k, '^%l+$') then\n                lower = false\n         \
    \   end\n            if not string.match(k, '^%u+$') then\n                upper\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnogza1cd.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnogza1cd.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case and string.upper(k)\
    \ == k then\n                lower_case = false\n            end\n           \
    \ if upper_case and string.lower(k) == k then\n                upper_case = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5g1nxu_.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb5g1nxu_.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('^%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3eglx1z.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq3eglx1z.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if string.lower(k) ~= k\
    \ then\n                lower_case = false\n            end\n            if string.upper(k)\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2g2rm8y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu2g2rm8y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k ~= string.lower(k)\
    \ then\n                lower_case = false\n            end\n            if k\
    \ ~= string.upper(k) then\n                upper_case = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmob87gpz.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmob87gpz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == 'string' then\n            if not string.match(key,\
    \ '^%l+$') then\n                lower = false\n            end\n            if\
    \ not string.match(key, '^%u+$') then\n                upper = false\n       \
    \     end\n        else\n            return false\n        end\n    end\n    return\
    \ lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa40wxvok.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa40wxvok.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
