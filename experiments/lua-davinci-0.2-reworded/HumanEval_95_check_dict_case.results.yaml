name: HumanEval_95_check_dict_case
language: lua
results:
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:match('%u') then\n\
    \                lower_case = false\n            else\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm69p9e1.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsm69p9e1.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlhji7jn.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzlhji7jn.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and k ~= k:lower()\
    \ then\n                lower = false\n            end\n            if upper and\
    \ k ~= k:upper() then\n                upper = false\n            end\n      \
    \  else\n            return false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3s5dih_j.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3s5dih_j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k ~= k:lower() then\n   \
    \             lower = false\n            end\n            if k ~= k:upper() then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ug_ucz7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2ug_ucz7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z3qg462.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7z3qg462.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if lower and not k:lower() ==\
    \ k then\n                lower = false\n            end\n            if upper\
    \ and not k:upper() == k then\n                upper = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpneds8toh.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpneds8toh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == 'string' then\n            if key:lower() ~= key\
    \ then\n                lower = false\n            end\n            if key:upper()\
    \ ~= key then\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8_mhace.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl8_mhace.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qy1fday.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9qy1fday.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxlhzuj2.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmxlhzuj2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_y69eiq.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc_y69eiq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lower = true\n\
    \    local upper = true\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k:match('%u') then\n                lower = false\n\
    \            else\n                upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower or upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxzvgn0f.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptxzvgn0f.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            lower = lower and k == string.lower(k)\n\
    \            upper = upper and k == string.upper(k)\n        else\n          \
    \  return false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3prrp3gi.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3prrp3gi.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k:lower() ~= k then\n\
    \                lower_case = false\n            end\n            if k:upper()\
    \ ~= k then\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbul9f4k_.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbul9f4k_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = lower_case and k == string.lower(k)\n            end\n\
    \            if upper_case then\n                upper_case = upper_case and k\
    \ == string.upper(k)\n            end\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqdp6ebg.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfqdp6ebg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthc10tc0.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpthc10tc0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ea9k5i3.lua:22:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1ea9k5i3.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    if #dict == 0 then\n        return false\n    end\n    local lowercase =\
    \ true\n    local uppercase = true\n    for k, v in pairs(dict) do\n        if\
    \ type(k) ~= 'string' then\n            return false\n        end\n        if\
    \ lowercase then\n            lowercase = k == k:lower()\n        end\n      \
    \  if uppercase then\n            uppercase = k == k:upper()\n        end\n  \
    \  end\n    return lowercase or uppercase\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iyajj_0.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1iyajj_0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower_case = true\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if lower_case then\n  \
    \              lower_case = k == string.lower(k)\n            end\n          \
    \  if upper_case then\n                upper_case = k == string.upper(k)\n   \
    \         end\n        else\n            return false\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl72m90y.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfl72m90y.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr13dwu0.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptr13dwu0.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             lower = false\n            end\n            if k:upper() ~= k then\n\
    \                upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp500nnwdj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp500nnwdj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
