---
name: HumanEval_161_solve
language: lua
prompt: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case from
  lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the string
  contains no letters, reverse the string.\n-- The function should return the resulted
  string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n-- 'AB'\n--
  >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = solve
      lu.assertEquals(candidate('AsDf'), 'aSdF')
      lu.assertEquals(candidate('1234'), '4321')
      lu.assertEquals(candidate('ab'), 'AB')
      lu.assertEquals(candidate('#a@C'), '#A@c')
      lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')
      lu.assertEquals(candidate('#6@2'), '2@6#')
      lu.assertEquals(candidate('#$a^D'), '#$A^d')
      lu.assertEquals(candidate('#ccc'), '#CCC')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
    local res = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        res[#res + 1] = c:upper() == c and c:lower() or c:upper()
      else
        res[#res + 1] = c
      end
    end
    return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = {}
      local i = 1
      for c in s:gmatch(".") do
          if c:match("%a") then
              res[i] = c:lower() == c and c:upper() or c:lower()
          else
              res[i] = c
          end
          i = i + 1
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local char = s:sub(i, i)
          if char:match('%a') then
              if char:match('%l') then
                  res = res .. char:upper()
              else
                  res = res .. char:lower()
              end
          else
              res = res .. char
          end
      end
      return res:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t == 0 and s:reverse() or table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              c = c:lower() == c and c:upper() or c:lower()
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:upper() == c and c:lower() or c:upper()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for c in s:gmatch('.') do
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res == 0 and s:reverse() or table.concat(res)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:upper() == c and c:lower() or c:upper()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local res = ''
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        if c:match('%l') then
          res = res .. c:upper()
        else
          res = res .. c:lower()
        end
      else
        res = res .. c
      end
    end
    if #res == 0 then
      return s:reverse()
    end
    return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match("%a") then
              t[i] = s[i]:upper() == s[i] and s[i]:lower() or s[i]:upper()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          if s[i]:match('%a') then
              res = res .. s[i]:lower()
          else
              res = res .. s[i]
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:gsub('%a', function(c)
                  return c:lower() == c and c:upper() or c:lower()
              end)
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ""
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%u") then
                  res = res .. c:lower()
              else
                  res = res .. c:upper()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:lower() == c and c:upper() or c:lower()
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = ''
      for i = #s, 1, -1 do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:upper()
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return #res > 0 and res or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%l") then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:lower() == c and c:upper() or c:lower()
          else
              res = res .. c
          end
      end
      return #res == 0 and s:reverse() or res
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return #res > 0 and res or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              c = c:lower() == c and c:upper() or c:lower()
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%l") then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      if s:match('%a') then
          return s:gsub('%a', function(c)
              return c:lower() == c and c:upper() or c:lower()
          end)
      else
          return s:reverse()
      end
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        if c:match('%l') then
          c = c:upper()
        else
          c = c:lower()
        end
      end
      t[#t + 1] = c
    end
    return table.concat(t):reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match("%a") then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        if c:match('%l') then
          c = c:upper()
        else
          c = c:lower()
        end
      end
      t[#t + 1] = c
    end
    return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      if res == '' then
          return s:reverse()
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t == 0 and s:reverse() or table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              c = c:upper() == c and c:lower() or c:upper()
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      if #res > 0 then
          return table.concat(res)
      else
          return s:reverse()
      end
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%l") then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  c = c:lower()
              else
                  c = c:upper()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  res = res .. c:lower()
              else
                  res = res .. c:upper()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local r = ''
      for i = #s, 1, -1 do
          local c = s:sub(i, i)
          if c:match('%a') then
              r = r .. c:lower() == c and c:upper() or c:lower()
          else
              r = r .. c
          end
      end
      return r
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:upper() == c and c:lower() or c:upper()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              res[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              res[i] = s[i]
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      if #res == 0 then
          return s:reverse()
      end
      return res
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  res = res .. c:lower()
              else
                  res = res .. c:upper()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      if res == '' then
          return s:reverse()
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:upper() == c and c:lower() or c:upper()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = #s, 1, -1 do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:lower() == c and c:upper() or c:lower()
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local char = s:sub(i, i)
          if char:match('%a') then
              if char:match('%l') then
                  res = res .. char:upper()
              else
                  res = res .. char:lower()
              end
          else
              res = res .. char
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%l") then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t == 0 and s:reverse() or table.concat(t)
  end
- |2-
      local t = {}
      for c in s:gmatch(".") do
          if c:match("%a") then
              t[#t+1] = c:upper() == c and c:lower() or c:upper()
          else
              t[#t+1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      local r = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      if #t == 0 then
          for i = #s, 1, -1 do
              r = r .. s:sub(i, i)
          end
      else
          for i = 1, #t do
              r = r .. t[i]
          end
      end
      return r
  end
- |2-
    local res = ''
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        res = res .. c:lower() == c and c:upper() or c:lower()
      else
        res = res .. c
      end
    end
    return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  t[#t + 1] = c:lower()
              else
                  t[#t + 1] = c:upper()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      return s:gsub('%a', function(c) return c:lower() == c and c:upper() or c:lower() end)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      if #res == 0 then
          return s:reverse()
      end
      return table.concat(res)
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        if c:match('%l') then
          t[#t + 1] = c:upper()
        else
          t[#t + 1] = c:lower()
        end
      else
        t[#t + 1] = c
      end
    end
    if #t == 0 then
      return s:reverse()
    end
    return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  c = c:lower()
              else
                  c = c:upper()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t == 0 and s:reverse() or table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              c = c:upper() == c and c:lower() or c:upper()
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  t[#t + 1] = c:lower()
              else
                  t[#t + 1] = c:upper()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      if s:match('%a') then
          return s:gsub('%a', function(c)
              return c:lower() == c and c:upper() or c:lower()
          end)
      else
          return s:reverse()
      end
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ""
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%u") then
                  res = res .. c:lower()
              else
                  res = res .. c:upper()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match("%a") then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match("%a") then
              t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res == 0 and s:reverse() or table.concat(res)
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        if c:match('%l') then
          t[#t + 1] = c:upper()
        else
          t[#t + 1] = c:lower()
        end
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        c = c:lower() == c and c:upper() or c:lower()
      end
      t[#t + 1] = c
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      if s[i]:match('%a') then
        t[i] = s[i]:lower() == s[i] and s[i]:upper() or s[i]:lower()
      else
        t[i] = s[i]
      end
    end
    return #s:gsub('%a', '') == #s and s:reverse() or table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  t[#t + 1] = c:lower()
              else
                  t[#t + 1] = c:upper()
              end
          else
              t[#t + 1] = c
          end
      end
      return #t == 0 and s:reverse() or table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:upper() == c and c:lower() or c:upper()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:upper() == c and c:lower() or c:upper()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = ''
      for i = #s, 1, -1 do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:lower() == c and c:upper() or c:lower()
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              t[i] = s[i]:upper() == s[i] and s[i]:lower() or s[i]:upper()
          else
              t[i] = s[i]
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  res[#res + 1] = c:lower()
              else
                  res[#res + 1] = c:upper()
              end
          else
              res[#res + 1] = c
          end
      end
      if #res == 0 then
          return s:reverse()
      end
      return table.concat(res)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      return #res == 0 and s:reverse() or table.concat(res)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  c = c:lower()
              else
                  c = c:upper()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%l") then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local r = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              r = r .. c:lower() == c and c:upper() or c:lower()
          else
              r = r .. c
          end
      end
      return r
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        if c:match('%l') then
          t[#t + 1] = c:upper()
        else
          t[#t + 1] = c:lower()
        end
      else
        t[#t + 1] = c
      end
    end
    if #t == 0 then
      return s:reverse()
    end
    return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              c = c:lower() == c and c:upper() or c:lower()
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local r = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              r[#r + 1] = c:upper() == c and c:lower() or c:upper()
          else
              r[#r + 1] = c
          end
      end
      return #r > 0 and table.concat(r) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:upper() == c and c:lower() or c:upper()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res[#res + 1] = c:upper()
              else
                  res[#res + 1] = c:lower()
              end
          else
              res[#res + 1] = c
          end
      end
      if #res == 0 then
          return s:reverse()
      end
      return table.concat(res)
  end
- |2-
    local t = {}
    for i = 1, #s do
      local c = s:sub(i, i)
      if c:match('%a') then
        t[#t + 1] = c:lower() == c and c:upper() or c:lower()
      else
        t[#t + 1] = c
      end
    end
    return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = #s, 1, -1 do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. c:lower() == c and c:upper() or c:lower()
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  t[#t + 1] = c:lower()
              else
                  t[#t + 1] = c:upper()
              end
          else
              t[#t + 1] = c
          end
      end
      if #t == 0 then
          return s:reverse()
      end
      return table.concat(t)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res = res .. (c:lower() == c and c:upper() or c:lower())
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          res[#res + 1] = c
      end
      return table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = {}
      for i = 1, #s do
          if s[i]:match('%a') then
              res[i] = s[i]:match('%l') and s[i]:upper() or s[i]:lower()
          else
              res[i] = s[i]
          end
      end
      return #res > 0 and table.concat(res) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          if s[i]:match("%a") then
              t[i] = s[i]:upper() == s[i] and s[i]:lower() or s[i]:upper()
          else
              t[i] = s[i]
          end
      end
      return #t == 0 and s:reverse() or table.concat(t)
  end
- |2-
      if s:match('%a') then
          return s:gsub('%a', function(c)
              return c:lower() == c and c:upper() or c:lower()
          end)
      else
          return s:reverse()
      end
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:upper() == c and c:lower() or c:upper()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  c = c:upper()
              else
                  c = c:lower()
              end
          end
          t[#t + 1] = c
      end
      return table.concat(t)
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      return s:gsub('%a', function(c) return c:upper() == c and c:lower() or c:upper() end)
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res == 0 and s:reverse() or table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              res[#res + 1] = c:lower() == c and c:upper() or c:lower()
          else
              res[#res + 1] = c
          end
      end
      return #res == 0 and s:reverse() or table.concat(res)
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              t[#t + 1] = c:lower() == c and c:upper() or c:lower()
          else
              t[#t + 1] = c
          end
      end
      return #t > 0 and table.concat(t) or s:reverse()
  end
- |2-
      local t = {}
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match("%a") then
              if c:match("%l") then
                  t[#t + 1] = c:upper()
              else
                  t[#t + 1] = c:lower()
              end
          else
              t[#t + 1] = c
          end
      end
      if #t > 0 then
          return table.concat(t)
      else
          return s:reverse()
      end
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%u') then
                  res = res .. c:lower()
              else
                  res = res .. c:upper()
              end
          else
              res = res .. c
          end
      end
      return #res == 0 and s:reverse() or res
  end
- |2-
      local res = ''
      for i = 1, #s do
          local c = s:sub(i, i)
          if c:match('%a') then
              if c:match('%l') then
                  res = res .. c:upper()
              else
                  res = res .. c:lower()
              end
          else
              res = res .. c
          end
      end
      return res
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
