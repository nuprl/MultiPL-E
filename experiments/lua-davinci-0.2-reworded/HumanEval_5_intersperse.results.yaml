---
name: HumanEval_5_intersperse
language: lua
results:
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            result[#result + 1] = number
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        if #numbers == 0 then
            return {}
        end
        local result = {numbers[1]}
        for i = 2, #numbers do
            table.insert(result, delimeter)
            table.insert(result, numbers[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            if i > 1 then
                table.insert(result, delimeter)
            end
            table.insert(result, number)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, v in ipairs(numbers) do
            table.insert(result, v)
            if i < #numbers then
                table.insert(result, delimeter)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      local i = 1
      for _, number in ipairs(numbers) do
        result[i] = number
        i = i + 1
        result[i] = delimeter
        i = i + 1
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvqerezi.lua:22:
    expected: {5, 8, 6, 8, 3, 8, 2}\nactual: {5, 8, 6, 8, 3, 8, 2, 8}\nstack traceback:\n\t/tmp/tmpgvqerezi.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements
    of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,
    2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\tlocal
    result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\t\tif
    i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\treturn
    result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,
    6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},
    2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            if i > 1 then
                table.insert(result, delimeter)
            end
            table.insert(result, number)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers do
        result[#result + 1] = numbers[i]
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i ~= #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers do
        result[#result + 1] = numbers[i]
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            table.insert(result, number)
            if i < #numbers then
                table.insert(result, delimeter)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements
    of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,
    2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\tlocal
    result = {}\n\tfor i = 1, #numbers do\n\t\tresult[#result + 1] = numbers[i]\n\t\tif
    i < #numbers then\n\t\t\tresult[#result + 1] = delimeter\n\t\tend\n\tend\n\treturn
    result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = intersperse\n    lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5,
    6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2},
    2), {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Insert a number 'delimeter' between every two consecutive elements
    of input table `numbers'\n-- >>> intersperse({}, 4)\n-- {}\n-- >>> intersperse({1,
    2, 3}, 4)\n-- {1, 4, 2, 4, 3}\nlocal function intersperse(numbers, delimeter)\n\tlocal
    result = {}\n\tfor i = 1, #numbers - 1 do\n\t\tresult[#result + 1] = numbers[i]\n\t\tresult[#result
    + 1] = delimeter\n\tend\n\tresult[#result + 1] = numbers[#numbers]\n\treturn result\nend\nlu
    = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersperse\n
    \   lu.assertEquals(candidate({}, 7), {})\n    lu.assertEquals(candidate({5, 6,
    3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})\n    lu.assertEquals(candidate({2, 2, 2}, 2),
    {2, 2, 2, 2, 2})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, v in ipairs(numbers) do
            table.insert(result, v)
            if i < #numbers then
                table.insert(result, delimeter)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers do
        result[#result + 1] = numbers[i]
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        local i = 1
        while i <= #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
            i = i + 1
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            result[#result + 1] = number
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i, number in ipairs(numbers) do
        result[#result + 1] = number
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            table.insert(result, number)
            if i < #numbers then
                table.insert(result, delimeter)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            result[#result + 1] = number
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        if #numbers == 0 then
            return {}
        end
        local result = {numbers[1]}
        for i = 2, #numbers do
            result[#result + 1] = delimeter
            result[#result + 1] = numbers[i]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, v in ipairs(numbers) do
            table.insert(result, v)
            if i < #numbers then
                table.insert(result, delimeter)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, v in ipairs(numbers) do
            if i > 1 then
                table.insert(result, delimeter)
            end
            table.insert(result, v)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers do
        result[#result + 1] = numbers[i]
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers do
        result[#result + 1] = numbers[i]
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        local n = #numbers
        for i = 1, n - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        if n > 0 then
            result[#result + 1] = numbers[n]
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            if i > 1 then
                table.insert(result, delimeter)
            end
            table.insert(result, numbers[i])
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i, number in ipairs(numbers) do
            table.insert(result, number)
            if i < #numbers then
                table.insert(result, delimeter)
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        local len = #numbers
        for i = 1, len do
            result[#result + 1] = numbers[i]
            if i < len then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers do
            result[#result + 1] = numbers[i]
            if i < #numbers then
                result[#result + 1] = delimeter
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i, number in ipairs(numbers) do
        result[#result + 1] = number
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers do
        result[#result + 1] = numbers[i]
        if i < #numbers then
          result[#result + 1] = delimeter
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
      local result = {}
      for i = 1, #numbers - 1 do
        result[#result + 1] = numbers[i]
        result[#result + 1] = delimeter
      end
      result[#result + 1] = numbers[#numbers]
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            table.insert(result, numbers[i])
            table.insert(result, delimeter)
        end
        table.insert(result, numbers[#numbers])
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Insert a number 'delimeter' between every two consecutive elements of input table `numbers'
    -- >>> intersperse({}, 4)
    -- {}
    -- >>> intersperse({1, 2, 3}, 4)
    -- {1, 4, 2, 4, 3}
    local function intersperse(numbers, delimeter)
        local result = {}
        for i = 1, #numbers - 1 do
            result[#result + 1] = numbers[i]
            result[#result + 1] = delimeter
        end
        result[#result + 1] = numbers[#numbers]
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = intersperse
        lu.assertEquals(candidate({}, 7), {})
        lu.assertEquals(candidate({5, 6, 3, 2}, 8), {5, 8, 6, 8, 3, 8, 2})
        lu.assertEquals(candidate({2, 2, 2}, 2), {2, 2, 2, 2, 2})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
