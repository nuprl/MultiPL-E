---
name: HumanEval_97_multiply
language: lua
prompt: "-- Complete the function that takes two integers and returns \n-- the product
  of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n-- >>>
  multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,
  1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = multiply
      lu.assertEquals(candidate(148, 412), 16)
      lu.assertEquals(candidate(19, 28), 72)
      lu.assertEquals(candidate(2020, 1851), 0)
      lu.assertEquals(candidate(14, -15), 20)
      lu.assertEquals(candidate(76, 67), 42)
      lu.assertEquals(candidate(17, 27), 49)
      lu.assertEquals(candidate(0, 1), 0)
      lu.assertEquals(candidate(0, 0), 0)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    local a, b = math.abs(a), math.abs(b)
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    local a = math.abs(a)
    local b = math.abs(b)
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      local function unit_digit(n)
          return n % 10
      end
      return unit_digit(a) * unit_digit(b)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a%10) * (b%10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    local a = math.abs(a)
    local b = math.abs(b)
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a%10) * (b%10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    local function unit_digit(n)
      return math.abs(n) % 10
    end
    return unit_digit(a) * unit_digit(b)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    local function unit_digit(n)
      return math.abs(n) % 10
    end
    return unit_digit(a) * unit_digit(b)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a%10) * (b%10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return math.abs(a) % 10 * math.abs(b) % 10
  end
- |2-
    local a_unit_digit = a % 10
    local b_unit_digit = b % 10
    return a_unit_digit * b_unit_digit
  end
- |2-
      return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      local a, b = math.abs(a), math.abs(b)
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a%10) * (b%10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
      return (a % 10) * (b % 10)
  end
- |2-
    return (a % 10) * (b % 10)
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
