---
name: HumanEval_86_anti_shuffle
language: lua
results:
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvuwuwc3.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvvuwuwc3.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        for i, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        result[i] = table.concat(chars)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0iyotvb.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpm0iyotvb.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6i9nyos.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpd6i9nyos.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmparys5wwl.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmparys5wwl.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for w in s:gmatch('%S+') do
        table.insert(words, w)
      end
      local result = {}
      for i, w in ipairs(words) do
        local chars = {}
        for c in w:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        result[i] = table.concat(chars)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local new_words = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(new_words, table.concat(chars))
        end
        return table.concat(new_words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local result = ''
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        for i, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            result = result .. table.concat(chars)
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw633mh_f.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpw633mh_f.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbusrnm3.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcbusrnm3.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for j, c in ipairs(chars) do
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for j, c in ipairs(chars) do
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for _, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for _, c in ipairs(chars) do
          result = result .. c
        end
        result = result .. ' '
      end
      return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc196shq9.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpc196shq9.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%w+') do
            table.insert(t, w:gsub('.', function(c) return c .. '\0' end))
        end
        return table.concat(t):gsub('%z', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2v87nmgc.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmp2v87nmgc.lua:16:
    in local 'candidate'\n\t/tmp/tmp2v87nmgc.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq02i_ryz.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpq02i_ryz.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7wotear.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmps7wotear.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            local new_word = table.concat(chars)
            table.insert(result, new_word)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        local result = {}
        for _, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Implement me
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefcqdksw.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpefcqdksw.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_iiccsl.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp8_iiccsl.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c ~= ' ' then
                word = word .. c
            else
                table.insert(words, word)
                word = ''
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for j, c in ipairs(chars) do
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%S+') do
            table.insert(t, w:gsub('.', function(c) return c .. '\0' end))
        end
        for i, w in ipairs(t) do
            t[i] = table.concat(w:gmatch('.'))
        end
        return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbt3awpuk.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpbt3awpuk.lua:16:
    in local 'candidate'\n\t/tmp/tmpbt3awpuk.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for word in s:gmatch('%S+') do
            table.insert(t, word:gsub('.', function(c)
                return string.char(c:byte() + 1)
            end))
        end
        return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68wr4sk4.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmp68wr4sk4.lua:16:
    in local 'candidate'\n\t/tmp/tmp68wr4sk4.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbklty6fa.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbklty6fa.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local t = {}
      for w in s:gmatch('%S+') do
        table.insert(t, w:gsub('.', function(c) return string.char(c:byte() + 1) end))
      end
      return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzfigfvo.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpkzfigfvo.lua:16:
    in local 'candidate'\n\t/tmp/tmpkzfigfvo.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local result = {}
        for word in s:gmatch('%S+') do
            table.insert(result, word:gsub('.', function(c)
                return string.char(string.byte(c) + 1)
            end))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkolq9ugx.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpkolq9ugx.lua:16:
    in local 'candidate'\n\t/tmp/tmpkolq9ugx.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3ff0yns.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpx3ff0yns.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for i = 1, #s do
            local c = s:sub(i, i)
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i = 1, #words do
            local word = words[i]
            local chars = {}
            for j = 1, #word do
                local c = word:sub(j, j)
                table.insert(chars, c)
            end
            table.sort(chars)
            for j = 1, #chars do
                local c = chars[j]
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte2_mmnp.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpte2_mmnp.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbj3hf59.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpfbj3hf59.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%w+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76revevf.lua:36:
    expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor\"\nstack traceback:\n\t/tmp/tmp76revevf.lua:36:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a4wngl9.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_a4wngl9.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Implement this function.
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fn4l5co.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6fn4l5co.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%S+') do
            local t2 = {}
            for c in w:gmatch('.') do
                table.insert(t2, c)
            end
            table.sort(t2)
            table.insert(t, table.concat(t2))
        end
        return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for _, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for _, c in ipairs(chars) do
          result = result .. c
        end
        result = result .. ' '
      end
      return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        local result = {}
        for i, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            local new_word = table.concat(chars)
            table.insert(result, new_word)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local start = 1
        for i = 1, #s do
            if s:sub(i, i) == ' ' then
                table.insert(words, s:sub(start, i - 1))
                start = i + 1
            end
        end
        table.insert(words, s:sub(start, #s))
        local result = ''
        for i = 1, #words do
            local word = words[i]
            local chars = {}
            for j = 1, #word do
                table.insert(chars, word:sub(j, j))
            end
            table.sort(chars)
            for j = 1, #chars do
                result = result .. chars[j]
            end
            if i ~= #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for j, c in ipairs(chars) do
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71q62kj_.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp71q62kj_.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3s1fhzo.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpp3s1fhzo.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%S+') do
            table.insert(t, w:gsub('.', function(c) return c .. '\0' end))
        end
        return table.concat(t):gsub('%z+', function(w)
            return w:gsub('.', function(c) return c .. '\0' end)
        end):gsub('%z', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzoxdsgp6.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpzoxdsgp6.lua:16:
    in local 'candidate'\n\t/tmp/tmpzoxdsgp6.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for j, c in ipairs(chars) do
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for w in s:gmatch('%S+') do
        table.insert(words, w)
      end
      local result = {}
      for _, w in ipairs(words) do
        local chars = {}
        for c in w:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        words[i] = table.concat(chars)
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for j, c in ipairs(chars) do
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for j, c in ipairs(chars) do
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%w+') do
        table.insert(words, word)
      end
      local t = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        t[i] = table.concat(chars)
      end
      local i = 1
      return s:gsub('%w+', function()
        local word = t[i]
        i = i + 1
        return word
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7ehd9wu.lua:42:
    expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor!!!\"\nstack traceback:\n\t/tmp/tmpp7ehd9wu.lua:42:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            result = result .. table.concat(chars) .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local new_words = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            local new_word = table.concat(chars)
            table.insert(new_words, new_word)
        end
        return table.concat(new_words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueubkbaz.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpueubkbaz.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for j, c in ipairs(chars) do
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for i = 1, #s do
            local c = s:sub(i, i)
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i = 1, #words do
            local word = words[i]
            local chars = {}
            for j = 1, #word do
                table.insert(chars, word:sub(j, j))
            end
            table.sort(chars)
            for j = 1, #chars do
                result = result .. chars[j]
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        words[i] = table.concat(chars)
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%S+') do
            table.insert(t, w:gsub('.', function(c) return c .. '\0' end))
        end
        return table.concat(t):gsub('\0', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwffov6j5.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwffov6j5.lua:16:
    in local 'candidate'\n\t/tmp/tmpwffov6j5.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42y4wrut.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp42y4wrut.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyux0i274.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpyux0i274.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%S+') do
            table.insert(t, w:gsub('.', function(c) return '\0' .. c end))
        end
        return table.concat(t, ' '):gsub('\0.', function(c)
            return c:gsub('.', function(c) return c .. '\0' end):gsub('\0+', '')
        end):gsub('\0', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpmjtpm3.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpvpmjtpm3.lua:16:
    in local 'candidate'\n\t/tmp/tmpvpmjtpm3.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        result[i] = table.concat(chars)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            table.insert(result, word:gsub('.', function(c)
                return string.char(c:byte() + 1)
            end))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmv_mumj.lua:20:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdmv_mumj.lua:20:
    in local 'candidate'\n\t/tmp/tmpdmv_mumj.lua:30: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc70883o.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxc70883o.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Implement me
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98wj2upo.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp98wj2upo.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for word in s:gmatch('%S+') do
            local new_word = {}
            for char in word:gmatch('.') do
                table.insert(new_word, char)
            end
            table.sort(new_word)
            table.insert(t, table.concat(new_word))
        end
        return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for _, c in ipairs(chars) do
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5vqr906.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpf5vqr906.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Implement this function.
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdliw_w5.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsdliw_w5.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yaskyq2.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0yaskyq2.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud6o0k94.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpud6o0k94.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for w in s:gmatch('%S+') do
        table.insert(words, w)
      end
      local result = {}
      for i, w in ipairs(words) do
        local chars = {}
        for c in w:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        local new_word = table.concat(chars)
        table.insert(result, new_word)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf5vsgb2.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcf5vsgb2.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        result[i] = table.concat(chars)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for w in s:gmatch('%S+') do
        table.insert(words, w)
      end
      local result = {}
      for _, w in ipairs(words) do
        local letters = {}
        for l in w:gmatch('%a') do
          table.insert(letters, l)
        end
        table.sort(letters)
        table.insert(result, table.concat(letters))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjotcn13.lua:37:
    expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor\"\nstack traceback:\n\t/tmp/tmpcjotcn13.lua:37:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local new_words = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(new_words, table.concat(chars))
      end
      return table.concat(new_words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i = 1, #words do
        local word = words[i]
        local chars = {}
        for j = 1, #word do
          local c = word:sub(j, j)
          table.insert(chars, c)
        end
        table.sort(chars)
        for j = 1, #chars do
          local c = chars[j]
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp345ufdcd.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp345ufdcd.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for w in s:gmatch('%S+') do
        table.insert(words, w)
      end
      for i, w in ipairs(words) do
        local chars = {}
        for c in w:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        words[i] = table.concat(chars)
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        for i, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Write your code here
        return s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpxnwtio.lua:22:
    expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpwpxnwtio.lua:22:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i = 1, #words do
        local word = words[i]
        local chars = {}
        for j = 1, #word do
          table.insert(chars, word:sub(j, j))
        end
        table.sort(chars)
        for j = 1, #chars do
          result = result .. chars[j]
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for i = 1, #s do
        local c = s:sub(i, i)
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      for i = 1, #words do
        words[i] = table.concat(table.sort(words[i]:split('')))
      end
      return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_e640xl.lua:27:
    attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0_e640xl.lua:27:
    in local 'candidate'\n\t/tmp/tmp0_e640xl.lua:35: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        local result = {}
        for _, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        local result = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzaiqa5x.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxzaiqa5x.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        local result = {}
        for _, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        local res = ''
        for word in s:gmatch('%S+') do
            local sorted = word:gsub('.', function(c)
                table.insert(t, c)
                return ''
            end)
            table.sort(t)
            for i = 1, #t do
                sorted = sorted .. t[i]
            end
            t = {}
            res = res .. sorted .. ' '
        end
        return res:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local result = ''
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        local new_word = table.concat(chars)
        result = result .. new_word
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for w in s:gmatch('%S+') do
        table.insert(words, w)
      end
      local new_words = {}
      for _, w in ipairs(words) do
        local chars = {}
        for c in w:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        table.insert(new_words, table.concat(chars))
      end
      return table.concat(new_words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Implement me
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu3pcaby.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpeu3pcaby.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        local new_word = table.concat(chars)
        table.insert(result, new_word)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yny2bhy.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp5yny2bhy.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for word in s:gmatch('%S+') do
            local w = {}
            for c in word:gmatch('.') do
                table.insert(w, c)
            end
            table.sort(w)
            table.insert(t, table.concat(w))
        end
        return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for i = 1, #s do
            local c = s:sub(i, i)
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i = 1, #words do
            local word = words[i]
            local chars = {}
            for j = 1, #word do
                table.insert(chars, word:sub(j, j))
            end
            table.sort(chars)
            result = result .. table.concat(chars)
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('%S') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv8q0nom.lua:43:
    expected: \"Hello !!!Wdlor\"\nactual: \"!!!HWdellloor\"\nstack traceback:\n\t/tmp/tmppv8q0nom.lua:43:
    in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Implement me!
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5387jxeq.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp5387jxeq.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for i = 1, #s do
            if s:sub(i, i) == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. s:sub(i, i)
            end
        end
        table.insert(words, word)
        local result = ''
        for i = 1, #words do
            local chars = {}
            for j = 1, #words[i] do
                table.insert(chars, words[i]:sub(j, j))
            end
            table.sort(chars)
            for j = 1, #chars do
                result = result .. chars[j]
            end
            if i ~= #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            words[i] = table.concat(chars)
        end
        return table.concat(words, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for word in s:gmatch('%S+') do
            table.insert(t, word:gsub('.', function(c)
                return string.char(string.byte(c) + 1)
            end))
        end
        return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptwp77v1l.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmptwp77v1l.lua:16:
    in local 'candidate'\n\t/tmp/tmptwp77v1l.lua:26: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for _, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for _, c in ipairs(chars) do
          result = result .. c
        end
        result = result .. ' '
      end
      return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local chars = {}
        local result = ''
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        for i, word in ipairs(words) do
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            for j, char in ipairs(chars) do
                result = result .. char
            end
            chars = {}
            if i ~= #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw11_kcx_.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpw11_kcx_.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for i, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        result[i] = table.concat(chars)
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for j, c in ipairs(chars) do
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local t = {}
      for w in s:gmatch('%S+') do
        local c = {}
        for i in w:gmatch('.') do
          table.insert(c, i)
        end
        table.sort(c)
        table.insert(t, table.concat(c))
      end
      return table.concat(t, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local t = {}
      for w in s:gmatch("%S+") do
        table.insert(t, w:gsub(".", function(c) return string.char(c:byte()) end))
      end
      return table.concat(t, " ")
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9z3_grfy.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmp9z3_grfy.lua:16:
    in local 'candidate'\n\t/tmp/tmp9z3_grfy.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local new_words = {}
      for _, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        local new_word = ''
        for _, c in ipairs(chars) do
          new_word = new_word .. c
        end
        table.insert(new_words, new_word)
      end
      local new_s = ''
      for i, word in ipairs(new_words) do
        new_s = new_s .. word
        if i < #new_words then
          new_s = new_s .. ' '
        end
      end
      return new_s
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for w in s:gmatch('%S+') do
            table.insert(words, w)
        end
        local result = {}
        for _, w in ipairs(words) do
            local chars = {}
            for c in w:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnda4axoe.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnda4axoe.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: Your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_z04q_0.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpn_z04q_0.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6cim2ri5.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6cim2ri5.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      local word = ''
      for c in s:gmatch('.') do
        if c == ' ' then
          table.insert(words, word)
          word = ''
        else
          word = word .. c
        end
      end
      table.insert(words, word)
      local result = ''
      for i, word in ipairs(words) do
        local chars = {}
        for c in word:gmatch('.') do
          table.insert(chars, c)
        end
        table.sort(chars)
        for j, c in ipairs(chars) do
          result = result .. c
        end
        if i < #words then
          result = result .. ' '
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            result = result .. table.concat(chars)
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumrfobod.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpumrfobod.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for i, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for j, c in ipairs(chars) do
                result = result .. c
            end
            if i < #words then
                result = result .. ' '
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      local words = {}
      for word in s:gmatch('%S+') do
        table.insert(words, word)
      end
      local result = {}
      for _, word in ipairs(words) do
        local chars = {}
        for char in word:gmatch('.') do
          table.insert(chars, char)
        end
        table.sort(chars)
        table.insert(result, table.concat(chars))
      end
      return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        for w in s:gmatch('%S+') do
            table.insert(t, w:gsub('.', function(c) return c .. '\0' end))
        end
        return table.concat(t, ' '):gsub('\0', '')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoa6g5uw_.lua:16:
    bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\t/tmp/tmpoa6g5uw_.lua:16:
    in local 'candidate'\n\t/tmp/tmpoa6g5uw_.lua:24: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr92o7zw.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxr92o7zw.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Implement this function.
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_r6l8kq.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9_r6l8kq.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkap1obhb.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkap1obhb.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
      -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8qu0li5.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpo8qu0li5.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for _, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            table.insert(result, table.concat(chars))
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyn8bybt.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmyn8bybt.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        -- TODO: Implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yomkq0v.lua:20:
    expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6yomkq0v.lua:20: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        for word in s:gmatch('%S+') do
            table.insert(words, word)
        end
        local result = {}
        for i, word in ipairs(words) do
            local chars = {}
            for char in word:gmatch('.') do
                table.insert(chars, char)
            end
            table.sort(chars)
            result[i] = table.concat(chars)
        end
        return table.concat(result, ' ')
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local t = {}
        local res = ''
        for w in s:gmatch('%S+') do
            table.insert(t, w)
        end
        for i, v in ipairs(t) do
            local tmp = {}
            for c in v:gmatch('.') do
                table.insert(tmp, c)
            end
            table.sort(tmp)
            res = res .. table.concat(tmp)
            if i ~= #t then
                res = res .. ' '
            end
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for i = 1, #s do
            local c = s:sub(i, i)
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for i = 1, #word do
                local c = word:sub(i, i)
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, #result - 1)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that takes a string and returns an ordered version of it.
    -- Ordered version of string, is a string where all words (separated by space)
    -- are replaced by a new word where all the characters arranged in
    -- ascending order based on ascii value.
    -- Note: You should keep the order of words and blank spaces in the sentence.
    -- For example:
    -- >>> anti_shuffle('Hi')
    -- 'Hi'
    -- >>> anti_shuffle('hello')
    -- 'ehllo'
    -- >>> anti_shuffle('Hello World!!!')
    -- 'Hello !!!Wdlor'
    local function anti_shuffle(s)
        local words = {}
        local word = ''
        for c in s:gmatch('.') do
            if c == ' ' then
                table.insert(words, word)
                word = ''
            else
                word = word .. c
            end
        end
        table.insert(words, word)
        local result = ''
        for _, word in ipairs(words) do
            local chars = {}
            for c in word:gmatch('.') do
                table.insert(chars, c)
            end
            table.sort(chars)
            for _, c in ipairs(chars) do
                result = result .. c
            end
            result = result .. ' '
        end
        return result:sub(1, -2)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = anti_shuffle
        lu.assertEquals(candidate('Hi'), 'Hi')
        lu.assertEquals(candidate('hello'), 'ehllo')
        lu.assertEquals(candidate('number'), 'bemnru')
        lu.assertEquals(candidate('abcd'), 'abcd')
        lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hi. My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
