---
name: HumanEval_61_correct_bracketing
language: lua
results:
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          stack[#stack + 1] = c
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79hebyte.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp79hebyte.lua:12:
    in local 'candidate'\n\t/tmp/tmp79hebyte.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '(' then
                table.insert(stack, b)
            elseif b == ')' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          count = count + 1
        elseif c == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                count = count + 1
            elseif c == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                count = count + 1
            elseif c == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuutxftnl.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpuutxftnl.lua:12:
    in local 'candidate'\n\t/tmp/tmpuutxftnl.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                count = count + 1
            elseif c == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local bracket = brackets:sub(i, i)
        if bracket == '(' then
          table.insert(stack, '(')
        elseif bracket == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local bracket = brackets:sub(i, i)
        if bracket == '(' then
          table.insert(stack, bracket)
        elseif bracket == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                count = count + 1
            elseif c == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '(' then
                table.insert(stack, b)
            elseif b == ')' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zro54zf.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp7zro54zf.lua:12:
    in local 'candidate'\n\t/tmp/tmp7zro54zf.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                count = count + 1
            elseif c == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '(' then
                table.insert(stack, b)
            elseif b == ')' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          stack[#stack + 1] = c
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          stack[#stack + 1] = c
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening
    bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n--
    false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n--
    true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\tlocal
    count = 0\n\tfor i = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i, i)\n\t\tif
    bracket == '(' then\n\t\t\tcount = count + 1\n\t\telseif bracket == ')' then\n\t\t\tcount
    = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn
    count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),
    true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),
    true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),
    false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),
    false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),
    false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local open = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                open = open + 1
            elseif brackets:sub(i, i) == ')' then
                open = open - 1
            end
            if open < 0 then
                return false
            end
        end
        return open == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          count = count + 1
        elseif c == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '(' then
                table.insert(stack, bracket)
            elseif bracket == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8m1f5k0z.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp8m1f5k0z.lua:12:
    in local 'candidate'\n\t/tmp/tmp8m1f5k0z.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnup_o3bk.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpnup_o3bk.lua:12:
    in local 'candidate'\n\t/tmp/tmpnup_o3bk.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, '(')
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = Stack()
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          stack:push(c)
        elseif c == ')' then
          if stack:is_empty() then
            return false
          else
            stack:pop()
          end
        end
      end
      return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1llzx8va.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp1llzx8va.lua:12:
    in local 'candidate'\n\t/tmp/tmp1llzx8va.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for c in brackets:gmatch('.') do
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local b = brackets:sub(i, i)
            if b == '(' then
                table.insert(stack, b)
            elseif b == ')' then
                if #stack == 0 then
                    return false
                else
                    table.remove(stack)
                end
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack > 0 then
            table.remove(stack)
          else
            return false
          end
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzv4poeq.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmprzv4poeq.lua:12:
    in local 'candidate'\n\t/tmp/tmprzv4poeq.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local char = brackets:sub(i, i)
        if char == '(' then
          table.insert(stack, char)
        elseif char == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening
    bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n--
    false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n--
    true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\tlocal
    count = 0\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\t\tif
    c == '(' then\n\t\t\tcount = count + 1\n\t\telseif c == ')' then\n\t\t\tcount
    = count - 1\n\t\t\tif count < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn
    count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate
    = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),
    true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),
    true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),
    false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),
    false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),
    false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),
    false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '(' then
                table.insert(stack, bracket)
            elseif bracket == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                count = count + 1
            elseif c == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack[#stack + 1] = c
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                stack[#stack] = nil
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          count = count + 1
        elseif c == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local bracket = brackets:sub(i, i)
            if bracket == '(' then
                table.insert(stack, bracket)
            elseif bracket == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppvu_zvig.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmppvu_zvig.lua:12:
    in local 'candidate'\n\t/tmp/tmppvu_zvig.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = Stack()
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          stack:push(c)
        elseif c == ')' then
          if stack:is_empty() then
            return false
          else
            stack:pop()
          end
        end
      end
      return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ke3d_nm.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp9ke3d_nm.lua:12:
    in local 'candidate'\n\t/tmp/tmp9ke3d_nm.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          count = count + 1
        elseif c == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = Stack()
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                stack:push(c)
            elseif c == ')' then
                if stack:is_empty() then
                    return false
                else
                    stack:pop()
                end
            end
        end
        return stack:is_empty()
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l0rjcyg.lua:12:
    attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp7l0rjcyg.lua:12:
    in local 'candidate'\n\t/tmp/tmp7l0rjcyg.lua:31: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          stack[#stack + 1] = c
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          stack[#stack] = nil
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local b = brackets:sub(i, i)
        if b == '(' then
          table.insert(stack, b)
        elseif b == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local count = 0
        for i = 1, #brackets do
            if brackets:sub(i, i) == '(' then
                count = count + 1
            elseif brackets:sub(i, i) == ')' then
                count = count - 1
            end
            if count < 0 then
                return false
            end
        end
        return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local stack = {}
      for i = 1, #brackets do
        local c = brackets:sub(i, i)
        if c == '(' then
          table.insert(stack, c)
        elseif c == ')' then
          if #stack == 0 then
            return false
          end
          table.remove(stack)
        end
      end
      return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
        local stack = {}
        for i = 1, #brackets do
            local c = brackets:sub(i, i)
            if c == '(' then
                table.insert(stack, c)
            elseif c == ')' then
                if #stack == 0 then
                    return false
                end
                table.remove(stack)
            end
        end
        return #stack == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- brackets is a string of "(" and ")".
    -- return true if every opening bracket has a corresponding closing bracket.
    -- >>> correct_bracketing('(')
    -- false
    -- >>> correct_bracketing('()')
    -- true
    -- >>> correct_bracketing('(()())')
    -- true
    -- >>> correct_bracketing(')(()')
    -- false
    local function correct_bracketing(brackets)
      local count = 0
      for i = 1, #brackets do
        if brackets:sub(i, i) == '(' then
          count = count + 1
        elseif brackets:sub(i, i) == ')' then
          count = count - 1
        end
        if count < 0 then
          return false
        end
      end
      return count == 0
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = correct_bracketing
        lu.assertEquals(candidate('()'), true)
        lu.assertEquals(candidate('(()())'), true)
        lu.assertEquals(candidate('()()(()())()'), true)
        lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)
        lu.assertEquals(candidate('((()())))'), false)
        lu.assertEquals(candidate(')(()'), false)
        lu.assertEquals(candidate('('), false)
        lu.assertEquals(candidate('(((('), false)
        lu.assertEquals(candidate(')'), false)
        lu.assertEquals(candidate('(()'), false)
        lu.assertEquals(candidate('()()(()())())(()'), false)
        lu.assertEquals(candidate('()()(()())()))()'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
