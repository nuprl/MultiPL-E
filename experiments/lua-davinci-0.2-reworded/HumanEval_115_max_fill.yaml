name: HumanEval_115_max_fill
language: lua
prompt: "-- You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n-- and each 1 in a row represents a single unit of water.\n-- Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n-- and\
  \ all buckets have the same capacity.\n-- Your task is to use the buckets to empty\
  \ the wells.\n-- Output the number of times you need to lower the buckets.\n-- Example\
  \ 1:\n-- >>> max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1)\n-- 6\n-- Example\
  \ 2:\n-- >>> max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}},\
  \ 2)\n-- 5\n-- Example 3:\n-- >>> max_fill({{0, 0, 0}, {0, 0, 0}}, 5)\n-- 0\n--\
  \ Constraints:\n-- * all wells have the same length\n-- * 1 <= grid.length <= 10^2\n\
  -- * 1 <= grid[:,1].length <= 10^2\n-- * grid[i][j] -> 0 | 1\n-- * 1 <= capacity\
  \ <= 10\nlocal function max_fill(grid, capacity)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_fill\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1), 6)\n\
  \    lu.assertEquals(candidate({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1,\
  \ 1, 1}}, 2), 5)\n    lu.assertEquals(candidate({{0, 0, 0}, {0, 0, 0}}, 5), 0)\n\
  \    lu.assertEquals(candidate({{1, 1, 1, 1}, {1, 1, 1, 1}}, 2), 4)\n    lu.assertEquals(candidate({{1,\
  \ 1, 1, 1}, {1, 1, 1, 1}}, 9), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function fill(row, col)\n        local function fill_row(row,\
    \ col)\n            local function fill_col(row, col)\n                if col\
    \ > #grid[1] then\n                    return 0\n                end\n       \
    \         if grid[row][col] == 1 then\n                    grid[row][col] = 0\n\
    \                    return 1 + fill_col(row, col + 1)\n                else\n\
    \                    return fill_col(row, col + 1)\n                end\n    \
    \        end\n            return fill_col(row, col)\n        end\n        if row\
    \ > #grid then\n            return 0\n        end\n        local filled = fill_row(row,\
    \ col)\n        if filled == 0 then\n            return fill(row + 1, col)\n \
    \       else\n            return filled + fill(row + 1, col)\n        end\n  \
    \  end\n    local function fill_all(row, col)\n        local filled = fill(row,\
    \ col)\n        if filled == 0 then\n            return 0\n        else\n    \
    \        return 1 + fill_all(row, col)\n        end\n    end\n    return fill_all(1,\
    \ 1)\nend", "  local function fill(grid, capacity)\n    local function fill_row(row,\
    \ capacity)\n      local filled = 0\n      for i = 1, #row do\n        if row[i]\
    \ == 1 then\n          filled = filled + 1\n          row[i] = 0\n        end\n\
    \      end\n      return filled\n    end\n    local filled = 0\n    for i = 1,\
    \ #grid do\n      filled = filled + fill_row(grid[i], capacity)\n    end\n   \
    \ return filled\n  end\n  local function fill_all(grid, capacity)\n    local filled\
    \ = 0\n    while fill(grid, capacity) > 0 do\n      filled = filled + 1\n    end\n\
    \    return filled\n  end\n  return fill_all(grid, capacity)\nend", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n\
    \        local function empty_row(row)\n            local function empty_cell(cell)\n\
    \                return 0\n            end\n            return map(empty_cell,\
    \ row)\n        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ fill_and_empty(grid, capacity)\n        return empty(fill(grid, capacity))\n\
    \    end\n    local function fill_and_empty_n_times(grid, capacity, n)\n     \
    \   if n == 0 then\n            return grid\n        else\n            return\
    \ fill_and_empty_n_times(fill_and_empty(grid, capacity), capacity, n - 1)\n  \
    \      end\n    end\n    local function fill_and_empty_until_empty(grid, capacity)\n\
    \        local function fill_and_empty_until_empty_helper(grid, capacity, n)\n\
    \            if sum_grid(grid) == 0 then\n                return n\n         \
    \   else\n                return fill_and_empty_until_empty_helper(fill_and_empty(grid,\
    \ capacity), capacity, n + 1)\n            end\n        end\n        return fill_and_empty_until_empty_helper(grid,\
    \ capacity, 0)\n    end\n    return fill_and_empty_until_empty(grid, capacity)\n\
    end", "    local function get_max_fill(grid, capacity)\n        local max_fill\
    \ = 0\n        for _, row in ipairs(grid) do\n            local fill = 0\n   \
    \         for _, cell in ipairs(row) do\n                if cell == 1 then\n \
    \                   fill = fill + 1\n                else\n                  \
    \  if fill > max_fill then\n                        max_fill = fill\n        \
    \            end\n                    fill = 0\n                end\n        \
    \    end\n            if fill > max_fill then\n                max_fill = fill\n\
    \            end\n        end\n        return max_fill\n    end\n    local max_fill\
    \ = get_max_fill(grid, capacity)\n    return math.ceil(max_fill / capacity)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 1 then\n                    return capacity - 1\n          \
    \      else\n                    return capacity\n                end\n      \
    \      end\n            local function fill_row_helper(row, capacity, index)\n\
    \                if index > #row then\n                    return capacity\n \
    \               else\n                    return fill_row_helper(row, fill_cell(row[index],\
    \ capacity), index + 1)\n                end\n            end\n            return\
    \ fill_row_helper(row, capacity, 1)\n        end\n        local function fill_grid_helper(grid,\
    \ capacity, index)\n            if index > #grid then\n                return\
    \ capacity\n            else\n                return fill_grid_helper(grid, fill_row(grid[index],\
    \ capacity), index + 1)\n            end\n        end\n        return fill_grid_helper(grid,\
    \ capacity, 1)\n    end\n    local function fill_helper(grid, capacity, count)\n\
    \        local new_capacity = fill(grid, capacity)\n        if new_capacity ==\
    \ capacity then\n            return count\n        else\n            return fill_helper(grid,\
    \ new_capacity, count + 1)\n        end\n    end\n    return fill_helper(grid,\
    \ capacity, 0)\nend", "    local function fill(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_col(col, capacity)\n\
    \                if capacity == 0 then\n                    return 0\n       \
    \         end\n                if col > #row then\n                    return\
    \ capacity\n                end\n                if row[col] == 1 then\n     \
    \               row[col] = 0\n                    return fill_col(col + 1, capacity\
    \ - 1)\n                end\n                return fill_col(col + 1, capacity)\n\
    \            end\n            return fill_col(1, capacity)\n        end\n    \
    \    local function fill_grid(grid, capacity)\n            if capacity == 0 then\n\
    \                return 0\n            end\n            if #grid == 0 then\n \
    \               return capacity\n            end\n            local row = table.remove(grid,\
    \ 1)\n            local capacity = fill_row(row, capacity)\n            return\
    \ 1 + fill_grid(grid, capacity)\n        end\n        return fill_grid(grid, capacity)\n\
    \    end\n    return fill(grid, capacity)\nend", "  local function fill(row, col)\n\
    \    if row < 1 or row > #grid or col < 1 or col > #grid[1] then\n      return\
    \ 0\n    end\n    if grid[row][col] == 0 then\n      return 0\n    end\n    grid[row][col]\
    \ = 0\n    return 1 + fill(row - 1, col) + fill(row + 1, col) + fill(row, col\
    \ - 1) + fill(row, col + 1)\n  end\n  local function fill_all()\n    local count\
    \ = 0\n    for row = 1, #grid do\n      for col = 1, #grid[1] do\n        count\
    \ = count + fill(row, col)\n      end\n    end\n    return count\n  end\n  local\
    \ count = 0\n  while fill_all() > 0 do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  local function fill_row(row, capacity)\n    local count = 0\n\
    \    for i = 1, #row do\n      if row[i] == 1 then\n        row[i] = 0\n     \
    \   capacity = capacity - 1\n        count = count + 1\n      end\n      if capacity\
    \ == 0 then\n        return count\n      end\n    end\n    return count\n  end\n\
    \  local count = 0\n  for i = 1, #grid do\n    count = count + fill_row(grid[i],\
    \ capacity)\n  end\n  return count\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function empty(grid,\
    \ capacity)\n        local function empty_row(row, capacity)\n            local\
    \ function empty_cell(cell, capacity)\n                if cell == 0 then\n   \
    \                 return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(empty_cell, row,\
    \ capacity)\n        end\n        return map(empty_row, grid, capacity)\n    end\n\
    \    local function sum(grid)\n        local function sum_row(row)\n         \
    \   local function sum_cell(cell)\n                return cell\n            end\n\
    \            return reduce(sum_cell, row, 0)\n        end\n        return reduce(sum_row,\
    \ grid, 0)\n    end\n    local function fill_and_empty(grid, capacity)\n     \
    \   return empty(fill(grid, capacity), capacity)\n    end\n    local function\
    \ fill_and_empty_n(grid, capacity, n)\n        if n == 0 then\n            return\
    \ grid\n        else\n            return fill_and_empty_n(fill_and_empty(grid,\
    \ capacity), capacity, n - 1)\n        end\n    end\n    local function fill_and_empty_until_empty(grid,\
    \ capacity)\n        local function is_empty(grid)\n            local function\
    \ is_empty_row(row)\n                local function is_empty_cell(cell)\n    \
    \                return cell == 0\n                end\n                return\
    \ reduce(is_empty_cell, row, true)\n            end\n            return reduce(is_empty_row,\
    \ grid, true)\n        end\n        local function fill_and_empty_until_empty_n(grid,\
    \ capacity, n)\n            if is_empty(grid) then\n                return n\n\
    \            else\n                return fill_and_empty_until_empty_n(fill_and_empty(grid,\
    \ capacity), capacity, n + 1)\n            end", "    local function fill(grid,\
    \ capacity)\n        local filled = 0\n        for i, row in ipairs(grid) do\n\
    \            for j, cell in ipairs(row) do\n                if cell == 1 then\n\
    \                    filled = filled + 1\n                    row[j] = 0\n   \
    \             end\n            end\n        end\n        return filled\n    end\n\
    \    local function drop(grid, capacity)\n        local dropped = 0\n        for\
    \ i, row in ipairs(grid) do\n            for j, cell in ipairs(row) do\n     \
    \           if cell == 0 then\n                    dropped = dropped + 1\n   \
    \                 row[j] = 1\n                end\n            end\n        end\n\
    \        return dropped\n    end\n    local function is_empty(grid)\n        for\
    \ i, row in ipairs(grid) do\n            for j, cell in ipairs(row) do\n     \
    \           if cell == 1 then\n                    return false\n            \
    \    end\n            end\n        end\n        return true\n    end\n    local\
    \ function is_full(grid)\n        for i, row in ipairs(grid) do\n            for\
    \ j, cell in ipairs(row) do\n                if cell == 0 then\n             \
    \       return false\n                end\n            end\n        end\n    \
    \    return true\n    end\n    local function is_done(grid)\n        return is_empty(grid)\
    \ or is_full(grid)\n    end\n    local function print_grid(grid)\n        for\
    \ i, row in ipairs(grid) do\n            for j, cell in ipairs(row) do\n     \
    \           io.write(cell)\n            end\n            io.write('\\n')\n   \
    \     end\n    end\n    local function copy_grid(grid)\n        local copy = {}\n\
    \        for i, row in ipairs(grid) do\n            copy[i] = {}\n           \
    \ for j, cell in ipairs(row) do\n                copy[i][j] = cell\n         \
    \   end\n        end\n        return copy\n    end\n    local function fill_and_drop(grid,\
    \ capacity)\n        local filled = fill(grid, capacity)\n        local dropped\
    \ = drop(grid, capacity)\n        return filled, dropped\n    end\n    local function\
    \ fill_and_drop_until_done(grid, capacity", "    local function fill(row, col)\n\
    \        local count = 0\n        for i = 1, row do\n            for j = 1, col\
    \ do\n                if grid[i][j] == 1 then\n                    grid[i][j]\
    \ = 0\n                    count = count + 1\n                end\n          \
    \  end\n        end\n        return count\n    end\n    local row = #grid\n  \
    \  local col = #grid[1]\n    local count = 0\n    for i = 1, row do\n        local\
    \ filled = fill(i, col)\n        count = count + math.ceil(filled / capacity)\n\
    \    end\n    return count\nend", "    local function max_fill_row(row, capacity)\n\
    \        local count = 0\n        local i = 1\n        while i <= #row do\n  \
    \          if row[i] == 1 then\n                count = count + 1\n          \
    \      i = i + capacity\n            else\n                i = i + 1\n       \
    \     end\n        end\n        return count\n    end\n    local count = 0\n \
    \   for _, row in ipairs(grid) do\n        count = count + max_fill_row(row, capacity)\n\
    \    end\n    return count\nend", "    local function max_fill_row(row, capacity)\n\
    \        local count = 0\n        local i = 1\n        while i <= #row do\n  \
    \          if row[i] == 1 then\n                count = count + 1\n          \
    \      i = i + capacity\n            else\n                i = i + 1\n       \
    \     end\n        end\n        return count\n    end\n    local count = 0\n \
    \   for _, row in ipairs(grid) do\n        count = count + max_fill_row(row, capacity)\n\
    \    end\n    return count\nend", "  local function fill(row, col)\n    if row\
    \ < 1 or row > #grid or col < 1 or col > #grid[1] then\n      return 0\n    end\n\
    \    if grid[row][col] == 0 then\n      return 0\n    end\n    grid[row][col]\
    \ = 0\n    return 1 + fill(row - 1, col) + fill(row + 1, col) + fill(row, col\
    \ - 1) + fill(row, col + 1)\n  end\n  local function fill_all()\n    local count\
    \ = 0\n    for row = 1, #grid do\n      for col = 1, #grid[1] do\n        if grid[row][col]\
    \ == 1 then\n          count = count + fill(row, col)\n        end\n      end\n\
    \    end\n    return count\n  end\n  local count = 0\n  while fill_all() > 0 do\n\
    \    count = count + 1\n  end\n  return count\nend", "    local function fill_bucket(bucket,\
    \ wells)\n        local function fill_well(well)\n            local function fill_unit(unit)\n\
    \                if unit == 1 then\n                    unit = 0\n           \
    \         bucket = bucket - 1\n                end\n                return unit\n\
    \            end\n            return table.map(fill_unit, well)\n        end\n\
    \        return table.map(fill_well, wells)\n    end\n    local function empty_bucket(bucket,\
    \ wells)\n        local function empty_well(well)\n            local function\
    \ empty_unit(unit)\n                if unit == 0 and bucket > 0 then\n       \
    \             unit = 1\n                    bucket = bucket - 1\n            \
    \    end\n                return unit\n            end\n            return table.map(empty_unit,\
    \ well)\n        end\n        return table.map(empty_well, wells)\n    end\n \
    \   local function count_units(grid)\n        local function count_well(well)\n\
    \            local function count_unit(unit)\n                return unit == 1\
    \ and 1 or 0\n            end\n            return table.sum(table.map(count_unit,\
    \ well))\n        end\n        return table.sum(table.map(count_well, grid))\n\
    \    end\n    local function is_empty(grid)\n        return count_units(grid)\
    \ == 0\n    end\n    local function is_full(grid)\n        return count_units(grid)\
    \ == #grid * #grid[1]\n    end\n    local function fill_wells(grid, capacity)\n\
    \        local function fill_well(well)\n            local function fill_unit(unit)\n\
    \                if unit == 1 and capacity > 0 then\n                    unit\
    \ = 0\n                    capacity = capacity - 1\n                end\n    \
    \            return unit\n            end\n            return table.map(fill_unit,\
    \ well)\n        end\n        return table.map(fill_well, grid)\n    end\n   \
    \ local function empty_wells(grid, capacity)\n        local function empty_well(well)\n\
    \            local function empty_unit(unit)\n                if unit == 0 and\
    \ capacity > 0 then\n                    unit = 1\n                    capacity\
    \ = capacity - 1\n                end\n                return unit\n         \
    \   end\n            return table.map(empty_unit, well)\n        end", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_well(well, capacity)\n                local function\
    \ fill_bucket(bucket, capacity)\n                    if capacity == 0 then\n \
    \                       return 0\n                    elseif bucket == 0 then\n\
    \                        return 0\n                    else\n                \
    \        return 1\n                    end\n                end\n            \
    \    return fill_bucket(well, capacity)\n            end\n            local function\
    \ fill_wells(wells, capacity)\n                if capacity == 0 then\n       \
    \             return 0\n                elseif #wells == 0 then\n            \
    \        return 0\n                else\n                    return fill_well(wells[1],\
    \ capacity) + fill_wells(wells, capacity - fill_well(wells[1], capacity))\n  \
    \              end\n            end\n            return fill_wells(row, capacity)\n\
    \        end\n        local function fill_rows(rows, capacity)\n            if\
    \ capacity == 0 then\n                return 0\n            elseif #rows == 0\
    \ then\n                return 0\n            else\n                return fill_row(rows[1],\
    \ capacity) + fill_rows(rows, capacity - fill_row(rows[1], capacity))\n      \
    \      end\n        end\n        return fill_rows(grid, capacity)\n    end\n \
    \   return fill(grid, capacity)\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n    end\n    local function count_fill(grid)\n        local\
    \ function count_row(row)\n            local function count_cell(cell)\n     \
    \           if cell == 0 then\n                    return 0\n                else\n\
    \                    return 1\n                end\n            end\n        \
    \    return reduce(row, function(acc, cell) return acc + count_cell(cell) end,\
    \ 0)\n        end\n        return reduce(grid, function(acc, row) return acc +\
    \ count_row(row) end, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           if cell == 0 then\n                    return 0\n                else\n\
    \                    return 1\n                end\n            end\n        \
    \    return map(row, function(cell) return empty_cell(cell) end)\n        end\n\
    \        return map(grid, function(row) return empty_row(row) end)\n    end\n\
    \    local function count_empty(grid)\n        local function count_row(row)\n\
    \            local function count_cell(cell)\n                if cell == 0 then\n\
    \                    return 0\n                else\n                    return\
    \ 1\n                end\n            end\n            return reduce(row, function(acc,\
    \ cell) return acc + count_cell(cell) end, 0)\n        end\n        return reduce(grid,\
    \ function(acc, row) return acc + count_row(row) end, 0)\n    end\n    local function\
    \ transpose(grid)\n        local function transpose_row(row, grid)\n         \
    \   local function transpose_cell(cell, row, grid)\n                return map(grid,\
    \ function(row) return row[cell] end)\n            end\n            return map(row,\
    \ function(cell) return transpose_cell(cell, row, grid) end", "    local function\
    \ fill(row, col)\n        if row < 1 or row > #grid or col < 1 or col > #grid[1]\
    \ then\n            return 0\n        end\n        if grid[row][col] == 0 then\n\
    \            return 0\n        end\n        grid[row][col] = 0\n        return\
    \ 1 + fill(row + 1, col) + fill(row - 1, col) + fill(row, col + 1) + fill(row,\
    \ col - 1)\n    end\n    local function fill_all()\n        local count = 0\n\
    \        for row = 1, #grid do\n            for col = 1, #grid[1] do\n       \
    \         count = count + fill(row, col)\n            end\n        end\n     \
    \   return count\n    end\n    local function fill_one()\n        for row = 1,\
    \ #grid do\n            for col = 1, #grid[1] do\n                if grid[row][col]\
    \ == 1 then\n                    grid[row][col] = 0\n                    return\n\
    \                end\n            end\n        end\n    end\n    local count =\
    \ 0\n    while fill_all() > 0 do\n        count = count + 1\n        for i = 1,\
    \ capacity do\n            fill_one()\n        end\n    end\n    return count\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_column(column, capacity)\n      \
    \          if column > #row then\n                    return 0\n             \
    \   end\n                if row[column] == 1 then\n                    row[column]\
    \ = 0\n                    return 1 + fill_column(column + 1, capacity - 1)\n\
    \                end\n                return fill_column(column + 1, capacity)\n\
    \            end\n            return fill_column(1, capacity)\n        end\n \
    \       if #grid == 0 then\n            return 0\n        end\n        return\
    \ fill_row(grid[1], capacity) + fill(grid, capacity)\n    end\n    return fill(grid,\
    \ capacity)\nend", "  local function fill(grid, capacity)\n    local function\
    \ fill_row(row, capacity)\n      local count = 0\n      for i = 1, #row do\n \
    \       if row[i] == 1 then\n          row[i] = 0\n          count = count + 1\n\
    \        end\n      end\n      return count\n    end\n    local count = 0\n  \
    \  for i = 1, #grid do\n      count = count + fill_row(grid[i], capacity)\n  \
    \  end\n    return count\n  end\n  local count = 0\n  while true do\n    local\
    \ filled = fill(grid, capacity)\n    if filled == 0 then\n      break\n    end\n\
    \    count = count + filled\n  end\n  return count\nend", "    local function\
    \ fill(row, col)\n        if row == #grid then\n            return grid[row][col]\n\
    \        end\n        local next_row = row + 1\n        local next_col = col\n\
    \        if grid[next_row][next_col] == 0 then\n            next_col = next_col\
    \ + 1\n        end\n        return grid[row][col] + fill(next_row, next_col)\n\
    \    end\n    local function max_fill_helper(row, col)\n        if row == #grid\
    \ then\n            return 0\n        end\n        local next_row = row + 1\n\
    \        local next_col = col\n        if grid[next_row][next_col] == 0 then\n\
    \            next_col = next_col + 1\n        end\n        local next_fill = max_fill_helper(next_row,\
    \ next_col)\n        local current_fill = fill(row, col)\n        if current_fill\
    \ > capacity then\n            return 1 + next_fill\n        else\n          \
    \  return next_fill\n        end\n    end\n    return max_fill_helper(1, 1)\n\
    end", "    local max_fill = 0\n    for _, row in ipairs(grid) do\n        local\
    \ fill = 0\n        for _, column in ipairs(row) do\n            if column ==\
    \ 1 then\n                fill = fill + 1\n            else\n                if\
    \ fill > 0 then\n                    max_fill = max_fill + 1\n               \
    \     fill = 0\n                end\n            end\n        end\n        if\
    \ fill > 0 then\n            max_fill = max_fill + 1\n        end\n    end\n \
    \   return max_fill * capacity\nend", "    local function max_fill_row(row, capacity)\n\
    \        local count = 0\n        local bucket = 0\n        for _, v in ipairs(row)\
    \ do\n            if v == 1 then\n                if bucket < capacity then\n\
    \                    bucket = capacity\n                    count = count + 1\n\
    \                else\n                    bucket = bucket - 1\n             \
    \   end\n            else\n                bucket = bucket - 1\n            end\n\
    \        end\n        return count\n    end\n    local count = 0\n    for _, row\
    \ in ipairs(grid) do\n        count = count + max_fill_row(row, capacity)\n  \
    \  end\n    return count\nend", "    local function fill(grid, capacity)\n   \
    \     local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function sum_rows(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return map(sum_row, grid)\n    end\n    local\
    \ function sum_grid(grid)\n        local function sum_row(row)\n            local\
    \ function sum_cell(cell)\n                return cell\n            end\n    \
    \        return reduce(sum_cell, row, 0)\n        end\n        return reduce(sum_row,\
    \ grid, 0)\n    end\n    local function fill_grid(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function fill_grid(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return", "  local function fill(grid, capacity)\n    local function\
    \ fill_row(row, capacity)\n      local function fill_cell(cell, capacity)\n  \
    \      if cell == 0 then\n          return 0\n        else\n          return capacity\n\
    \        end\n      end\n      return map(row, fill_cell, capacity)\n    end\n\
    \    return map(grid, fill_row, capacity)\n  end\n  local function sum_grid(grid)\n\
    \    local function sum_row(row)\n      return reduce(row, function(a, b) return\
    \ a + b end, 0)\n    end\n    return reduce(grid, function(a, b) return a + b\
    \ end, 0)\n  end\n  local function is_empty(grid)\n    local function is_empty_row(row)\n\
    \      return reduce(row, function(a, b) return a + b end, 0) == 0\n    end\n\
    \    return reduce(grid, function(a, b) return a and b end, true)\n  end\n  local\
    \ function fill_grid(grid, capacity)\n    local filled_grid = fill(grid, capacity)\n\
    \    local sum = sum_grid(filled_grid)\n    return filled_grid, sum\n  end\n \
    \ local function reduce_grid(grid)\n    local function reduce_row(row)\n     \
    \ local function reduce_cell(cell)\n        if cell > 0 then\n          return\
    \ cell - 1\n        else\n          return 0\n        end\n      end\n      return\
    \ map(row, reduce_cell)\n    end\n    return map(grid, reduce_row)\n  end\n  local\
    \ function reduce_grid_until_empty(grid)\n    local sum = 0\n    while not is_empty(grid)\
    \ do\n      grid = reduce_grid(grid)\n      sum = sum + 1\n    end\n    return\
    \ sum\n  end\n  local filled_grid, sum = fill_grid(grid, capacity)\n  return sum\
    \ + reduce_grid_until_empty(filled_grid)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(fill_cell, row,\
    \ capacity)\n        end\n        return map(fill_row, grid, capacity)\n    end\n\
    \    local function sum_grid(grid)\n        local function sum_row(row)\n    \
    \        local function sum_cell(cell)\n                return cell\n        \
    \    end\n            return reduce(sum_cell, row, 0)\n        end\n        return\
    \ reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           return 0\n            end\n            return map(empty_cell, row)\n\
    \        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ max_fill_rec(grid, capacity, count)\n        local filled = fill(grid, capacity)\n\
    \        local sum = sum_grid(filled)\n        if sum == 0 then\n            return\
    \ count\n        else\n            return max_fill_rec(empty(filled), capacity,\
    \ count + 1)\n        end\n    end\n    return max_fill_rec(grid, capacity, 0)\n\
    end", "  local function fill(grid, capacity)\n    local function fill_row(row,\
    \ capacity)\n      local function fill_cell(cell, capacity)\n        if cell ==\
    \ 0 then\n          return 0\n        else\n          return capacity\n      \
    \  end\n      end\n      return map(fill_cell, row, capacity)\n    end\n    return\
    \ map(fill_row, grid, capacity)\n  end\n  local function sum_grid(grid)\n    local\
    \ function sum_row(row)\n      local function sum_cell(cell)\n        return cell\n\
    \      end\n      return reduce(sum_cell, row, 0)\n    end\n    return reduce(sum_row,\
    \ grid, 0)\n  end\n  local function subtract_grid(grid, capacity)\n    local function\
    \ subtract_row(row, capacity)\n      local function subtract_cell(cell, capacity)\n\
    \        if cell == 0 then\n          return 0\n        else\n          return\
    \ cell - capacity\n        end\n      end\n      return map(subtract_cell, row,\
    \ capacity)\n    end\n    return map(subtract_row, grid, capacity)\n  end\n  local\
    \ function all_zeros(grid)\n    local function all_zeros_row(row)\n      local\
    \ function all_zeros_cell(cell)\n        return cell == 0\n      end\n      return\
    \ all(all_zeros_cell, row)\n    end\n    return all(all_zeros_row, grid)\n  end\n\
    \  local function max_fill_iter(grid, capacity, count)\n    if all_zeros(grid)\
    \ then\n      return count\n    else\n      return max_fill_iter(subtract_grid(grid,\
    \ capacity), capacity, count + sum_grid(fill(grid, capacity)))\n    end\n  end\n\
    \  return max_fill_iter(grid, capacity, 0)\nend", "    local function fill_well(well,\
    \ capacity)\n        local water = 0\n        for i = 1, #well do\n          \
    \  if well[i] == 1 then\n                water = water + 1\n            end\n\
    \        end\n        return math.ceil(water / capacity)\n    end\n    local function\
    \ fill_wells(grid, capacity)\n        local count = 0\n        for i = 1, #grid\
    \ do\n            count = count + fill_well(grid[i], capacity)\n        end\n\
    \        return count\n    end\n    return fill_wells(grid, capacity)\nend", " \
    \   local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(row, function(cell) return fill_cell(cell, capacity) end)\n\
    \        end\n        return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n    end\n    local function empty(grid, capacity)\n        local function\
    \ empty_row(row, capacity)\n            local function empty_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(row, function(cell) return empty_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid, function(row) return empty_row(row,\
    \ capacity) end)\n    end\n    local function count_water(grid)\n        local\
    \ function count_row(row)\n            local function count_cell(cell)\n     \
    \           if cell == 0 then\n                    return 0\n                else\n\
    \                    return 1\n                end\n            end\n        \
    \    return sum(map(row, function(cell) return count_cell(cell) end))\n      \
    \  end\n        return sum(map(grid, function(row) return count_row(row) end))\n\
    \    end\n    local function is_empty(grid)\n        local function is_row_empty(row)\n\
    \            local function is_cell_empty(cell)\n                if cell == 0\
    \ then\n                    return true\n                else\n              \
    \      return false\n                end\n            end\n            return\
    \ all(map(row, function(cell) return is_cell_empty(cell) end))\n        end\n\
    \        return all(map(grid, function(row) return is_row_empty(row) end))\n \
    \   end\n    local function fill_until_empty(grid, capacity)\n        local function\
    \ fill_until_empty_row(row, capacity)\n            local function fill_until_empty_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, function(cell", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 0\
    \ then\n                    return 0\n                else\n                 \
    \   return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function empty(grid, capacity)\n        local\
    \ function empty_row(row, capacity)\n            local function empty_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return cell - capacity\n          \
    \      end\n            end\n            return map(empty_cell, row, capacity)\n\
    \        end\n        return map(empty_row, grid, capacity)\n    end\n    local\
    \ function sum(grid)\n        local function sum_row(row)\n            local function\
    \ sum_cell(cell)\n                return cell\n            end\n            return\
    \ reduce(sum_cell, row, 0)\n        end\n        return reduce(sum_row, grid,\
    \ 0)\n    end\n    local function is_empty(grid)\n        local function is_empty_row(row)\n\
    \            local function is_empty_cell(cell)\n                return cell ==\
    \ 0\n            end\n            return all(is_empty_cell, row)\n        end\n\
    \        return all(is_empty_row, grid)\n    end\n    local function max_fill_iter(grid,\
    \ capacity, count)\n        if is_empty(grid) then\n            return count\n\
    \        else\n            return max_fill_iter(empty(fill(grid, capacity), capacity),\
    \ capacity, count + 1)\n        end\n    end\n    return max_fill_iter(grid, capacity,\
    \ 0)\nend", "    local function fill(grid, capacity)\n        local count = 0\n\
    \        for i = 1, #grid do\n            local row = grid[i]\n            for\
    \ j = 1, #row do\n                if row[j] == 1 then\n                    count\
    \ = count + 1\n                    row[j] = 0\n                    capacity =\
    \ capacity - 1\n                    if capacity == 0 then\n                  \
    \      return count\n                    end\n                end\n          \
    \  end\n        end\n        return count\n    end\n    local function fill_row(grid,\
    \ capacity)\n        local count = 0\n        for i = 1, #grid do\n          \
    \  local row = grid[i]\n            for j = 1, #row do\n                if row[j]\
    \ == 1 then\n                    count = count + 1\n                    row[j]\
    \ = 0\n                    capacity = capacity - 1\n                    if capacity\
    \ == 0 then\n                        return count\n                    end\n \
    \               end\n            end\n        end\n        return count\n    end\n\
    \    local function fill_col(grid, capacity)\n        local count = 0\n      \
    \  for j = 1, #grid[1] do\n            for i = 1, #grid do\n                local\
    \ row = grid[i]\n                if row[j] == 1 then\n                    count\
    \ = count + 1\n                    row[j] = 0\n                    capacity =\
    \ capacity - 1\n                    if capacity == 0 then\n                  \
    \      return count\n                    end\n                end\n          \
    \  end\n        end\n        return count\n    end\n    local count = 0\n    while\
    \ true do\n        local c = fill(grid, capacity)\n        if c == 0 then\n  \
    \          break\n        end\n        count = count + c\n    end\n    while true\
    \ do\n        local c = fill_row(grid, capacity)\n        if c == 0 then\n   \
    \         break\n        end\n        count = count + c\n    end\n    while true\
    \ do\n        local c = fill_col(grid, capacity)\n        if c == 0 then\n   \
    \         break\n        end\n        count = count + c\n    end\n    return count\n\
    end", "    local function fill(row, col)\n        local function fill_row(row,\
    \ col)\n            local function fill_col(row, col)\n                if grid[row][col]\
    \ == 1 then\n                    grid[row][col] = 0\n                    return\
    \ 1\n                end\n                return 0\n            end\n        \
    \    local count = 0\n            for i = 1, #grid[row] do\n                count\
    \ = count + fill_col(row, i)\n            end\n            return count\n    \
    \    end\n        local count = 0\n        for i = 1, #grid do\n            count\
    \ = count + fill_row(i, col)\n        end\n        return count\n    end\n   \
    \ local count = 0\n    for i = 1, #grid[1] do\n        count = count + fill(1,\
    \ i)\n    end\n    return count * capacity\nend", "    local rows = #grid\n  \
    \  local cols = #grid[1]\n    local max_water = 0\n    for i = 1, rows do\n  \
    \      for j = 1, cols do\n            if grid[i][j] == 1 then\n             \
    \   max_water = max_water + capacity\n            end\n        end\n    end\n\
    \    return max_water\nend", "    local function fill(grid, capacity)\n      \
    \  local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return capacity\n\
    \                else\n                    return capacity - 1\n             \
    \   end\n            end\n            local function fill_row_helper(row, capacity,\
    \ result)\n                if capacity == 0 then\n                    return result\n\
    \                else\n                    return fill_row_helper(row, capacity\
    \ - 1, result + 1)\n                end\n            end\n            return fill_row_helper(row,\
    \ capacity, 0)\n        end\n        local function fill_grid_helper(grid, capacity,\
    \ result)\n            if #grid == 0 then\n                return result\n   \
    \         else\n                return fill_grid_helper(table.slice(grid, 2),\
    \ capacity, result + fill_row(grid[1], capacity))\n            end\n        end\n\
    \        return fill_grid_helper(grid, capacity, 0)\n    end\n    local function\
    \ max_fill_helper(grid, capacity, result)\n        if capacity == 0 then\n   \
    \         return result\n        else\n            return max_fill_helper(grid,\
    \ capacity - 1, math.max(result, fill(grid, capacity)))\n        end\n    end\n\
    \    return max_fill_helper(grid, capacity, 0)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(grid, capacity, row)\n          \
    \  local function fill_cell(grid, capacity, row, col)\n                local function\
    \ fill_cell_rec(grid, capacity, row, col)\n                    if row < 1 or row\
    \ > #grid or col < 1 or col > #grid[1] then\n                        return 0\n\
    \                    end\n                    if grid[row][col] == 0 then\n  \
    \                      return 0\n                    end\n                   \
    \ grid[row][col] = 0\n                    return 1 + fill_cell_rec(grid, capacity,\
    \ row - 1, col) +\n                                 fill_cell_rec(grid, capacity,\
    \ row + 1, col) +\n                                 fill_cell_rec(grid, capacity,\
    \ row, col - 1) +\n                                 fill_cell_rec(grid, capacity,\
    \ row, col + 1)\n                end\n                return fill_cell_rec(grid,\
    \ capacity, row, col)\n            end\n            local function fill_cell_rec(grid,\
    \ capacity, row, col)\n                if col > #grid[1] then\n              \
    \      return 0\n                end\n                local filled = fill_cell(grid,\
    \ capacity, row, col)\n                if filled > capacity then\n           \
    \         return 1 + fill_cell_rec(grid, capacity, row, col + 1)\n           \
    \     end\n                return fill_cell_rec(grid, capacity, row, col + 1)\n\
    \            end\n            return fill_cell_rec(grid, capacity, row, 1)\n \
    \       end\n        local function fill_row_rec(grid, capacity, row)\n      \
    \      if row > #grid then\n                return 0\n            end\n      \
    \      return fill_row(grid, capacity, row) + fill_row_rec(grid, capacity, row\
    \ + 1)\n        end\n        return fill_row_rec(grid, capacity, 1)\n    end\n\
    \    return fill(grid, capacity)\nend", "    local function min(a, b)\n      \
    \  if a < b then\n            return a\n        else\n            return b\n \
    \       end\n    end\n    local function max(a, b)\n        if a > b then\n  \
    \          return a\n        else\n            return b\n        end\n    end\n\
    \    local function sum(t)\n        local s = 0\n        for _, v in ipairs(t)\
    \ do\n            s = s + v\n        end\n        return s\n    end\n    local\
    \ function fill(grid, capacity)\n        local n = #grid\n        local m = #grid[1]\n\
    \        local filled = 0\n        for i = 1, n do\n            local row = grid[i]\n\
    \            local row_filled = 0\n            for j = 1, m do\n             \
    \   if row[j] == 1 then\n                    row_filled = row_filled + 1\n   \
    \             end\n            end\n            filled = filled + min(row_filled,\
    \ capacity)\n        end\n        return filled\n    end\n    local function fill_col(grid,\
    \ capacity, col)\n        local n = #grid\n        local m = #grid[1]\n      \
    \  local filled = 0\n        for i = 1, n do\n            local row = grid[i]\n\
    \            if row[col] == 1 then\n                filled = filled + 1\n    \
    \        end\n        end\n        return min(filled, capacity)\n    end\n   \
    \ local function fill_row(grid, capacity, row)\n        local n = #grid\n    \
    \    local m = #grid[1]\n        local filled = 0\n        local row = grid[row]\n\
    \        for j = 1, m do\n            if row[j] == 1 then\n                filled\
    \ = filled + 1\n            end\n        end\n        return min(filled, capacity)\n\
    \    end\n    local function fill_row_col(grid, capacity, row, col)\n        local\
    \ n = #grid\n        local m = #grid[1]\n        local filled = 0\n        local\
    \ row = grid[row]\n        if row[col] == 1 then\n            filled = filled\
    \ + 1\n        end\n        return min(filled, capacity)\n    end\n    local n\
    \ = #grid\n    local m = #grid[1]\n   ", "    local rows = #grid\n    local cols\
    \ = #grid[1]\n    local max_fill = 0\n    for i = 1, rows do\n        for j =\
    \ 1, cols do\n            if grid[i][j] == 1 then\n                max_fill =\
    \ max_fill + capacity\n            end\n        end\n    end\n    return max_fill\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 1 then\n                    return capacity\n              \
    \  else\n                    return 0\n                end\n            end\n\
    \            return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function empty(grid, capacity)\n\
    \        local function empty_row(row, capacity)\n            local function empty_cell(cell,\
    \ capacity)\n                if cell == capacity then\n                    return\
    \ 0\n                else\n                    return cell\n                end\n\
    \            end\n            return map(empty_cell, row, capacity)\n        end\n\
    \        return map(empty_row, grid, capacity)\n    end\n    local function count_filled(grid)\n\
    \        local function count_row(row)\n            local function count_cell(cell)\n\
    \                if cell > 0 then\n                    return 1\n            \
    \    else\n                    return 0\n                end\n            end\n\
    \            return sum(map(count_cell, row))\n        end\n        return sum(map(count_row,\
    \ grid))\n    end\n    local function is_empty(grid)\n        local function is_row_empty(row)\n\
    \            local function is_cell_empty(cell)\n                if cell > 0 then\n\
    \                    return false\n                else\n                    return\
    \ true\n                end\n            end\n            return all(map(is_cell_empty,\
    \ row))\n        end\n        return all(map(is_row_empty, grid))\n    end\n \
    \   local function fill_and_empty(grid, capacity)\n        return empty(fill(grid,\
    \ capacity), capacity)\n    end\n    local function fill_and_empty_n_times(grid,\
    \ capacity, n)\n        if n == 0 then\n            return grid\n        else\n\
    \            return fill_and_empty_n_times(fill_and_empty(grid, capacity), capacity,\
    \ n - 1)\n        end\n    end\n    local function fill_and_empty_until_empty(grid,\
    \ capacity)\n        local function fill_and_empty_until_empty_helper(grid, capacity,\
    \ n)\n            if is_empty(grid) then\n               ", "    local function\
    \ fill_bucket(bucket, well)\n        local water = 0\n        for i = 1, #well\
    \ do\n            if well[i] == 1 then\n                water = water + 1\n  \
    \          end\n        end\n        return math.min(bucket, water)\n    end",
  "  local function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 1 then\n \
    \         return capacity - 1\n        else\n          return capacity\n     \
    \   end\n      end\n      return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n  end\n  local function empty(grid)\n    local function empty_row(row)\n\
    \      local function empty_cell(cell)\n        if cell == 0 then\n          return\
    \ 1\n        else\n          return 0\n        end\n      end\n      return map(row,\
    \ function(cell) return empty_cell(cell) end)\n    end\n    return map(grid, function(row)\
    \ return empty_row(row) end)\n  end\n  local function is_empty(grid)\n    local\
    \ function is_empty_row(row)\n      local function is_empty_cell(cell)\n     \
    \   if cell == 0 then\n          return true\n        else\n          return false\n\
    \        end\n      end\n      return reduce(row, function(acc, cell) return acc\
    \ and is_empty_cell(cell) end, true)\n    end\n    return reduce(grid, function(acc,\
    \ row) return acc and is_empty_row(row) end, true)\n  end\n  local function count_fill(grid)\n\
    \    local function count_fill_row(row)\n      local function count_fill_cell(cell)\n\
    \        if cell == 0 then\n          return 1\n        else\n          return\
    \ 0\n        end\n      end\n      return reduce(row, function(acc, cell) return\
    \ acc + count_fill_cell(cell) end, 0)\n    end\n    return reduce(grid, function(acc,\
    \ row) return acc + count_fill_row(row) end, 0)\n  end\n  local function count_empty(grid)\n\
    \    local function count_empty_row(row)\n      local function count_empty_cell(cell)\n\
    \        if cell == 1 then\n          return 1\n        else\n          return\
    \ 0\n        end\n      end\n      return reduce(row", "  local function fill(grid,\
    \ capacity)\n    local function fill_row(row, capacity)\n      local function\
    \ fill_cell(cell, capacity)\n        if cell == 1 then\n          return capacity\n\
    \        else\n          return 0\n        end\n      end\n      return map(row,\
    \ function(cell) return fill_cell(cell, capacity) end)\n    end\n    return map(grid,\
    \ function(row) return fill_row(row, capacity) end)\n  end\n  local function empty(grid,\
    \ capacity)\n    local function empty_row(row, capacity)\n      local function\
    \ empty_cell(cell, capacity)\n        if cell == capacity then\n          return\
    \ 0\n        else\n          return cell\n        end\n      end\n      return\
    \ map(row, function(cell) return empty_cell(cell, capacity) end)\n    end\n  \
    \  return map(grid, function(row) return empty_row(row, capacity) end)\n  end\n\
    \  local function count_filled(grid)\n    local function count_filled_row(row)\n\
    \      local function count_filled_cell(cell)\n        if cell > 0 then\n    \
    \      return 1\n        else\n          return 0\n        end\n      end\n  \
    \    return sum(map(row, count_filled_cell))\n    end\n    return sum(map(grid,\
    \ count_filled_row))\n  end\n  local function count_empty(grid)\n    local function\
    \ count_empty_row(row)\n      local function count_empty_cell(cell)\n        if\
    \ cell == 0 then\n          return 1\n        else\n          return 0\n     \
    \   end\n      end\n      return sum(map(row, count_empty_cell))\n    end\n  \
    \  return sum(map(grid, count_empty_row))\n  end\n  local function count_filled_and_empty(grid)\n\
    \    return count_filled(grid) + count_empty(grid)\n  end\n  local function count_filled_and_empty_until_empty(grid,\
    \ capacity)\n    local count = 0\n    local filled_and_empty = count_filled_and_empty(grid)\n\
    \    while filled_and_empty > 0 do\n      grid = empty(grid, capacity)\n     \
    \ grid = fill(grid, capacity", "    local function fill(row, col)\n        local\
    \ sum = 0\n        for i = 1, capacity do\n            sum = sum + grid[row][col]\n\
    \            row = row + 1\n            if row > #grid then\n                break\n\
    \            end\n        end\n        return sum\n    end\n    local function\
    \ max_fill_row(row)\n        local max = 0\n        for col = 1, #grid[row] do\n\
    \            local sum = fill(row, col)\n            if sum > max then\n     \
    \           max = sum\n            end\n        end\n        return max\n    end\n\
    \    local sum = 0\n    for row = 1, #grid do\n        sum = sum + max_fill_row(row)\n\
    \    end\n    return sum\nend", "    local function fill(row, col)\n        if\
    \ row >= #grid or col >= #grid[1] then\n            return 0\n        end\n  \
    \      local count = 0\n        if grid[row][col] == 1 then\n            grid[row][col]\
    \ = 0\n            count = 1\n        end\n        return count + fill(row, col\
    \ + 1) + fill(row + 1, col)\n    end\n    local function fill_all()\n        local\
    \ count = 0\n        for row = 1, #grid do\n            for col = 1, #grid[1]\
    \ do\n                count = count + fill(row, col)\n            end\n      \
    \  end\n        return count\n    end\n    local count = 0\n    while fill_all()\
    \ > 0 do\n        count = count + 1\n    end\n    return count\nend", "    local\
    \ function fill(row, col)\n        if row > #grid or col > #grid[1] then\n   \
    \         return 0\n        end\n        if grid[row][col] == 0 then\n       \
    \     return 0\n        end\n        grid[row][col] = 0\n        return 1 + fill(row\
    \ + 1, col) + fill(row, col + 1)\n    end\n    local function fill_all()\n   \
    \     local count = 0\n        for row = 1, #grid do\n            for col = 1,\
    \ #grid[1] do\n                count = count + fill(row, col)\n            end\n\
    \        end\n        return count\n    end\n    local count = 0\n    while fill_all()\
    \ > 0 do\n        count = count + 1\n    end\n    return count\nend", "  local\
    \ function fill(grid, capacity)\n    local function fill_row(grid, capacity, row)\n\
    \      local function fill_cell(grid, capacity, row, col)\n        if grid[row][col]\
    \ == 1 then\n          grid[row][col] = 0\n          capacity = capacity - 1\n\
    \        end\n        return capacity\n      end\n      for col = 1, #grid[row]\
    \ do\n        capacity = fill_cell(grid, capacity, row, col)\n      end\n    \
    \  return capacity\n    end\n    for row = 1, #grid do\n      capacity = fill_row(grid,\
    \ capacity, row)\n    end\n    return capacity\n  end\n  local function empty(grid,\
    \ capacity)\n    local function empty_row(grid, capacity, row)\n      local function\
    \ empty_cell(grid, capacity, row, col)\n        if grid[row][col] == 0 then\n\
    \          grid[row][col] = 1\n          capacity = capacity - 1\n        end\n\
    \        return capacity\n      end\n      for col = #grid[row], 1, -1 do\n  \
    \      capacity = empty_cell(grid, capacity, row, col)\n      end\n      return\
    \ capacity\n    end\n    for row = #grid, 1, -1 do\n      capacity = empty_row(grid,\
    \ capacity, row)\n    end\n    return capacity\n  end\n  local function is_empty(grid)\n\
    \    local function is_empty_row(grid, row)\n      local function is_empty_cell(grid,\
    \ row, col)\n        return grid[row][col] == 0\n      end\n      for col = 1,\
    \ #grid[row] do\n        if not is_empty_cell(grid, row, col) then\n         \
    \ return false\n        end\n      end\n      return true\n    end\n    for row\
    \ = 1, #grid do\n      if not is_empty_row(grid, row) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function is_full(grid)\n\
    \    local function is_full_row(grid, row)\n      local function is_full_cell(grid,\
    \ row, col)\n        return grid[row][col] == 1\n      end\n      for col = 1",
  "    local function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(row, fill_cell, capacity)\n        end\n        return map(grid, fill_row,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(row, sum_cell, 0)\n       \
    \ end\n        return reduce(grid, sum_row, 0)\n    end\n    local function fill_grid(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(row, fill_cell,\
    \ capacity)\n        end\n        return map(grid, fill_row, capacity)\n    end\n\
    \    local function fill_grid_with_capacity(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(row, fill_cell, capacity)\n        end\n   \
    \     return map(grid, fill_row, capacity)\n    end\n    local function fill_grid_with_capacity(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(row, fill_cell,\
    \ capacity)\n        end\n        return map(grid, fill_row, capacity)\n    end\n\
    \    local function fill_grid_with_capacity(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(", "    local function max_fill_rec(grid, capacity,\
    \ row, col, visited)\n        if row < 1 or row > #grid or col < 1 or col > #grid[1]\
    \ or visited[row][col] == 1 then\n            return 0\n        end\n        local\
    \ count = 0\n        if grid[row][col] == 1 then\n            count = 1\n    \
    \    end\n        visited[row][col] = 1\n        return count + max_fill_rec(grid,\
    \ capacity, row - 1, col, visited) +\n            max_fill_rec(grid, capacity,\
    \ row + 1, col, visited) +\n            max_fill_rec(grid, capacity, row, col\
    \ - 1, visited) +\n            max_fill_rec(grid, capacity, row, col + 1, visited)\n\
    \    end\n    local function max_fill_iter(grid, capacity)\n        local count\
    \ = 0\n        local visited = {}\n        for i = 1, #grid do\n            visited[i]\
    \ = {}\n            for j = 1, #grid[1] do\n                visited[i][j] = 0\n\
    \            end\n        end\n        for i = 1, #grid do\n            for j\
    \ = 1, #grid[1] do\n                if visited[i][j] == 0 then\n             \
    \       local c = max_fill_rec(grid, capacity, i, j, visited)\n              \
    \      count = count + math.ceil(c / capacity)\n                end\n        \
    \    end\n        end\n        return count\n    end\n    return max_fill_iter(grid,\
    \ capacity)\nend", "    local function fill_bucket(bucket, row)\n        local\
    \ filled = 0\n        for i = 1, #row do\n            if row[i] == 1 then\n  \
    \              filled = filled + 1\n            end\n        end\n        return\
    \ filled\n    end", "    local n = #grid\n    local m = #grid[1]\n    local max_height\
    \ = 0\n    for i = 1, n do\n        for j = 1, m do\n            max_height =\
    \ math.max(max_height, grid[i][j])\n        end\n    end\n    local function fill(height)\n\
    \        local count = 0\n        for i = 1, n do\n            for j = 1, m do\n\
    \                if grid[i][j] > height then\n                    count = count\
    \ + grid[i][j] - height\n                end\n            end\n        end\n \
    \       return count\n    end\n    local function check(height)\n        return\
    \ fill(height) <= capacity\n    end\n    local l = 0\n    local r = max_height\n\
    \    while l < r do\n        local mid = math.floor((l + r) / 2)\n        if check(mid)\
    \ then\n            r = mid\n        else\n            l = mid + 1\n        end\n\
    \    end\n    return fill(l)\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 1 then\n                    return capacity\
    \ - 1\n                else\n                    return capacity\n           \
    \     end\n            end\n            return map(fill_cell, row, capacity)\n\
    \        end\n        return map(fill_row, grid, capacity)\n    end\n    local\
    \ function count_fill(grid)\n        local function count_row(row)\n         \
    \   local function count_cell(cell)\n                if cell == 0 then\n     \
    \               return 1\n                else\n                    return 0\n\
    \                end\n            end\n            return sum(map(count_cell,\
    \ row))\n        end\n        return sum(map(count_row, grid))\n    end\n    local\
    \ function is_empty(grid)\n        local function is_row_empty(row)\n        \
    \    local function is_cell_empty(cell)\n                return cell == 0\n  \
    \          end\n            return all(map(is_cell_empty, row))\n        end\n\
    \        return all(map(is_row_empty, grid))\n    end\n    local function fill_and_count(grid,\
    \ capacity)\n        return count_fill(fill(grid, capacity))\n    end\n    local\
    \ function fill_and_count_until_empty(grid, capacity)\n        local function\
    \ fill_and_count_until_empty_iter(grid, capacity, count)\n            if is_empty(grid)\
    \ then\n                return count\n            else\n                return\
    \ fill_and_count_until_empty_iter(fill(grid, capacity), capacity, count + fill_and_count(grid,\
    \ capacity))\n            end\n        end\n        return fill_and_count_until_empty_iter(grid,\
    \ capacity, 0)\n    end\n    return fill_and_count_until_empty(grid, capacity)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function max_fill_rec(grid, capacity, count)\n   \
    \     local filled = fill(grid, capacity)\n        local sum = sum_grid(filled)\n\
    \        if sum == 0 then\n            return count\n        else\n          \
    \  return max_fill_rec(empty(filled), capacity, count + 1)\n        end\n    end\n\
    \    return max_fill_rec(grid, capacity, 0)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(row, function(cell)\
    \ return fill_cell(cell, capacity) end)\n        end\n        return map(grid,\
    \ function(row) return fill_row(row, capacity) end)\n    end\n    local function\
    \ sum_rows(grid)\n        local function sum_row(row)\n            local function\
    \ sum_cell(cell, acc)\n                return acc + cell\n            end\n  \
    \          return foldl(row, 0, sum_cell)\n        end\n        return foldl(grid,\
    \ 0, sum_row)\n    end\n    local function sum_cols(grid)\n        local function\
    \ sum_col(grid, acc)\n            local function sum_cell(cell, acc)\n       \
    \         return acc + cell\n            end\n            return foldl(grid, acc,\
    \ sum_cell)\n        end\n        return foldl(grid, 0, sum_col)\n    end\n  \
    \  local function sum_grid(grid)\n        local function sum_cell(cell, acc)\n\
    \            return acc + cell\n        end\n        return foldl(grid, 0, sum_cell)\n\
    \    end\n    local function fill_grid(grid, capacity)\n        local function\
    \ fill_cell(cell, capacity)\n            if cell == 0 then\n                return\
    \ 0\n            else\n                return capacity\n            end\n    \
    \    end\n        return map(grid, function(cell) return fill_cell(cell, capacity)\
    \ end)\n    end\n    local function fill_row(row, capacity)\n        local function\
    \ fill_cell(cell, capacity)\n            if cell == 0 then\n                return\
    \ 0\n            else\n                return capacity\n            end\n    \
    \    end\n        return map(row, function(cell) return fill_cell(cell, capacity)\
    \ end)\n    end\n    local function fill_col(grid, capacity)\n        local function\
    \ fill_cell(cell, capacity)\n            if cell == 0 then\n                return\
    \ 0\n            else\n                return capacity\n            end\n    \
    \    end\n        return map(grid, function(", "    local n = #grid\n    local\
    \ m = #grid[1]\n    local max_height = 0\n    for i = 1, n do\n        for j =\
    \ 1, m do\n            if grid[i][j] == 1 then\n                max_height = max_height\
    \ + 1\n            end\n        end\n    end\n    local max_fill = 0\n    for\
    \ i = 1, max_height do\n        local fill = 0\n        for j = 1, n do\n    \
    \        for k = 1, m do\n                if grid[j][k] == 1 then\n          \
    \          fill = fill + 1\n                    grid[j][k] = 0\n             \
    \   end\n            end\n        end\n        max_fill = max_fill + fill\n  \
    \      if fill < capacity then\n            break\n        end\n    end\n    return\
    \ max_fill\nend", "    local function fill(row)\n        local count = 0\n   \
    \     local i = 1\n        while i <= #row do\n            if row[i] == 1 then\n\
    \                local j = i\n                while j <= #row and row[j] == 1\
    \ do\n                    j = j + 1\n                end\n                count\
    \ = count + 1\n                i = j\n            else\n                i = i\
    \ + 1\n            end\n        end\n        return count\n    end\n    local\
    \ function fill_all(grid)\n        local count = 0\n        for i = 1, #grid do\n\
    \            count = count + fill(grid[i])\n        end\n        return count\n\
    \    end\n    local function fill_row(row, capacity)\n        local count = 0\n\
    \        local i = 1\n        while i <= #row do\n            if row[i] == 1 then\n\
    \                local j = i\n                while j <= #row and row[j] == 1\
    \ do\n                    j = j + 1\n                end\n                count\
    \ = count + 1\n                i = j\n            else\n                i = i\
    \ + 1\n            end\n        end\n        return count\n    end\n    local\
    \ function fill_all_with_capacity(grid, capacity)\n        local count = 0\n \
    \       for i = 1, #grid do\n            count = count + fill_row(grid[i], capacity)\n\
    \        end\n        return count\n    end\n    local function fill_row_with_capacity(row,\
    \ capacity)\n        local count = 0\n        local i = 1\n        while i <=\
    \ #row do\n            if row[i] == 1 then\n                local j = i\n    \
    \            while j <= #row and row[j] == 1 do\n                    j = j + 1\n\
    \                end\n                count = count + 1\n                i = j\n\
    \            else\n                i = i + 1\n            end\n        end\n \
    \       return count\n    end\n    local function fill_all_with_capacity(grid,\
    \ capacity)\n        local count = 0\n        for i = 1, #grid do\n          \
    \  count = count + fill_row_with_capacity(grid[i], capacity)\n        end\n  \
    \      return count\n    end\n    local function fill_row_with_capacity(row, capacity)\n\
    \        local count", "    local function fill(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_well(well,\
    \ capacity)\n                local function fill_unit(unit, capacity)\n      \
    \              if unit == 1 then\n                        return 1\n         \
    \           else\n                        return 0\n                    end\n\
    \                end\n                return capacity - sum(map(fill_unit, well))\n\
    \            end\n            return sum(map(fill_well, row))\n        end\n \
    \       return sum(map(fill_row, grid))\n    end\n    return fill(grid, capacity)\n\
    end", "    local function fill(row, col)\n        local function fill_row(row,\
    \ col)\n            local function fill_col(row, col)\n                if grid[row][col]\
    \ == 1 then\n                    grid[row][col] = 0\n                    return\
    \ 1\n                end\n                return 0\n            end\n        \
    \    local count = 0\n            for i = 1, #grid[row] do\n                count\
    \ = count + fill_col(row, i)\n            end\n            return count\n    \
    \    end\n        local count = 0\n        for i = 1, #grid do\n            count\
    \ = count + fill_row(i, col)\n        end\n        return count\n    end\n   \
    \ local count = 0\n    for i = 1, #grid[1] do\n        count = count + fill(1,\
    \ i)\n    end\n    return count * capacity\nend", "  local function fill(grid,\
    \ capacity)\n    local function fill_row(row, capacity)\n      local function\
    \ fill_cell(cell, capacity)\n        if cell == 0 then\n          return capacity\n\
    \        else\n          return 0\n      end\n      return fill_cell\n    end\n\
    \    return fill_row\n  end\n  return fill\nend", "    local function fill(row,\
    \ col)\n        if row < 1 or row > #grid or col < 1 or col > #grid[1] then\n\
    \            return 0\n        end\n        if grid[row][col] == 0 then\n    \
    \        return 0\n        end\n        grid[row][col] = 0\n        return 1 +\
    \ fill(row - 1, col) + fill(row + 1, col) + fill(row, col - 1) + fill(row, col\
    \ + 1)\n    end\n    local function fill_all()\n        local count = 0\n    \
    \    for row = 1, #grid do\n            for col = 1, #grid[1] do\n           \
    \     count = count + fill(row, col)\n            end\n        end\n        return\
    \ count\n    end\n    local count = 0\n    while fill_all() > 0 do\n        count\
    \ = count + 1\n    end\n    return count\nend", "    local function get_max_fill(grid,\
    \ capacity)\n        local max_fill = 0\n        for i = 1, #grid do\n       \
    \     local row = grid[i]\n            local row_fill = 0\n            for j =\
    \ 1, #row do\n                if row[j] == 1 then\n                    row_fill\
    \ = row_fill + 1\n                end\n            end\n            if row_fill\
    \ > max_fill then\n                max_fill = row_fill\n            end\n    \
    \    end\n        return max_fill\n    end\n    local max_fill = get_max_fill(grid,\
    \ capacity)\n    return max_fill * capacity\nend", "    local rows = #grid\n \
    \   local cols = #grid[1]\n    local function fill(row, col)\n        if row <\
    \ 1 or row > rows or col < 1 or col > cols then\n            return 0\n      \
    \  end\n        if grid[row][col] == 0 then\n            return 0\n        end\n\
    \        grid[row][col] = 0\n        return 1 + fill(row - 1, col) + fill(row\
    \ + 1, col) + fill(row, col - 1) + fill(row, col + 1)\n    end\n    local function\
    \ fill_all()\n        local count = 0\n        for row = 1, rows do\n        \
    \    for col = 1, cols do\n                count = count + fill(row, col)\n  \
    \          end\n        end\n        return count\n    end\n    local function\
    \ fill_one()\n        local count = 0\n        for row = 1, rows do\n        \
    \    for col = 1, cols do\n                if grid[row][col] == 1 then\n     \
    \               grid[row][col] = 0\n                    count = count + 1\n  \
    \                  break\n                end\n            end\n        end\n\
    \        return count\n    end\n    local function fill_many()\n        local\
    \ count = 0\n        for row = 1, rows do\n            for col = 1, cols do\n\
    \                if grid[row][col] == 1 then\n                    grid[row][col]\
    \ = 0\n                    count = count + 1\n                    break\n    \
    \            end\n            end\n        end\n        return count\n    end\n\
    \    local function fill_all_but_one()\n        local count = 0\n        for row\
    \ = 1, rows do\n            for col = 1, cols do\n                if grid[row][col]\
    \ == 1 then\n                    grid[row][col] = 0\n                    count\
    \ = count + 1\n                    break\n                end\n            end\n\
    \        end\n        return count\n    end\n    local function fill_all_but_many()\n\
    \        local count = 0\n        for row = 1, rows do\n            for col =\
    \ 1, cols do\n                if grid[row][col] == 1 then\n                  \
    \  grid[row][col] = 0\n                    count = count + 1\n               \
    \     break\n                end\n            end\n        end\n       ", "  \
    \  local function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_well(well, capacity)\n                local function\
    \ fill_unit(unit, capacity)\n                    if unit == 1 then\n         \
    \               return capacity - 1\n                    else\n              \
    \          return capacity\n                    end\n                end\n   \
    \             local function fill_well_helper(well, capacity, i)\n           \
    \         if i > #well then\n                        return capacity\n       \
    \             else\n                        return fill_well_helper(well, fill_unit(well[i],\
    \ capacity), i + 1)\n                    end\n                end\n          \
    \      return fill_well_helper(well, capacity, 1)\n            end\n         \
    \   local function fill_row_helper(row, capacity, i)\n                if i > #row\
    \ then\n                    return capacity\n                else\n          \
    \          return fill_row_helper(row, fill_well(row[i], capacity), i + 1)\n \
    \               end\n            end\n            return fill_row_helper(row,\
    \ capacity, 1)\n        end\n        local function fill_grid_helper(grid, capacity,\
    \ i)\n            if i > #grid then\n                return capacity\n       \
    \     else\n                return fill_grid_helper(grid, fill_row(grid[i], capacity),\
    \ i + 1)\n            end\n        end\n        return fill_grid_helper(grid,\
    \ capacity, 1)\n    end\n    local function max_fill_helper(grid, capacity, count)\n\
    \        local new_capacity = fill(grid, capacity)\n        if new_capacity ==\
    \ capacity then\n            return count\n        else\n            return max_fill_helper(grid,\
    \ new_capacity, count + 1)\n        end\n    end\n    return max_fill_helper(grid,\
    \ capacity, 0)\nend", "  local function fill(grid, capacity)\n    local function\
    \ fill_row(row, capacity)\n      local function fill_cell(cell, capacity)\n  \
    \      if cell == 0 then\n          return 0\n        else\n          return capacity\n\
    \        end\n      end\n      return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n  end\n  local function count_water(grid)\n    local function\
    \ count_row(row)\n      local function count_cell(cell)\n        if cell == 0\
    \ then\n          return 0\n        else\n          return 1\n        end\n  \
    \    end\n      return reduce(row, function(acc, cell) return acc + count_cell(cell)\
    \ end, 0)\n    end\n    return reduce(grid, function(acc, row) return acc + count_row(row)\
    \ end, 0)\n  end\n  local function empty(grid)\n    local function empty_row(row)\n\
    \      local function empty_cell(cell)\n        if cell == 0 then\n          return\
    \ 0\n        else\n          return 1\n        end\n      end\n      return map(row,\
    \ function(cell) return empty_cell(cell) end)\n    end\n    return map(grid, function(row)\
    \ return empty_row(row) end)\n  end\n  local function count_empties(grid)\n  \
    \  local function count_row(row)\n      local function count_cell(cell)\n    \
    \    if cell == 0 then\n          return 0\n        else\n          return 1\n\
    \        end\n      end\n      return reduce(row, function(acc, cell) return acc\
    \ + count_cell(cell) end, 0)\n    end\n    return reduce(grid, function(acc, row)\
    \ return acc + count_row(row) end, 0)\n  end\n  local function is_empty(grid)\n\
    \    local function is_row_empty(row)\n      local function is_cell_empty(cell)\n\
    \        if cell == 0 then\n          return true\n        else\n          return\
    \ false\n        end\n      end\n      return reduce(row, function(acc, cell)\
    \ return acc and is_cell_empty(cell", "    local function max_fill_helper(grid,\
    \ capacity, row, col, count)\n        if row == #grid then\n            return\
    \ count\n        end\n        local max_count = count\n        for i = 1, #grid[row]\
    \ do\n            if grid[row][i] == 1 then\n                grid[row][i] = 0\n\
    \                max_count = math.max(max_count, max_fill_helper(grid, capacity,\
    \ row + 1, i, count + 1))\n                grid[row][i] = 1\n            end\n\
    \        end\n        return max_count\n    end\n    return max_fill_helper(grid,\
    \ capacity, 1, 1, 0)\nend", "    local function fill(row)\n        local count\
    \ = 0\n        local filled = 0\n        for i = 1, #row do\n            if row[i]\
    \ == 1 then\n                filled = filled + 1\n                if filled ==\
    \ capacity then\n                    filled = 0\n                    count = count\
    \ + 1\n                end\n            else\n                filled = 0\n   \
    \         end\n        end\n        return count\n    end\n    local count = 0\n\
    \    for i = 1, #grid do\n        count = count + fill(grid[i])\n    end\n   \
    \ return count\nend", "    local function fill_bucket(bucket, row)\n        local\
    \ i = 1\n        while i <= #row do\n            if row[i] == 1 then\n       \
    \         bucket = bucket - 1\n                row[i] = 0\n            end\n \
    \           i = i + 1\n        end\n        return bucket\n    end\n    local\
    \ function fill_wells(grid, capacity)\n        local i = 1\n        local count\
    \ = 0\n        while i <= #grid do\n            local bucket = capacity\n    \
    \        bucket = fill_bucket(bucket, grid[i])\n            if bucket < capacity\
    \ then\n                count = count + 1\n            end\n            i = i\
    \ + 1\n        end\n        return count\n    end\n    local function fill_wells_reverse(grid,\
    \ capacity)\n        local i = #grid\n        local count = 0\n        while i\
    \ >= 1 do\n            local bucket = capacity\n            bucket = fill_bucket(bucket,\
    \ grid[i])\n            if bucket < capacity then\n                count = count\
    \ + 1\n            end\n            i = i - 1\n        end\n        return count\n\
    \    end\n    return math.min(fill_wells(grid, capacity), fill_wells_reverse(grid,\
    \ capacity))\nend", "    local rows = #grid\n    local cols = #grid[1]\n    local\
    \ max_height = 0\n    for row = 1, rows do\n        for col = 1, cols do\n   \
    \         if grid[row][col] == 1 then\n                max_height = max_height\
    \ + 1\n            end\n        end\n    end\n    local max_water = capacity *\
    \ max_height\n    local water = 0\n    local count = 0\n    while water < max_water\
    \ do\n        for row = 1, rows do\n            for col = 1, cols do\n       \
    \         if grid[row][col] == 1 then\n                    water = water + 1\n\
    \                    grid[row][col] = 0\n                    if water == max_water\
    \ then\n                        return count\n                    end\n      \
    \          end\n            end\n        end\n        count = count + 1\n    end\n\
    \    return count\nend", "    local function fill(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(row, function(acc, cell) return\
    \ acc + sum_cell(cell) end, 0)\n        end\n        return reduce(grid, function(acc,\
    \ row) return acc + sum_row(row) end, 0)\n    end\n    local function sum_grid_rows(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(row,\
    \ function(acc, cell) return acc + sum_cell(cell) end, 0)\n        end\n     \
    \   return map(grid, function(row) return sum_row(row) end)\n    end\n    local\
    \ function subtract_grid_rows(grid, row_sums)\n        local function subtract_row(row,\
    \ row_sum)\n            local function subtract_cell(cell, row_sum)\n        \
    \        return cell - row_sum\n            end\n            return map(row, function(cell)\
    \ return subtract_cell(cell, row_sum) end)\n        end\n        return map(grid,\
    \ function(row, row_sum) return subtract_row(row, row_sum) end, row_sums)\n  \
    \  end\n    local function sum_grid_cols(grid)\n        local function sum_col(grid,\
    \ col_index)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(grid, function(acc, row) return\
    \ acc + sum_cell(row[col_index]) end, 0)\n        end\n        local col_count\
    \ = #grid[1]\n        return map(grid, function(row", "  local function fill(grid,\
    \ capacity)\n    local function fill_row(row, capacity)\n      local function\
    \ fill_cell(cell, capacity)\n        if cell == 1 then\n          return capacity\
    \ - 1\n        else\n          return capacity\n        end\n      end\n     \
    \ return foldl(fill_cell, capacity, row)\n    end\n    return foldl(fill_row,\
    \ capacity, grid)\n  end\n  return foldl(fill, capacity, grid)\nend", "  local\
    \ function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 1 then\n \
    \         return capacity\n        else\n          return 0\n        end\n   \
    \   end\n      return map(fill_cell, row, capacity)\n    end\n    return map(fill_row,\
    \ grid, capacity)\n  end\n  local function sum_grid(grid)\n    local function\
    \ sum_row(row)\n      local function sum_cell(cell)\n        return cell\n   \
    \   end\n      return reduce(sum_cell, row, 0)\n    end\n    return reduce(sum_row,\
    \ grid, 0)\n  end\n  local function empty(grid)\n    local function empty_row(row)\n\
    \      local function empty_cell(cell)\n        return 0\n      end\n      return\
    \ map(empty_cell, row)\n    end\n    return map(empty_row, grid)\n  end\n  local\
    \ function max_fill_rec(grid, capacity, count)\n    if sum_grid(grid) == 0 then\n\
    \      return count\n    else\n      return max_fill_rec(empty(grid), capacity,\
    \ count + 1)\n    end\n  end\n  return max_fill_rec(fill(grid, capacity), capacity,\
    \ 0)\nend", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function fill_and_empty(grid, capacity)\n        local\
    \ filled = fill(grid, capacity)\n        local emptied = empty(filled)\n     \
    \   return emptied\n    end\n    local function fill_and_empty_n(grid, capacity,\
    \ n)\n        local function fill_and_empty_n_iter(grid, capacity, n)\n      \
    \      if n == 0 then\n                return grid\n            else\n       \
    \         return fill_and_empty_n_iter(fill_and_empty(grid, capacity), capacity,\
    \ n - 1)\n            end\n        end\n        return fill_and_empty_n_iter(grid,\
    \ capacity, n)\n    end\n    local function fill_and_empty_until_empty(grid, capacity)\n\
    \        local function fill_and_empty_until_empty_iter(grid, capacity, n)\n \
    \           local filled = fill_and_empty(grid, capacity)\n            local filled_sum\
    \ = sum_grid(filled)\n            if filled_sum == 0 then\n                return\
    \ n\n            else\n                return fill_and_empty_until_empty_iter(filled,\
    \ capacity, n + 1)\n            end\n        end\n        return fill_and_empty_until_empty_iter(grid,\
    \ capacity, 0)\n    end\n    return", "  local function fill(grid, capacity)\n\
    \    local function fill_row(row, capacity)\n      local function fill_cell(cell,\
    \ capacity)\n        if cell == 1 then\n          return capacity - 1\n      \
    \  else\n          return capacity\n        end\n      end\n      local function\
    \ fill_row_helper(row, capacity, i)\n        if i > #row then\n          return\
    \ capacity\n        else\n          return fill_row_helper(row, fill_cell(row[i],\
    \ capacity), i + 1)\n        end\n      end\n      return fill_row_helper(row,\
    \ capacity, 1)\n    end\n    local function fill_grid_helper(grid, capacity, i)\n\
    \      if i > #grid then\n        return capacity\n      else\n        return\
    \ fill_grid_helper(grid, fill_row(grid[i], capacity), i + 1)\n      end\n    end\n\
    \    return fill_grid_helper(grid, capacity, 1)\n  end\n  local function fill_helper(grid,\
    \ capacity, i)\n    if fill(grid, capacity) == 0 then\n      return i\n    else\n\
    \      return fill_helper(grid, fill(grid, capacity), i + 1)\n    end\n  end\n\
    \  return fill_helper(grid, capacity, 0)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(row, function(cell)\
    \ return fill_cell(cell, capacity) end)\n        end\n        return map(grid,\
    \ function(row) return fill_row(row, capacity) end)\n    end\n    local function\
    \ sum_grid(grid)\n        local function sum_row(row)\n            local function\
    \ sum_cell(cell)\n                return cell\n            end\n            return\
    \ foldl(row, 0, function(acc, cell) return acc + sum_cell(cell) end)\n       \
    \ end\n        return foldl(grid, 0, function(acc, row) return acc + sum_row(row)\
    \ end)\n    end\n    local function is_empty(grid)\n        local function is_empty_row(row)\n\
    \            local function is_empty_cell(cell)\n                return cell ==\
    \ 0\n            end\n            return all(row, is_empty_cell)\n        end\n\
    \        return all(grid, is_empty_row)\n    end\n    local function drop(grid)\n\
    \        local function drop_row(row)\n            local function drop_cell(cell)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return cell - 1\n                end\n       \
    \     end\n            return map(row, function(cell) return drop_cell(cell) end)\n\
    \        end\n        return map(grid, function(row) return drop_row(row) end)\n\
    \    end\n    local function fill_and_drop(grid, capacity)\n        return drop(fill(grid,\
    \ capacity))\n    end\n    local function fill_and_drop_n(grid, capacity, n)\n\
    \        local function fill_and_drop_n_iter(grid, capacity, n, acc)\n       \
    \     if n == 0 then\n                return acc\n            else\n         \
    \       return fill_and_drop_n_iter(fill_and_drop(grid, capacity), capacity, n\
    \ - 1, acc + 1)\n            end\n        end\n        return fill_and_drop_n_",
  "  local function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 1 then\n \
    \         return capacity - 1\n        else\n          return capacity\n     \
    \   end\n      end\n      return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n  end\n  local function count_empties(grid)\n    local function\
    \ count_empties_row(row)\n      local function count_empties_cell(cell)\n    \
    \    if cell == 0 then\n          return 1\n        else\n          return 0\n\
    \        end\n      end\n      return reduce(row, function(acc, cell) return acc\
    \ + count_empties_cell(cell) end, 0)\n    end\n    return reduce(grid, function(acc,\
    \ row) return acc + count_empties_row(row) end, 0)\n  end\n  local function is_empty(grid)\n\
    \    local function is_empty_row(row)\n      local function is_empty_cell(cell)\n\
    \        if cell == 0 then\n          return false\n        else\n          return\
    \ true\n        end\n      end\n      return reduce(row, function(acc, cell) return\
    \ acc and is_empty_cell(cell) end, true)\n    end\n    return reduce(grid, function(acc,\
    \ row) return acc and is_empty_row(row) end, true)\n  end\n  local function max_fill_iter(grid,\
    \ capacity, count)\n    if is_empty(grid) then\n      return count\n    else\n\
    \      return max_fill_iter(fill(grid, capacity), capacity, count + 1)\n    end\n\
    \  end\n  return max_fill_iter(grid, capacity, 0)\nend", "    local rows = #grid\n\
    \    local cols = #grid[1]\n    local max_height = 0\n    for i = 1, rows do\n\
    \        for j = 1, cols do\n            max_height = math.max(max_height, grid[i][j])\n\
    \        end\n    end\n    local function fill(height)\n        local count =\
    \ 0\n        for i = 1, rows do\n            for j = 1, cols do\n            \
    \    if grid[i][j] >= height then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n        return count\n    end\n\
    \    local function bsearch(lo, hi)\n        if lo == hi then\n            return\
    \ lo\n        end\n        local mid = math.floor((lo + hi) / 2)\n        if fill(mid)\
    \ > capacity then\n            return bsearch(mid + 1, hi)\n        else\n   \
    \         return bsearch(lo, mid)\n        end\n    end\n    return bsearch(1,\
    \ max_height)\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_column(column, capacity)\n\
    \                if capacity == 0 then\n                    return 0\n       \
    \         end\n                if column > #row then\n                    return\
    \ capacity\n                end\n                if row[column] == 1 then\n  \
    \                  row[column] = 0\n                    return fill_column(column\
    \ + 1, capacity - 1)\n                end\n                return fill_column(column\
    \ + 1, capacity)\n            end\n            return fill_column(1, capacity)\n\
    \        end\n        local function fill_grid(grid, capacity)\n            if\
    \ #grid == 0 then\n                return capacity\n            end\n        \
    \    local row = table.remove(grid, 1)\n            local remaining = fill_row(row,\
    \ capacity)\n            return fill_grid(grid, remaining)\n        end\n    \
    \    return fill_grid(grid, capacity)\n    end\n    local function count_fills(grid,\
    \ capacity)\n        local function count_fills_row(row, capacity)\n         \
    \   local function count_fills_column(column, capacity)\n                if capacity\
    \ == 0 then\n                    return 0\n                end\n             \
    \   if column > #row then\n                    return capacity\n             \
    \   end\n                if row[column] == 1 then\n                    return\
    \ 1 + count_fills_column(column + 1, capacity - 1)\n                end\n    \
    \            return count_fills_column(column + 1, capacity)\n            end\n\
    \            return count_fills_column(1, capacity)\n        end\n        local\
    \ function count_fills_grid(grid, capacity)\n            if #grid == 0 then\n\
    \                return capacity\n            end\n            local row = table.remove(grid,\
    \ 1)\n            local remaining = count_fills_row(row, capacity)\n         \
    \   return remaining + count_fills_grid(grid, capacity)\n        end\n       \
    \ return count_fills_grid(grid, capacity)\n    end\n    local remaining = fill(grid,\
    \ capacity)\n    return count_fills(grid, capacity) - remaining\nend", "  local\
    \ function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_well(well, capacity)\n        if well == 0 then\n \
    \         return capacity\n        else\n          return 0\n        end\n   \
    \   end\n      local function fill_wells(wells, capacity)\n        if #wells ==\
    \ 0 then\n          return capacity\n        else\n          return fill_wells(tail(wells),\
    \ fill_well(head(wells), capacity))\n        end\n      end\n      return fill_wells(row,\
    \ capacity)\n    end\n    local function fill_rows(grid, capacity)\n      if #grid\
    \ == 0 then\n        return capacity\n      else\n        return fill_rows(tail(grid),\
    \ fill_row(head(grid), capacity))\n      end\n    end\n    return fill_rows(grid,\
    \ capacity)\n  end\n  local function fill_grid(grid, capacity)\n    if capacity\
    \ == 0 then\n      return 0\n    else\n      return 1 + fill_grid(grid, fill(grid,\
    \ capacity))\n    end\n  end\n  return fill_grid(grid, capacity)\nend", "    local\
    \ function fill_row(row, capacity)\n        local count = 0\n        local i =\
    \ 1\n        while i <= #row do\n            if row[i] == 1 then\n           \
    \     count = count + 1\n                i = i + capacity\n            else\n\
    \                i = i + 1\n            end\n        end\n        return count\n\
    \    end\n    local count = 0\n    for i = 1, #grid do\n        count = count\
    \ + fill_row(grid[i], capacity)\n    end\n    return count\nend", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 0\
    \ then\n                    return 0\n                else\n                 \
    \   return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return reduce(sum_row, grid, 0)\n    end\n    local function subtract_grid(grid,\
    \ capacity)\n        local function subtract_row(row, capacity)\n            local\
    \ function subtract_cell(cell, capacity)\n                if cell < capacity then\n\
    \                    return 0\n                else\n                    return\
    \ cell - capacity\n                end\n            end\n            return map(subtract_cell,\
    \ row, capacity)\n        end\n        return map(subtract_row, grid, capacity)\n\
    \    end\n    local function is_empty(grid)\n        local function is_empty_row(row)\n\
    \            local function is_empty_cell(cell)\n                return cell ==\
    \ 0\n            end\n            return all(is_empty_cell, row)\n        end\n\
    \        return all(is_empty_row, grid)\n    end\n    local function max_fill_iter(grid,\
    \ capacity, count)\n        if is_empty(grid) then\n            return count\n\
    \        else\n            return max_fill_iter(subtract_grid(grid, capacity),\
    \ capacity, count + sum_grid(fill(grid, capacity)))\n        end\n    end\n  \
    \  return max_fill_iter(grid, capacity, 0)\nend", "  local count = 0\n  local\
    \ row_count = #grid\n  local col_count = #grid[1]\n  local row_index = 1\n  local\
    \ col_index = 1\n  while row_index <= row_count do\n    while col_index <= col_count\
    \ do\n      if grid[row_index][col_index] == 1 then\n        count = count + 1\n\
    \        local row_index_copy = row_index\n        while row_index_copy <= row_count\
    \ and capacity > 0 do\n          local col_index_copy = col_index\n          while\
    \ col_index_copy <= col_count and capacity > 0 do\n            if grid[row_index_copy][col_index_copy]\
    \ == 1 then\n              grid[row_index_copy][col_index_copy] = 0\n        \
    \      capacity = capacity - 1\n            end\n            col_index_copy =\
    \ col_index_copy + 1\n          end\n          row_index_copy = row_index_copy\
    \ + 1\n        end\n      end\n      col_index = col_index + 1\n    end\n    row_index\
    \ = row_index + 1\n  end\n  return count\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(fill_cell, row,\
    \ capacity)\n        end\n        return map(fill_row, grid, capacity)\n    end\n\
    \    local function sum_grid(grid)\n        local function sum_row(row)\n    \
    \        local function sum_cell(cell)\n                return cell\n        \
    \    end\n            return reduce(sum_cell, row, 0)\n        end\n        return\
    \ reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           return 0\n            end\n            return map(empty_cell, row)\n\
    \        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ max_fill_iter(grid, capacity, count)\n        local filled = fill(grid, capacity)\n\
    \        local sum = sum_grid(filled)\n        if sum == 0 then\n            return\
    \ count\n        else\n            return max_fill_iter(empty(filled), capacity,\
    \ count + 1)\n        end\n    end\n    return max_fill_iter(grid, capacity, 0)\n\
    end", "  local function fill_row(row)\n    local filled = 0\n    for i = 1, #row\
    \ do\n      if row[i] == 1 then\n        filled = filled + 1\n      end\n    end\n\
    \    return filled\n  end\n  local function fill_col(grid, col)\n    local filled\
    \ = 0\n    for i = 1, #grid do\n      if grid[i][col] == 1 then\n        filled\
    \ = filled + 1\n      end\n    end\n    return filled\n  end\n  local function\
    \ fill_grid(grid, capacity)\n    local filled = 0\n    for i = 1, #grid do\n \
    \     filled = filled + fill_row(grid[i])\n    end\n    for i = 1, #grid[1] do\n\
    \      filled = filled + fill_col(grid, i)\n    end\n    return filled * capacity\n\
    \  end\n  return fill_grid(grid, capacity)\nend", "  local function fill_row(row,\
    \ capacity)\n    local count = 0\n    local filled = 0\n    for i = 1, #row do\n\
    \      if row[i] == 1 then\n        if filled < capacity then\n          filled\
    \ = capacity\n          count = count + 1\n        else\n          filled = filled\
    \ - 1\n        end\n      else\n        filled = filled - 1\n      end\n    end\n\
    \    return count\n  end\n  local count = 0\n  for i = 1, #grid do\n    count\
    \ = count + fill_row(grid[i], capacity)\n  end\n  return count\nend", "    local\
    \ function get_max_fill_count(grid, capacity)\n        local max_fill_count =\
    \ 0\n        local row_count = #grid\n        local column_count = #grid[1]\n\
    \        local row_index = 1\n        local column_index = 1\n        while row_index\
    \ <= row_count do\n            column_index = 1\n            while column_index\
    \ <= column_count do\n                if grid[row_index][column_index] == 1 then\n\
    \                    local fill_count = 0\n                    local row_index_copy\
    \ = row_index\n                    while row_index_copy <= row_count and fill_count\
    \ < capacity do\n                        if grid[row_index_copy][column_index]\
    \ == 1 then\n                            fill_count = fill_count + 1\n       \
    \                     grid[row_index_copy][column_index] = 0\n               \
    \         end\n                        row_index_copy = row_index_copy + 1\n \
    \                   end\n                    max_fill_count = max_fill_count +\
    \ 1\n                end\n                column_index = column_index + 1\n  \
    \          end\n            row_index = row_index + 1\n        end\n        return\
    \ max_fill_count\n    end\n    return get_max_fill_count(grid, capacity)\nend",
  "    local function fill(grid, capacity)\n        local filled = 0\n        for\
    \ i = 1, #grid do\n            local row = grid[i]\n            local row_filled\
    \ = 0\n            for j = 1, #row do\n                local cell = row[j]\n \
    \               if cell == 1 then\n                    row_filled = row_filled\
    \ + 1\n                end\n            end\n            if row_filled > capacity\
    \ then\n                filled = filled + capacity\n            else\n       \
    \         filled = filled + row_filled\n            end\n        end\n       \
    \ return filled\n    end\n    local function fill_with_capacity(grid, capacity)\n\
    \        local filled = fill(grid, capacity)\n        local new_grid = {}\n  \
    \      for i = 1, #grid do\n            local row = grid[i]\n            local\
    \ new_row = {}\n            for j = 1, #row do\n                local cell = row[j]\n\
    \                if cell == 1 then\n                    if capacity > 0 then\n\
    \                        new_row[j] = 0\n                        capacity = capacity\
    \ - 1\n                    else\n                        new_row[j] = 1\n    \
    \                end\n                else\n                    new_row[j] = 0\n\
    \                end\n            end\n            new_grid[i] = new_row\n   \
    \     end\n        return filled, new_grid\n    end\n    local filled = 0\n  \
    \  local grid_copy = {}\n    for i = 1, #grid do\n        grid_copy[i] = {}\n\
    \        for j = 1, #grid[i] do\n            grid_copy[i][j] = grid[i][j]\n  \
    \      end\n    end\n    while true do\n        local new_filled, new_grid = fill_with_capacity(grid_copy,\
    \ capacity)\n        if new_filled == filled then\n            break\n       \
    \ end\n        filled = new_filled\n        grid_copy = new_grid\n    end\n  \
    \  return filled\nend", "    local n = #grid\n    local m = #grid[1]\n    local\
    \ function fill(i, j)\n        if i > n or j > m then\n            return 0\n\
    \        end\n        if grid[i][j] == 0 then\n            return fill(i, j +\
    \ 1)\n        end\n        local c = capacity\n        while c > 0 and i <= n\
    \ and j <= m do\n            if grid[i][j] == 1 then\n                grid[i][j]\
    \ = 0\n                c = c - 1\n            end\n            i = i + 1\n   \
    \         j = j + 1\n        end\n        return 1 + fill(i, j)\n    end\n   \
    \ return fill(1, 1)\nend", "    local function get_max_fill(grid, capacity)\n\
    \        local max_fill = 0\n        for i = 1, #grid do\n            local row\
    \ = grid[i]\n            local fill = 0\n            for j = 1, #row do\n    \
    \            if row[j] == 1 then\n                    fill = fill + 1\n      \
    \          end\n            end\n            if fill > max_fill then\n       \
    \         max_fill = fill\n            end\n        end\n        return max_fill\n\
    \    end\n    local function get_max_fill_per_bucket(grid, capacity)\n       \
    \ local max_fill = 0\n        for i = 1, #grid do\n            local row = grid[i]\n\
    \            local fill = 0\n            for j = 1, #row do\n                if\
    \ row[j] == 1 then\n                    fill = fill + 1\n                end\n\
    \                if fill == capacity then\n                    fill = 0\n    \
    \            end\n            end\n            if fill > max_fill then\n     \
    \           max_fill = fill\n            end\n        end\n        return max_fill\n\
    \    end\n    local max_fill = get_max_fill(grid, capacity)\n    local max_fill_per_bucket\
    \ = get_max_fill_per_bucket(grid, capacity)\n    return max_fill + max_fill_per_bucket\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function count_empties(grid)\n        local function\
    \ count_empties_row(row)\n            local function count_empties_cell(cell)\n\
    \                if cell == 0 then\n                    return 1\n           \
    \     else\n                    return 0\n                end\n            end\n\
    \            return reduce(count_empties_cell, row, 0)\n        end\n        return\
    \ reduce(count_empties_row, grid, 0)\n    end\n    local function count_fills(grid)\n\
    \        local function count_fills_row(row)\n            local function count_fills_cell(cell)\n\
    \                if cell == capacity then\n                    return 1\n    \
    \            else\n                    return 0\n                end\n       \
    \     end\n            return reduce(count_fills_cell, row, 0)\n        end\n\
    \        return reduce(count_fills_row, grid, 0)\n    end\n    local function\
    \ count_empties_and_fills(grid)\n        local function count_empties_and_fills_row(row)\n\
    \            local function count_empties_and_fills_cell(cell)\n             \
    \   if cell == 0 or cell == capacity then\n                    return 1\n    \
    \            else\n                    return 0\n                end\n       \
    \     end\n            return reduce(count_empties_and_", "    local function\
    \ fill_bucket(bucket, row)\n        local count = 0\n        for i = 1, #row do\n\
    \            if row[i] == 1 then\n                count = count + 1\n        \
    \        row[i] = 0\n            end\n        end\n        return count\n    end",
  "  local function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 0 then\n \
    \         return 0\n        else\n          local fill = math.min(capacity, cell)\n\
    \          return fill\n        end\n      end\n      local filled = 0\n     \
    \ for i = 1, #row do\n        filled = filled + fill_cell(row[i], capacity)\n\
    \      end\n      return filled\n    end\n    local filled = 0\n    for i = 1,\
    \ #grid do\n      filled = filled + fill_row(grid[i], capacity)\n    end\n   \
    \ return filled\n  end\n  local function empty(grid, capacity)\n    local function\
    \ empty_row(row, capacity)\n      local function empty_cell(cell, capacity)\n\
    \        if cell == 0 then\n          return 0\n        else\n          local\
    \ empty = math.min(capacity, cell)\n          return empty\n        end\n    \
    \  end\n      local emptied = 0\n      for i = #row, 1, -1 do\n        emptied\
    \ = emptied + empty_cell(row[i], capacity)\n      end\n      return emptied\n\
    \    end\n    local emptied = 0\n    for i = #grid, 1, -1 do\n      emptied =\
    \ emptied + empty_row(grid[i], capacity)\n    end\n    return emptied\n  end\n\
    \  local function fill_and_empty(grid, capacity)\n    local filled = fill(grid,\
    \ capacity)\n    local emptied = empty(grid, capacity)\n    return filled, emptied\n\
    \  end\n  local function fill_and_empty_until_empty(grid, capacity)\n    local\
    \ filled = 0\n    local emptied = 0\n    local filled_last_time = 0\n    local\
    \ emptied_last_time = 0\n    repeat\n      filled_last_time, emptied_last_time\
    \ = fill_and_empty(grid, capacity)\n      filled = filled + filled_last_time\n\
    \      emptied = emptied + emptied_last_time\n    until emptied_last_time == 0\n\
    \    return filled, emptied\n  end\n  local filled, emptied = fill_and_empty_until_empty(grid,\
    \ capacity)\n  return filled\nend", "    local function fill(grid, capacity)\n\
    \        local function get_max_row(grid)\n            local max_row = {}\n  \
    \          local max_sum = 0\n            for i = 1, #grid do\n              \
    \  local sum = 0\n                for j = 1, #grid[i] do\n                   \
    \ sum = sum + grid[i][j]\n                end\n                if sum > max_sum\
    \ then\n                    max_row = grid[i]\n                    max_sum = sum\n\
    \                end\n            end\n            return max_row\n        end\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 1 then\n                    return capacity\n\
    \                else\n                    return 0\n                end\n   \
    \         end\n            local filled_row = {}\n            for i = 1, #row\
    \ do\n                filled_row[i] = fill_cell(row[i], capacity)\n          \
    \  end\n            return filled_row\n        end\n        local function get_filled_grid(grid,\
    \ capacity)\n            local filled_grid = {}\n            for i = 1, #grid\
    \ do\n                filled_grid[i] = fill_row(grid[i], capacity)\n         \
    \   end\n            return filled_grid\n        end\n        local function get_filled_row(grid,\
    \ capacity)\n            local filled_grid = get_filled_grid(grid, capacity)\n\
    \            return get_max_row(filled_grid)\n        end\n        local function\
    \ get_filled_grid_sum(grid, capacity)\n            local filled_grid = get_filled_grid(grid,\
    \ capacity)\n            local sum = 0\n            for i = 1, #filled_grid do\n\
    \                for j = 1, #filled_grid[i] do\n                    sum = sum\
    \ + filled_grid[i][j]\n                end\n            end\n            return\
    \ sum\n        end\n        local function get_filled_row_sum(grid, capacity)\n\
    \            local filled_row = get_filled_row(grid, capacity)\n            local\
    \ sum = 0\n            for i = 1, #filled_row do\n                sum = sum +\
    \ filled_row[i]\n            end\n            return sum\n        end\n      \
    \  local function get_filled_grid_max_sum(grid,", "  local function fill(grid,\
    \ capacity)\n    local function fill_row(row, capacity)\n      local function\
    \ fill_cell(cell, capacity)\n        if cell == 1 then\n          return capacity\
    \ - 1\n        else\n          return capacity\n        end\n      end\n     \
    \ local function fill_row_helper(row, capacity, index)\n        if index > #row\
    \ then\n          return capacity\n        else\n          return fill_row_helper(row,\
    \ fill_cell(row[index], capacity), index + 1)\n        end\n      end\n      return\
    \ fill_row_helper(row, capacity, 1)\n    end\n    local function fill_grid_helper(grid,\
    \ capacity, index)\n      if index > #grid then\n        return capacity\n   \
    \   else\n        return fill_grid_helper(grid, fill_row(grid[index], capacity),\
    \ index + 1)\n      end\n    end\n    return fill_grid_helper(grid, capacity,\
    \ 1)\n  end\n  local function fill_helper(grid, capacity, count)\n    local new_capacity\
    \ = fill(grid, capacity)\n    if new_capacity == capacity then\n      return count\n\
    \    else\n      return fill_helper(grid, new_capacity, count + 1)\n    end\n\
    \  end\n  return fill_helper(grid, capacity, 0)\nend", "    local rows = #grid\n\
    \    local cols = #grid[1]\n    local count = 0\n    for i = 1, rows do\n    \
    \    local row = grid[i]\n        for j = 1, cols do\n            local cell =\
    \ row[j]\n            if cell == 1 then\n                count = count + 1\n \
    \               local k = i\n                while k <= rows and capacity > 0\
    \ do\n                    grid[k][j] = 0\n                    capacity = capacity\
    \ - 1\n                    k = k + 1\n                end\n            end\n \
    \       end\n    end\n    return count\nend", "    local function get_max_fill(grid,\
    \ capacity)\n        local max_fill = 0\n        for i = 1, #grid do\n       \
    \     local row = grid[i]\n            local fill = 0\n            for j = 1,\
    \ #row do\n                if row[j] == 1 then\n                    fill = fill\
    \ + 1\n                end\n            end\n            if fill > max_fill then\n\
    \                max_fill = fill\n            end\n        end\n        return\
    \ max_fill\n    end\n    local function fill_row(grid, capacity, row_index)\n\
    \        local row = grid[row_index]\n        local fill = 0\n        for j =\
    \ 1, #row do\n            if row[j] == 1 then\n                fill = fill + 1\n\
    \            end\n        end\n        if fill > capacity then\n            for\
    \ j = 1, #row do\n                if row[j] == 1 then\n                    row[j]\
    \ = 0\n                end\n            end\n            return capacity\n   \
    \     else\n            for j = 1, #row do\n                if row[j] == 1 then\n\
    \                    row[j] = 0\n                end\n            end\n      \
    \      return fill\n        end\n    end\n    local function fill_grid(grid, capacity)\n\
    \        local fill_count = 0\n        local max_fill = get_max_fill(grid, capacity)\n\
    \        while max_fill > 0 do\n            for i = 1, #grid do\n            \
    \    local row = grid[i]\n                local fill = 0\n                for\
    \ j = 1, #row do\n                    if row[j] == 1 then\n                  \
    \      fill = fill + 1\n                    end\n                end\n       \
    \         if fill > 0 then\n                    local fill_amount = fill_row(grid,\
    \ capacity, i)\n                    fill_count = fill_count + fill_amount\n  \
    \                  max_fill = get_max_fill(grid, capacity)\n                 \
    \   break\n                end\n            end\n        end\n        return fill_count\n\
    \    end\n    return fill_grid(grid, capacity)\nend", "  local function fill(grid,\
    \ capacity)\n    local filled = 0\n    for i = 1, #grid do\n      local row =\
    \ grid[i]\n      for j = 1, #row do\n        local cell = row[j]\n        if cell\
    \ == 1 then\n          filled = filled + 1\n          row[j] = 0\n        end\n\
    \      end\n    end\n    return filled\n  end\n  local function drain(grid, capacity)\n\
    \    local drained = 0\n    for i = #grid, 1, -1 do\n      local row = grid[i]\n\
    \      for j = #row, 1, -1 do\n        local cell = row[j]\n        if cell ==\
    \ 0 then\n          drained = drained + 1\n          row[j] = 1\n        end\n\
    \      end\n    end\n    return drained\n  end\n  local function count(grid)\n\
    \    local count = 0\n    for i = 1, #grid do\n      local row = grid[i]\n   \
    \   for j = 1, #row do\n        local cell = row[j]\n        if cell == 1 then\n\
    \          count = count + 1\n        end\n      end\n    end\n    return count\n\
    \  end\n  local function fill_and_drain(grid, capacity)\n    local filled = fill(grid,\
    \ capacity)\n    local drained = drain(grid, capacity)\n    return filled, drained\n\
    \  end\n  local function fill_and_drain_until_empty(grid, capacity)\n    local\
    \ filled = 0\n    local drained = 0\n    local count = count(grid)\n    while\
    \ count > 0 do\n      local f, d = fill_and_drain(grid, capacity)\n      filled\
    \ = filled + f\n      drained = drained + d\n      count = count(grid)\n    end\n\
    \    return filled, drained\n  end\n  local filled, drained = fill_and_drain_until_empty(grid,\
    \ capacity)\n  return filled + drained\nend", "  local n = #grid\n  local m =\
    \ #grid[1]\n  local max_height = 0\n  for i=1,n do\n    for j=1,m do\n      if\
    \ grid[i][j] == 1 then\n        max_height = max_height + 1\n      end\n    end\n\
    \  end\n  local max_fill = 0\n  for i=1,n do\n    for j=1,m do\n      if grid[i][j]\
    \ == 1 then\n        max_fill = max_fill + 1\n      end\n    end\n  end\n  local\
    \ min_fill = 0\n  for i=1,n do\n    for j=1,m do\n      if grid[i][j] == 1 then\n\
    \        min_fill = min_fill + 1\n      end\n    end\n  end\n  local function\
    \ is_valid(fill)\n    local buckets = {}\n    for i=1,n do\n      buckets[i] =\
    \ 0\n    end\n    for i=1,n do\n      for j=1,m do\n        if grid[i][j] == 1\
    \ then\n          buckets[i] = buckets[i] + 1\n        end\n      end\n    end\n\
    \    for i=1,n do\n      if buckets[i] > fill then\n        return false\n   \
    \   end\n    end\n    return true\n  end\n  local function binary_search(min_fill,\
    \ max_fill)\n    if min_fill == max_fill then\n      return min_fill\n    end\n\
    \    local mid = math.floor((min_fill + max_fill) / 2)\n    if is_valid(mid) then\n\
    \      return binary_search(min_fill, mid)\n    else\n      return binary_search(mid\
    \ + 1, max_fill)\n    end\n  end\n  return binary_search(min_fill, max_fill)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 1 then\n                    return capacity - 1\n          \
    \      else\n                    return capacity\n                end\n      \
    \      end\n            local filled = 0\n            for i, cell in ipairs(row)\
    \ do\n                capacity = fill_cell(cell, capacity)\n                if\
    \ capacity == 0 then\n                    filled = filled + 1\n              \
    \      capacity = capacity + 1\n                end\n            end\n       \
    \     return filled\n        end\n        local filled = 0\n        for i, row\
    \ in ipairs(grid) do\n            filled = filled + fill_row(row, capacity)\n\
    \        end\n        return filled\n    end\n    local filled = 0\n    for i,\
    \ row in ipairs(grid) do\n        filled = filled + fill(row, capacity)\n    end\n\
    \    return filled\nend", "    local rows = #grid\n    local cols = #grid[1]\n\
    \    local max_water = 0\n    local water = 0\n    local function max_water_in_row(row)\n\
    \        local max_water_in_row = 0\n        local water_in_row = 0\n        for\
    \ i = 1, cols do\n            if row[i] == 1 then\n                water_in_row\
    \ = water_in_row + 1\n            else\n                if water_in_row > max_water_in_row\
    \ then\n                    max_water_in_row = water_in_row\n                end\n\
    \                water_in_row = 0\n            end\n        end\n        if water_in_row\
    \ > max_water_in_row then\n            max_water_in_row = water_in_row\n     \
    \   end\n        return max_water_in_row\n    end\n    for i = 1, rows do\n  \
    \      local max_water_in_row = max_water_in_row(grid[i])\n        if max_water_in_row\
    \ > max_water then\n            max_water = max_water_in_row\n        end\n  \
    \  end\n    water = max_water * capacity\n    return water\nend", "    -- TODO:\
    \ implement\nend", "  local function fill(grid, capacity)\n    local function\
    \ fill_row(row, capacity)\n      local function fill_cell(cell, capacity)\n  \
    \      if cell == 1 then\n          return capacity\n        else\n          return\
    \ 0\n        end\n      end\n      return map(fill_cell, row, capacity)\n    end\n\
    \    return map(fill_row, grid, capacity)\n  end\n  local function sum_grid(grid)\n\
    \    local function sum_row(row)\n      local function sum_cell(cell)\n      \
    \  return cell\n      end\n      return reduce(sum_cell, row, 0)\n    end\n  \
    \  return reduce(sum_row, grid, 0)\n  end\n  local function sum_rows(grid)\n \
    \   local function sum_row(row)\n      local function sum_cell(cell)\n       \
    \ return cell\n      end\n      return reduce(sum_cell, row, 0)\n    end\n   \
    \ return map(sum_row, grid)\n  end\n  local function sum_cols(grid)\n    local\
    \ function sum_col(col)\n      local function sum_cell(cell)\n        return cell\n\
    \      end\n      return reduce(sum_cell, col, 0)\n    end\n    return map(sum_col,\
    \ transpose(grid))\n  end\n  local function max_row(grid)\n    local function\
    \ max_row(row)\n      local function max_cell(cell)\n        return cell\n   \
    \   end\n      return reduce(max_cell, row, 0)\n    end\n    return reduce(max_row,\
    \ grid, 0)\n  end\n  local function max_col(grid)\n    local function max_col(col)\n\
    \      local function max_cell(cell)\n        return cell\n      end\n      return\
    \ reduce(max_cell, col, 0)\n    end\n    return reduce(max_col, transpose(grid),\
    \ 0)\n  end\n  local function max_fill_row(grid, capacity)\n    local function\
    \ max_fill_cell(cell, capacity)\n      if cell == 1 then\n        return capacity\n\
    \      else\n        return 0\n      end\n    end\n    return map(max_fill_cell,\
    \ grid, capacity)\n  end\n  local function", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_well(well,\
    \ capacity)\n                if well == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_well, row)\n        end\n      \
    \  return map(fill_row, grid)\n    end\n    local function reduce(grid, capacity)\n\
    \        local function reduce_row(row, capacity)\n            local function\
    \ reduce_well(well, capacity)\n                if well > capacity then\n     \
    \               return capacity\n                else\n                    return\
    \ well\n                end\n            end\n            return map(reduce_well,\
    \ row)\n        end\n        return map(reduce_row, grid)\n    end\n    local\
    \ function sum(grid)\n        local function sum_row(row)\n            local function\
    \ sum_well(well)\n                return well\n            end\n            return\
    \ reduce(sum_well, row)\n        end\n        return reduce(sum_row, grid)\n \
    \   end\n    local function fill_and_reduce(grid, capacity)\n        return reduce(fill(grid,\
    \ capacity), capacity)\n    end\n    local function fill_and_reduce_until_empty(grid,\
    \ capacity)\n        local function is_empty(grid)\n            local function\
    \ is_empty_row(row)\n                local function is_empty_well(well)\n    \
    \                return well == 0\n                end\n                return\
    \ all(is_empty_well, row)\n            end\n            return all(is_empty_row,\
    \ grid)\n        end\n        local function fill_and_reduce_until_empty_helper(grid,\
    \ capacity, count)\n            if is_empty(grid) then\n                return\
    \ count\n            else\n                return fill_and_reduce_until_empty_helper(fill_and_reduce(grid,\
    \ capacity), capacity, count + 1)\n            end\n        end\n        return\
    \ fill_and_reduce_until_empty_helper(grid, capacity, 0)\n    end\n    return sum(fill_and_reduce_until_empty(grid,\
    \ capacity))\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(fill_cell, row, capacity)\n        end\n   \
    \     return map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function max_fill_iter(grid, capacity, acc)\n    \
    \    if sum_grid(grid) == 0 then\n            return acc\n        else\n     \
    \       return max_fill_iter(empty(grid), capacity, acc + 1)\n        end\n  \
    \  end\n    return max_fill_iter(fill(grid, capacity), capacity, 0)\nend", " \
    \   local function get_max_fill(grid, capacity)\n        local max_fill = 0\n\
    \        for i = 1, #grid do\n            local row = grid[i]\n            local\
    \ row_fill = 0\n            for j = 1, #row do\n                local cell = row[j]\n\
    \                if cell == 1 then\n                    row_fill = row_fill +\
    \ 1\n                end\n            end\n            if row_fill > max_fill\
    \ then\n                max_fill = row_fill\n            end\n        end\n  \
    \      return max_fill\n    end\n    local max_fill = get_max_fill(grid, capacity)\n\
    \    return max_fill * capacity\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function fill_and_empty(grid, capacity)\n        local\
    \ filled = fill(grid, capacity)\n        local emptied = empty(filled)\n     \
    \   return filled, emptied\n    end\n    local function fill_and_empty_n(grid,\
    \ capacity, n)\n        local function fill_and_empty_n_iter(grid, capacity, n,\
    \ acc)\n            if n == 0 then\n                return acc\n            else\n\
    \                local filled, emptied = fill_and_empty(grid, capacity)\n    \
    \            return fill_and_empty_n_iter(emptied, capacity, n - 1, acc + sum_grid(filled))\n\
    \            end\n        end\n        return fill_and_empty_n_iter(grid, capacity,\
    \ n, 0)\n    end\n    local function max_fill_iter(grid, capacity, acc)\n    \
    \    local filled, emptied = fill_and_empty(grid, capacity)\n        local sum\
    \ = sum_grid(filled)\n        if sum == 0 then\n            return acc\n     \
    \   else\n            return max_fill_iter(emptied, capacity, acc + sum)\n   \
    \     end\n    end\n    return max_fill_iter(grid, capacity, 0)\nend", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n\
    \        local function empty_row(row)\n            local function empty_cell(cell)\n\
    \                return 0\n            end\n            return map(empty_cell,\
    \ row)\n        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ is_empty(grid)\n        local function is_empty_row(row)\n            local\
    \ function is_empty_cell(cell)\n                return cell == 0\n           \
    \ end\n            return all(is_empty_cell, row)\n        end\n        return\
    \ all(is_empty_row, grid)\n    end\n    local function fill_and_empty(grid, capacity)\n\
    \        local filled = fill(grid, capacity)\n        return sum_grid(filled),\
    \ empty(filled)\n    end\n    local function fill_and_empty_until_empty(grid,\
    \ capacity)\n        local function fill_and_empty_until_empty_iter(grid, capacity,\
    \ acc)\n            if is_empty(grid) then\n                return acc\n     \
    \       else\n                local filled, empty = fill_and_empty(grid, capacity)\n\
    \                return fill_and_empty_until_empty_iter(empty, capacity, acc +\
    \ filled)\n            end\n        end\n        return fill_and_empty_until_empty_iter(grid,\
    \ capacity, 0)\n    end\n    return fill_and_empty_until_empty(grid, capacity)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function sum_grid_rows(grid)\n        local function sum_row(row)\n  \
    \          local function sum_cell(cell)\n                return cell\n      \
    \      end\n            return reduce(sum_cell, row, 0)\n        end\n       \
    \ return map(sum_row, grid)\n    end\n    local function sum_grid_cols(grid)\n\
    \        local function sum_col(col)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ col, 0)\n        end\n        return map(sum_col, zip(grid))\n    end\n    local\
    \ function max_grid_row(grid)\n        local function max_row(row)\n         \
    \   local function max_cell(cell)\n                return cell\n            end\n\
    \            return reduce(max_cell, row, 0)\n        end\n        return reduce(max_row,\
    \ grid, 0)\n    end\n    local function max_grid_col(grid)\n        local function\
    \ max_col(col)\n            local function max_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(max_cell, col, 0)\n       \
    \ end\n        return reduce(max_col, zip(grid), 0)\n    end\n    local function\
    \ fill_grid_rows(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(fill", "    local function fill_bucket(row, col)\n        local water =\
    \ 0\n        for i = 1, row do\n            water = water + grid[i][col]\n   \
    \     end\n        return water\n    end", "  local function fill(grid, capacity)\n\
    \    local function fill_row(row, capacity)\n      local function fill_cell(cell,\
    \ capacity)\n        if cell == 0 then\n          return 0\n        else\n   \
    \       return capacity\n        end\n      end\n      return map(fill_cell, row,\
    \ capacity)\n    end\n    return map(fill_row, grid, capacity)\n  end\n  local\
    \ function sum_rows(grid)\n    local function sum_row(row)\n      return reduce(function(a,\
    \ b) return a + b end, row, 0)\n    end\n    return map(sum_row, grid)\n  end\n\
    \  local function sum_grid(grid)\n    return reduce(function(a, b) return a +\
    \ b end, grid, 0)\n  end\n  return sum_grid(sum_rows(fill(grid, capacity)))\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local filled = 0\n            for i = 1, #row do\n  \
    \              if row[i] == 1 then\n                    filled = filled + 1\n\
    \                    row[i] = 0\n                end\n            end\n      \
    \      return filled\n        end\n        local filled = 0\n        for i = 1,\
    \ #grid do\n            filled = filled + fill_row(grid[i], capacity)\n      \
    \  end\n        return filled\n    end\n    local filled = 0\n    while true do\n\
    \        local new_filled = fill(grid, capacity)\n        if new_filled == 0 then\n\
    \            break\n        end\n        filled = filled + new_filled\n    end\n\
    \    return filled\nend", "    local function fill(row, col)\n        if row <\
    \ 1 or row > #grid or col < 1 or col > #grid[1] then\n            return 0\n \
    \       end\n        if grid[row][col] == 0 then\n            return 0\n     \
    \   end\n        grid[row][col] = 0\n        return 1 + fill(row + 1, col) + fill(row\
    \ - 1, col) + fill(row, col + 1) + fill(row, col - 1)\n    end\n    local function\
    \ fill_row(row)\n        local count = 0\n        for col = 1, #grid[1] do\n \
    \           if grid[row][col] == 1 then\n                count = count + 1\n \
    \           end\n        end\n        return count\n    end\n    local function\
    \ fill_col(col)\n        local count = 0\n        for row = 1, #grid do\n    \
    \        if grid[row][col] == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\n    local function fill_grid()\n\
    \        local count = 0\n        for row = 1, #grid do\n            for col =\
    \ 1, #grid[1] do\n                if grid[row][col] == 1 then\n              \
    \      count = count + fill(row, col)\n                end\n            end\n\
    \        end\n        return count\n    end\n    local function fill_row_col()\n\
    \        local count = 0\n        for row = 1, #grid do\n            count = count\
    \ + fill_row(row)\n        end\n        for col = 1, #grid[1] do\n           \
    \ count = count + fill_col(col)\n        end\n        return count\n    end\n\
    \    local function fill_row_col_grid()\n        local count = 0\n        for\
    \ row = 1, #grid do\n            count = count + fill_row(row)\n        end\n\
    \        for col = 1, #grid[1] do\n            count = count + fill_col(col)\n\
    \        end\n        count = count + fill_grid()\n        return count\n    end\n\
    \    local function fill_row_grid()\n        local count = 0\n        for row\
    \ = 1, #grid do\n            count = count + fill_row(row)\n", "  local function\
    \ fill_bucket(row, col)\n    if grid[row][col] == 1 then\n      grid[row][col]\
    \ = 0\n      return 1\n    end\n    return 0\n  end\n  local function fill_row(row)\n\
    \    local filled = 0\n    for col = 1, #grid[row] do\n      filled = filled +\
    \ fill_bucket(row, col)\n    end\n    return filled\n  end\n  local function fill_grid()\n\
    \    local filled = 0\n    for row = 1, #grid do\n      filled = filled + fill_row(row)\n\
    \    end\n    return filled\n  end\n  local function fill_wells()\n    local filled\
    \ = 0\n    while fill_grid() > 0 do\n      filled = filled + 1\n    end\n    return\
    \ filled\n  end\n  local function fill_wells_with_capacity()\n    local filled\
    \ = 0\n    for i = 1, capacity do\n      filled = filled + fill_wells()\n    end\n\
    \    return filled\n  end\n  return fill_wells_with_capacity()\nend", "    local\
    \ function get_max_fill(grid, capacity)\n        local max_fill = 0\n        for\
    \ i = 1, #grid do\n            local row = grid[i]\n            local fill = 0\n\
    \            for j = 1, #row do\n                if row[j] == 1 then\n       \
    \             fill = fill + 1\n                end\n            end\n        \
    \    if fill > max_fill then\n                max_fill = fill\n            end\n\
    \        end\n        return max_fill\n    end\n    local max_fill = get_max_fill(grid,\
    \ capacity)\n    local drops = 0\n    while max_fill > 0 do\n        for i = 1,\
    \ #grid do\n            local row = grid[i]\n            for j = 1, #row do\n\
    \                if row[j] == 1 then\n                    row[j] = 0\n       \
    \             max_fill = max_fill - 1\n                end\n            end\n\
    \        end\n        drops = drops + 1\n    end\n    return drops\nend", "  \
    \  local function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local i = 1\n            local n = #row\n            local count\
    \ = 0\n            while i <= n do\n                if row[i] == 1 then\n    \
    \                local j = i + 1\n                    local c = capacity\n   \
    \                 while j <= n and c > 0 do\n                        if row[j]\
    \ == 1 then\n                            row[j] = 0\n                        \
    \    c = c - 1\n                        end\n                        j = j + 1\n\
    \                    end\n                    count = count + 1\n            \
    \    end\n                i = i + 1\n            end\n            return count\n\
    \        end\n        local count = 0\n        for _, row in ipairs(grid) do\n\
    \            count = count + fill_row(row, capacity)\n        end\n        return\
    \ count\n    end\n    local count = 0\n    while true do\n        local c = fill(grid,\
    \ capacity)\n        if c == 0 then\n            break\n        end\n        count\
    \ = count + c\n    end\n    return count\nend", "  local rows = #grid\n  local\
    \ cols = #grid[1]\n  local max_water = 0\n  local max_water_count = 0\n  for i\
    \ = 1, rows do\n    for j = 1, cols do\n      if grid[i][j] == 1 then\n      \
    \  max_water = max_water + capacity\n      end\n    end\n  end\n  local function\
    \ get_water(i, j)\n    if i < 1 or i > rows or j < 1 or j > cols then\n      return\
    \ 0\n    end\n    if grid[i][j] == 1 then\n      grid[i][j] = 0\n      return\
    \ capacity\n    end\n    return 0\n  end\n  local function get_water_count(i,\
    \ j)\n    local water = get_water(i, j)\n    if water > 0 then\n      max_water_count\
    \ = max_water_count + 1\n      water = water + get_water(i - 1, j)\n      water\
    \ = water + get_water(i + 1, j)\n      water = water + get_water(i, j - 1)\n \
    \     water = water + get_water(i, j + 1)\n      if water > max_water then\n \
    \       max_water = water\n      end\n    end\n  end\n  for i = 1, rows do\n \
    \   for j = 1, cols do\n      get_water_count(i, j)\n    end\n  end\n  return\
    \ max_water_count\nend", "    local rows = #grid\n    local cols = #grid[1]\n\
    \    local max_height = 0\n    for i = 1, rows do\n        for j = 1, cols do\n\
    \            if grid[i][j] == 1 then\n                max_height = max_height\
    \ + 1\n            end\n        end\n    end\n    local function fill(height)\n\
    \        local count = 0\n        for i = 1, rows do\n            for j = 1, cols\
    \ do\n                if grid[i][j] == 1 then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n        return count\n\
    \    end\n    local function is_filled(height)\n        for i = 1, rows do\n \
    \           for j = 1, cols do\n                if grid[i][j] == 1 then\n    \
    \                return false\n                end\n            end\n        end\n\
    \        return true\n    end\n    local function lower(height)\n        for i\
    \ = 1, rows do\n            for j = 1, cols do\n                if grid[i][j]\
    \ == 1 then\n                    grid[i][j] = 0\n                end\n       \
    \     end\n        end\n    end\n    local function raise(height)\n        for\
    \ i = 1, rows do\n            for j = 1, cols do\n                if grid[i][j]\
    \ == 0 then\n                    grid[i][j] = 1\n                end\n       \
    \     end\n        end\n    end\n    local function binary_search(low, high)\n\
    \        if low == high then\n            return low\n        end\n        local\
    \ mid = math.floor((low + high) / 2)\n        if is_filled(mid) then\n       \
    \     return binary_search(low, mid)\n        else\n            return binary_search(mid\
    \ + 1, high)\n        end\n    end\n    return binary_search(0, max_height)\n\
    end", "  local function fill_bucket(row, col)\n    local bucket = capacity\n \
    \   local i = row\n    while i > 0 and bucket > 0 do\n      if grid[i][col] ==\
    \ 1 then\n        grid[i][col] = 0\n        bucket = bucket - 1\n      end\n \
    \     i = i - 1\n    end\n  end\n  local function fill_wells(row)\n    for col\
    \ = 1, #grid[row] do\n      if grid[row][col] == 1 then\n        fill_bucket(row,\
    \ col)\n      end\n    end\n  end\n  local function count_fill()\n    local count\
    \ = 0\n    for row = 1, #grid do\n      for col = 1, #grid[row] do\n        if\
    \ grid[row][col] == 1 then\n          count = count + 1\n        end\n      end\n\
    \    end\n    return count\n  end\n  local function fill_all()\n    local count\
    \ = 0\n    while count_fill() > 0 do\n      for row = 1, #grid do\n        fill_wells(row)\n\
    \      end\n      count = count + 1\n    end\n    return count\n  end\n  return\
    \ fill_all()\nend", "    local max_fill = 0\n    local row_count = #grid\n   \
    \ local col_count = #grid[1]\n    local row_fill = {}\n    local col_fill = {}\n\
    \    for i = 1, row_count do\n        row_fill[i] = 0\n        for j = 1, col_count\
    \ do\n            if grid[i][j] == 1 then\n                row_fill[i] = row_fill[i]\
    \ + 1\n            end\n        end\n    end\n    for j = 1, col_count do\n  \
    \      col_fill[j] = 0\n        for i = 1, row_count do\n            if grid[i][j]\
    \ == 1 then\n                col_fill[j] = col_fill[j] + 1\n            end\n\
    \        end\n    end\n    for i = 1, row_count do\n        max_fill = max_fill\
    \ + math.ceil(row_fill[i] / capacity)\n    end\n    for j = 1, col_count do\n\
    \        max_fill = max_fill + math.ceil(col_fill[j] / capacity)\n    end\n  \
    \  return max_fill\nend", "  local function fill_well(row, col)\n    local water\
    \ = 0\n    for i = 1, capacity do\n      if grid[row][col] == 1 then\n       \
    \ water = water + 1\n        grid[row][col] = 0\n      end\n      row = row +\
    \ 1\n    end\n    return water\n  end\n  local function fill_wells(col)\n    local\
    \ water = 0\n    for row = 1, #grid do\n      water = water + fill_well(row, col)\n\
    \    end\n    return water\n  end\n  local water = 0\n  for col = 1, #grid[1]\
    \ do\n    water = water + fill_wells(col)\n  end\n  return water\nend", "    local\
    \ function fill(row, col)\n        if row == #grid or grid[row][col] == 0 then\n\
    \            return 0\n        end\n        grid[row][col] = 0\n        return\
    \ 1 + fill(row + 1, col)\n    end\n    local function fill_row(row)\n        local\
    \ count = 0\n        for i = 1, #grid[row] do\n            if grid[row][i] ==\
    \ 1 then\n                count = count + fill(row, i)\n            end\n    \
    \    end\n        return count\n    end\n    local count = 0\n    for i = 1, #grid\
    \ do\n        count = count + fill_row(i)\n    end\n    return count\nend", " \
    \   local function fill_bucket(bucket, row)\n        local count = 0\n       \
    \ for i = 1, #row do\n            if row[i] == 1 then\n                row[i]\
    \ = 0\n                count = count + 1\n            end\n        end\n     \
    \   return count\n    end", "  local function fill(row, col)\n    if row < 1 or\
    \ row > #grid or col < 1 or col > #grid[1] then\n      return 0\n    end\n   \
    \ if grid[row][col] == 0 then\n      return 0\n    end\n    grid[row][col] = 0\n\
    \    return 1 + fill(row - 1, col) + fill(row + 1, col) + fill(row, col - 1) +\
    \ fill(row, col + 1)\n  end\n  local function count_fill(row, col)\n    if row\
    \ < 1 or row > #grid or col < 1 or col > #grid[1] then\n      return 0\n    end\n\
    \    if grid[row][col] == 0 then\n      return 0\n    end\n    return 1 + count_fill(row\
    \ - 1, col) + count_fill(row + 1, col) + count_fill(row, col - 1) + count_fill(row,\
    \ col + 1)\n  end\n  local function fill_all(row, col)\n    local count = count_fill(row,\
    \ col)\n    if count > capacity then\n      fill(row, col)\n      return 1 + fill_all(row\
    \ - 1, col) + fill_all(row + 1, col) + fill_all(row, col - 1) + fill_all(row,\
    \ col + 1)\n    end\n    return 0\n  end\n  local function find_first_non_empty()\n\
    \    for row = 1, #grid do\n      for col = 1, #grid[1] do\n        if grid[row][col]\
    \ == 1 then\n          return row, col\n        end\n      end\n    end\n    return\
    \ nil\n  end\n  local row, col = find_first_non_empty()\n  if row == nil then\n\
    \    return 0\n  end\n  return fill_all(row, col)\nend", "  local function fill(grid,\
    \ capacity)\n    local function fill_row(row, capacity)\n      local count = 0\n\
    \      for i = 1, #row do\n        if row[i] == 1 then\n          row[i] = 0\n\
    \          count = count + 1\n        end\n      end\n      return count\n   \
    \ end\n    local count = 0\n    for i = 1, #grid do\n      count = count + fill_row(grid[i],\
    \ capacity)\n    end\n    return count\n  end\n  local count = 0\n  while fill(grid,\
    \ capacity) > 0 do\n    count = count + 1\n  end\n  return count\nend", "    local\
    \ function fill(i, j)\n        if i >= #grid or j >= #grid[1] then\n         \
    \   return 0\n        end\n        local count = 0\n        if grid[i][j] == 1\
    \ then\n            grid[i][j] = 0\n            count = 1\n        end\n     \
    \   return count + fill(i, j + 1) + fill(i + 1, j)\n    end\n    local count =\
    \ 0\n    for i = 1, #grid do\n        for j = 1, #grid[1] do\n            count\
    \ = count + fill(i, j)\n        end\n    end\n    return math.ceil(count / capacity)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return capacity\n              \
    \  else\n                    return 0\n                end\n            end\n\
    \            return map(row, function(cell) return fill_cell(cell, capacity) end)\n\
    \        end\n        return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n    end\n    local function count_filled(grid)\n        local function\
    \ count_filled_row(row)\n            local function count_filled_cell(cell)\n\
    \                if cell > 0 then\n                    return 1\n            \
    \    else\n                    return 0\n                end\n            end\n\
    \            return reduce(row, function(acc, cell) return acc + count_filled_cell(cell)\
    \ end, 0)\n        end\n        return reduce(grid, function(acc, row) return\
    \ acc + count_filled_row(row) end, 0)\n    end\n    local function count_filled_times(grid,\
    \ capacity)\n        local filled_times = 0\n        local filled_grid = grid\n\
    \        while count_filled(filled_grid) > 0 do\n            filled_times = filled_times\
    \ + 1\n            filled_grid = fill(filled_grid, capacity)\n        end\n  \
    \      return filled_times\n    end\n    return count_filled_times(grid, capacity)\n\
    end", "    local rows = #grid\n    local cols = #grid[1]\n    local total = 0\n\
    \    local max_height = 0\n    for i = 1, rows do\n        for j = 1, cols do\n\
    \            if grid[i][j] == 1 then\n                total = total + 1\n    \
    \        end\n            max_height = math.max(max_height, i)\n        end\n\
    \    end\n    local function fill(grid, capacity, height)\n        if height >\
    \ max_height then\n            return 0\n        end\n        local rows = #grid\n\
    \        local cols = #grid[1]\n        local filled = 0\n        for i = 1, rows\
    \ do\n            for j = 1, cols do\n                if grid[i][j] == 1 then\n\
    \                    filled = filled + 1\n                end\n            end\n\
    \        end\n        if filled == 0 then\n            return 0\n        end\n\
    \        local count = 0\n        for i = 1, rows do\n            for j = 1, cols\
    \ do\n                if grid[i][j] == 1 then\n                    local water\
    \ = math.min(capacity, height - i + 1)\n                    grid[i][j] = water\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n        for i = 1, rows do\n            for j = 1, cols do\n   \
    \             if grid[i][j] > 0 then\n                    grid[i][j] = grid[i][j]\
    \ - 1\n                end\n            end\n        end\n        return count\
    \ + fill(grid, capacity, height + 1)\n    end\n    return fill(grid, capacity,\
    \ 1)\nend", "    local function fill(grid, capacity)\n        local max = 0\n\
    \        for i = 1, #grid do\n            local row = grid[i]\n            local\
    \ count = 0\n            for j = 1, #row do\n                if row[j] == 1 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \            if count > max then\n                max = count\n            end\n\
    \        end\n        return math.ceil(max / capacity)\n    end\n    return fill(grid,\
    \ capacity)\nend", "  local function fill(grid, capacity)\n    local function\
    \ fill_row(row, capacity)\n      local function fill_well(well, capacity)\n  \
    \      if well == 1 then\n          return capacity\n        else\n          return\
    \ 0\n        end\n      end\n      local filled = 0\n      for i, well in ipairs(row)\
    \ do\n        filled = filled + fill_well(well, capacity)\n      end\n      return\
    \ filled\n    end\n    local filled = 0\n    for i, row in ipairs(grid) do\n \
    \     filled = filled + fill_row(row, capacity)\n    end\n    return filled\n\
    \  end\n  local function empty(grid, capacity)\n    local function empty_row(row,\
    \ capacity)\n      local function empty_well(well, capacity)\n        if well\
    \ == 1 then\n          return 1\n        else\n          return 0\n        end\n\
    \      end\n      local emptied = 0\n      for i, well in ipairs(row) do\n   \
    \     emptied = emptied + empty_well(well, capacity)\n      end\n      return\
    \ emptied\n    end\n    local emptied = 0\n    for i, row in ipairs(grid) do\n\
    \      emptied = emptied + empty_row(row, capacity)\n    end\n    return emptied\n\
    \  end\n  local filled = fill(grid, capacity)\n  local emptied = empty(grid, capacity)\n\
    \  return filled + emptied\nend", "  local function fill(grid, capacity)\n   \
    \ local function fill_row(row, capacity)\n      local function fill_cell(cell,\
    \ capacity)\n        if cell == 0 then\n          return 0\n        else\n   \
    \       return capacity\n        end\n      end\n      return map(row, function(cell)\
    \ return fill_cell(cell, capacity) end)\n    end\n    return map(grid, function(row)\
    \ return fill_row(row, capacity) end)\n  end\n  local function sum_grid(grid)\n\
    \    local function sum_row(row)\n      local function sum_cell(cell)\n      \
    \  return cell\n      end\n      return reduce(row, function(a, b) return a +\
    \ b end, 0)\n    end\n    return reduce(grid, function(a, b) return a + b end,\
    \ 0)\n  end\n  local function empty(grid)\n    local function empty_row(row)\n\
    \      local function empty_cell(cell)\n        return 0\n      end\n      return\
    \ map(row, function(cell) return empty_cell(cell) end)\n    end\n    return map(grid,\
    \ function(row) return empty_row(row) end)\n  end\n  local function fill_and_empty(grid,\
    \ capacity)\n    local filled = fill(grid, capacity)\n    local emptied = empty(filled)\n\
    \    return emptied\n  end\n  local function fill_and_empty_n(grid, capacity,\
    \ n)\n    local function fill_and_empty_n_iter(grid, capacity, n)\n      if n\
    \ == 0 then\n        return grid\n      else\n        return fill_and_empty_n_iter(fill_and_empty(grid,\
    \ capacity), capacity, n - 1)\n      end\n    end\n    return fill_and_empty_n_iter(grid,\
    \ capacity, n)\n  end\n  local function count_fill_and_empty(grid, capacity)\n\
    \    local function count_fill_and_empty_iter(grid, capacity, n)\n      local\
    \ filled = fill(grid, capacity)\n      local emptied = empty(filled)\n      if\
    \ grid == emptied then\n        return n\n      else\n        return count_fill_and_empty_iter(emptied,\
    \ capacity,", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(fill_cell, row, capacity)\n        end\n   \
    \     return map(fill_row, grid, capacity)\n    end\n    local function count_water(grid)\n\
    \        local function count_row(row)\n            local function count_cell(cell)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return 1\n                end\n            end\n\
    \            return reduce(add, map(count_cell, row))\n        end\n        return\
    \ reduce(add, map(count_row, grid))\n    end\n    local function empty(grid)\n\
    \        local function empty_row(row)\n            local function empty_cell(cell)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return 1\n                end\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function is_empty(grid)\n        local function is_row_empty(row)\n\
    \            local function is_cell_empty(cell)\n                if cell == 0\
    \ then\n                    return true\n                else\n              \
    \      return false\n                end\n            end\n            return\
    \ reduce(and, map(is_cell_empty, row))\n        end\n        return reduce(and,\
    \ map(is_row_empty, grid))\n    end\n    local function max_fill_rec(grid, capacity,\
    \ count)\n        if is_empty(grid) then\n            return count\n        else\n\
    \            return max_fill_rec(empty(grid), capacity, count + count_water(fill(grid,\
    \ capacity)))\n        end\n    end\n    return max_fill_rec(grid, capacity, 0)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function max_fill_iter(grid, capacity, count)\n  \
    \      local filled = fill(grid, capacity)\n        local sum = sum_grid(filled)\n\
    \        if sum == 0 then\n            return count\n        else\n          \
    \  return max_fill_iter(empty(filled), capacity, count + 1)\n        end\n   \
    \ end\n    return max_fill_iter(grid, capacity, 0)\nend", "  local function fill(i,\
    \ j)\n    if i < 1 or i > #grid or j < 1 or j > #grid[1] or grid[i][j] == 0 then\n\
    \      return 0\n    end\n    grid[i][j] = 0\n    return 1 + fill(i - 1, j) +\
    \ fill(i + 1, j) + fill(i, j - 1) + fill(i, j + 1)\n  end\n  local function empty(i,\
    \ j)\n    if i < 1 or i > #grid or j < 1 or j > #grid[1] or grid[i][j] == 1 then\n\
    \      return 0\n    end\n    grid[i][j] = 1\n    return 1 + empty(i - 1, j) +\
    \ empty(i + 1, j) + empty(i, j - 1) + empty(i, j + 1)\n  end\n  local function\
    \ fill_all()\n    local count = 0\n    for i = 1, #grid do\n      for j = 1, #grid[1]\
    \ do\n        count = count + fill(i, j)\n      end\n    end\n    return count\n\
    \  end\n  local function empty_all()\n    local count = 0\n    for i = 1, #grid\
    \ do\n      for j = 1, #grid[1] do\n        count = count + empty(i, j)\n    \
    \  end\n    end\n    return count\n  end\n  local function fill_one()\n    local\
    \ count = 0\n    for i = 1, #grid do\n      for j = 1, #grid[1] do\n        count\
    \ = count + fill(i, j)\n        if count >= capacity then\n          return count\n\
    \        end\n      end\n    end\n    return count\n  end\n  local function empty_one()\n\
    \    local count = 0\n    for i = 1, #grid do\n      for j = 1, #grid[1] do\n\
    \        count = count + empty(i, j)\n        if count >= capacity then\n    \
    \      return count\n        end\n      end\n    end\n    return count\n  end\n\
    \  local count = 0\n  while fill_all() > 0 do\n    count = count + 1\n    if fill_one()",
  "  local function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 1 then\n \
    \         return capacity\n        else\n          return 0\n        end\n   \
    \   end\n      return map(row, function(cell) return fill_cell(cell, capacity)\
    \ end)\n    end\n    return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n  end\n  local function empty(grid, capacity)\n    local function empty_row(row,\
    \ capacity)\n      local function empty_cell(cell, capacity)\n        if cell\
    \ == capacity then\n          return 0\n        else\n          return cell\n\
    \        end\n      end\n      return map(row, function(cell) return empty_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return empty_row(row,\
    \ capacity) end)\n  end\n  local function count_filled(grid)\n    local function\
    \ count_filled_row(row)\n      local function count_filled_cell(cell)\n      \
    \  if cell > 0 then\n          return 1\n        else\n          return 0\n  \
    \      end\n      end\n      return reduce(row, function(acc, cell) return acc\
    \ + count_filled_cell(cell) end, 0)\n    end\n    return reduce(grid, function(acc,\
    \ row) return acc + count_filled_row(row) end, 0)\n  end\n  local function count_emptied(grid)\n\
    \    local function count_emptied_row(row)\n      local function count_emptied_cell(cell)\n\
    \        if cell == 0 then\n          return 1\n        else\n          return\
    \ 0\n        end\n      end\n      return reduce(row, function(acc, cell) return\
    \ acc + count_emptied_cell(cell) end, 0)\n    end\n    return reduce(grid, function(acc,\
    \ row) return acc + count_emptied_row(row) end, 0)\n  end\n  local function is_empty(grid)\n\
    \    local function is_empty_row(row)\n      local function is_empty_cell(cell)\n\
    \        if cell == 0 then\n          return true\n        else\n          return",
  "    local function fill_well(grid, capacity, row, col)\n        local function\
    \ fill_bucket(grid, capacity, row, col)\n            local function fill_cell(grid,\
    \ capacity, row, col)\n                if row < 1 or row > #grid or col < 1 or\
    \ col > #grid[1] then\n                    return 0\n                end\n   \
    \             if grid[row][col] == 0 then\n                    return 0\n    \
    \            end\n                grid[row][col] = 0\n                return 1\n\
    \            end\n            local water = 0\n            for i = row, 1, -1\
    \ do\n                water = water + fill_cell(grid, capacity, i, col)\n    \
    \            if water == capacity then\n                    return\n         \
    \       end\n            end\n        end\n        for i = 1, capacity do\n  \
    \          fill_bucket(grid, capacity, row, col)\n        end\n    end\n    local\
    \ function is_well_empty(grid, row, col)\n        for i = 1, #grid[1] do\n   \
    \         if grid[row][i] == 1 then\n                return false\n          \
    \  end\n        end\n        return true\n    end\n    local function is_grid_empty(grid)\n\
    \        for i = 1, #grid do\n            for j = 1, #grid[1] do\n           \
    \     if grid[i][j] == 1 then\n                    return false\n            \
    \    end\n            end\n        end\n        return true\n    end\n    local\
    \ function fill_grid(grid, capacity)\n        local count = 0\n        for i =\
    \ 1, #grid do\n            for j = 1, #grid[1] do\n                if grid[i][j]\
    \ == 1 then\n                    fill_well(grid, capacity, i, j)\n           \
    \         count = count + 1\n                end\n            end\n        end\n\
    \        return count\n    end\n    local function fill_grid_optimized(grid, capacity)\n\
    \        local count = 0\n        for i = 1, #grid do\n            if not is_well_empty(grid,\
    \ i, 1) then\n                fill_well(grid, capacity, i, 1)\n              \
    \  count = count + 1\n            end\n        end\n        return count\n   \
    \ end\n    local function fill_grid_optimized_2(grid", "    local function max_fill_rec(grid,\
    \ capacity, row, col, count)\n        if row == #grid then\n            return\
    \ count\n        end\n        local next_row = row + 1\n        local next_col\
    \ = col + 1\n        if next_col > #grid[next_row] then\n            next_col\
    \ = 1\n        end\n        if grid[row][col] == 1 then\n            grid[row][col]\
    \ = 0\n            count = count + 1\n        end\n        if grid[next_row][next_col]\
    \ == 1 then\n            grid[next_row][next_col] = 0\n            count = count\
    \ + 1\n        end\n        return max_fill_rec(grid, capacity, next_row, next_col,\
    \ count)\n    end\n    return max_fill_rec(grid, capacity, 1, 1, 0)\nend", " \
    \   local function fill(grid, capacity)\n        local n = #grid\n        local\
    \ m = #grid[1]\n        local function fill_row(row, capacity)\n            local\
    \ function fill_well(well, capacity)\n                if well == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            local function fill_wells(wells,\
    \ capacity)\n                local function fill_wells_acc(wells, capacity, acc)\n\
    \                    if #wells == 0 then\n                        return acc\n\
    \                    else\n                        local well = table.remove(wells,\
    \ 1)\n                        local filled = fill_well(well, capacity)\n     \
    \                   return fill_wells_acc(wells, capacity, acc + filled)\n   \
    \                 end\n                end\n                return fill_wells_acc(wells,\
    \ capacity, 0)\n            end\n            return fill_wells(row, capacity)\n\
    \        end\n        local function fill_rows(grid, capacity)\n            local\
    \ function fill_rows_acc(grid, capacity, acc)\n                if #grid == 0 then\n\
    \                    return acc\n                else\n                    local\
    \ row = table.remove(grid, 1)\n                    local filled = fill_row(row,\
    \ capacity)\n                    return fill_rows_acc(grid, capacity, acc + filled)\n\
    \                end\n            end\n            return fill_rows_acc(grid,\
    \ capacity, 0)\n        end\n        return fill_rows(grid, capacity)\n    end\n\
    \    local function empty(grid, capacity)\n        local n = #grid\n        local\
    \ m = #grid[1]\n        local function empty_row(row, capacity)\n            local\
    \ function empty_well(well, capacity)\n                if well == 0 then\n   \
    \                 return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            local function empty_wells(wells,\
    \ capacity)\n                local function empty_wells_acc(wells, capacity, acc)\n\
    \                    if #wells == 0 then\n                        return acc\n\
    \                    else\n                        local well = table.remove(wells,\
    \ 1)\n                        local emptied = empty_well(well, capacity)\n   \
    \                     return empty_wells_acc(wells, capacity, acc + emptied)\n\
    \                    end\n                end\n                return", "  local\
    \ function fill(row, col)\n    if row < 1 or row > #grid or col < 1 or col > #grid[1]\
    \ then\n      return 0\n    end\n    if grid[row][col] == 0 then\n      return\
    \ 0\n    end\n    grid[row][col] = 0\n    return 1 + fill(row - 1, col) + fill(row\
    \ + 1, col) + fill(row, col - 1) + fill(row, col + 1)\n  end\n  local count =\
    \ 0\n  for row = 1, #grid do\n    for col = 1, #grid[1] do\n      if grid[row][col]\
    \ == 1 then\n        local filled = fill(row, col)\n        count = count + math.ceil(filled\
    \ / capacity)\n      end\n    end\n  end\n  return count\nend", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 0\
    \ then\n                    return 0\n                else\n                 \
    \   return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function count_water(grid)\n        local function\
    \ count_row(row)\n            local function count_cell(cell)\n              \
    \  if cell > 0 then\n                    return 1\n                else\n    \
    \                return 0\n                end\n            end\n            return\
    \ sum(map(count_cell, row))\n        end\n        return sum(map(count_row, grid))\n\
    \    end\n    local function drain(grid)\n        local function drain_row(row)\n\
    \            local function drain_cell(cell)\n                if cell > 0 then\n\
    \                    return cell - 1\n                else\n                 \
    \   return 0\n                end\n            end\n            return map(drain_cell,\
    \ row)\n        end\n        return map(drain_row, grid)\n    end\n    local function\
    \ is_empty(grid)\n        local function is_empty_row(row)\n            local\
    \ function is_empty_cell(cell)\n                if cell > 0 then\n           \
    \         return false\n                else\n                    return true\n\
    \                end\n            end\n            return all(map(is_empty_cell,\
    \ row))\n        end\n        return all(map(is_empty_row, grid))\n    end\n \
    \   local function count_fills(grid, capacity)\n        local count = 0\n    \
    \    while not is_empty(grid) do\n            grid = fill(grid, capacity)\n  \
    \          grid = drain(grid)\n            count = count + 1\n        end\n  \
    \      return count\n    end\n    return count_fills(grid, capacity)\nend", " \
    \   local max_fill = 0\n    local row_count = #grid\n    local col_count = #grid[1]\n\
    \    local row_fill = {}\n    for row_index = 1, row_count do\n        local row\
    \ = grid[row_index]\n        local row_fill_count = 0\n        for col_index =\
    \ 1, col_count do\n            local cell = row[col_index]\n            if cell\
    \ == 1 then\n                row_fill_count = row_fill_count + 1\n           \
    \ end\n        end\n        row_fill[row_index] = row_fill_count\n    end\n  \
    \  local col_fill = {}\n    for col_index = 1, col_count do\n        local col_fill_count\
    \ = 0\n        for row_index = 1, row_count do\n            local cell = grid[row_index][col_index]\n\
    \            if cell == 1 then\n                col_fill_count = col_fill_count\
    \ + 1\n            end\n        end\n        col_fill[col_index] = col_fill_count\n\
    \    end\n    for row_index = 1, row_count do\n        local row_fill_count =\
    \ row_fill[row_index]\n        if row_fill_count > 0 then\n            local row_fill_count_per_bucket\
    \ = math.ceil(row_fill_count / capacity)\n            max_fill = max_fill + row_fill_count_per_bucket\n\
    \        end\n    end\n    for col_index = 1, col_count do\n        local col_fill_count\
    \ = col_fill[col_index]\n        if col_fill_count > 0 then\n            local\
    \ col_fill_count_per_bucket = math.ceil(col_fill_count / capacity)\n         \
    \   max_fill = max_fill + col_fill_count_per_bucket\n        end\n    end\n  \
    \  return max_fill\nend", "    local rows = #grid\n    local cols = #grid[1]\n\
    \    local result = 0\n    for i = 1, rows do\n        for j = 1, cols do\n  \
    \          if grid[i][j] == 1 then\n                result = result + capacity\n\
    \            else\n                result = result + 1\n            end\n    \
    \    end\n    end\n    return result\nend", "    local rows = #grid\n    local\
    \ cols = #grid[1]\n    local max_row_sum = 0\n    for i = 1, rows do\n       \
    \ local row_sum = 0\n        for j = 1, cols do\n            row_sum = row_sum\
    \ + grid[i][j]\n        end\n        max_row_sum = math.max(max_row_sum, row_sum)\n\
    \    end\n    return max_row_sum * capacity\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(row, function(cell)\
    \ return fill_cell(cell, capacity) end)\n        end\n        return map(grid,\
    \ function(row) return fill_row(row, capacity) end)\n    end\n    local function\
    \ sum_grid(grid)\n        local function sum_row(row)\n            local function\
    \ sum_cell(cell)\n                return cell\n            end\n            return\
    \ reduce(row, function(acc, cell) return acc + sum_cell(cell) end, 0)\n      \
    \  end\n        return reduce(grid, function(acc, row) return acc + sum_row(row)\
    \ end, 0)\n    end\n    local function max_grid(grid)\n        local function\
    \ max_row(row)\n            local function max_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(row, function(acc, cell) return\
    \ math.max(acc, max_cell(cell)) end, 0)\n        end\n        return reduce(grid,\
    \ function(acc, row) return math.max(acc, max_row(row)) end, 0)\n    end\n   \
    \ local function fill_grid(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(row, function(cell) return fill_cell(cell, capacity) end)\n\
    \        end\n        return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n    end\n    local function fill_grid_with_max(grid, capacity)\n     \
    \   local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid,", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 0\
    \ then\n                    return 0\n                else\n                 \
    \   return capacity\n                end\n            end\n            return\
    \ map(row, function(cell) return fill_cell(cell, capacity) end)\n        end\n\
    \        return map(grid, function(row) return fill_row(row, capacity) end)\n\
    \    end\n    local function max_fill_row(row)\n        local function max_fill_cell(cell)\n\
    \            if cell == 0 then\n                return 0\n            else\n \
    \               return 1\n            end\n        end\n        return sum(map(row,\
    \ function(cell) return max_fill_cell(cell, capacity) end))\n    end\n    local\
    \ function max_fill_grid(grid)\n        return sum(map(grid, function(row) return\
    \ max_fill_row(row) end))\n    end\n    return max_fill_grid(fill(grid, capacity))\n\
    end", "    local function get_max_fill(grid, capacity)\n        local max_fill\
    \ = 0\n        for i = 1, #grid do\n            local row = grid[i]\n        \
    \    local fill = 0\n            for j = 1, #row do\n                local cell\
    \ = row[j]\n                if cell == 1 then\n                    fill = fill\
    \ + 1\n                else\n                    if fill > 0 then\n          \
    \              max_fill = max_fill + 1\n                        fill = 0\n   \
    \                 end\n                end\n            end\n            if fill\
    \ > 0 then\n                max_fill = max_fill + 1\n            end\n       \
    \ end\n        return max_fill\n    end\n    local function get_max_fill_optimized(grid,\
    \ capacity)\n        local max_fill = 0\n        for i = 1, #grid do\n       \
    \     local row = grid[i]\n            local fill = 0\n            for j = 1,\
    \ #row do\n                local cell = row[j]\n                if cell == 1 then\n\
    \                    fill = fill + 1\n                else\n                 \
    \   if fill > 0 then\n                        max_fill = max_fill + 1\n      \
    \                  fill = 0\n                    end\n                end\n  \
    \          end\n            if fill > 0 then\n                max_fill = max_fill\
    \ + 1\n            end\n        end\n        return max_fill\n    end\n    return\
    \ get_max_fill_optimized(grid, capacity)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(fill_cell, row,\
    \ capacity)\n        end\n        return map(fill_row, grid, capacity)\n    end\n\
    \    local function sum_grid(grid)\n        local function sum_row(row)\n    \
    \        local function sum_cell(cell)\n                return cell\n        \
    \    end\n            return reduce(sum_cell, row, 0)\n        end\n        return\
    \ reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           return 0\n            end\n            return map(empty_cell, row)\n\
    \        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ fill_and_empty(grid, capacity)\n        local filled = fill(grid, capacity)\n\
    \        local emptied = empty(filled)\n        return filled, emptied\n    end\n\
    \    local function fill_and_empty_n(grid, capacity, n)\n        local function\
    \ fill_and_empty_n_iter(grid, capacity, n, acc)\n            if n == 0 then\n\
    \                return acc\n            else\n                local filled, emptied\
    \ = fill_and_empty(grid, capacity)\n                return fill_and_empty_n_iter(emptied,\
    \ capacity, n - 1, acc + sum_grid(filled))\n            end\n        end\n   \
    \     return fill_and_empty_n_iter(grid, capacity, n, 0)\n    end\n    local function\
    \ max_fill_iter(grid, capacity, acc)\n        local filled, emptied = fill_and_empty(grid,\
    \ capacity)\n        local filled_sum = sum_grid(filled)\n        if filled_sum\
    \ == 0 then\n            return acc\n        else\n            return max_fill_iter(emptied,\
    \ capacity, acc + filled_sum)\n        end\n    end\n    return max_fill_iter(grid,\
    \ capacity, 0)\nend", "    local function max_fill_rec(grid, capacity, i, j)\n\
    \        if i == #grid then\n            return 0\n        end\n        if j ==\
    \ #grid[i] then\n            return max_fill_rec(grid, capacity, i + 1, 1)\n \
    \       end\n        if grid[i][j] == 0 then\n            return max_fill_rec(grid,\
    \ capacity, i, j + 1)\n        end\n        local res = 0\n        for k = 1,\
    \ capacity do\n            grid[i][j] = grid[i][j] - 1\n            res = res\
    \ + 1\n            if grid[i][j] == 0 then\n                break\n          \
    \  end\n        end\n        return res + max_fill_rec(grid, capacity, i, j +\
    \ 1)\n    end\n    return max_fill_rec(grid, capacity, 1, 1)\nend", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n\
    \        local function empty_row(row)\n            local function empty_cell(cell)\n\
    \                return 0\n            end\n            return map(empty_cell,\
    \ row)\n        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ fill_and_empty(grid, capacity)\n        local filled = fill(grid, capacity)\n\
    \        local emptied = empty(filled)\n        return emptied\n    end\n    local\
    \ function fill_and_empty_n(grid, capacity, n)\n        local function fill_and_empty_n_iter(grid,\
    \ capacity, n)\n            if n == 0 then\n                return grid\n    \
    \        else\n                return fill_and_empty_n_iter(fill_and_empty(grid,\
    \ capacity), capacity, n - 1)\n            end\n        end\n        return fill_and_empty_n_iter(grid,\
    \ capacity, n)\n    end\n    local function fill_and_empty_until_empty(grid, capacity)\n\
    \        local function fill_and_empty_until_empty_iter(grid, capacity, n)\n \
    \           local filled = fill_and_empty(grid, capacity)\n            if sum_grid(filled)\
    \ == 0 then\n                return n\n            else\n                return\
    \ fill_and_empty_until_empty_iter(filled, capacity, n + 1)\n            end\n\
    \        end\n        return fill_and_empty_until_empty_iter(grid, capacity, 0)\n\
    \    end\n    return fill_and_empty_until_empty(", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(fill_cell, row,\
    \ capacity)\n        end\n        return map(fill_row, grid, capacity)\n    end\n\
    \    local function sum_grid(grid)\n        local function sum_row(row)\n    \
    \        local function sum_cell(cell)\n                return cell\n        \
    \    end\n            return reduce(sum_cell, row, 0)\n        end\n        return\
    \ reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           return 0\n            end\n            return map(empty_cell, row)\n\
    \        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ fill_and_empty(grid, capacity)\n        return empty(fill(grid, capacity))\n\
    \    end\n    local function fill_and_empty_n_times(grid, capacity, n)\n     \
    \   local function fill_and_empty_n_times_helper(grid, capacity, n)\n        \
    \    if n == 0 then\n                return grid\n            else\n         \
    \       return fill_and_empty_n_times_helper(fill_and_empty(grid, capacity), capacity,\
    \ n - 1)\n            end\n        end\n        return fill_and_empty_n_times_helper(grid,\
    \ capacity, n)\n    end\n    local function find_n(grid, capacity)\n        local\
    \ function find_n_helper(grid, capacity, n)\n            if sum_grid(fill_and_empty_n_times(grid,\
    \ capacity, n)) == 0 then\n                return n\n            else\n      \
    \          return find_n_helper(grid, capacity, n + 1)\n            end\n    \
    \    end\n        return find_n_helper(grid, capacity, 0)\n    end\n    return\
    \ find_n(grid, capacity)\nend", "    local n = #grid\n    local m = #grid[1]\n\
    \    local count = 0\n    local function fill(i, j)\n        if i > n or j > m\
    \ then\n            return\n        end\n        if grid[i][j] == 1 then\n   \
    \         grid[i][j] = 0\n            count = count + 1\n            fill(i, j\
    \ + 1)\n            fill(i + 1, j)\n        end\n    end\n    for i = 1, n do\n\
    \        for j = 1, m do\n            if grid[i][j] == 1 then\n              \
    \  fill(i, j)\n            end\n        end\n    end\n    return count\nend",
  "    local function fill(grid, capacity)\n        local max_fill = 0\n        for\
    \ i = 1, #grid do\n            local fill = 0\n            for j = 1, #grid[i]\
    \ do\n                if grid[i][j] == 1 then\n                    fill = fill\
    \ + 1\n                end\n            end\n            if fill > max_fill then\n\
    \                max_fill = fill\n            end\n        end\n        return\
    \ math.ceil(max_fill / capacity)\n    end\n    return fill(grid, capacity)\nend",
  "    local function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return reduce(sum_row, grid, 0)\n    end\n    return sum_grid(fill(grid,\
    \ capacity))\nend", "    local rows = #grid\n    local cols = #grid[1]\n    local\
    \ count = 0\n    local function fill(row, col)\n        if row < 1 or row > rows\
    \ or col < 1 or col > cols then\n            return\n        end\n        if grid[row][col]\
    \ == 1 then\n            grid[row][col] = 0\n            count = count + 1\n \
    \           fill(row - 1, col)\n            fill(row + 1, col)\n            fill(row,\
    \ col - 1)\n            fill(row, col + 1)\n        end\n    end\n    for row\
    \ = 1, rows do\n        for col = 1, cols do\n            if grid[row][col] ==\
    \ 1 then\n                fill(row, col)\n            end\n        end\n    end\n\
    \    return count\nend", "    local rows = #grid\n    local cols = #grid[1]\n\
    \    local total_water = 0\n    local buckets = 0\n    local i = 1\n    local\
    \ j = 1\n    while i <= rows do\n        while j <= cols do\n            if grid[i][j]\
    \ == 1 then\n                total_water = total_water + 1\n                grid[i][j]\
    \ = 0\n            end\n            j = j + 1\n        end\n        j = 1\n  \
    \      i = i + 1\n    end\n    buckets = math.ceil(total_water / capacity)\n \
    \   return buckets\nend", "    local function fill(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return table.map(row, fill_cell, capacity)\n   \
    \     end\n        return table.map(grid, fill_row, capacity)\n    end\n    local\
    \ function sum_grid(grid)\n        local function sum_row(row)\n            return\
    \ table.reduce(row, function(a, b) return a + b end, 0)\n        end\n       \
    \ return table.reduce(grid, sum_row, 0)\n    end\n    local function fill_grid(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    if capacity\
    \ >= cell then\n                        return 0\n                    else\n \
    \                       return cell - capacity\n                    end\n    \
    \            end\n            end\n            return table.map(row, fill_cell,\
    \ capacity)\n        end\n        return table.map(grid, fill_row, capacity)\n\
    \    end\n    local function fill_grid_with_capacity(grid, capacity)\n       \
    \ local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    if capacity >= cell then\n        \
    \                return 0\n                    else\n                        return\
    \ cell - capacity\n                    end\n                end\n            end\n\
    \            return table.map(row, fill_cell, capacity)\n        end\n       \
    \ return table.map(grid, fill_row, capacity)\n    end\n    local function fill_grid_with_capacity(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    if capacity\
    \ >= cell then\n                        return 0\n                    else\n \
    \                       return cell - capacity\n                    end\n    \
    \            end\n            end\n            return table.map(row, fill_cell,\
    \ capacity)\n        end\n        return table.map(grid, fill_row, capacity)\n\
    \   ", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function max_fill_rec(grid, capacity, count)\n   \
    \     local filled = fill(grid, capacity)\n        local filled_sum = sum_grid(filled)\n\
    \        if filled_sum == 0 then\n            return count\n        else\n   \
    \         return max_fill_rec(empty(filled), capacity, count + filled_sum)\n \
    \       end\n    end\n    return max_fill_rec(grid, capacity, 0)\nend", "  local\
    \ function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 1 then\n \
    \         return capacity - 1\n        else\n          return capacity\n     \
    \   end\n      end\n      return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n  end\n  local function count_empties(grid)\n    local function\
    \ count_empties_row(row)\n      local function count_empties_cell(cell)\n    \
    \    if cell == 0 then\n          return 1\n        else\n          return 0\n\
    \        end\n      end\n      return sum(map(row, function(cell) return count_empties_cell(cell)\
    \ end))\n    end\n    return sum(map(grid, function(row) return count_empties_row(row)\
    \ end))\n  end\n  local function is_empty(grid)\n    local function is_empty_row(row)\n\
    \      local function is_empty_cell(cell)\n        if cell == 0 then\n       \
    \   return false\n        else\n          return true\n        end\n      end\n\
    \      return all(map(row, function(cell) return is_empty_cell(cell) end))\n \
    \   end\n    return all(map(grid, function(row) return is_empty_row(row) end))\n\
    \  end\n  local function max_fill_rec(grid, capacity, count)\n    if is_empty(grid)\
    \ then\n      return count\n    else\n      return max_fill_rec(fill(grid, capacity),\
    \ capacity, count + 1)\n    end\n  end\n  return max_fill_rec(grid, capacity,\
    \ 0)\nend", "    local function fill(grid, capacity)\n        local n = #grid\n\
    \        local m = #grid[1]\n        local count = 0\n        for i = 1, n do\n\
    \            for j = 1, m do\n                if grid[i][j] == 1 then\n      \
    \              grid[i][j] = 0\n                    count = count + 1\n       \
    \             local k = i\n                    while k <= n and capacity > 0 do\n\
    \                        if grid[k][j] == 1 then\n                           \
    \ grid[k][j] = 0\n                            capacity = capacity - 1\n      \
    \                  end\n                        k = k + 1\n                  \
    \  end\n                end\n            end\n        end\n        return count\n\
    \    end\n    local count = 0\n    while fill(grid, capacity) > 0 do\n       \
    \ count = count + 1\n    end\n    return count\nend", "    local n = #grid\n \
    \   local m = #grid[1]\n    local function fill(i, j)\n        local c = 0\n \
    \       if grid[i][j] == 1 then\n            grid[i][j] = 0\n            c = 1\n\
    \        end\n        if i < n then\n            c = c + fill(i + 1, j)\n    \
    \    end\n        if j < m then\n            c = c + fill(i, j + 1)\n        end\n\
    \        return c\n    end\n    local function fill_all()\n        local c = 0\n\
    \        for i = 1, n do\n            for j = 1, m do\n                c = c +\
    \ fill(i, j)\n            end\n        end\n        return c\n    end\n    local\
    \ c = 0\n    while fill_all() > 0 do\n        c = c + 1\n    end\n    return c\n\
    end", "    local function fill(row, col)\n        if row < 1 or row > #grid or\
    \ col < 1 or col > #grid[1] then\n            return 0\n        end\n        if\
    \ grid[row][col] == 0 then\n            return 0\n        end\n        grid[row][col]\
    \ = 0\n        return 1 + fill(row + 1, col) + fill(row - 1, col) + fill(row,\
    \ col + 1) + fill(row, col - 1)\n    end\n    local function fill_all()\n    \
    \    local count = 0\n        for row = 1, #grid do\n            for col = 1,\
    \ #grid[1] do\n                if grid[row][col] == 1 then\n                 \
    \   local filled = fill(row, col)\n                    if filled > 0 then\n  \
    \                      count = count + 1\n                    end\n          \
    \      end\n            end\n        end\n        return count\n    end\n    return\
    \ fill_all()\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(row, function(cell) return fill_cell(cell, capacity)\
    \ end)\n        end\n        return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(row, function(acc, cell) return\
    \ acc + sum_cell(cell) end, 0)\n        end\n        return reduce(grid, function(acc,\
    \ row) return acc + sum_row(row) end, 0)\n    end\n    local function sum_grid_rows(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(row,\
    \ function(acc, cell) return acc + sum_cell(cell) end, 0)\n        end\n     \
    \   return map(grid, function(row) return sum_row(row) end)\n    end\n    local\
    \ function sum_grid_cols(grid)\n        local function sum_col(grid, col)\n  \
    \          local function sum_cell(cell)\n                return cell\n      \
    \      end\n            return reduce(map(grid, function(row) return row[col]\
    \ end), function(acc, cell) return acc + sum_cell(cell) end, 0)\n        end\n\
    \        return map(grid[1], function(cell, col) return sum_col(grid, col) end)\n\
    \    end\n    local function max_grid(grid)\n        local function max_row(row)\n\
    \            local function max_cell(cell)\n                return cell\n    \
    \        end\n            return reduce(row, function(acc, cell) return math.max(acc,\
    \ max_cell(cell)) end, 0)\n        end\n        return reduce(grid, function(acc,\
    \ row) return math.max(acc, max_row(row)) end, 0)\n    end\n   ", "  local function\
    \ fill(grid, capacity)\n    local function fill_row(row, capacity)\n      local\
    \ function fill_cell(cell, capacity)\n        if cell == 1 then\n          return\
    \ capacity\n        else\n          return 0\n        end\n      end\n      return\
    \ map(fill_cell, row, capacity)\n    end\n    return map(fill_row, grid, capacity)\n\
    \  end\n  local function empty(grid, capacity)\n    local function empty_row(row,\
    \ capacity)\n      local function empty_cell(cell, capacity)\n        if cell\
    \ == capacity then\n          return 0\n        else\n          return cell\n\
    \        end\n      end\n      return map(empty_cell, row, capacity)\n    end\n\
    \    return map(empty_row, grid, capacity)\n  end\n  local function count_fill(grid,\
    \ capacity)\n    local function count_fill_row(row, capacity)\n      local function\
    \ count_fill_cell(cell, capacity)\n        if cell == capacity then\n        \
    \  return 1\n        else\n          return 0\n        end\n      end\n      return\
    \ sum(map(count_fill_cell, row, capacity))\n    end\n    return sum(map(count_fill_row,\
    \ grid, capacity))\n  end\n  local function count_empty(grid, capacity)\n    local\
    \ function count_empty_row(row, capacity)\n      local function count_empty_cell(cell,\
    \ capacity)\n        if cell == 0 then\n          return 1\n        else\n   \
    \       return 0\n        end\n      end\n      return sum(map(count_empty_cell,\
    \ row, capacity))\n    end\n    return sum(map(count_empty_row, grid, capacity))\n\
    \  end\n  local function count_fill_and_empty(grid, capacity)\n    return count_fill(grid,\
    \ capacity) + count_empty(grid, capacity)\n  end\n  local function is_empty(grid,\
    \ capacity)\n    local function is_empty_row(row, capacity)\n      local function\
    \ is_empty_cell(cell, capacity)\n        if cell == 0 then\n          return true\n\
    \        else\n          return false\n        end\n      end\n      return all(map(is_empty_cell,\
    \ row, capacity))\n    end\n", "    local function fill(grid, capacity)\n    \
    \    local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function max_fill_rec(grid, capacity, count)\n   \
    \     local filled = fill(grid, capacity)\n        local sum = sum_grid(filled)\n\
    \        if sum == 0 then\n            return count\n        else\n          \
    \  return max_fill_rec(empty(filled), capacity, count + 1)\n        end\n    end\n\
    \    return max_fill_rec(grid, capacity, 0)\nend", "    local function fill(grid,\
    \ capacity)\n        local function fill_row(row, capacity)\n            local\
    \ function fill_cell(cell, capacity)\n                if cell == 0 then\n    \
    \                return 0\n                else\n                    return capacity\n\
    \                end\n            end\n            return map(fill_cell, row,\
    \ capacity)\n        end\n        return map(fill_row, grid, capacity)\n    end\n\
    \    local function sum_grid(grid)\n        local function sum_row(row)\n    \
    \        local function sum_cell(cell)\n                return cell\n        \
    \    end\n            return reduce(sum_cell, row, 0)\n        end\n        return\
    \ reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n        local\
    \ function empty_row(row)\n            local function empty_cell(cell)\n     \
    \           return 0\n            end\n            return map(empty_cell, row)\n\
    \        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ max_fill_iter(grid, capacity, count)\n        if sum_grid(grid) == 0 then\n\
    \            return count\n        else\n            return max_fill_iter(empty(grid),\
    \ capacity, count + 1)\n        end\n    end\n    return max_fill_iter(fill(grid,\
    \ capacity), capacity, 0)\nend", "    local function fill(grid, capacity)\n  \
    \      local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(row, function(acc, cell) return\
    \ acc + sum_cell(cell) end, 0)\n        end\n        return reduce(grid, function(acc,\
    \ row) return acc + sum_row(row) end, 0)\n    end\n    local function empty(grid)\n\
    \        local function empty_row(row)\n            local function empty_cell(cell)\n\
    \                return 0\n            end\n            return map(row, function(cell)\
    \ return empty_cell(cell) end)\n        end\n        return map(grid, function(row)\
    \ return empty_row(row) end)\n    end\n    local function fill_and_empty(grid,\
    \ capacity)\n        local filled = fill(grid, capacity)\n        local emptied\
    \ = empty(filled)\n        return emptied\n    end\n    local function fill_and_empty_n_times(grid,\
    \ capacity, n)\n        local function fill_and_empty_n_times_iter(grid, capacity,\
    \ n, acc)\n            if n == 0 then\n                return acc\n          \
    \  else\n                local filled_and_emptied = fill_and_empty(grid, capacity)\n\
    \                return fill_and_empty_n_times_iter(filled_and_emptied, capacity,\
    \ n - 1, acc + sum_grid(filled_and_emptied))\n            end\n        end\n \
    \       return fill_and_empty_n_times_iter(grid, capacity, n, 0)\n    end\n  \
    \  local function find_max_fill(grid, capacity)\n        local function find_max_fill_iter(grid,\
    \ capacity, n, acc)\n           ", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(fill_cell, row, capacity)\n        end\n\
    \        return map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function max_fill_iter(grid, capacity, count)\n  \
    \      local filled = fill(grid, capacity)\n        local filled_sum = sum_grid(filled)\n\
    \        if filled_sum == 0 then\n            return count\n        else\n   \
    \         return max_fill_iter(empty(filled), capacity, count + filled_sum)\n\
    \        end\n    end\n    return max_fill_iter(grid, capacity, 0)\nend", "  \
    \  local function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_grid(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return reduce(sum_row, grid, 0)\n    end\n    local function empty(grid)\n\
    \        local function empty_row(row)\n            local function empty_cell(cell)\n\
    \                return 0\n            end\n            return map(empty_cell,\
    \ row)\n        end\n        return map(empty_row, grid)\n    end\n    local function\
    \ sum_grid_and_empty(grid, capacity)\n        return sum_grid(grid), empty(grid)\n\
    \    end\n    local function sum_grid_and_fill(grid, capacity)\n        return\
    \ sum_grid(grid), fill(grid, capacity)\n    end\n    local function sum_grid_and_fill_and_empty(grid,\
    \ capacity)\n        return sum_grid(grid), fill(grid, capacity), empty(grid)\n\
    \    end\n    local function sum_grid_and_fill_and_fill_and_empty(grid, capacity)\n\
    \        return sum_grid(grid), fill(grid, capacity), fill(grid, capacity), empty(grid)\n\
    \    end\n    local function sum_grid_and_fill_and_fill_and_fill_and_empty(grid,\
    \ capacity)\n        return sum_grid(grid), fill(grid, capacity), fill(grid, capacity),\
    \ fill(grid, capacity), empty(grid)\n    end\n    local function sum_grid_and_fill_and_fill_and_fill_and_fill_and_empty(grid,\
    \ capacity)\n        return sum_grid(grid), fill(grid, capacity), fill(grid, capacity),\
    \ fill(grid, capacity), fill(grid, capacity), empty(grid", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 0\
    \ then\n                    return 0\n                else\n                 \
    \   return capacity\n                end\n            end\n            return\
    \ map(fill_cell, row, capacity)\n        end\n        return map(fill_row, grid,\
    \ capacity)\n    end\n    local function sum_rows(grid)\n        local function\
    \ sum_row(row)\n            local function sum_cell(cell)\n                return\
    \ cell\n            end\n            return reduce(sum_cell, row, 0)\n       \
    \ end\n        return map(sum_row, grid)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(acc, row)\n            return acc + row\n    \
    \    end\n        return reduce(sum_row, grid, 0)\n    end\n    return sum_grid(sum_rows(fill(grid,\
    \ capacity)))\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_well(well, capacity)\n\
    \                if well == 1 then\n                    return capacity\n    \
    \            else\n                    return 0\n                end\n       \
    \     end\n            local function fill_wells(wells, capacity)\n          \
    \      local function fill_wells_helper(wells, capacity, acc)\n              \
    \      if #wells == 0 then\n                        return acc\n             \
    \       else\n                        local well = table.remove(wells, 1)\n  \
    \                      local filled = fill_well(well, capacity)\n            \
    \            return fill_wells_helper(wells, capacity, acc + filled)\n       \
    \             end\n                end\n                return fill_wells_helper(wells,\
    \ capacity, 0)\n            end\n            return fill_wells(row, capacity)\n\
    \        end\n        local function fill_rows(grid, capacity)\n            local\
    \ function fill_rows_helper(grid, capacity, acc)\n                if #grid ==\
    \ 0 then\n                    return acc\n                else\n             \
    \       local row = table.remove(grid, 1)\n                    local filled =\
    \ fill_row(row, capacity)\n                    return fill_rows_helper(grid, capacity,\
    \ acc + filled)\n                end\n            end\n            return fill_rows_helper(grid,\
    \ capacity, 0)\n        end\n        return fill_rows(grid, capacity)\n    end\n\
    \    local function fill_until_empty(grid, capacity)\n        local function fill_until_empty_helper(grid,\
    \ capacity, acc)\n            local filled = fill(grid, capacity)\n          \
    \  if filled == 0 then\n                return acc\n            else\n       \
    \         return fill_until_empty_helper(grid, capacity, acc + 1)\n          \
    \  end\n        end\n        return fill_until_empty_helper(grid, capacity, 0)\n\
    \    end\n    return fill_until_empty(grid, capacity)\nend", "  local function\
    \ fill(grid, capacity)\n    local function fill_row(row, capacity)\n      local\
    \ function fill_cell(cell, capacity)\n        if cell == 0 then\n          return\
    \ 0\n        else\n          return capacity\n        end\n      end\n      return\
    \ map(row, function(cell) return fill_cell(cell, capacity) end)\n    end\n   \
    \ return map(grid, function(row) return fill_row(row, capacity) end)\n  end\n\
    \  local function sum_grid(grid)\n    local function sum_row(row)\n      local\
    \ function sum_cell(cell)\n        return cell\n      end\n      return reduce(row,\
    \ function(acc, cell) return acc + sum_cell(cell) end, 0)\n    end\n    return\
    \ reduce(grid, function(acc, row) return acc + sum_row(row) end, 0)\n  end\n \
    \ local function fill_grid(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 0 then\n \
    \         return 0\n        else\n          if capacity >= cell then\n       \
    \     return 0\n          else\n            return cell - capacity\n         \
    \ end\n        end\n      end\n      return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n  end\n  local function fill_grid_rec(grid, capacity)\n    local\
    \ filled_grid = fill_grid(grid, capacity)\n    local sum = sum_grid(filled_grid)\n\
    \    if sum == 0 then\n      return 0\n    else\n      return 1 + fill_grid_rec(filled_grid,\
    \ capacity)\n    end\n  end\n  return fill_grid_rec(fill(grid, capacity), capacity)\n\
    end", "    local rows = #grid\n    local cols = #grid[1]\n    local buckets =\
    \ {}\n    local max_bucket = 0\n    for i = 1, rows do\n        buckets[i] = 0\n\
    \        for j = 1, cols do\n            if grid[i][j] == 1 then\n           \
    \     buckets[i] = buckets[i] + 1\n            end\n        end\n        max_bucket\
    \ = math.max(max_bucket, buckets[i])\n    end\n    local max_bucket_count = math.ceil(max_bucket\
    \ / capacity)\n    local max_bucket_count_per_row = math.ceil(max_bucket_count\
    \ / rows)\n    local max_bucket_count_per_row_per_col = math.ceil(max_bucket_count_per_row\
    \ / cols)\n    local max_bucket_count_per_row_per_col_per_row = math.ceil(max_bucket_count_per_row_per_col\
    \ / rows)\n    return max_bucket_count_per_row_per_col_per_row\nend", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 1 then\n                    return math.min(capacity, 1)\n              \
    \  else\n                    return 0\n                end\n            end\n\
    \            return map(fill_cell, row, capacity)\n        end\n        return\
    \ map(fill_row, grid, capacity)\n    end\n    local function empty(grid, capacity)\n\
    \        local function empty_row(row, capacity)\n            local function empty_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return math.min(capacity,\
    \ 1)\n                else\n                    return 0\n                end\n\
    \            end\n            return map(empty_cell, row, capacity)\n        end\n\
    \        return map(empty_row, grid, capacity)\n    end\n    local function count(grid)\n\
    \        local function count_row(row)\n            local function count_cell(cell)\n\
    \                if cell == 1 then\n                    return 1\n           \
    \     else\n                    return 0\n                end\n            end\n\
    \            return reduce(count_cell, row, 0)\n        end\n        return reduce(count_row,\
    \ grid, 0)\n    end\n    local function is_empty(grid)\n        local function\
    \ is_empty_row(row)\n            local function is_empty_cell(cell)\n        \
    \        if cell == 0 then\n                    return true\n                else\n\
    \                    return false\n                end\n            end\n    \
    \        return reduce(is_empty_cell, row, true)\n        end\n        return\
    \ reduce(is_empty_row, grid, true)\n    end\n    local function is_full(grid)\n\
    \        local function is_full_row(row)\n            local function is_full_cell(cell)\n\
    \                if cell == 1 then\n                    return true\n        \
    \        else\n                    return false\n                end\n       \
    \     end\n            return reduce(is_full_cell, row, true)\n        end\n \
    \       return reduce(is_full_row, grid, true)\n    end\n    local function fill_and_empty(grid,\
    \ capacity)\n        local filled = fill(grid, capacity)\n        local emptied\
    \ = empty(filled, capacity)\n        return emptied\n    end\n    local", "  \
    \  local function get_max_fill(grid, capacity)\n        local max_fill = 0\n \
    \       for i, row in ipairs(grid) do\n            local fill = 0\n          \
    \  for j, col in ipairs(row) do\n                if col == 1 then\n          \
    \          fill = fill + 1\n                else\n                    if fill\
    \ > max_fill then\n                        max_fill = fill\n                 \
    \   end\n                    fill = 0\n                end\n            end\n\
    \            if fill > max_fill then\n                max_fill = fill\n      \
    \      end\n        end\n        return max_fill\n    end\n    local max_fill\
    \ = get_max_fill(grid, capacity)\n    return max_fill > capacity and max_fill\
    \ or 0\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_column(column, capacity)\n\
    \                if column > #row then\n                    return 0\n       \
    \         end\n                if row[column] == 1 then\n                    if\
    \ capacity > 0 then\n                        row[column] = 0\n               \
    \         return 1 + fill_column(column + 1, capacity - 1)\n                 \
    \   else\n                        return 0\n                    end\n        \
    \        else\n                    return fill_column(column + 1, capacity)\n\
    \                end\n            end\n            return fill_column(1, capacity)\n\
    \        end\n        if #grid == 0 then\n            return 0\n        end\n\
    \        return fill_row(grid[1], capacity) + fill(grid, capacity)\n    end\n\
    \    return fill(grid, capacity)\nend", "    local function fill(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 1 then\n                    return capacity\
    \ - 1\n                else\n                    return capacity\n           \
    \     end\n            end\n            local function fill_row_helper(row, capacity,\
    \ index)\n                if index > #row then\n                    return capacity\n\
    \                else\n                    return fill_row_helper(row, fill_cell(row[index],\
    \ capacity), index + 1)\n                end\n            end\n            return\
    \ fill_row_helper(row, capacity, 1)\n        end\n        local function fill_grid_helper(grid,\
    \ capacity, index)\n            if index > #grid then\n                return\
    \ capacity\n            else\n                return fill_grid_helper(grid, fill_row(grid[index],\
    \ capacity), index + 1)\n            end\n        end\n        return fill_grid_helper(grid,\
    \ capacity, 1)\n    end\n    local function fill_helper(grid, capacity, index)\n\
    \        if fill(grid, capacity) == 0 then\n            return index\n       \
    \ else\n            return fill_helper(grid, capacity, index + 1)\n        end\n\
    \    end\n    return fill_helper(grid, capacity, 0)\nend", "    local function\
    \ fill(grid, capacity)\n        local max_fill = 0\n        for i = 1, #grid do\n\
    \            local fill = 0\n            for j = 1, #grid[i] do\n            \
    \    if grid[i][j] == 1 then\n                    fill = fill + 1\n          \
    \      end\n            end\n            if fill > max_fill then\n           \
    \     max_fill = fill\n            end\n        end\n        return math.ceil(max_fill\
    \ / capacity)\n    end\n    return fill(grid, capacity)\nend", "  local function\
    \ fill(grid, capacity)\n    local function fill_row(row, capacity)\n      local\
    \ function fill_cell(cell, capacity)\n        if cell == 0 then\n          return\
    \ 0\n        else\n          return capacity\n        end\n      end\n      return\
    \ map(fill_cell, row, capacity)\n    end\n    return map(fill_row, grid, capacity)\n\
    \  end\n  local function sum_grid(grid)\n    local function sum_row(row)\n   \
    \   local function sum_cell(cell)\n        return cell\n      end\n      return\
    \ reduce(sum_cell, row, 0)\n    end\n    return reduce(sum_row, grid, 0)\n  end\n\
    \  local function max_fill_iter(grid, capacity, count)\n    local filled_grid\
    \ = fill(grid, capacity)\n    local filled_count = sum_grid(filled_grid)\n   \
    \ if filled_count == 0 then\n      return count\n    else\n      return max_fill_iter(filled_grid,\
    \ capacity, count + 1)\n    end\n  end\n  return max_fill_iter(grid, capacity,\
    \ 0)\nend", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_well(well, capacity)\n          \
    \      local function fill_bucket(bucket, capacity)\n                    if bucket\
    \ == 1 then\n                        return capacity\n                    else\n\
    \                        return 0\n                    end\n                end\n\
    \                local function fill_well_from_bucket(well, bucket)\n        \
    \            if well == 1 then\n                        return bucket\n      \
    \              else\n                        return 0\n                    end\n\
    \                end\n                local bucket = fill_bucket(well, capacity)\n\
    \                return fill_well_from_bucket(well, bucket)\n            end\n\
    \            local function fill_row_from_well(row, well)\n                return\
    \ row + well\n            end\n            local well = fill_well(row, capacity)\n\
    \            return fill_row_from_well(row, well)\n        end\n        local\
    \ function fill_grid_from_row(grid, row)\n            local function fill_grid_from_well(grid,\
    \ well)\n                local function fill_grid_from_bucket(grid, bucket)\n\
    \                    if bucket == capacity then\n                        return\
    \ grid - 1\n                    else\n                        return grid\n  \
    \                  end\n                end\n                local bucket = fill_grid_from_bucket(grid,\
    \ well)\n                return bucket\n            end\n            local well\
    \ = fill_grid_from_well(grid, row)\n            return well\n        end\n   \
    \     local row = fill_row(grid, capacity)\n        return fill_grid_from_row(grid,\
    \ row)\n    end\n    local function max_fill_from_grid(grid, capacity)\n     \
    \   local function max_fill_from_row(grid, capacity)\n            local function\
    \ max_fill_from_well(grid, capacity)\n                local function max_fill_from_bucket(grid,\
    \ capacity)\n                    if grid == 0 then\n                        return\
    \ capacity\n                    else\n                        return 0\n     \
    \               end\n                end\n                local bucket = max_fill_from_bucket(grid,\
    \ capacity)\n                return bucket\n            end\n            local\
    \ well = max_fill_from_well(grid, capacity)\n            return well\n       \
    \ end\n        local row = max_fill_from_row(grid, capacity)", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 1\
    \ then\n                    return capacity - 1\n                else\n      \
    \              return capacity\n                end\n            end\n       \
    \     return List.foldl(row, capacity, fill_cell)\n        end\n        return\
    \ List.foldl(grid, capacity, fill_row)\n    end\n    local function count_fill(grid,\
    \ capacity)\n        local function count_fill_row(row, capacity)\n          \
    \  local function count_fill_cell(cell, capacity)\n                if cell ==\
    \ 1 then\n                    return capacity + 1\n                else\n    \
    \                return capacity\n                end\n            end\n     \
    \       return List.foldl(row, capacity, count_fill_cell)\n        end\n     \
    \   return List.foldl(grid, capacity, count_fill_row)\n    end\n    local function\
    \ count_fill_all(grid, capacity)\n        local function count_fill_all_row(row,\
    \ capacity)\n            local function count_fill_all_cell(cell, capacity)\n\
    \                if cell == 1 then\n                    return capacity + 1\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return List.foldl(row, capacity, count_fill_all_cell)\n\
    \        end\n        return List.foldl(grid, capacity, count_fill_all_row)\n\
    \    end\n    local function count_fill_all_rows(grid, capacity)\n        local\
    \ function count_fill_all_rows_row(row, capacity)\n            local function\
    \ count_fill_all_rows_cell(cell, capacity)\n                if cell == 1 then\n\
    \                    return capacity + 1\n                else\n             \
    \       return capacity\n                end\n            end\n            return\
    \ List.foldl(row, capacity, count_fill_all_rows_cell)\n        end\n        return\
    \ List.foldl(grid, capacity, count_fill_all_rows_row)\n    end\n    local function\
    \ count_fill_all_rows_cols(grid, capacity)\n        local function count_fill_all_rows_cols_row(row,\
    \ capacity)\n            local function count_fill_all_rows_cols_cell(cell, capacity",
  "    local function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_well(well, capacity)\n                if well\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ table.map(fill_well, row)\n        end\n        return table.map(fill_row, grid)\n\
    \    end\n    local function drain(grid, capacity)\n        local function drain_row(row,\
    \ capacity)\n            local function drain_well(well, capacity)\n         \
    \       if well == 0 then\n                    return 0\n                else\n\
    \                    return capacity\n                end\n            end\n \
    \           return table.map(drain_well, row)\n        end\n        return table.map(drain_row,\
    \ grid)\n    end\n    local function count(grid)\n        local function count_row(row)\n\
    \            local function count_well(well)\n                if well == 0 then\n\
    \                    return 0\n                else\n                    return\
    \ 1\n                end\n            end\n            return table.reduce(count_well,\
    \ row, 0)\n        end\n        return table.reduce(count_row, grid, 0)\n    end\n\
    \    local function is_empty(grid)\n        local function is_empty_row(row)\n\
    \            local function is_empty_well(well)\n                if well == 0\
    \ then\n                    return true\n                else\n              \
    \      return false\n                end\n            end\n            return\
    \ table.reduce(is_empty_well, row, true)\n        end\n        return table.reduce(is_empty_row,\
    \ grid, true)\n    end\n    local function fill_and_drain(grid, capacity)\n  \
    \      return drain(fill(grid, capacity), capacity)\n    end\n    local function\
    \ fill_and_drain_until_empty(grid, capacity)\n        local function fill_and_drain_until_empty_rec(grid,\
    \ capacity, count)\n            if is_empty(grid) then\n                return\
    \ count\n            else\n                return fill_and_drain_until_empty_rec(fill_and_drain(grid,\
    \ capacity), capacity, count + 1)\n            end\n        end\n        return\
    \ fill_and_drain_until", "  local function fill_row(row, capacity)\n    local\
    \ count = 0\n    local i = 1\n    while i <= #row do\n      if row[i] == 1 then\n\
    \        count = count + 1\n        i = i + capacity\n      else\n        i =\
    \ i + 1\n      end\n    end\n    return count\n  end\n  local count = 0\n  for\
    \ _, row in ipairs(grid) do\n    count = count + fill_row(row, capacity)\n  end\n\
    \  return count\nend", "  local function fill(grid, capacity)\n    local function\
    \ fill_row(row, capacity)\n      local function fill_cell(cell, capacity)\n  \
    \      if cell == 0 then\n          return 0\n        else\n          return capacity\n\
    \        end\n      end\n      return map(row, fill_cell, capacity)\n    end\n\
    \    return map(grid, fill_row, capacity)\n  end\n  local function sum_grid(grid)\n\
    \    local function sum_row(row)\n      return reduce(row, add, 0)\n    end\n\
    \    return reduce(grid, add, 0)\n  end\n  local function sum_grid_fill(grid,\
    \ capacity)\n    return sum_grid(fill(grid, capacity))\n  end\n  return sum_grid_fill(grid,\
    \ capacity)\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_cell(cell, capacity)\n\
    \                if cell == 0 then\n                    return 0\n           \
    \     else\n                    return capacity\n                end\n       \
    \     end\n            return map(fill_cell, row, capacity)\n        end\n   \
    \     return map(fill_row, grid, capacity)\n    end\n    local function sum_grid(grid)\n\
    \        local function sum_row(row)\n            local function sum_cell(cell)\n\
    \                return cell\n            end\n            return reduce(sum_cell,\
    \ row, 0)\n        end\n        return reduce(sum_row, grid, 0)\n    end\n   \
    \ local function empty(grid)\n        local function empty_row(row)\n        \
    \    local function empty_cell(cell)\n                return 0\n            end\n\
    \            return map(empty_cell, row)\n        end\n        return map(empty_row,\
    \ grid)\n    end\n    local function fill_and_empty(grid, capacity)\n        return\
    \ empty(fill(grid, capacity))\n    end\n    local function fill_and_empty_n_times(grid,\
    \ capacity, n)\n        local function fill_and_empty_n_times_iter(grid, capacity,\
    \ n)\n            if n == 0 then\n                return grid\n            else\n\
    \                return fill_and_empty_n_times_iter(fill_and_empty(grid, capacity),\
    \ capacity, n - 1)\n            end\n        end\n        return fill_and_empty_n_times_iter(grid,\
    \ capacity, n)\n    end\n    local function fill_and_empty_until_empty(grid, capacity)\n\
    \        local function fill_and_empty_until_empty_iter(grid, capacity, n)\n \
    \           if sum_grid(grid) == 0 then\n                return n\n          \
    \  else\n                return fill_and_empty_until_empty_iter(fill_and_empty(grid,\
    \ capacity), capacity, n + 1)\n            end\n        end\n        return fill_and_empty_until_empty_iter(grid,\
    \ capacity, 0)\n    end\n    return fill_and_empty_until_empty(grid, capacity)\n\
    end", "    local function fill(row, col)\n        local count = 0\n        for\
    \ i = 1, #grid do\n            if grid[i][col] == 1 then\n                grid[i][col]\
    \ = 0\n                count = count + 1\n            end\n        end\n     \
    \   return count\n    end\n    local function empty(row, col)\n        local count\
    \ = 0\n        for i = 1, capacity do\n            if row + i <= #grid and grid[row\
    \ + i][col] == 0 then\n                grid[row + i][col] = 1\n              \
    \  count = count + 1\n            end\n        end\n        return count\n   \
    \ end\n    local function find_max_col()\n        local max_col = 1\n        local\
    \ max_count = 0\n        for i = 1, #grid[1] do\n            local count = 0\n\
    \            for j = 1, #grid do\n                if grid[j][i] == 1 then\n  \
    \                  count = count + 1\n                end\n            end\n \
    \           if count > max_count then\n                max_count = count\n   \
    \             max_col = i\n            end\n        end\n        return max_col\n\
    \    end\n    local function find_min_row()\n        local min_row = 1\n     \
    \   local min_count = #grid\n        for i = 1, #grid do\n            local count\
    \ = 0\n            for j = 1, #grid[1] do\n                if grid[i][j] == 1\
    \ then\n                    count = count + 1\n                end\n         \
    \   end\n            if count < min_count then\n                min_count = count\n\
    \                min_row = i\n            end\n        end\n        return min_row\n\
    \    end\n    local count = 0\n    while true do\n        local max_col = find_max_col()\n\
    \        local min_row = find_min_row()\n        local filled = fill(min_row,\
    \ max_col)\n        if filled == 0 then\n            break\n        end\n    \
    \    count = count + filled\n        local emptyed = empty(min_row, max_col)\n\
    \        count = count + emptyed\n    end\n    return count\nend", "    -- TODO:\
    \ implement\nend", "    local function fill(grid, capacity)\n        local function\
    \ fill_row(row, capacity)\n            local function fill_column(column, capacity)\n\
    \                if column > #row then\n                    return capacity\n\
    \                end\n                if row[column] == 1 then\n             \
    \       if capacity == 0 then\n                        return 0\n            \
    \        else\n                        return fill_column(column + 1, capacity\
    \ - 1)\n                    end\n                else\n                    return\
    \ fill_column(column + 1, capacity)\n                end\n            end\n  \
    \          return fill_column(1, capacity)\n        end\n        if #grid == 0\
    \ then\n            return 0\n        end\n        local row = table.remove(grid,\
    \ 1)\n        local filled = fill_row(row, capacity)\n        return filled +\
    \ fill(grid, capacity)\n    end\n    return fill(grid, capacity)\nend", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if capacity\
    \ == 0 then\n                    return 0\n                elseif cell == 0 then\n\
    \                    return 0\n                else\n                    return\
    \ 1\n                end\n            end\n            local function fill_row_helper(row,\
    \ capacity, index)\n                if index == #row + 1 then\n              \
    \      return 0\n                else\n                    local cell = row[index]\n\
    \                    local filled = fill_cell(cell, capacity)\n              \
    \      local remaining = capacity - filled\n                    return filled\
    \ + fill_row_helper(row, remaining, index + 1)\n                end\n        \
    \    end\n            return fill_row_helper(row, capacity, 1)\n        end\n\
    \        local function fill_grid_helper(grid, capacity, index)\n            if\
    \ index == #grid + 1 then\n                return 0\n            else\n      \
    \          local row = grid[index]\n                local filled = fill_row(row,\
    \ capacity)\n                local remaining = capacity - filled\n           \
    \     return filled + fill_grid_helper(grid, remaining, index + 1)\n         \
    \   end\n        end\n        return fill_grid_helper(grid, capacity, 1)\n   \
    \ end\n    local function fill_grid(grid, capacity)\n        local function fill_grid_helper(grid,\
    \ capacity, index)\n            if index == #grid + 1 then\n                return\
    \ 0\n            else\n                local row = grid[index]\n             \
    \   local filled = fill(row, capacity)\n                local remaining = capacity\
    \ - filled\n                return filled + fill_grid_helper(grid, remaining,\
    \ index + 1)\n            end\n        end\n        return fill_grid_helper(grid,\
    \ capacity, 1)\n    end\n    return fill_grid(grid, capacity)\nend", "    local\
    \ function max_fill_row(row, capacity)\n        local count = 0\n        local\
    \ i = 1\n        while i <= #row do\n            if row[i] == 1 then\n       \
    \         count = count + 1\n                i = i + capacity\n            else\n\
    \                i = i + 1\n            end\n        end\n        return count\n\
    \    end\n    local count = 0\n    for i = 1, #grid do\n        count = count\
    \ + max_fill_row(grid[i], capacity)\n    end\n    return count\nend", "    local\
    \ function fill(grid, capacity)\n        local function fill_row(row, capacity)\n\
    \            local function fill_cell(cell, capacity)\n                if cell\
    \ == 0 then\n                    return 0\n                else\n            \
    \        return capacity\n                end\n            end\n            return\
    \ map(row, function(cell) return fill_cell(cell, capacity) end)\n        end\n\
    \        return map(grid, function(row) return fill_row(row, capacity) end)\n\
    \    end\n    local function sum_grid(grid)\n        local function sum_row(row)\n\
    \            local function sum_cell(cell)\n                return cell\n    \
    \        end\n            return reduce(row, function(a, b) return a + b end,\
    \ 0)\n        end\n        return reduce(grid, function(a, b) return a + b end,\
    \ 0)\n    end\n    local function max_grid(grid)\n        local function max_row(row)\n\
    \            local function max_cell(cell)\n                return cell\n    \
    \        end\n            return reduce(row, function(a, b) return math.max(a,\
    \ b) end, 0)\n        end\n        return reduce(grid, function(a, b) return math.max(a,\
    \ b) end, 0)\n    end\n    local function fill_grid(grid, capacity)\n        local\
    \ function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return 0\n\
    \                else\n                    return capacity\n                end\n\
    \            end\n            return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n    end\n    local function fill_grid_with_water(grid, capacity)\n\
    \        local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if cell == 0 then\n                    return capacity\n\
    \                else\n                    return 0\n                end\n   \
    \         end\n            return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n        end\n        return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n    end", "    local max_fill = 0\n    local row_count = #grid\n\
    \    local col_count = #grid[1]\n    local row_sum = {}\n    local col_sum = {}\n\
    \    for i = 1, row_count do\n        row_sum[i] = 0\n        for j = 1, col_count\
    \ do\n            row_sum[i] = row_sum[i] + grid[i][j]\n        end\n    end\n\
    \    for j = 1, col_count do\n        col_sum[j] = 0\n        for i = 1, row_count\
    \ do\n            col_sum[j] = col_sum[j] + grid[i][j]\n        end\n    end\n\
    \    local function get_max_fill(row_sum, col_sum, row_count, col_count, capacity)\n\
    \        local max_fill = 0\n        for i = 1, row_count do\n            max_fill\
    \ = max_fill + math.floor(row_sum[i] / capacity)\n        end\n        for j =\
    \ 1, col_count do\n            max_fill = max_fill + math.floor(col_sum[j] / capacity)\n\
    \        end\n        return max_fill\n    end\n    max_fill = get_max_fill(row_sum,\
    \ col_sum, row_count, col_count, capacity)\n    for i = 1, row_count do\n    \
    \    for j = 1, col_count do\n            if grid[i][j] == 1 then\n          \
    \      row_sum[i] = row_sum[i] - 1\n                col_sum[j] = col_sum[j] -\
    \ 1\n                local max_fill_tmp = get_max_fill(row_sum, col_sum, row_count,\
    \ col_count, capacity)\n                if max_fill_tmp < max_fill then\n    \
    \                max_fill = max_fill_tmp\n                end\n              \
    \  row_sum[i] = row_sum[i] + 1\n                col_sum[j] = col_sum[j] + 1\n\
    \            end\n        end\n    end\n    return max_fill\nend", "  local function\
    \ fill(grid, capacity)\n    local function fill_row(row, capacity)\n      local\
    \ function fill_well(well, capacity)\n        if well == 0 then\n          return\
    \ 0\n        else\n          return capacity\n        end\n      end\n      return\
    \ map(row, fill_well, capacity)\n    end\n    return map(grid, fill_row, capacity)\n\
    \  end\n  local function sum_grid(grid)\n    local function sum_row(row)\n   \
    \   local function sum_well(well)\n        return well\n      end\n      return\
    \ reduce(row, sum_well, 0)\n    end\n    return reduce(grid, sum_row, 0)\n  end\n\
    \  local function empty(grid)\n    local function empty_row(row)\n      local\
    \ function empty_well(well)\n        return 0\n      end\n      return map(row,\
    \ empty_well)\n    end\n    return map(grid, empty_row)\n  end\n  local function\
    \ max_fill_helper(grid, capacity, count)\n    local filled_grid = fill(grid, capacity)\n\
    \    local filled_sum = sum_grid(filled_grid)\n    if filled_sum == 0 then\n \
    \     return count\n    else\n      return max_fill_helper(empty(filled_grid),\
    \ capacity, count + filled_sum)\n    end\n  end\n  return max_fill_helper(grid,\
    \ capacity, 0)\nend", "  local function fill_bucket(bucket, row)\n    local count\
    \ = 0\n    for i = 1, #row do\n      if row[i] == 1 then\n        bucket = bucket\
    \ - 1\n        row[i] = 0\n        count = count + 1\n      end\n      if bucket\
    \ == 0 then\n        return count\n      end\n    end\n    return count\n  end\n\
    \  local count = 0\n  for i = 1, #grid do\n    local bucket = capacity\n    count\
    \ = count + fill_bucket(bucket, grid[i])\n  end\n  return count\nend", "  local\
    \ function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 1 then\n \
    \         return capacity - 1\n        else\n          return capacity\n     \
    \   end\n      end\n      return map(row, function(cell) return fill_cell(cell,\
    \ capacity) end)\n    end\n    return map(grid, function(row) return fill_row(row,\
    \ capacity) end)\n  end\n  local function is_empty(grid)\n    local function is_empty_row(row)\n\
    \      local function is_empty_cell(cell)\n        return cell == 0\n      end\n\
    \      return all(row, is_empty_cell)\n    end\n    return all(grid, is_empty_row)\n\
    \  end\n  local function count_water(grid)\n    local function count_water_row(row)\n\
    \      local function count_water_cell(cell)\n        if cell > 0 then\n     \
    \     return 1\n        else\n          return 0\n        end\n      end\n   \
    \   return sum(row, count_water_cell)\n    end\n    return sum(grid, count_water_row)\n\
    \  end\n  local function count_water_in_row(row)\n    local function count_water_in_cell(cell)\n\
    \      if cell > 0 then\n        return 1\n      else\n        return 0\n    \
    \  end\n    end\n    return sum(row, count_water_in_cell)\n  end\n  local function\
    \ count_water_in_grid(grid)\n    local function count_water_in_row(row)\n    \
    \  local function count_water_in_cell(cell)\n        if cell > 0 then\n      \
    \    return 1\n        else\n          return 0\n        end\n      end\n    \
    \  return sum(row, count_water_in_cell)\n    end\n    return sum(grid, count_water_in_row)\n\
    \  end\n  local function count_water_in_column(grid, column)\n    local function\
    \ count_water_in_cell(row)\n      return row[column]\n    end\n    return sum(grid,\
    \ count_water_in_cell)\n  end\n  local function count_water", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 0\
    \ then\n                    return 0\n                else\n                 \
    \   return capacity\n                end\n            end\n            return\
    \ map(row, function(cell) return fill_cell(cell, capacity) end)\n        end\n\
    \        return map(grid, function(row) return fill_row(row, capacity) end)\n\
    \    end\n    local function sum_grid(grid)\n        local function sum_row(row)\n\
    \            local function sum_cell(cell)\n                return cell\n    \
    \        end\n            return foldl(row, 0, function(acc, cell) return acc\
    \ + sum_cell(cell) end)\n        end\n        return foldl(grid, 0, function(acc,\
    \ row) return acc + sum_row(row) end)\n    end\n    local function max_row(grid)\n\
    \        local function max_cell(row)\n            local function max_cell(acc,\
    \ cell)\n                if cell > acc then\n                    return cell\n\
    \                else\n                    return acc\n                end\n \
    \           end\n            return foldl(row, 0, max_cell)\n        end\n   \
    \     return foldl(grid, 0, function(acc, row) return max_cell(row) end)\n   \
    \ end\n    local function remove_max_row(grid)\n        local function remove_max_cell(row)\n\
    \            local function remove_max_cell(acc, cell)\n                if cell\
    \ == max_cell(row) then\n                    return acc\n                else\n\
    \                    return acc + cell\n                end\n            end\n\
    \            return foldl(row, 0, remove_max_cell)\n        end\n        return\
    \ map(grid, function(row) return remove_max_cell(row) end)\n    end\n    local\
    \ function fill_max_row(grid, capacity)\n        local function fill_max_cell(row,\
    \ capacity)\n            local function fill_max_cell(acc, cell)\n           \
    \     if cell == max_cell(row) then\n                    return acc + capacity\n\
    \                else\n                    return acc + cell\n               \
    \ end\n            end\n            return foldl(row, 0, function(acc, cell) return\
    \ fill", "  local function fill(grid, capacity)\n    local function fill_row(row,\
    \ capacity)\n      local function fill_cell(cell, capacity)\n        if cell ==\
    \ 0 then\n          return 0\n        else\n          return capacity\n      \
    \  end\n      end\n      return map(fill_cell, row, capacity)\n    end\n    return\
    \ map(fill_row, grid, capacity)\n  end\n  local function sum_grid(grid)\n    local\
    \ function sum_row(row)\n      local function sum_cell(cell)\n        return cell\n\
    \      end\n      return reduce(sum_cell, row, 0)\n    end\n    return reduce(sum_row,\
    \ grid, 0)\n  end\n  return sum_grid(fill(grid, capacity))\nend", "  local function\
    \ fill(i, j)\n    if i < 1 or i > #grid or j < 1 or j > #grid[1] or grid[i][j]\
    \ == 0 then\n      return 0\n    end\n    grid[i][j] = 0\n    return 1 + fill(i\
    \ - 1, j) + fill(i + 1, j) + fill(i, j - 1) + fill(i, j + 1)\n  end\n  local function\
    \ fill_all()\n    local count = 0\n    for i = 1, #grid do\n      for j = 1, #grid[1]\
    \ do\n        count = count + fill(i, j)\n      end\n    end\n    return count\n\
    \  end\n  local count = 0\n  while fill_all() > 0 do\n    count = count + 1\n\
    \  end\n  return count\nend", "    local function fill(grid, capacity)\n     \
    \   local function fill_row(row, capacity)\n            local function fill_cell(cell,\
    \ capacity)\n                if capacity == 0 then\n                    return\
    \ 0\n                elseif cell == 0 then\n                    return capacity\n\
    \                else\n                    return 0\n                end\n   \
    \         end\n            local function fill_row_iter(row, capacity, i)\n  \
    \              if i > #row then\n                    return capacity\n       \
    \         else\n                    return fill_row_iter(row, fill_cell(row[i],\
    \ capacity), i + 1)\n                end\n            end\n            return\
    \ fill_row_iter(row, capacity, 1)\n        end\n        local function fill_grid_iter(grid,\
    \ capacity, i)\n            if i > #grid then\n                return capacity\n\
    \            else\n                return fill_grid_iter(grid, fill_row(grid[i],\
    \ capacity), i + 1)\n            end\n        end\n        return fill_grid_iter(grid,\
    \ capacity, 1)\n    end\n    local function fill_iter(grid, capacity, i)\n   \
    \     if fill(grid, capacity) == 0 then\n            return i\n        else\n\
    \            return fill_iter(grid, fill(grid, capacity), i + 1)\n        end\n\
    \    end\n    return fill_iter(grid, capacity, 0)\nend", "    local function max_fill_row(row,\
    \ capacity)\n        local count = 0\n        local current_capacity = capacity\n\
    \        for i = 1, #row do\n            if row[i] == 1 then\n               \
    \ if current_capacity == 0 then\n                    current_capacity = capacity\n\
    \                    count = count + 1\n                end\n                current_capacity\
    \ = current_capacity - 1\n            end\n        end\n        return count\n\
    \    end\n    local count = 0\n    for i = 1, #grid do\n        count = count\
    \ + max_fill_row(grid[i], capacity)\n    end\n    return count\nend", "  local\
    \ function fill(grid, capacity)\n    local function fill_row(row, capacity)\n\
    \      local function fill_cell(cell, capacity)\n        if cell == 0 then\n \
    \         return 0\n        else\n          return capacity\n        end\n   \
    \   end\n      return map(row, function(cell) return fill_cell(cell, capacity)\
    \ end)\n    end\n    return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n  end\n  local function empty(grid)\n    local function empty_row(row)\n\
    \      local function empty_cell(cell)\n        if cell == 0 then\n          return\
    \ 0\n        else\n          return 1\n        end\n      end\n      return map(row,\
    \ function(cell) return empty_cell(cell) end)\n    end\n    return map(grid, function(row)\
    \ return empty_row(row) end)\n  end\n  local function count(grid)\n    local function\
    \ count_row(row)\n      local function count_cell(cell)\n        if cell == 0\
    \ then\n          return 0\n        else\n          return 1\n        end\n  \
    \    end\n      return reduce(row, function(acc, cell) return acc + count_cell(cell)\
    \ end, 0)\n    end\n    return reduce(grid, function(acc, row) return acc + count_row(row)\
    \ end, 0)\n  end\n  local function max_fill_rec(grid, capacity)\n    if count(grid)\
    \ == 0 then\n      return 0\n    else\n      return 1 + max_fill_rec(empty(fill(grid,\
    \ capacity)), capacity)\n    end\n  end\n  return max_fill_rec(grid, capacity)\n\
    end", "    local function fill(grid, capacity)\n        local function fill_row(row,\
    \ capacity)\n            local function fill_cell(cell, capacity)\n          \
    \      if cell == 1 then\n                    return capacity - 1\n          \
    \      else\n                    return capacity\n                end\n      \
    \      end\n            local function fill_row_helper(row, capacity, result)\n\
    \                if #row == 0 then\n                    return result\n      \
    \          else\n                    local cell = table.remove(row, 1)\n     \
    \               local new_capacity = fill_cell(cell, capacity)\n             \
    \       if new_capacity == 0 then\n                        return fill_row_helper(row,\
    \ capacity, result + 1)\n                    else\n                        return\
    \ fill_row_helper(row, new_capacity, result)\n                    end\n      \
    \          end\n            end\n            return fill_row_helper(row, capacity,\
    \ 0)\n        end\n        local function fill_grid_helper(grid, capacity, result)\n\
    \            if #grid == 0 then\n                return result\n            else\n\
    \                local row = table.remove(grid, 1)\n                local new_capacity\
    \ = fill_row(row, capacity)\n                return fill_grid_helper(grid, new_capacity,\
    \ result + 1)\n            end\n        end\n        return fill_grid_helper(grid,\
    \ capacity, 0)\n    end\n    return fill(grid, capacity)\nend", "    local function\
    \ fill(grid, capacity)\n        local function fill_row(row, capacity)\n     \
    \       local function fill_cell(cell, capacity)\n                if cell == 1\
    \ then\n                    return capacity - 1\n                else\n      \
    \              return capacity\n                end\n            end\n       \
    \     return map(row, function(cell) return fill_cell(cell, capacity) end)\n \
    \       end\n        return map(grid, function(row) return fill_row(row, capacity)\
    \ end)\n    end\n    local function count_fill(grid)\n        local function count_row(row)\n\
    \            local function count_cell(cell)\n                if cell == 0 then\n\
    \                    return 1\n                else\n                    return\
    \ 0\n                end\n            end\n            return sum(map(row, count_cell))\n\
    \        end\n        return sum(map(grid, count_row))\n    end\n    local function\
    \ is_filled(grid)\n        local function is_row_filled(row)\n            return\
    \ all(row, function(cell) return cell == 0 end)\n        end\n        return all(grid,\
    \ is_row_filled)\n    end\n    local function remove_filled_rows(grid)\n     \
    \   local function remove_filled_row(row)\n            return not is_filled(row)\n\
    \        end\n        return filter(grid, remove_filled_row)\n    end\n    local\
    \ function fill_grid(grid, capacity)\n        local function fill_grid_iter(grid,\
    \ capacity, count)\n            if is_filled(grid) then\n                return\
    \ count\n            else\n                return fill_grid_iter(remove_filled_rows(fill(grid,\
    \ capacity)), capacity, count + count_fill(grid))\n            end\n        end\n\
    \        return fill_grid_iter(grid, capacity, 0)\n    end\n    return fill_grid(grid,\
    \ capacity)\nend", "    local function fill(grid, capacity)\n        local max_height\
    \ = 0\n        for i = 1, #grid do\n            local height = 0\n           \
    \ for j = 1, #grid[i] do\n                if grid[i][j] == 1 then\n          \
    \          height = height + 1\n                end\n            end\n       \
    \     if height > max_height then\n                max_height = height\n     \
    \       end\n        end\n        local count = 0\n        for i = 1, #grid do\n\
    \            local height = 0\n            for j = 1, #grid[i] do\n          \
    \      if grid[i][j] == 1 then\n                    height = height + 1\n    \
    \            end\n            end\n            if height < max_height then\n \
    \               count = count + max_height - height\n            end\n       \
    \ end\n        return count\n    end\n    return fill(grid, capacity)\nend", " \
    \   local function max_fill_rec(grid, capacity, row, col, count)\n        if row\
    \ > #grid then\n            return count\n        end\n        if col > #grid[1]\
    \ then\n            return max_fill_rec(grid, capacity, row + 1, 1, count)\n \
    \       end\n        if grid[row][col] == 1 then\n            grid[row][col] =\
    \ 0\n            return max_fill_rec(grid, capacity, row, col + 1, count + 1)\n\
    \        end\n        return max_fill_rec(grid, capacity, row, col + 1, count)\n\
    \    end\n    return max_fill_rec(grid, capacity, 1, 1, 0)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
