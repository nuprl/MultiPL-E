name: HumanEval_34_unique
language: lua
results:
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnn02nmku.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpnn02nmku.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnn02nmku.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph2luf5e.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpph2luf5e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgctih4yr.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpgctih4yr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgctih4yr.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5q8phpc.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpk5q8phpc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sbxwuhi.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2sbxwuhi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2sbxwuhi.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpew4q0l0j.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpew4q0l0j.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpew4q0l0j.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay90losq.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpay90losq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjj3hjnh.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpzjj3hjnh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzjj3hjnh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mzj2whe.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp4mzj2whe.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v] =\
    \ true\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2_cfhv6.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpf2_cfhv6.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n    local\
    \ r2 = {}\n    for k, _ in pairs(r) do\n        table.insert(r2, k)\n    end\n\
    \    table.sort(r2)\n    return r2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqobuw1_0.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpqobuw1_0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqobuw1_0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jb9bq3l.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2jb9bq3l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2jb9bq3l.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe44fq1_3.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpe44fq1_3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe44fq1_3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qckw8zz.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp3qckw8zz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wndzs82.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2wndzs82.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2wndzs82.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6es_vt9.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpq6es_vt9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq6es_vt9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnl0098vv.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpnl0098vv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnl0098vv.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyg2vfoq.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpeyg2vfoq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3fgeh84.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpm3fgeh84.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5m2skinz.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp5m2skinz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdhqo1upt.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpdhqo1upt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdhqo1upt.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvy5c6s3r.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpvy5c6s3r.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvy5c6s3r.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n    return\
    \ keys(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2dxsujci.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp2dxsujci.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2dxsujci.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14u0zku9.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp14u0zku9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp14u0zku9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizwxuxbj.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpizwxuxbj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplq85pmat.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmplq85pmat.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplq85pmat.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gsdngng.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp5gsdngng.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5gsdngng.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn7y5vvk.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpxn7y5vvk.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if not t[v] then\n           \
    \ t[v] = true\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps91klc3h.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmps91klc3h.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0lq5jm0.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpj0lq5jm0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpj0lq5jm0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4gu9gtbm.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp4gu9gtbm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4gu9gtbm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjrpovsl.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmppjrpovsl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppjrpovsl.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5eoclabz.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp5eoclabz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5eoclabz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppho13uj1.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmppho13uj1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppho13uj1.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8297bf_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmph8297bf_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv00zlak8.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpv00zlak8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpv00zlak8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqi9dn1o.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmplqi9dn1o.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplqi9dn1o.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6cilc4n.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpn6cilc4n.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn6cilc4n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpux9sb9g5.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpux9sb9g5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpux9sb9g5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkjj2tga.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmplkjj2tga.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp503gj2.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmprp503gj2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprp503gj2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c32cxn8.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp9c32cxn8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrplclgi.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpnrplclgi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnrplclgi.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    if not t[v] then\n      t[v] = true\n\
    \      table.insert(t, v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntugbnxq.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpntugbnxq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3843h8mx.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp3843h8mx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqg9jdww.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmprqg9jdww.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvf0bq9w.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpmvf0bq9w.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local u = {}\n\
    \  for k, _ in pairs(r) do\n    u[#u+1] = k\n  end\n  table.sort(u)\n  return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe577yq78.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpe577yq78.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe577yq78.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            r[#r + 1] = v\n        end\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ocn920o.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp3ocn920o.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwj4mx4eh.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpwj4mx4eh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local r2 = {}\n\
    \  for k, _ in pairs(r) do\n    table.insert(r2, k)\n  end\n  table.sort(r2)\n\
    \  return r2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v5phyg5.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp0v5phyg5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0v5phyg5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ye0mr26.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2ye0mr26.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2ye0mr26.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd1reoqs3.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpd1reoqs3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd1reoqs3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      table.insert(result, v)\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpashmjrmf.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpashmjrmf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2z22n3_.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpu2z22n3_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu2z22n3_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7srljb8.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpj7srljb8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpj7srljb8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp57wfls9q.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp57wfls9q.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp57wfls9q.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw0if8ey.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmprw0if8ey.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnqsd4wa.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxnqsd4wa.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxnqsd4wa.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _,v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp969an8gv.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp969an8gv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0z8aj2hu.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp0z8aj2hu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzym3rge.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpkzym3rge.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkzym3rge.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp20t9xksf.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp20t9xksf.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp20t9xksf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse27d6hk.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpse27d6hk.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpse27d6hk.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnztmm9j.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmplnztmm9j.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpevfkl6as.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpevfkl6as.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpevfkl6as.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps8u7jw9s.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmps8u7jw9s.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps8u7jw9s.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ed4gtdb.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp1ed4gtdb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1ed4gtdb.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivqat6o8.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpivqat6o8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn41k6caf.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpn41k6caf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6c5m3wjm.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp6c5m3wjm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6c5m3wjm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppena66wc.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmppena66wc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppena66wc.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps41001kn.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmps41001kn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps41001kn.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37gtvi0t.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp37gtvi0t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp37gtvi0t.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fjed318.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp_fjed318.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4g9c1edj.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp4g9c1edj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4g9c1edj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi4x_mvu2.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpi4x_mvu2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpi4x_mvu2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp865m0xky.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp865m0xky.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp865m0xky.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_eel23fy.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp_eel23fy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_eel23fy.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpipj_a_7m.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpipj_a_7m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpipj_a_7m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrfmesyy.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpfrfmesyy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcez3kg8m.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpcez3kg8m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcez3kg8m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn98h86_m.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpn98h86_m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn98h86_m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgq75_sb.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmptgq75_sb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptgq75_sb.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bzh4_p4.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2bzh4_p4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2bzh4_p4.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluarb19l.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpluarb19l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpluarb19l.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5o12koae.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp5o12koae.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5o12koae.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo94ir6al.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpo94ir6al.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwn6noz8_.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpwn6noz8_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwn6noz8_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnrkh0siy.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpnrkh0siy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnrkh0siy.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxg7_ifkb.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxg7_ifkb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxg7_ifkb.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            r[#r + 1] = v\n        end\n    end\n    return r\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjdr9wsp.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpvjdr9wsp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7yuo47jd.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp7yuo47jd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7yuo47jd.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcloqdv5e.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpcloqdv5e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ hash = {}\n    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ hash[v] then\n            res[#res+1] = v\n            hash[v] = true\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo06hg67v.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpo06hg67v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77yttgpp.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp77yttgpp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp77yttgpp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _,v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpndxdxudj.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpndxdxudj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpndxdxudj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqy8zrtm.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpiqy8zrtm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiqy8zrtm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0crq4a6.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpa0crq4a6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa0crq4a6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yzzz_vh.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp9yzzz_vh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for i = 1, #l do\n    r[l[i]] = true\n  end\n  local u = {}\n  for\
    \ k, _ in pairs(r) do\n    u[#u + 1] = k\n  end\n  table.sort(u)\n  return u\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v] =\
    \ true\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4oyhes3.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpn4oyhes3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxv5nifgp.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxv5nifgp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxv5nifgp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[v] = true\n\tend\n\tlocal r = {}\n\
    \tfor k in pairs(t) do\n\t\ttable.insert(r, k)\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtg8s4uv.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpbtg8s4uv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph1ahyj00.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmph1ahyj00.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmph1ahyj00.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  return keys(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kdy_kwu.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmp_kdy_kwu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_kdy_kwu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqkhppead.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpqkhppead.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqkhppead.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprfm7cfeb.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmprfm7cfeb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprfm7cfeb.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudn2r28d.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpudn2r28d.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpudn2r28d.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93tv3p08.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp93tv3p08.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp93tv3p08.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnskys4__.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpnskys4__.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnskys4__.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf_ri5he.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmplf_ri5he.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplf_ri5he.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhfwb1iz.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpvhfwb1iz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvhfwb1iz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2nk6637y.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp2nk6637y.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2nk6637y.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a8j4e3k.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp1a8j4e3k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjkm3pvz4.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpjkm3pvz4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjkm3pvz4.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqu27pfet.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpqu27pfet.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      table.insert(result, v)\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmf7_u5ek.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpmf7_u5ek.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_9gv9uz.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp1_9gv9uz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1_9gv9uz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty3qdfxe.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpty3qdfxe.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf28ynaye.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpf28ynaye.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf28ynaye.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjtbnthc0.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpjtbnthc0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjtbnthc0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuxac_48.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmphuxac_48.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphuxac_48.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzpmxo_jw.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpzpmxo_jw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzpmxo_jw.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v] =\
    \ true\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbtqx5t8.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpjbtqx5t8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n    return\
    \ keys(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnb3klayv.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpnb3klayv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnb3klayv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcsuvksq.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpbcsuvksq.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp56idu4mm.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp56idu4mm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp56idu4mm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpjh33y9.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmprpjh33y9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprpjh33y9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1r0lzhle.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp1r0lzhle.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1r0lzhle.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgd0j88lo.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpgd0j88lo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgd0j88lo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1igz1b0v.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp1igz1b0v.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1igz1b0v.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l5fg_ms.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp4l5fg_ms.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivl5i508.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpivl5i508.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpox7pizy8.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpox7pizy8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpox7pizy8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68zkazbp.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp68zkazbp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp68zkazbp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfnqh_i6f.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpfnqh_i6f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfnqh_i6f.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphju23kq8.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmphju23kq8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphju23kq8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphlazk4bc.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmphlazk4bc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphlazk4bc.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy36oa_m7.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpy36oa_m7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy36oa_m7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaqbpa6a.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpmaqbpa6a.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjdub9rd8.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpjdub9rd8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjdub9rd8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ofokzur.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp8ofokzur.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8ofokzur.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rvmsmla.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp7rvmsmla.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7rvmsmla.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpazcxs__6.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpazcxs__6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpazcxs__6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0ew9f9f.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpy0ew9f9f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy0ew9f9f.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu88cbq5c.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpu88cbq5c.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywiu5xda.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpywiu5xda.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpywiu5xda.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkpwc6zh.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpwkpwc6zh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwkpwc6zh.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local u = {}\n\
    \  for k, _ in pairs(r) do\n    u[#u+1] = k\n  end\n  table.sort(u)\n  return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mgxdbl3.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp5mgxdbl3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5mgxdbl3.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_mj319ho.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp_mj319ho.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_mj319ho.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not contains(res, v) then\n   \
    \   table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6av_ttep.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp6av_ttep.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6av_ttep.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n    return\
    \ keys(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv3a_udv.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpcv3a_udv.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcv3a_udv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_9dv__b.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpd_9dv__b.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if not t[v] then\n           \
    \ t[v] = true\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjul4ohh.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmptjul4ohh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphn96ljyr.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmphn96ljyr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2paw1ir.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpe2paw1ir.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe2paw1ir.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqhkd5r0l.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpqhkd5r0l.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqhkd5r0l.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  return keys(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnr6r6wnt.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpnr6r6wnt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpnr6r6wnt.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq5mcakq.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpaq5mcakq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaq5mcakq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaa1b0ocj.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpaa1b0ocj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpaa1b0ocj.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3miogjn_.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp3miogjn_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3miogjn_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprm4mhyst.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmprm4mhyst.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprm4mhyst.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoqodkh56.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpoqodkh56.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpoqodkh56.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthyoouow.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpthyoouow.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqa8lgu4s.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpqa8lgu4s.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqa8lgu4s.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap2k93xl.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpap2k93xl.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxi3guno5.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpxi3guno5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxi3guno5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpreo_hh2a.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpreo_hh2a.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpreo_hh2a.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb985o5dn.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpb985o5dn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpb985o5dn.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ygmbmin.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp7ygmbmin.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7ygmbmin.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo17s8psz.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpo17s8psz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpo17s8psz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lgk9jlc.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp9lgk9jlc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9lgk9jlc.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4418y3lx.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp4418y3lx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  return keys(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk9wx1dr.lua:9:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpdk9wx1dr.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdk9wx1dr.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzu9k7g9.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpkzu9k7g9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkzu9k7g9.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3tpji7d.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpf3tpji7d.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5b4n2jc5.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp5b4n2jc5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5b4n2jc5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7vgfnlc.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpo7vgfnlc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7tp9aaol.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp7tp9aaol.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7tp9aaol.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgz07mjdn.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpgz07mjdn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgz07mjdn.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9mutjq3q.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp9mutjq3q.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9mutjq3q.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptnkl4owo.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmptnkl4owo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptnkl4owo.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local u = {}\n\
    \  for k, _ in pairs(r) do\n    u[#u+1] = k\n  end\n  table.sort(u)\n  return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjilzgjt.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpgjilzgjt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgjilzgjt.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uuo228_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmp6uuo228_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9f8mno51.lua:7:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmp9f8mno51.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9f8mno51.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaby2lgf.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\nstack traceback:\n\t/tmp/tmpvaby2lgf.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
