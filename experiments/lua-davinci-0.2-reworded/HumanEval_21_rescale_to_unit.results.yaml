---
name: HumanEval_21_rescale_to_unit
language: lua
results:
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqfcu1xo3.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqfcu1xo3.lua:6:
    in local 'candidate'\n\t/tmp/tmpqfcu1xo3.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvnkb0uk.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpsvnkb0uk.lua:6:
    in local 'candidate'\n\t/tmp/tmpsvnkb0uk.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given table of numbers (of at least two elements), apply a linear transform
    to that table,\n-- such that the smallest number will become 0 and the largest
    will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,
    0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\tlocal
    max = numbers[1]\n\tfor _, n in ipairs(numbers) do\n\t\tif n < min then\n\t\t\tmin
    = n\n\t\tend\n\t\tif n > max then\n\t\t\tmax = n\n\t\tend\n\tend\n\tlocal result
    = {}\n\tfor _, n in ipairs(numbers) do\n\t\ttable.insert(result, (n - min) / (max
    - min))\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,
    1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,
    2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,
    1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,
    11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2omx9kd.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpe2omx9kd.lua:6:
    in local 'candidate'\n\t/tmp/tmpe2omx9kd.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local scale = max - min
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqcyyak_3.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqcyyak_3.lua:6:
    in local 'candidate'\n\t/tmp/tmpqcyyak_3.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for i = 2, #numbers do
        if numbers[i] < min then
          min = numbers[i]
        elseif numbers[i] > max then
          max = numbers[i]
        end
      end
      local result = {}
      for i = 1, #numbers do
        result[i] = (numbers[i] - min) / (max - min)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min_number = math.min(unpack(numbers))
      local max_number = math.max(unpack(numbers))
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min_number) / (max_number - min_number))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1y2e8p3e.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1y2e8p3e.lua:6:
    in local 'candidate'\n\t/tmp/tmp1y2e8p3e.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local scale = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyu7u9q5i.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpyu7u9q5i.lua:6:
    in local 'candidate'\n\t/tmp/tmpyu7u9q5i.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min_number then
                min_number = number
            end
            if number > max_number then
                max_number = number
            end
        end
        local scale = 1 / (max_number - min_number)
        local scaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(scaled_numbers, (number - min_number) * scale)
        end
        return scaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local scale = 1 / (max - min)
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkopd1yjq.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkopd1yjq.lua:6:
    in local 'candidate'\n\t/tmp/tmpkopd1yjq.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg27bu5jn.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpg27bu5jn.lua:6:
    in local 'candidate'\n\t/tmp/tmpg27bu5jn.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwki8cm7.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppwki8cm7.lua:6:
    in local 'candidate'\n\t/tmp/tmppwki8cm7.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumzz_53b.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpumzz_53b.lua:6:
    in local 'candidate'\n\t/tmp/tmpumzz_53b.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, v in ipairs(numbers) do
            if v < min then
                min = v
            end
            if v > max then
                max = v
            end
        end
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzziuupgi.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzziuupgi.lua:6:
    in local 'candidate'\n\t/tmp/tmpzziuupgi.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqlfsl5km.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqlfsl5km.lua:6:
    in local 'candidate'\n\t/tmp/tmpqlfsl5km.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgmmp17bp.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgmmp17bp.lua:6:
    in local 'candidate'\n\t/tmp/tmpgmmp17bp.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for i = 2, #numbers do
        if numbers[i] < min then
          min = numbers[i]
        elseif numbers[i] > max then
          max = numbers[i]
        end
      end
      local result = {}
      for i = 1, #numbers do
        result[i] = (numbers[i] - min) / (max - min)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local scale = 1 / (max - min)
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local range = max - min
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local range = max - min
        local rescaled = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled, (number - min) / range)
        end
        return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwxvrca0.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdwxvrca0.lua:6:
    in local 'candidate'\n\t/tmp/tmpdwxvrca0.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min_number = math.min(unpack(numbers))
      local max_number = math.max(unpack(numbers))
      local range = max_number - min_number
      local rescaled_numbers = {}
      for _, number in ipairs(numbers) do
        table.insert(rescaled_numbers, (number - min_number) / range)
      end
      return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8c_qf82.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpf8c_qf82.lua:6:
    in local 'candidate'\n\t/tmp/tmpf8c_qf82.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for i, v in ipairs(numbers) do
            result[i] = (v - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81h9n4b6.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp81h9n4b6.lua:6:
    in local 'candidate'\n\t/tmp/tmp81h9n4b6.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min_number then
                min_number = number
            end
            if number > max_number then
                max_number = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min_number) / (max_number - min_number))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpazrzi6.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpxpazrzi6.lua:6:
    in local 'candidate'\n\t/tmp/tmpxpazrzi6.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzw54ypoq.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzw54ypoq.lua:6:
    in local 'candidate'\n\t/tmp/tmpzw54ypoq.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local scale = 1 / (max - min)
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg101o_l2.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpg101o_l2.lua:6:
    in local 'candidate'\n\t/tmp/tmpg101o_l2.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcf7epqty.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcf7epqty.lua:6:
    in local 'candidate'\n\t/tmp/tmpcf7epqty.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for i, v in ipairs(numbers) do
            result[i] = (v - min) / range
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc4ijddh_.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpc4ijddh_.lua:6:
    in local 'candidate'\n\t/tmp/tmpc4ijddh_.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min_number) / (max_number - min_number))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6im1173u.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6im1173u.lua:6:
    in local 'candidate'\n\t/tmp/tmp6im1173u.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, v in ipairs(numbers) do
            if v < min then
                min = v
            end
            if v > max then
                max = v
            end
        end
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local scale = 1 / (max - min)
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local scale = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpczufl8ht.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpczufl8ht.lua:6:
    in local 'candidate'\n\t/tmp/tmpczufl8ht.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for i, number in ipairs(numbers) do
            rescaled_numbers[i] = (number - min_number) / range
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6w7c7_t.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpk6w7c7_t.lua:6:
    in local 'candidate'\n\t/tmp/tmpk6w7c7_t.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptn9xesrk.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmptn9xesrk.lua:6:
    in local 'candidate'\n\t/tmp/tmptn9xesrk.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyr0w2gs3.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpyr0w2gs3.lua:6:
    in local 'candidate'\n\t/tmp/tmpyr0w2gs3.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, n in ipairs(numbers) do
        if n < min then min = n end
        if n > max then max = n end
      end
      local scale = 1.0 / (max - min)
      local result = {}
      for _, n in ipairs(numbers) do
        table.insert(result, (n - min) * scale)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local result = {}
      for _, v in ipairs(numbers) do
        table.insert(result, (v - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwxr8qbjw.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwxr8qbjw.lua:6:
    in local 'candidate'\n\t/tmp/tmpwxr8qbjw.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local range = max - min
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / range
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given table of numbers (of at least two elements), apply a linear transform
    to that table,\n-- such that the smallest number will become 0 and the largest
    will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,
    0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n\tlocal min, max = numbers[1],
    numbers[1]\n\tfor i = 2, #numbers do\n\t\tif numbers[i] < min then\n\t\t\tmin
    = numbers[i]\n\t\telseif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tlocal
    result = {}\n\tfor i = 1, #numbers do\n\t\tresult[i] = (numbers[i] - min) / (max
    - min)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,
    1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,
    2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,
    1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,
    11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local range = max - min
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / range)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mj71f3s.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4mj71f3s.lua:6:
    in local 'candidate'\n\t/tmp/tmp4mj71f3s.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min_number then
                min_number = numbers[i]
            elseif numbers[i] > max_number then
                max_number = numbers[i]
            end
        end
        local range = max_number - min_number
        local rescaled_numbers = {}
        for i = 1, #numbers do
            rescaled_numbers[i] = (numbers[i] - min_number) / range
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdehf3vj.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwdehf3vj.lua:6:
    in local 'candidate'\n\t/tmp/tmpwdehf3vj.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6a8aar5.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpe6a8aar5.lua:6:
    in local 'candidate'\n\t/tmp/tmpe6a8aar5.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for i, number in ipairs(numbers) do
            result[i] = (number - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for i, number in ipairs(numbers) do
            if number < min_number then
                min_number = number
            end
            if number > max_number then
                max_number = number
            end
        end
        local scale = 1.0 / (max_number - min_number)
        local result = {}
        for i, number in ipairs(numbers) do
            result[i] = (number - min_number) * scale
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            result[#result + 1] = (number - min_number) / (max_number - min_number)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpitym42kd.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpitym42kd.lua:6:
    in local 'candidate'\n\t/tmp/tmpitym42kd.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local range = max - min
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local scale = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / scale)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15nb8y0n.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp15nb8y0n.lua:6:
    in local 'candidate'\n\t/tmp/tmp15nb8y0n.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local scale = max_number - min_number
        local scaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(scaled_numbers, (number - min_number) / scale)
        end
        return scaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvayeehq2.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvayeehq2.lua:6:
    in local 'candidate'\n\t/tmp/tmpvayeehq2.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, number in ipairs(numbers) do
        if number < min then
          min = number
        end
        if number > max then
          max = number
        end
      end
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local rescaled = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled, (number - min) / range)
        end
        return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxb4ug8q.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpnxb4ug8q.lua:6:
    in local 'candidate'\n\t/tmp/tmpnxb4ug8q.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local scale = max - min
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / scale)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmadxgyev.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmadxgyev.lua:6:
    in local 'candidate'\n\t/tmp/tmpmadxgyev.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_value = math.min(unpack(numbers))
        local max_value = math.max(unpack(numbers))
        local range = max_value - min_value
        local rescaled = {}
        for i, v in ipairs(numbers) do
            rescaled[i] = (v - min_value) / range
        end
        return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2fte113.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpu2fte113.lua:6:
    in local 'candidate'\n\t/tmp/tmpu2fte113.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local range = max - min
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5s74f6hn.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5s74f6hn.lua:6:
    in local 'candidate'\n\t/tmp/tmp5s74f6hn.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            result[#result + 1] = (n - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfrwyxqpl.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpfrwyxqpl.lua:6:
    in local 'candidate'\n\t/tmp/tmpfrwyxqpl.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for i, number in ipairs(numbers) do
            result[i] = (number - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given table of numbers (of at least two elements), apply a linear transform
    to that table,\n-- such that the smallest number will become 0 and the largest
    will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,
    0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n\tlocal min = numbers[1]\n\tlocal
    max = numbers[1]\n\tfor i = 2, #numbers do\n\t\tif numbers[i] < min then\n\t\t\tmin
    = numbers[i]\n\t\telseif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\tend\n\tlocal
    result = {}\n\tfor i = 1, #numbers do\n\t\tresult[i] = (numbers[i] - min) / (max
    - min)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0,
    1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0,
    2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0,
    1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0,
    11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bkruhrt.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp8bkruhrt.lua:6:
    in local 'candidate'\n\t/tmp/tmp8bkruhrt.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl99cocyf.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpl99cocyf.lua:6:
    in local 'candidate'\n\t/tmp/tmpl99cocyf.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyw5tfvi.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoyw5tfvi.lua:6:
    in local 'candidate'\n\t/tmp/tmpoyw5tfvi.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local scale = 1.0 / (max - min)
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdy1gx2gk.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdy1gx2gk.lua:6:
    in local 'candidate'\n\t/tmp/tmpdy1gx2gk.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkdq2hm8w.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkdq2hm8w.lua:6:
    in local 'candidate'\n\t/tmp/tmpkdq2hm8w.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local scale = max_number - min_number
        local scaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(scaled_numbers, (number - min_number) / scale)
        end
        return scaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcwqsevd.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmprcwqsevd.lua:6:
    in local 'candidate'\n\t/tmp/tmprcwqsevd.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            result[#result + 1] = (number - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, number in ipairs(numbers) do
        if number < min then
          min = number
        end
        if number > max then
          max = number
        end
      end
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local range = max - min
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / range
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmomn9vt4.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmomn9vt4.lua:6:
    in local 'candidate'\n\t/tmp/tmpmomn9vt4.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local scale = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn7nfovl4.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpn7nfovl4.lua:6:
    in local 'candidate'\n\t/tmp/tmpn7nfovl4.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min_number then
                min_number = number
            end
            if number > max_number then
                max_number = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min_number) / (max_number - min_number))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local scale = max - min
      local result = {}
      for i, v in ipairs(numbers) do
        result[i] = (v - min) / scale
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77yv6le2.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp77yv6le2.lua:6:
    in local 'candidate'\n\t/tmp/tmp77yv6le2.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local range = max - min
      local rescaled = {}
      for i, v in ipairs(numbers) do
        rescaled[i] = (v - min) / range
      end
      return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk90m2o15.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpk90m2o15.lua:6:
    in local 'candidate'\n\t/tmp/tmpk90m2o15.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min_number) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq3tmkpl.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpaq3tmkpl.lua:6:
    in local 'candidate'\n\t/tmp/tmpaq3tmkpl.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min_number then
                min_number = number
            end
            if number > max_number then
                max_number = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min_number) / (max_number - min_number))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvobcc0rv.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpvobcc0rv.lua:6:
    in local 'candidate'\n\t/tmp/tmpvobcc0rv.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lxa2lrk.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp6lxa2lrk.lua:6:
    in local 'candidate'\n\t/tmp/tmp6lxa2lrk.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplocgiwzo.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplocgiwzo.lua:6:
    in local 'candidate'\n\t/tmp/tmplocgiwzo.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = numbers[1]
        local max_number = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min_number then
                min_number = number
            end
            if number > max_number then
                max_number = number
            end
        end
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            local rescaled_number = (number - min_number) / range
            table.insert(rescaled_numbers, rescaled_number)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1h5flmj.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmps1h5flmj.lua:6:
    in local 'candidate'\n\t/tmp/tmps1h5flmj.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            result[#result + 1] = (number - min) / range
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ekrvyr3.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9ekrvyr3.lua:6:
    in local 'candidate'\n\t/tmp/tmp9ekrvyr3.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16k5a_ud.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp16k5a_ud.lua:6:
    in local 'candidate'\n\t/tmp/tmp16k5a_ud.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for i = 2, #numbers do
        if numbers[i] < min then
          min = numbers[i]
        elseif numbers[i] > max then
          max = numbers[i]
        end
      end
      local result = {}
      for i = 1, #numbers do
        result[i] = (numbers[i] - min) / (max - min)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqh6l8eiq.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpqh6l8eiq.lua:6:
    in local 'candidate'\n\t/tmp/tmpqh6l8eiq.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj85sey09.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpj85sey09.lua:6:
    in local 'candidate'\n\t/tmp/tmpj85sey09.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gnhzlsm.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5gnhzlsm.lua:6:
    in local 'candidate'\n\t/tmp/tmp5gnhzlsm.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd75mcfqn.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpd75mcfqn.lua:6:
    in local 'candidate'\n\t/tmp/tmpd75mcfqn.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpze19agi3.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpze19agi3.lua:6:
    in local 'candidate'\n\t/tmp/tmpze19agi3.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min_number) / (max_number - min_number))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5npiqaij.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5npiqaij.lua:6:
    in local 'candidate'\n\t/tmp/tmp5npiqaij.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        return map(function(x) return (x - min_number) / range end, numbers)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykrt1w4c.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpykrt1w4c.lua:6:
    in local 'candidate'\n\t/tmp/tmpykrt1w4c.lua:15: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local range = max - min
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / range
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvapgexs.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpbvapgexs.lua:6:
    in local 'candidate'\n\t/tmp/tmpbvapgexs.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcdrc_ljg.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpcdrc_ljg.lua:6:
    in local 'candidate'\n\t/tmp/tmpcdrc_ljg.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, n in ipairs(numbers) do
        if n < min then min = n end
        if n > max then max = n end
      end
      local scale = 1 / (max - min)
      local result = {}
      for _, n in ipairs(numbers) do
        table.insert(result, (n - min) * scale)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local range = max - min
        local rescaled = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled, (number - min) / range)
        end
        return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9b4th00a.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9b4th00a.lua:6:
    in local 'candidate'\n\t/tmp/tmp9b4th00a.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, number in ipairs(numbers) do
        if number < min then
          min = number
        end
        if number > max then
          max = number
        end
      end
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphel2gtk3.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphel2gtk3.lua:6:
    in local 'candidate'\n\t/tmp/tmphel2gtk3.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkeh0jevw.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpkeh0jevw.lua:6:
    in local 'candidate'\n\t/tmp/tmpkeh0jevw.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_value = math.min(unpack(numbers))
        local max_value = math.max(unpack(numbers))
        local range = max_value - min_value
        local rescaled = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled, (number - min_value) / range)
        end
        return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxo1d9_a.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmppxo1d9_a.lua:6:
    in local 'candidate'\n\t/tmp/tmppxo1d9_a.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdv5_n8qr.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpdv5_n8qr.lua:6:
    in local 'candidate'\n\t/tmp/tmpdv5_n8qr.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_z50nnrt.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_z50nnrt.lua:6:
    in local 'candidate'\n\t/tmp/tmp_z50nnrt.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1pzozjyx.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp1pzozjyx.lua:6:
    in local 'candidate'\n\t/tmp/tmp1pzozjyx.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiyik2zqj.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpiyik2zqj.lua:6:
    in local 'candidate'\n\t/tmp/tmpiyik2zqj.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, number in ipairs(numbers) do
        if number < min then
          min = number
        end
        if number > max then
          max = number
        end
      end
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / (max - min))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05rbdjqd.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp05rbdjqd.lua:6:
    in local 'candidate'\n\t/tmp/tmp05rbdjqd.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local range = max - min
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min_number = math.min(unpack(numbers))
      local max_number = math.max(unpack(numbers))
      local range = max_number - min_number
      local rescaled_numbers = {}
      for _, number in ipairs(numbers) do
        table.insert(rescaled_numbers, (number - min_number) / range)
      end
      return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6yt0fcs.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpq6yt0fcs.lua:6:
    in local 'candidate'\n\t/tmp/tmpq6yt0fcs.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min_number = numbers[1]
      local max_number = numbers[1]
      for i = 2, #numbers do
        if numbers[i] < min_number then
          min_number = numbers[i]
        end
        if numbers[i] > max_number then
          max_number = numbers[i]
        end
      end
      local range = max_number - min_number
      local result = {}
      for i = 1, #numbers do
        result[i] = (numbers[i] - min_number) / range
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local scale = max - min
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local rescaled = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled, (number - min) / range)
        end
        return rescaled
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpft5to4_f.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpft5to4_f.lua:6:
    in local 'candidate'\n\t/tmp/tmpft5to4_f.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local result = {}
      for i, v in ipairs(numbers) do
        result[i] = (v - min) / (max - min)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw6e95l_j.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpw6e95l_j.lua:6:
    in local 'candidate'\n\t/tmp/tmpw6e95l_j.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = math.min(unpack(numbers))
      local max = math.max(unpack(numbers))
      local scale = max - min
      local result = {}
      for _, number in ipairs(numbers) do
        table.insert(result, (number - min) / scale)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp56k32xb1.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp56k32xb1.lua:6:
    in local 'candidate'\n\t/tmp/tmp56k32xb1.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local res = {}
        for _, v in ipairs(numbers) do
            table.insert(res, (v - min) / range)
        end
        return res
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzbbjjvsk.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzbbjjvsk.lua:6:
    in local 'candidate'\n\t/tmp/tmpzbbjjvsk.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwo40m1xd.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpwo40m1xd.lua:6:
    in local 'candidate'\n\t/tmp/tmpwo40m1xd.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local scale = 1 / (max - min)
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for i = 2, #numbers do
        if numbers[i] < min then
          min = numbers[i]
        elseif numbers[i] > max then
          max = numbers[i]
        end
      end
      local result = {}
      for i = 1, #numbers do
        result[i] = (numbers[i] - min) / (max - min)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for i = 2, #numbers do
            if numbers[i] < min then
                min = numbers[i]
            elseif numbers[i] > max then
                max = numbers[i]
            end
        end
        local result = {}
        for i = 1, #numbers do
            result[i] = (numbers[i] - min) / (max - min)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, num in ipairs(numbers) do
            if num < min then
                min = num
            end
            if num > max then
                max = num
            end
        end
        local range = max - min
        local result = {}
        for _, num in ipairs(numbers) do
            table.insert(result, (num - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsi_3he2q.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpsi_3he2q.lua:6:
    in local 'candidate'\n\t/tmp/tmpsi_3he2q.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local scale = 1.0 / (max - min)
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local scale = max_number - min_number
        local scaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(scaled_numbers, (number - min_number) / scale)
        end
        return scaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp99ql0m21.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp99ql0m21.lua:6:
    in local 'candidate'\n\t/tmp/tmp99ql0m21.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local range = max_number - min_number
        local rescaled_numbers = {}
        for _, number in ipairs(numbers) do
            table.insert(rescaled_numbers, (number - min_number) / range)
        end
        return rescaled_numbers
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_egq3y5j.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_egq3y5j.lua:6:
    in local 'candidate'\n\t/tmp/tmp_egq3y5j.lua:19: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, v in ipairs(numbers) do
            table.insert(result, (v - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwd1ffhp.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpgwd1ffhp.lua:6:
    in local 'candidate'\n\t/tmp/tmpgwd1ffhp.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, number in ipairs(numbers) do
            if number < min then
                min = number
            end
            if number > max then
                max = number
            end
        end
        local scale = 1 / (max - min)
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) * scale)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5kwfu_tq.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp5kwfu_tq.lua:6:
    in local 'candidate'\n\t/tmp/tmp5kwfu_tq.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min, max = math.min(unpack(numbers)), math.max(unpack(numbers))
        local range = max - min
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / range)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46yw1h6x.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp46yw1h6x.lua:6:
    in local 'candidate'\n\t/tmp/tmp46yw1h6x.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = math.min(unpack(numbers))
        local max = math.max(unpack(numbers))
        local result = {}
        for _, number in ipairs(numbers) do
            table.insert(result, (number - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4cbgs7ss.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4cbgs7ss.lua:6:
    in local 'candidate'\n\t/tmp/tmp4cbgs7ss.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
      local min = numbers[1]
      local max = numbers[1]
      for _, n in ipairs(numbers) do
        if n < min then min = n end
        if n > max then max = n end
      end
      local scale = 1.0 / (max - min)
      local result = {}
      for _, n in ipairs(numbers) do
        table.insert(result, (n - min) * scale)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min = numbers[1]
        local max = numbers[1]
        for _, n in ipairs(numbers) do
            if n < min then
                min = n
            end
            if n > max then
                max = n
            end
        end
        local result = {}
        for _, n in ipairs(numbers) do
            table.insert(result, (n - min) / (max - min))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Given table of numbers (of at least two elements), apply a linear transform to that table,
    -- such that the smallest number will become 0 and the largest will become 1
    -- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})
    -- {0.0, 0.25, 0.5, 0.75, 1.0}
    local function rescale_to_unit(numbers)
        local min_number = math.min(unpack(numbers))
        local max_number = math.max(unpack(numbers))
        local result = {}
        for i, number in ipairs(numbers) do
            result[i] = (number - min_number) / (max_number - min_number)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = rescale_to_unit
        lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})
        lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})
        lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})
        lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
        lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp77z9oi5u.lua:6:
    attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp77z9oi5u.lua:6:
    in local 'candidate'\n\t/tmp/tmp77z9oi5u.lua:18: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
