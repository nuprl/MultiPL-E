name: HumanEval_6_parse_nested_parens
language: lua
prompt: "-- Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n-- For each of the group, output the deepest\
  \ level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
  -- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
  \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n \
  \   lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
  \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local paren_groups = {}\n  for group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in group:gmatch('.')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for char\
    \ in paren_group:gmatch('.') do\n            if char == '(' then\n           \
    \     nesting = nesting + 1\n            elseif char == ')' then\n           \
    \     nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       nesting = nesting + 1\n            elseif paren == ')' then\n        \
    \        nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_levels = {}\n  local paren_level = 0\n  for paren in paren_string:gmatch('%b()')\
    \ do\n    paren_level = paren_level + 1\n    paren_levels[paren_level] = paren_levels[paren_level]\
    \ or 0\n    for c in paren:gmatch('%b()') do\n      paren_levels[paren_level]\
    \ = paren_levels[paren_level] + 1\n    end\n  end\n  return paren_levels\nend",
  "    local paren_groups = {}\n    for paren_group in string.gmatch(paren_string,\
    \ '%S+') do\n        local max_nesting = 0\n        local current_nesting = 0\n\
    \        for paren in string.gmatch(paren_group, '.') do\n            if paren\
    \ == '(' then\n                current_nesting = current_nesting + 1\n       \
    \     elseif paren == ')' then\n                current_nesting = current_nesting\
    \ - 1\n            end\n            if current_nesting > max_nesting then\n  \
    \              max_nesting = current_nesting\n            end\n        end\n \
    \       table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_levels = {}\n  local paren_level = 0\n  for paren in paren_string:gmatch('%b()')\
    \ do\n    paren_level = paren_level + 1\n    paren_levels[paren_level] = paren_levels[paren_level]\
    \ or 0\n    for c in paren:gmatch('%b()') do\n      paren_levels[paren_level]\
    \ = paren_levels[paren_level] + 1\n    end\n  end\n  return paren_levels\nend",
  "    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        elseif char == ' ' then\n\
    \            table.insert(paren_levels, paren_level)\n            paren_level\
    \ = 0\n        end\n    end\n    return paren_levels\nend", "    local max_depth\
    \ = {}\n    local depth = 0\n    for c in paren_string:gmatch('.') do\n      \
    \  if c == '(' then\n            depth = depth + 1\n        elseif c == ')' then\n\
    \            depth = depth - 1\n        elseif c == ' ' then\n            table.insert(max_depth,\
    \ depth)\n            depth = 0\n        end\n    end\n    return max_depth\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local paren_count = 0\n        local max_paren_count = 0\n     \
    \   for paren in paren_group:gmatch('.') do\n            if paren == '(' then\n\
    \                paren_count = paren_count + 1\n            elseif paren == ')'\
    \ then\n                paren_count = paren_count - 1\n            end\n     \
    \       if paren_count > max_paren_count then\n                max_paren_count\
    \ = paren_count\n            end\n        end\n        table.insert(paren_groups,\
    \ max_paren_count)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                depth = depth + 1\n       \
    \     elseif paren == ')' then\n                depth = depth - 1\n          \
    \  end\n            if depth > max_depth then\n                max_depth = depth\n\
    \            end\n        end\n        paren_groups[#paren_groups + 1] = max_depth\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_level = 0\n\
    \        local level = 0\n        for c in paren_group:gmatch('.') do\n      \
    \      if c == '(' then\n                level = level + 1\n            elseif\
    \ c == ')' then\n                level = level - 1\n            end\n        \
    \    max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif c == ')' then\n            paren_level = paren_level\
    \ - 1\n        elseif c == ' ' then\n            table.insert(paren_levels, paren_level)\n\
    \            paren_level = 0\n        end\n    end\n    return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%s*%b()%s*')\
    \ do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local max_nesting_level\
    \ = 0\n        local nesting_level = 0\n        for paren in paren_group:gmatch('%b()')\
    \ do\n            if paren:sub(1, 1) == '(' then\n                nesting_level\
    \ = nesting_level + 1\n            else\n                nesting_level = nesting_level\
    \ - 1\n            end\n            if nesting_level > max_nesting_level then\n\
    \                max_nesting_level = nesting_level\n            end\n        end\n\
    \        table.insert(max_nesting, max_nesting_level)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for c\
    \ in paren_group:gmatch('.') do\n            if c == '(' then\n              \
    \  nesting = nesting + 1\n            elseif c == ')' then\n                nesting\
    \ = nesting - 1\n            end\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        end\n       \
    \ table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local max_nested_parens = {}\n    for _, paren_group in ipairs(paren_string:split('\
    \ ')) do\n        local max_nested_paren = 0\n        local current_nested_paren\
    \ = 0\n        for _, paren in ipairs(paren_group:split('')) do\n            if\
    \ paren == '(' then\n                current_nested_paren = current_nested_paren\
    \ + 1\n            elseif paren == ')' then\n                current_nested_paren\
    \ = current_nested_paren - 1\n            end\n            if current_nested_paren\
    \ > max_nested_paren then\n                max_nested_paren = current_nested_paren\n\
    \            end\n        end\n        table.insert(max_nested_parens, max_nested_paren)\n\
    \    end\n    return max_nested_parens\nend", "    local paren_groups = {}\n \
    \   for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for char in paren_group:gmatch('.')\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local depth\
    \ = 0\n        local max_depth = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                depth = depth + 1\n           \
    \ elseif c == ')' then\n                depth = depth - 1\n            end\n \
    \           max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local max_nesting =\
    \ {}\n    for group in paren_string:gmatch('%b()') do\n        local nesting =\
    \ 0\n        for _ in group:gmatch('%(') do\n            nesting = nesting + 1\n\
    \        end\n        table.insert(max_nesting, nesting)\n    end\n    return\
    \ max_nesting\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "    local max_nesting = {}\n    for group in\
    \ paren_string:gmatch('%b()') do\n        local nesting = 0\n        for _ in\
    \ group:gmatch('%b()') do\n            nesting = nesting + 1\n        end\n  \
    \      table.insert(max_nesting, nesting)\n    end\n    return max_nesting\nend",
  "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+') do\n \
    \       local level = 0\n        local max_level = 0\n        for paren in group:gmatch('%S')\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_level = 0\n        local level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \ elseif c == ')' then\n                level = level - 1\n            end\n \
    \           max_level = math.max(max_level, level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.') do\n  \
    \    if paren == '(' then\n        nesting = nesting + 1\n      elseif paren ==\
    \ ')' then\n        nesting = nesting - 1\n      end\n      if nesting > max_nesting\
    \ then\n        max_nesting = nesting\n      end\n    end\n    paren_groups[#paren_groups\
    \ + 1] = max_nesting\n  end\n  return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local max_level\
    \ = 0\n        local level = 0\n        for c in group:gmatch('.') do\n      \
    \      if c == '(' then\n                level = level + 1\n            elseif\
    \ c == ')' then\n                level = level - 1\n            end\n        \
    \    max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for group in paren_string:gmatch('%S+') do\n    local depth = 0\n    local\
    \ max_depth = 0\n    for c in group:gmatch('.') do\n      if c == '(' then\n \
    \       depth = depth + 1\n        if depth > max_depth then\n          max_depth\
    \ = depth\n        end\n      elseif c == ')' then\n        depth = depth - 1\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        depth = depth + 1\n      elseif paren\
    \ == ')' then\n        depth = depth - 1\n      end\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for group in string.gmatch(paren_string, '%S+') do\n        local level =\
    \ 0\n        local max_level = 0\n        for c in string.gmatch(group, '.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \ elseif c == ')' then\n                level = level - 1\n            end\n \
    \           max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                depth = depth + 1\n           \
    \ elseif c == ')' then\n                depth = depth - 1\n            end\n \
    \           if depth > max_depth then\n                max_depth = depth\n   \
    \         end\n        end\n        table.insert(paren_groups, max_depth)\n  \
    \  end\n    return paren_groups\nend", "  local paren_groups = {}\n  for group\
    \ in paren_string:gmatch('%S+') do\n    local level = 0\n    local max_level =\
    \ 0\n    for paren in group:gmatch('.') do\n      if paren == '(' then\n     \
    \   level = level + 1\n      elseif paren == ')' then\n        level = level -\
    \ 1\n      end\n      max_level = math.max(max_level, level)\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local paren_list = {}\n \
    \ for paren_group in paren_string:gmatch('%S+') do\n    local max_nesting = 0\n\
    \    local nesting = 0\n    for c in paren_group:gmatch('.') do\n      if c ==\
    \ '(' then\n        nesting = nesting + 1\n      elseif c == ')' then\n      \
    \  nesting = nesting - 1\n      end\n      if nesting > max_nesting then\n   \
    \     max_nesting = nesting\n      end\n    end\n    table.insert(paren_list,\
    \ max_nesting)\n  end\n  return paren_list\nend", "    local max_nesting = {}\n\
    \    for paren_group in paren_string:gmatch('%S+') do\n        local nesting =\
    \ 0\n        local max_nesting_in_group = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for char\
    \ in paren_group:gmatch('.') do\n            if char == '(' then\n           \
    \     nesting = nesting + 1\n            elseif char == ')' then\n           \
    \     nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for paren in\
    \ paren_string:gmatch('%b()') do\n        paren_level = paren_level + 1\n    \
    \    paren_levels[paren_level] = paren_levels[paren_level] or 0\n        for _\
    \ in paren:gmatch('%(') do\n            paren_levels[paren_level] = paren_levels[paren_level]\
    \ + 1\n        end\n        for _ in paren:gmatch('%)') do\n            paren_level\
    \ = paren_level - 1\n        end\n    end\n    return paren_levels\nend", "  local\
    \ paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local\
    \ level = 0\n    local max_level = 0\n    for c in paren_group:gmatch('.') do\n\
    \      if c == '(' then\n        level = level + 1\n      elseif c == ')' then\n\
    \        level = level - 1\n      end\n      max_level = math.max(max_level, level)\n\
    \    end\n    table.insert(paren_groups, max_level)\n  end\n  return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = {}\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for char in paren_group:gmatch('.')\
    \ do\n            if char == '(' then\n                nesting = nesting + 1\n\
    \            elseif char == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local paren_stack = {}\n        local max_depth = 0\n        for\
    \ char in group:gmatch('.') do\n            if char == '(' then\n            \
    \    table.insert(paren_stack, char)\n                max_depth = math.max(max_depth,\
    \ #paren_stack)\n            elseif char == ')' then\n                table.remove(paren_stack)\n\
    \            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local max_nesting = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local nesting = 0\n  \
    \      local max_nesting_in_group = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "\tlocal paren_levels = {}\n\tlocal paren_level = 0\n\tlocal paren_start\
    \ = 0\n\tlocal paren_end = 0\n\tlocal paren_start_found = false\n\tlocal paren_end_found\
    \ = false\n\tfor i = 1, #paren_string do\n\t\tif paren_string:sub(i, i) == '('\
    \ then\n\t\t\tif not paren_start_found then\n\t\t\t\tparen_start = i\n\t\t\t\t\
    paren_start_found = true\n\t\t\tend\n\t\t\tparen_level = paren_level + 1\n\t\t\
    elseif paren_string:sub(i, i) == ')' then\n\t\t\tparen_level = paren_level - 1\n\
    \t\t\tif paren_level == 0 then\n\t\t\t\tparen_end = i\n\t\t\t\tparen_end_found\
    \ = true\n\t\t\tend\n\t\tend\n\t\tif paren_start_found and paren_end_found then\n\
    \t\t\ttable.insert(paren_levels, paren_level)\n\t\t\tparen_start_found = false\n\
    \t\t\tparen_end_found = false\n\t\tend\n\tend\n\treturn paren_levels\nend", " \
    \ local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n    elseif char == ')' then\n      paren_level\
    \ = paren_level - 1\n    elseif char == ' ' then\n      table.insert(paren_levels,\
    \ paren_level)\n      paren_level = 0\n    end\n  end\n  return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for c\
    \ in paren_group:gmatch('.') do\n            if c == '(' then\n              \
    \  nesting = nesting + 1\n            elseif c == ')' then\n                nesting\
    \ = nesting - 1\n            end\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        end\n       \
    \ table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for group in paren_string:gmatch('%S+') do\n\
    \    local max_level = 0\n    local level = 0\n    for paren in group:gmatch('.')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for paren_group in paren_string:gmatch('%S+') do\n    local max_depth = 0\n\
    \    local depth = 0\n    for char in paren_group:gmatch('.') do\n      if char\
    \ == '(' then\n        depth = depth + 1\n        if depth > max_depth then\n\
    \          max_depth = depth\n        end\n      elseif char == ')' then\n   \
    \     depth = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif c == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            if\
    \ nesting > max_nesting then\n                max_nesting = nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "    local paren_levels = {}\n    local paren_level\
    \ = 0\n    local paren_start = false\n    for i = 1, #paren_string do\n      \
    \  local c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n            paren_start = true\n        elseif c == ')' then\n\
    \            paren_level = paren_level - 1\n        elseif c == ' ' then\n   \
    \         if paren_start then\n                paren_levels[#paren_levels + 1]\
    \ = paren_level\n                paren_start = false\n            end\n      \
    \  end\n    end\n    if paren_start then\n        paren_levels[#paren_levels +\
    \ 1] = paren_level\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for paren in group:gmatch('.') do\n\
    \            if paren == '(' then\n                nesting = nesting + 1\n   \
    \         elseif paren == ')' then\n                nesting = nesting - 1\n  \
    \          end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "  local paren_levels\
    \ = {}\n  local paren_level = 0\n  for paren in paren_string:gmatch('%S+') do\n\
    \    paren_level = 0\n    for c in paren:gmatch('.') do\n      if c == '(' then\n\
    \        paren_level = paren_level + 1\n      elseif c == ')' then\n        paren_level\
    \ = paren_level - 1\n      end\n    end\n    table.insert(paren_levels, paren_level)\n\
    \  end\n  return paren_levels\nend", "    local paren_groups = {}\n    for group\
    \ in paren_string:gmatch('%S+') do\n        local level = 0\n        local max_level\
    \ = 0\n        for paren in group:gmatch('.') do\n            if paren == '('\
    \ then\n                level = level + 1\n            elseif paren == ')' then\n\
    \                level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif c == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            if\
    \ nesting > max_nesting then\n                max_nesting = nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif c == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            if\
    \ nesting > max_nesting then\n                max_nesting = nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch('%S+') do\n    local level = 0\n    local max_level =\
    \ 0\n    for paren in paren_group:gmatch('.') do\n      if paren == '(' then\n\
    \        level = level + 1\n      elseif paren == ')' then\n        level = level\
    \ - 1\n      end\n      max_level = math.max(max_level, level)\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for group in paren_string:gmatch('%S+') do\n    local depth = 0\n    local\
    \ max_depth = 0\n    for paren in group:gmatch('%S') do\n      if paren == '('\
    \ then\n        depth = depth + 1\n      elseif paren == ')' then\n        depth\
    \ = depth - 1\n      end\n      if depth > max_depth then\n        max_depth =\
    \ depth\n      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n\
    \  return paren_groups\nend", "  local paren_groups = {}\n  for paren_group in\
    \ paren_string:gmatch('%S+') do\n    local max_nesting = 0\n    local current_nesting\
    \ = 0\n    for paren in paren_group:gmatch('.') do\n      if paren == '(' then\n\
    \        current_nesting = current_nesting + 1\n      elseif paren == ')' then\n\
    \        current_nesting = current_nesting - 1\n      end\n      if current_nesting\
    \ > max_nesting then\n        max_nesting = current_nesting\n      end\n    end\n\
    \    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\nend",
  "  local paren_groups = {}\n  for group in paren_string:gmatch('%S+') do\n    local\
    \ max_depth = 0\n    local depth = 0\n    for paren in group:gmatch('.') do\n\
    \      if paren == '(' then\n        depth = depth + 1\n      elseif paren ==\
    \ ')' then\n        depth = depth - 1\n      end\n      if depth > max_depth then\n\
    \        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "  local paren_groups = {}\n\
    \  for group in paren_string:gmatch('%S+') do\n    local max_depth = 0\n    local\
    \ depth = 0\n    for paren in group:gmatch('.') do\n      if paren == '(' then\n\
    \        depth = depth + 1\n      elseif paren == ')' then\n        depth = depth\
    \ - 1\n      end\n      if depth > max_depth then\n        max_depth = depth\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_level = 0\n    local level = 0\n    for c in paren_group:gmatch('.')\
    \ do\n      if c == '(' then\n        level = level + 1\n      elseif c == ')'\
    \ then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        paren_groups[#paren_groups + 1] = paren_group\n    end\n    local\
    \ max_nesting = {}\n    for i, paren_group in ipairs(paren_groups) do\n      \
    \  local nesting = 0\n        local max_nesting_for_group = 0\n        for c in\
    \ paren_group:gmatch('.') do\n            if c == '(' then\n                nesting\
    \ = nesting + 1\n            elseif c == ')' then\n                nesting = nesting\
    \ - 1\n            end\n            if nesting > max_nesting_for_group then\n\
    \                max_nesting_for_group = nesting\n            end\n        end\n\
    \        max_nesting[i] = max_nesting_for_group\n    end\n    return max_nesting\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%b()') do\n        local max_nesting = 0\n        local\
    \ current_nesting = 0\n        for paren in paren_group:gmatch('.') do\n     \
    \       if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_levels = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_levels, max_level)\n    end\n\
    \    return paren_levels\nend", "    local paren_count = {}\n    local max_count\
    \ = 0\n    local count = 0\n    for i = 1, #paren_string do\n        local c =\
    \ paren_string:sub(i, i)\n        if c == '(' then\n            count = count\
    \ + 1\n            max_count = math.max(max_count, count)\n        elseif c ==\
    \ ')' then\n            count = count - 1\n        end\n        if c == ' ' then\n\
    \            table.insert(paren_count, max_count)\n            max_count = 0\n\
    \            count = 0\n        end\n    end\n    table.insert(paren_count, max_count)\n\
    \    return paren_count\nend", "    local paren_groups = {}\n    for group in\
    \ paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in group:gmatch('.') do\n            if c == '('\
    \ then\n                nesting = nesting + 1\n            elseif c == ')' then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting then\n                max_nesting = nesting\n            end\n\
    \        end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       nesting = nesting + 1\n            elseif paren == ')' then\n        \
    \        nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in group:gmatch('%S') do\n            if paren == '(' then\n               \
    \ nesting = nesting + 1\n            elseif paren == ')' then\n              \
    \  nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for paren in\
    \ paren_string:gmatch('%b()') do\n        paren_level = paren_level + 1\n    \
    \    paren_levels[paren_level] = paren_levels[paren_level] or 0\n        for c\
    \ in paren:gmatch('%b()') do\n            paren_levels[paren_level] = paren_levels[paren_level]\
    \ + 1\n        end\n    end\n    return paren_levels\nend", "  local paren_groups\
    \ = {}\n  for group in paren_string:gmatch('%S+') do\n    local level = 0\n  \
    \  local max_level = 0\n    for char in group:gmatch('.') do\n      if char ==\
    \ '(' then\n        level = level + 1\n      elseif char == ')' then\n       \
    \ level = level - 1\n      end\n      max_level = math.max(max_level, level)\n\
    \    end\n    table.insert(paren_groups, max_level)\n  end\n  return paren_groups\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in group:gmatch('.') do\n            if paren == '(' then\n                level\
    \ = level + 1\n            elseif paren == ')' then\n                level = level\
    \ - 1\n            end\n            max_level = math.max(max_level, level)\n \
    \       end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "    local max_depth = 0\n    local depth = 0\n    local\
    \ depths = {}\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            depth = depth + 1\n           \
    \ if depth > max_depth then\n                max_depth = depth\n            end\n\
    \        elseif char == ')' then\n            depth = depth - 1\n        elseif\
    \ char == ' ' then\n            depths[#depths + 1] = max_depth\n            max_depth\
    \ = 0\n            depth = 0\n        end\n    end\n    depths[#depths + 1] =\
    \ max_depth\n    return depths\nend", "  local paren_levels = {}\n  for paren_group\
    \ in paren_string:gmatch('%S+') do\n    local level = 0\n    local max_level =\
    \ 0\n    for paren in paren_group:gmatch('%S') do\n      if paren == '(' then\n\
    \        level = level + 1\n      elseif paren == ')' then\n        level = level\
    \ - 1\n      end\n      max_level = math.max(max_level, level)\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch('%S+') do\n        local max_level = 0\n\
    \        local level = 0\n        for c in group:gmatch('.') do\n            if\
    \ c == '(' then\n                level = level + 1\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n            max_level\
    \ = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                depth = depth + 1\n           \
    \ elseif c == ')' then\n                depth = depth - 1\n            end\n \
    \           max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for paren in paren_group:gmatch('%S')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \ elseif c == ')' then\n                level = level - 1\n            end\n \
    \           max_level = math.max(max_level, level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "  local max_nesting = {}\n  for group in paren_string:gmatch('%b()') do\n\
    \    local nesting = 0\n    for paren in group:gmatch('%b()') do\n      nesting\
    \ = nesting + 1\n    end\n    table.insert(max_nesting, nesting)\n  end\n  return\
    \ max_nesting\nend", "    local paren_levels = {}\n    local current_level = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    current_level = current_level + 1\n        elseif c == ')' then\n       \
    \     table.insert(paren_levels, current_level)\n            current_level = current_level\
    \ - 1\n        end\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local max_level\
    \ = 0\n        local level = 0\n        for paren in group:gmatch('.') do\n  \
    \          if paren == '(' then\n                level = level + 1\n         \
    \   elseif paren == ')' then\n                level = level - 1\n            end\n\
    \            if level > max_level then\n                max_level = level\n  \
    \          end\n        end\n        table.insert(paren_groups, max_level)\n \
    \   end\n    return paren_groups\nend", "    local paren_levels = {}\n    local\
    \ paren_level = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_level = paren_level + 1\n\
    \        elseif char == ')' then\n            paren_level = paren_level - 1\n\
    \        elseif char == ' ' then\n            table.insert(paren_levels, paren_level)\n\
    \            paren_level = 0\n        end\n    end\n    return paren_levels\n\
    end", "  local max_nesting = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local nesting = 0\n    local max_nesting_in_group = 0\n    for paren\
    \ in paren_group:gmatch('.') do\n      if paren == '(' then\n        nesting =\
    \ nesting + 1\n      elseif paren == ')' then\n        nesting = nesting - 1\n\
    \      end\n      max_nesting_in_group = math.max(max_nesting_in_group, nesting)\n\
    \    end\n    table.insert(max_nesting, max_nesting_in_group)\n  end\n  return\
    \ max_nesting\nend", "    local paren_levels = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_levels, max_level)\n    end\n\
    \    return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for paren in paren_group:gmatch('.') do\n            if\
    \ paren == '(' then\n                nesting = nesting + 1\n            elseif\
    \ paren == ')' then\n                nesting = nesting - 1\n            end\n\
    \            if nesting > max_nesting then\n                max_nesting = nesting\n\
    \            end\n        end\n        table.insert(paren_groups, max_nesting)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ group in paren_string:gmatch('%S+') do\n        local max_level = 0\n      \
    \  local current_level = 0\n        for char in group:gmatch('.') do\n       \
    \     if char == '(' then\n                current_level = current_level + 1\n\
    \            elseif char == ')' then\n                current_level = current_level\
    \ - 1\n            end\n            if current_level > max_level then\n      \
    \          max_level = current_level\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                nesting = nesting + 1\n       \
    \     elseif c == ')' then\n                nesting = nesting - 1\n          \
    \  end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        paren_groups[#paren_groups\
    \ + 1] = max_nesting\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        table.insert(paren_groups,\
    \ paren_group)\n    end\n    local max_nesting = {}\n    for _, paren_group in\
    \ ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for c in paren_group:gmatch('.') do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            if nesting >\
    \ max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local current_nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for char in\
    \ paren_group:gmatch('.') do\n            if char == '(' then\n              \
    \  depth = depth + 1\n            elseif char == ')' then\n                depth\
    \ = depth - 1\n            end\n            if depth > max_depth then\n      \
    \          max_depth = depth\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for paren in paren_string:gmatch('%S')\
    \ do\n        if paren == '(' then\n            paren_level = paren_level + 1\n\
    \        elseif paren == ')' then\n            paren_level = paren_level - 1\n\
    \        end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "    local paren_groups = stringx.split(paren_string, '\
    \ ')\n    local max_nesting = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for _, c in ipairs(paren_group) do\n            if c == '(' then\n      \
    \          nesting = nesting + 1\n            elseif c == ')' then\n         \
    \       if nesting > max_nesting_in_group then\n                    max_nesting_in_group\
    \ = nesting\n                end\n                nesting = nesting - 1\n    \
    \        end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local max_nesting = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for c in paren_group:gmatch('.') do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            if nesting >\
    \ max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local paren_levels = {}\n\
    \        local level = 0\n        for paren in paren_group:gmatch('.') do\n  \
    \          if paren == '(' then\n                level = level + 1\n         \
    \   elseif paren == ')' then\n                level = level - 1\n            end\n\
    \            table.insert(paren_levels, level)\n        end\n        table.insert(paren_groups,\
    \ math.max(unpack(paren_levels)))\n    end\n    return paren_groups\nend", " \
    \   local max_nesting = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local nesting = 0\n        local max_nesting_in_group = 0\n    \
    \    for paren in paren_group:gmatch('.') do\n            if paren == '(' then\n\
    \                nesting = nesting + 1\n            elseif paren == ')' then\n\
    \                nesting = nesting - 1\n            end\n            if nesting\
    \ > max_nesting_in_group then\n                max_nesting_in_group = nesting\n\
    \            end\n        end\n        table.insert(max_nesting, max_nesting_in_group)\n\
    \    end\n    return max_nesting\nend", "    local paren_groups = {}\n    for\
    \ group in paren_string:gmatch('%S+') do\n        local level = 0\n        local\
    \ max_level = 0\n        for char in group:gmatch('.') do\n            if char\
    \ == '(' then\n                level = level + 1\n            elseif char == ')'\
    \ then\n                level = level - 1\n            end\n            max_level\
    \ = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local current_level = 0\n    for i = 1, #paren_string do\n       \
    \ local c = paren_string:sub(i, i)\n        if c == '(' then\n            current_level\
    \ = current_level + 1\n        elseif c == ')' then\n            table.insert(paren_levels,\
    \ current_level)\n            current_level = current_level - 1\n        end\n\
    \    end\n    return paren_levels\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local current_nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('[^%s]+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      depth = depth + 1\n            elseif paren == ')' then\n             \
    \   depth = depth - 1\n            end\n            if depth > max_depth then\n\
    \                max_depth = depth\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%b()')\
    \ do\n    local depth = 0\n    local max_depth = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif paren\
    \ == ')' then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local curr_nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                curr_nesting = curr_nesting\
    \ + 1\n            elseif paren == ')' then\n                curr_nesting = curr_nesting\
    \ - 1\n            end\n            if curr_nesting > max_nesting then\n     \
    \           max_nesting = curr_nesting\n            end\n        end\n       \
    \ table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_depth = {}\n  local current_depth = 0\n  for c in paren_string:gmatch('.')\
    \ do\n    if c == '(' then\n      current_depth = current_depth + 1\n    elseif\
    \ c == ')' then\n      table.insert(paren_depth, current_depth)\n      current_depth\
    \ = current_depth - 1\n    end\n  end\n  return paren_depth\nend", "    local\
    \ paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+') do\n  \
    \      table.insert(paren_groups, parse_nested_parens_single(paren_group))\n \
    \   end\n    return paren_groups\nend", "    local paren_levels = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local level = 0\n    \
    \    local max_level = 0\n        for paren in paren_group:gmatch('.') do\n  \
    \          if paren == '(' then\n                level = level + 1\n         \
    \   elseif paren == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local paren_stack\
    \ = {}\n        local max_depth = 0\n        for paren in group:gmatch('.') do\n\
    \            if paren == '(' then\n                table.insert(paren_stack, paren)\n\
    \                max_depth = math.max(max_depth, #paren_stack)\n            elseif\
    \ paren == ')' then\n                table.remove(paren_stack)\n            end\n\
    \        end\n        table.insert(paren_groups, max_depth)\n    end\n    return\
    \ paren_groups\nend", "  local paren_levels = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            if depth > max_depth then\n                max_depth = depth\n  \
    \          end\n        end\n        table.insert(paren_groups, max_depth)\n \
    \   end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local nesting = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                nesting = nesting + 1\n   \
    \         elseif paren == ')' then\n                nesting = nesting - 1\n  \
    \          end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                nesting = nesting + 1\n       \
    \     elseif c == ')' then\n                nesting = nesting - 1\n          \
    \  end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_level\
    \ = 0\n        local level = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                level = level + 1\n           \
    \ elseif c == ')' then\n                level = level - 1\n            end\n \
    \           max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local depth = 0\n\
    \    local max_depth = 0\n    for paren in paren_group:gmatch('.') do\n      if\
    \ paren == '(' then\n        depth = depth + 1\n      elseif paren == ')' then\n\
    \        depth = depth - 1\n      end\n      max_depth = math.max(max_depth, depth)\n\
    \    end\n    table.insert(paren_groups, max_depth)\n  end\n  return paren_groups\n\
    end", "  local paren_groups = split(paren_string, ' ')\n  local max_nesting =\
    \ {}\n  for i, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    local max_nesting_in_group = 0\n    for j = 1, #paren_group do\n      local\
    \ char = paren_group:sub(j, j)\n      if char == '(' then\n        nesting = nesting\
    \ + 1\n      elseif char == ')' then\n        nesting = nesting - 1\n      end\n\
    \      if nesting > max_nesting_in_group then\n        max_nesting_in_group =\
    \ nesting\n      end\n    end\n    max_nesting[i] = max_nesting_in_group\n  end\n\
    \  return max_nesting\nend", "    local paren_groups = {}\n    for group in string.gmatch(paren_string,\
    \ '%S+') do\n        local level = 0\n        local max_level = 0\n        for\
    \ char in string.gmatch(group, '.') do\n            if char == '(' then\n    \
    \            level = level + 1\n            elseif char == ')' then\n        \
    \        level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ current_nesting = 0\n        for paren in paren_group:gmatch('.') do\n     \
    \       if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for c\
    \ in paren_group:gmatch('.') do\n            if c == '(' then\n              \
    \  nesting = nesting + 1\n            elseif c == ')' then\n                nesting\
    \ = nesting - 1\n            end\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        end\n       \
    \ table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for _, char\
    \ in utf8.codes(paren_string) do\n        if char == 40 then\n            paren_level\
    \ = paren_level + 1\n        elseif char == 41 then\n            paren_level =\
    \ paren_level - 1\n            table.insert(paren_levels, paren_level)\n     \
    \   end\n    end\n    return paren_levels\nend", "    local paren_table = {}\n\
    \    local paren_level = 0\n    local paren_level_max = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n            if paren_level > paren_level_max\
    \ then\n                paren_level_max = paren_level\n            end\n     \
    \   elseif char == ')' then\n            paren_level = paren_level - 1\n     \
    \   elseif char == ' ' then\n            table.insert(paren_table, paren_level_max)\n\
    \            paren_level_max = 0\n            paren_level = 0\n        end\n \
    \   end\n    table.insert(paren_table, paren_level_max)\n    return paren_table\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_groups, max_level)\n    end\n\
    \    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch('%S+') do\n    local depth = 0\n    local max_depth =\
    \ 0\n    for paren in paren_group:gmatch('%S') do\n      if paren == '(' then\n\
    \        depth = depth + 1\n      elseif paren == ')' then\n        depth = depth\
    \ - 1\n      end\n      if depth > max_depth then\n        max_depth = depth\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for char in\
    \ group:gmatch('.') do\n            if char == '(' then\n                level\
    \ = level + 1\n            elseif char == ')' then\n                level = level\
    \ - 1\n            end\n            max_level = math.max(max_level, level)\n \
    \       end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       nesting = nesting + 1\n            elseif paren == ')' then\n        \
    \        nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        level = level + 1\n      elseif paren\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_nesting = 0\n    local current_nesting = 0\n    for paren\
    \ in paren_group:gmatch('.') do\n      if paren == '(' then\n        current_nesting\
    \ = current_nesting + 1\n      elseif paren == ')' then\n        current_nesting\
    \ = current_nesting - 1\n      end\n      if current_nesting > max_nesting then\n\
    \        max_nesting = current_nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                depth = depth + 1\n       \
    \     elseif paren == ')' then\n                depth = depth - 1\n          \
    \  end\n            if depth > max_depth then\n                max_depth = depth\n\
    \            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local paren_stack = {}\n\
    \        local max_depth = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                table.insert(paren_stack, paren)\n\
    \                max_depth = math.max(max_depth, #paren_stack)\n            elseif\
    \ paren == ')' then\n                table.remove(paren_stack)\n            end\n\
    \        end\n        table.insert(paren_groups, max_depth)\n    end\n    return\
    \ paren_groups\nend", "\tlocal max_nested_parens = {}\n\tfor group in paren_string:gmatch('[^%s]+')\
    \ do\n\t\tlocal max_nested = 0\n\t\tlocal current_nested = 0\n\t\tfor paren in\
    \ group:gmatch('.') do\n\t\t\tif paren == '(' then\n\t\t\t\tcurrent_nested = current_nested\
    \ + 1\n\t\t\t\tif current_nested > max_nested then\n\t\t\t\t\tmax_nested = current_nested\n\
    \t\t\t\tend\n\t\t\telseif paren == ')' then\n\t\t\t\tcurrent_nested = current_nested\
    \ - 1\n\t\t\tend\n\t\tend\n\t\ttable.insert(max_nested_parens, max_nested)\n\t\
    end\n\treturn max_nested_parens\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif c == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            if\
    \ nesting > max_nesting then\n                max_nesting = nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "  local paren_groups = {}\n  for group in string.gmatch(paren_string,\
    \ '%S+') do\n    local paren_stack = {}\n    local max_level = 0\n    for c in\
    \ string.gmatch(group, '.') do\n      if c == '(' then\n        table.insert(paren_stack,\
    \ c)\n        max_level = math.max(max_level, #paren_stack)\n      elseif c ==\
    \ ')' then\n        table.remove(paren_stack)\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "  local max_levels = {}\n \
    \ for _, paren_group in ipairs(paren_string:split(' ')) do\n    local level =\
    \ 0\n    local max_level = 0\n    for _, char in ipairs(paren_group:split(''))\
    \ do\n      if char == '(' then\n        level = level + 1\n      elseif char\
    \ == ')' then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(max_levels, max_level)\n  end\n  return max_levels\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_levels, max_level)\n    end\n    return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for i = 1,\
    \ #paren_string do\n        local char = paren_string:sub(i, i)\n        if char\
    \ == '(' then\n            paren_level = paren_level + 1\n        elseif char\
    \ == ')' then\n            paren_level = paren_level - 1\n        elseif char\
    \ == ' ' then\n            table.insert(paren_levels, paren_level)\n         \
    \   paren_level = 0\n        end\n    end\n    return paren_levels\nend", "  \
    \  local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local depth = 0\n        local max_depth = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      depth = depth + 1\n            elseif paren == ')' then\n             \
    \   depth = depth - 1\n            end\n            max_depth = math.max(max_depth,\
    \ depth)\n        end\n        table.insert(paren_groups, max_depth)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    local paren_group\
    \ = ''\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == ' ' then\n            table.insert(paren_groups, paren_group)\n\
    \            paren_group = ''\n        else\n            paren_group = paren_group\
    \ .. char\n        end\n    end\n    table.insert(paren_groups, paren_group)\n\
    \    local max_nested_parens = {}\n    for _, paren_group in ipairs(paren_groups)\
    \ do\n        local max_nested = 0\n        local curr_nested = 0\n        for\
    \ i = 1, #paren_group do\n            local char = paren_group:sub(i, i)\n   \
    \         if char == '(' then\n                curr_nested = curr_nested + 1\n\
    \            elseif char == ')' then\n                curr_nested = curr_nested\
    \ - 1\n            end\n            if curr_nested > max_nested then\n       \
    \         max_nested = curr_nested\n            end\n        end\n        table.insert(max_nested_parens,\
    \ max_nested)\n    end\n    return max_nested_parens\nend", "    local max_nesting\
    \ = 0\n    local nesting_levels = {}\n    local current_nesting = 0\n    for i\
    \ = 1, #paren_string do\n        local char = paren_string:sub(i, i)\n       \
    \ if char == '(' then\n            current_nesting = current_nesting + 1\n   \
    \         if current_nesting > max_nesting then\n                max_nesting =\
    \ current_nesting\n            end\n        elseif char == ')' then\n        \
    \    table.insert(nesting_levels, current_nesting)\n            current_nesting\
    \ = current_nesting - 1\n        end\n    end\n    return nesting_levels\nend",
  "    local paren_levels = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      level = level + 1\n            elseif paren == ')' then\n             \
    \   level = level - 1\n            end\n            max_level = math.max(max_level,\
    \ level)\n        end\n        table.insert(paren_levels, max_level)\n    end\n\
    \    return paren_levels\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ current_nesting = 0\n        for paren in paren_group:gmatch('.') do\n     \
    \       if paren == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif paren == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        paren_groups[#paren_groups + 1] = max_nesting\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for char in\
    \ group:gmatch('.') do\n            if char == '(' then\n                depth\
    \ = depth + 1\n            elseif char == ')' then\n                depth = depth\
    \ - 1\n            end\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for group in paren_string:gmatch('%S+') do\n    local max_depth = 0\n\
    \    local depth = 0\n    for char in group:gmatch('.') do\n      if char == '('\
    \ then\n        depth = depth + 1\n        if depth > max_depth then\n       \
    \   max_depth = depth\n        end\n      elseif char == ')' then\n        depth\
    \ = depth - 1\n      end\n    end\n    table.insert(paren_groups, max_depth)\n\
    \  end\n  return paren_groups\nend", "    local paren_groups = {}\n    for group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ current_nesting = 0\n        for char in group:gmatch('.') do\n            if\
    \ char == '(' then\n                current_nesting = current_nesting + 1\n  \
    \          elseif char == ')' then\n                current_nesting = current_nesting\
    \ - 1\n            end\n            if current_nesting > max_nesting then\n  \
    \              max_nesting = current_nesting\n            end\n        end\n \
    \       table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in group:gmatch('.') do\n            if paren == '(' then\n                level\
    \ = level + 1\n            elseif paren == ')' then\n                level = level\
    \ - 1\n            end\n            max_level = math.max(max_level, level)\n \
    \       end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_nesting = 0\n    local current_nesting = 0\n    for paren\
    \ in paren_group:gmatch('.') do\n      if paren == '(' then\n        current_nesting\
    \ = current_nesting + 1\n      elseif paren == ')' then\n        current_nesting\
    \ = current_nesting - 1\n      end\n      if current_nesting > max_nesting then\n\
    \        max_nesting = current_nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ {}\n    for group in paren_string:gmatch('%S+') do\n        local depth = 0\n\
    \        local max_depth = 0\n        for paren in group:gmatch('.') do\n    \
    \        if paren == '(' then\n                depth = depth + 1\n           \
    \ elseif paren == ')' then\n                depth = depth - 1\n            end\n\
    \            max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local max_nesting =\
    \ {}\n    for paren_group in paren_string:gmatch('%s*%b()%s*') do\n        local\
    \ nesting = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                nesting = nesting - 1\n     \
    \       end\n            if nesting > max_nesting_in_group then\n            \
    \    max_nesting_in_group = nesting\n            end\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                depth = depth + 1\n       \
    \     elseif paren == ')' then\n                depth = depth - 1\n          \
    \  end\n            if depth > max_depth then\n                max_depth = depth\n\
    \            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local nesting = 0\n        for paren in paren_group:gmatch('%S') do\n\
    \            if paren == '(' then\n                nesting = nesting + 1\n   \
    \         elseif paren == ')' then\n                nesting = nesting - 1\n  \
    \          end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = stringx.split(paren_string, ' ')\n    local max_nesting = {}\n    for _, paren_group\
    \ in ipairs(paren_groups) do\n        local nesting = 0\n        local max_nesting_in_group\
    \ = 0\n        for _, char in ipairs(paren_group) do\n            if char == '('\
    \ then\n                nesting = nesting + 1\n            elseif char == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            max_nesting_in_group\
    \ = math.max(max_nesting_in_group, nesting)\n        end\n        table.insert(max_nesting,\
    \ max_nesting_in_group)\n    end\n    return max_nesting\nend", "    local paren_levels\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local paren_level\
    \ = 0\n        local max_paren_level = 0\n        for paren in paren_group:gmatch('%S')\
    \ do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            if paren_level > max_paren_level then\n  \
    \              max_paren_level = paren_level\n            end\n        end\n \
    \       table.insert(paren_levels, max_paren_level)\n    end\n    return paren_levels\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ {}\n    for group in paren_string:gmatch('%S+') do\n        local level = 0\n\
    \        local max_level = 0\n        for c in group:gmatch('.') do\n        \
    \    if c == '(' then\n                level = level + 1\n            elseif c\
    \ == ')' then\n                level = level - 1\n            end\n          \
    \  max_level = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local paren_level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                paren_level = paren_level\
    \ + 1\n            elseif paren == ')' then\n                paren_level = paren_level\
    \ - 1\n            end\n            max_level = math.max(max_level, paren_level)\n\
    \        end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local depth = 0\n        local max_depth = 0\n        for c in group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \          if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == ')' then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "\tlocal paren_groups =\
    \ split(paren_string, ' ')\n\tlocal max_nesting = {}\n\tfor _, paren_group in\
    \ ipairs(paren_groups) do\n\t\tlocal nesting = 0\n\t\tlocal max_nesting_in_group\
    \ = 0\n\t\tfor _, paren in ipairs(paren_group) do\n\t\t\tif paren == '(' then\n\
    \t\t\t\tnesting = nesting + 1\n\t\t\telseif paren == ')' then\n\t\t\t\tnesting\
    \ = nesting - 1\n\t\t\tend\n\t\t\tif nesting > max_nesting_in_group then\n\t\t\
    \t\tmax_nesting_in_group = nesting\n\t\t\tend\n\t\tend\n\t\ttable.insert(max_nesting,\
    \ max_nesting_in_group)\n\tend\n\treturn max_nesting\nend", "    local paren_list\
    \ = {}\n    local paren_level = 0\n    local max_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n            if paren_level > max_level\
    \ then\n                max_level = paren_level\n            end\n        elseif\
    \ char == ')' then\n            paren_level = paren_level - 1\n        elseif\
    \ char == ' ' then\n            paren_list[#paren_list + 1] = max_level\n    \
    \        max_level = 0\n        end\n    end\n    paren_list[#paren_list + 1]\
    \ = max_level\n    return paren_list\nend", "    local paren_groups = {}\n   \
    \ for group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local nesting = 0\n        for paren in group:gmatch('%S') do\n     \
    \       if paren == '(' then\n                nesting = nesting + 1\n        \
    \    elseif paren == ')' then\n                nesting = nesting - 1\n       \
    \     end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local level =\
    \ 0\n    local max_level = 0\n    for paren in paren_group:gmatch('.') do\n  \
    \    if paren == '(' then\n        level = level + 1\n      elseif paren == ')'\
    \ then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch('%S')\
    \ do\n      if paren == '(' then\n        nesting = nesting + 1\n      elseif\
    \ paren == ')' then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend", "    local paren_groups =\
    \ {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local paren_count\
    \ = 0\n        local max_paren_count = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                paren_count = paren_count\
    \ + 1\n            elseif paren == ')' then\n                paren_count = paren_count\
    \ - 1\n            end\n            if paren_count > max_paren_count then\n  \
    \              max_paren_count = paren_count\n            end\n        end\n \
    \       table.insert(paren_groups, max_paren_count)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for c in paren_group:gmatch('.')\
    \ do\n      if c == '(' then\n        level = level + 1\n      elseif c == ')'\
    \ then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend", "    local paren_levels = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                level = level + 1\n      \
    \      elseif c == ')' then\n                level = level - 1\n            end\n\
    \            max_level = math.max(max_level, level)\n        end\n        table.insert(paren_levels,\
    \ max_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for paren in group:gmatch('%S') do\n\
    \            if paren == '(' then\n                nesting = nesting + 1\n   \
    \         elseif paren == ')' then\n                nesting = nesting - 1\n  \
    \          end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        paren_groups[#paren_groups\
    \ + 1] = max_nesting\n    end\n    return paren_groups\nend", "    local max_nesting\
    \ = {}\n    for group in paren_string:gmatch('%S+') do\n        local level =\
    \ 0\n        local max_level = 0\n        for c in group:gmatch('.') do\n    \
    \        if c == '(' then\n                level = level + 1\n            elseif\
    \ c == ')' then\n                level = level - 1\n            end\n        \
    \    max_level = math.max(max_level, level)\n        end\n        table.insert(max_nesting,\
    \ max_level)\n    end\n    return max_nesting\nend", "    local max_nesting =\
    \ {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                nesting = nesting + 1\n  \
    \          elseif c == ')' then\n                if nesting > max_nesting_in_group\
    \ then\n                    max_nesting_in_group = nesting\n                end\n\
    \                nesting = nesting - 1\n            end\n        end\n       \
    \ table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "  local paren_levels = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local level = 0\n    local max_level = 0\n    for c in paren_group:gmatch('.')\
    \ do\n      if c == '(' then\n        level = level + 1\n      elseif c == ')'\
    \ then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "  local paren_groups = {}\n  for paren_group in paren_string:gmatch('%S+')\
    \ do\n    local paren_level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch('.')\
    \ do\n      if paren == '(' then\n        paren_level = paren_level + 1\n    \
    \  elseif paren == ')' then\n        paren_level = paren_level - 1\n      end\n\
    \      max_level = math.max(max_level, paren_level)\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "    local paren_groups = {}\n\
    \    for group in paren_string:gmatch('%S+') do\n        local max_level = 0\n\
    \        local level = 0\n        for c in group:gmatch('.') do\n            if\
    \ c == '(' then\n                level = level + 1\n            elseif c == ')'\
    \ then\n                level = level - 1\n            end\n            max_level\
    \ = math.max(max_level, level)\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "  local paren_groups =\
    \ {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for c in paren_group:gmatch('.') do\n      if\
    \ c == '(' then\n        depth = depth + 1\n      elseif c == ')' then\n     \
    \   depth = depth - 1\n      end\n      max_depth = math.max(max_depth, depth)\n\
    \    end\n    table.insert(paren_groups, max_depth)\n  end\n  return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local depth = 0\n        local max_depth = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      depth = depth + 1\n            elseif paren == ')' then\n             \
    \   depth = depth - 1\n            end\n            max_depth = math.max(max_depth,\
    \ depth)\n        end\n        table.insert(paren_groups, max_depth)\n    end\n\
    \    return paren_groups\nend", "    local paren_groups = {}\n    for paren_group\
    \ in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n        local\
    \ nesting = 0\n        for c in paren_group:gmatch('.') do\n            if c ==\
    \ '(' then\n                nesting = nesting + 1\n            elseif c == ')'\
    \ then\n                nesting = nesting - 1\n            end\n            if\
    \ nesting > max_nesting then\n                max_nesting = nesting\n        \
    \    end\n        end\n        table.insert(paren_groups, max_nesting)\n    end\n\
    \    return paren_groups\nend", "  local paren_groups = {}\n  for paren_group\
    \ in paren_string:gmatch('%S+') do\n    local level = 0\n    local max_level =\
    \ 0\n    for char in paren_group:gmatch('.') do\n      if char == '(' then\n \
    \       level = level + 1\n      elseif char == ')' then\n        level = level\
    \ - 1\n      end\n      max_level = math.max(max_level, level)\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend", "    local paren_levels = {}\n\
    \    local paren_level = 0\n    for paren in paren_string:gmatch('%b()') do\n\
    \        paren_level = paren_level + 1\n        paren_levels[paren_level] = paren_levels[paren_level]\
    \ or 0\n        for c in paren:gmatch('%b()') do\n            paren_levels[paren_level]\
    \ = paren_levels[paren_level] + 1\n        end\n    end\n    return paren_levels\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       nesting = nesting + 1\n            elseif paren == ')' then\n        \
    \        nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for paren\
    \ in group:gmatch('.') do\n            if paren == '(' then\n                level\
    \ = level + 1\n            elseif paren == ')' then\n                level = level\
    \ - 1\n            end\n            max_level = math.max(max_level, level)\n \
    \       end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_level = paren_level + 1\n        elseif c == ')' then\n           \
    \ paren_level = paren_level - 1\n        end\n        table.insert(paren_levels,\
    \ paren_level)\n    end\n    return paren_levels\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local level\
    \ = 0\n        local max_level = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                level = level + 1\n  \
    \          elseif paren == ')' then\n                level = level - 1\n     \
    \       end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local max_level = 0\n        local level = 0\n        for char in\
    \ group:gmatch('.') do\n            if char == '(' then\n                level\
    \ = level + 1\n            elseif char == ')' then\n                level = level\
    \ - 1\n            end\n            if level > max_level then\n              \
    \  max_level = level\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('[^%s]+') do\n        local\
    \ depth = 0\n        local max_depth = 0\n        for paren in paren_group:gmatch('[()]')\
    \ do\n            if paren == '(' then\n                depth = depth + 1\n  \
    \          else\n                depth = depth - 1\n            end\n        \
    \    max_depth = math.max(max_depth, depth)\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local paren_groups\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local max_depth\
    \ = 0\n        local depth = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                depth = depth + 1\n       \
    \     elseif paren == ')' then\n                depth = depth - 1\n          \
    \  end\n            if depth > max_depth then\n                max_depth = depth\n\
    \            end\n        end\n        table.insert(paren_groups, max_depth)\n\
    \    end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local current_nesting = 0\n        for char in paren_group:gmatch('.')\
    \ do\n            if char == '(' then\n                current_nesting = current_nesting\
    \ + 1\n            elseif char == ')' then\n                current_nesting =\
    \ current_nesting - 1\n            end\n            if current_nesting > max_nesting\
    \ then\n                max_nesting = current_nesting\n            end\n     \
    \   end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    local max_level = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == '(' then\n            paren_level\
    \ = paren_level + 1\n            max_level = math.max(max_level, paren_level)\n\
    \        elseif char == ')' then\n            paren_level = paren_level - 1\n\
    \        end\n    end\n    return max_level\nend", "    local paren_groups = {}\n\
    \    for paren_group in paren_string:gmatch('%S+') do\n        local max_nesting\
    \ = 0\n        local nesting = 0\n        for c in paren_group:gmatch('.') do\n\
    \            if c == '(' then\n                nesting = nesting + 1\n       \
    \     elseif c == ')' then\n                nesting = nesting - 1\n          \
    \  end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend", "    local paren_levels\
    \ = {}\n    local paren_level = 0\n    for i = 1, #paren_string do\n        local\
    \ c = paren_string:sub(i, i)\n        if c == '(' then\n            paren_level\
    \ = paren_level + 1\n        elseif c == ')' then\n            paren_level = paren_level\
    \ - 1\n        elseif c == ' ' then\n            table.insert(paren_levels, paren_level)\n\
    \            paren_level = 0\n        end\n    end\n    return paren_levels\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for paren in\
    \ paren_string:gmatch('%b()') do\n        paren_level = paren_level + 1\n    \
    \    paren_levels[paren_level] = paren_levels[paren_level] or 0\n        for c\
    \ in paren:gmatch('%b()') do\n            paren_levels[paren_level] = paren_levels[paren_level]\
    \ + 1\n        end\n    end\n    return paren_levels\nend", "  local paren_groups\
    \ = {}\n  for paren_group in paren_string:gmatch('%S+') do\n    local max_depth\
    \ = 0\n    local depth = 0\n    for c in paren_group:gmatch('.') do\n      if\
    \ c == '(' then\n        depth = depth + 1\n      elseif c == ')' then\n     \
    \   depth = depth - 1\n      end\n      max_depth = math.max(max_depth, depth)\n\
    \    end\n    table.insert(paren_groups, max_depth)\n  end\n  return paren_groups\n\
    end", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local level = 0\n        local max_level = 0\n        for char in\
    \ group:gmatch('.') do\n            if char == '(' then\n                level\
    \ = level + 1\n            elseif char == ')' then\n                level = level\
    \ - 1\n            end\n            max_level = math.max(max_level, level)\n \
    \       end\n        table.insert(paren_groups, max_level)\n    end\n    return\
    \ paren_groups\nend", "    local paren_levels = {}\n    local paren_level = 0\n\
    \    for c in paren_string:gmatch('.') do\n        if c == '(' then\n        \
    \    paren_level = paren_level + 1\n        elseif c == ')' then\n           \
    \ paren_level = paren_level - 1\n        end\n        table.insert(paren_levels,\
    \ paren_level)\n    end\n    return paren_levels\nend", "    local max_nesting\
    \ = {}\n    for paren_group in paren_string:gmatch('%S+') do\n        local nesting\
    \ = 0\n        local max_nesting_in_group = 0\n        for paren in paren_group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local depth = 0\n        local max_depth = 0\n        for paren\
    \ in paren_group:gmatch('%S') do\n            if paren == '(' then\n         \
    \       depth = depth + 1\n            elseif paren == ')' then\n            \
    \    depth = depth - 1\n            end\n            if depth > max_depth then\n\
    \                max_depth = depth\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend", "    local max_nesting =\
    \ {}\n    for group in paren_string:gmatch('%S+') do\n        local nesting =\
    \ 0\n        local max_nesting_in_group = 0\n        for paren in group:gmatch('.')\
    \ do\n            if paren == '(' then\n                nesting = nesting + 1\n\
    \            elseif paren == ')' then\n                nesting = nesting - 1\n\
    \            end\n            if nesting > max_nesting_in_group then\n       \
    \         max_nesting_in_group = nesting\n            end\n        end\n     \
    \   table.insert(max_nesting, max_nesting_in_group)\n    end\n    return max_nesting\n\
    end", "    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch('.')\
    \ do\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \      elseif c == ')' then\n            paren_level = paren_level - 1\n     \
    \   end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend", "    local paren_groups = {}\n    for group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for char\
    \ in group:gmatch('.') do\n            if char == '(' then\n                nesting\
    \ = nesting + 1\n            elseif char == ')' then\n                nesting\
    \ = nesting - 1\n            end\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        end\n       \
    \ table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch('.') do\n            if paren == '(' then\n          \
    \      nesting = nesting + 1\n            elseif paren == ')' then\n         \
    \       nesting = nesting - 1\n            end\n            if nesting > max_nesting\
    \ then\n                max_nesting = nesting\n            end\n        end\n\
    \        table.insert(paren_groups, max_nesting)\n    end\n    return paren_groups\n\
    end", "    local paren_groups = {}\n    for paren_group in paren_string:gmatch('%S+')\
    \ do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch('.')\
    \ do\n            if c == '(' then\n                depth = depth + 1\n      \
    \      elseif c == ')' then\n                depth = depth - 1\n            end\n\
    \            if depth > max_depth then\n                max_depth = depth\n  \
    \          end\n        end\n        table.insert(paren_groups, max_depth)\n \
    \   end\n    return paren_groups\nend", "    local paren_groups = {}\n    for\
    \ paren_group in paren_string:gmatch('%S+') do\n        local max_nesting = 0\n\
    \        local nesting = 0\n        for paren in paren_group:gmatch('.') do\n\
    \            if paren == '(' then\n                nesting = nesting + 1\n   \
    \         elseif paren == ')' then\n                nesting = nesting - 1\n  \
    \          end\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
