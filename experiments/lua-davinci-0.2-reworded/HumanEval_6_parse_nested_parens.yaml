---
name: HumanEval_6_parse_nested_parens
language: lua
prompt: |
  -- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
  -- For each of the group, output the deepest level of nesting of parentheses.
  -- E.g. (()()) has maximum two levels of nesting while ((())) has three.
  -- >>> parse_nested_parens('(()()) ((())) () ((())()())')
  -- {2, 3, 1, 3}
  local function parse_nested_parens(paren_string)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = parse_nested_parens
      lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})
      lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})
      lu.assertEquals(candidate('(()(())((())))'), {4})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for char in paren_group:gmatch('.') do
              if char == '(' then
                  nesting = nesting + 1
              elseif char == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_levels = {}
    local paren_level = 0
    for paren in paren_string:gmatch('%b()') do
      paren_level = paren_level + 1
      paren_levels[paren_level] = paren_levels[paren_level] or 0
      for c in paren:gmatch('%b()') do
        paren_levels[paren_level] = paren_levels[paren_level] + 1
      end
    end
    return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in string.gmatch(paren_string, '%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for paren in string.gmatch(paren_group, '.') do
              if paren == '(' then
                  current_nesting = current_nesting + 1
              elseif paren == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_levels = {}
    local paren_level = 0
    for paren in paren_string:gmatch('%b()') do
      paren_level = paren_level + 1
      paren_levels[paren_level] = paren_levels[paren_level] or 0
      for c in paren:gmatch('%b()') do
        paren_levels[paren_level] = paren_levels[paren_level] + 1
      end
    end
    return paren_levels
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_level = paren_level + 1
          elseif char == ')' then
              paren_level = paren_level - 1
          elseif char == ' ' then
              table.insert(paren_levels, paren_level)
              paren_level = 0
          end
      end
      return paren_levels
  end
- |2-
      local max_depth = {}
      local depth = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              depth = depth + 1
          elseif c == ')' then
              depth = depth - 1
          elseif c == ' ' then
              table.insert(max_depth, depth)
              depth = 0
          end
      end
      return max_depth
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local paren_count = 0
          local max_paren_count = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  paren_count = paren_count + 1
              elseif paren == ')' then
                  paren_count = paren_count - 1
              end
              if paren_count > max_paren_count then
                  max_paren_count = paren_count
              end
          end
          table.insert(paren_groups, max_paren_count)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          paren_groups[#paren_groups + 1] = max_depth
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_level = paren_level + 1
          elseif c == ')' then
              paren_level = paren_level - 1
          elseif c == ' ' then
              table.insert(paren_levels, paren_level)
              paren_level = 0
          end
      end
      return paren_levels
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_level = paren_level + 1
          elseif c == ')' then
              paren_level = paren_level - 1
          end
          table.insert(paren_levels, paren_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%s*%b()%s*') do
          table.insert(paren_groups, paren_group)
      end
      local max_nesting = {}
      for _, paren_group in ipairs(paren_groups) do
          local max_nesting_level = 0
          local nesting_level = 0
          for paren in paren_group:gmatch('%b()') do
              if paren:sub(1, 1) == '(' then
                  nesting_level = nesting_level + 1
              else
                  nesting_level = nesting_level - 1
              end
              if nesting_level > max_nesting_level then
                  max_nesting_level = nesting_level
              end
          end
          table.insert(max_nesting, max_nesting_level)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local max_nested_parens = {}
      for _, paren_group in ipairs(paren_string:split(' ')) do
          local max_nested_paren = 0
          local current_nested_paren = 0
          for _, paren in ipairs(paren_group:split('')) do
              if paren == '(' then
                  current_nested_paren = current_nested_paren + 1
              elseif paren == ')' then
                  current_nested_paren = current_nested_paren - 1
              end
              if current_nested_paren > max_nested_paren then
                  max_nested_paren = current_nested_paren
              end
          end
          table.insert(max_nested_parens, max_nested_paren)
      end
      return max_nested_parens
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for char in paren_group:gmatch('.') do
              if char == '(' then
                  nesting = nesting + 1
              elseif char == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local depth = 0
          local max_depth = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  depth = depth + 1
              elseif c == ')' then
                  depth = depth - 1
              end
              max_depth = math.max(max_depth, depth)
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for group in paren_string:gmatch('%b()') do
          local nesting = 0
          for _ in group:gmatch('%(') do
              nesting = nesting + 1
          end
          table.insert(max_nesting, nesting)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for group in paren_string:gmatch('%b()') do
          local nesting = 0
          for _ in group:gmatch('%b()') do
              nesting = nesting + 1
          end
          table.insert(max_nesting, nesting)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in group:gmatch('%S') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local nesting = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          nesting = nesting + 1
        elseif paren == ')' then
          nesting = nesting - 1
        end
        if nesting > max_nesting then
          max_nesting = nesting
        end
      end
      paren_groups[#paren_groups + 1] = max_nesting
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local depth = 0
      local max_depth = 0
      for c in group:gmatch('.') do
        if c == '(' then
          depth = depth + 1
          if depth > max_depth then
            max_depth = depth
          end
        elseif c == ')' then
          depth = depth - 1
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          depth = depth + 1
        elseif paren == ')' then
          depth = depth - 1
        end
        if depth > max_depth then
          max_depth = depth
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in string.gmatch(paren_string, '%S+') do
          local level = 0
          local max_level = 0
          for c in string.gmatch(group, '.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  depth = depth + 1
              elseif c == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
    local paren_list = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local nesting = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          nesting = nesting + 1
        elseif c == ')' then
          nesting = nesting - 1
        end
        if nesting > max_nesting then
          max_nesting = nesting
        end
      end
      table.insert(paren_list, max_nesting)
    end
    return paren_list
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for char in paren_group:gmatch('.') do
              if char == '(' then
                  nesting = nesting + 1
              elseif char == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for paren in paren_string:gmatch('%b()') do
          paren_level = paren_level + 1
          paren_levels[paren_level] = paren_levels[paren_level] or 0
          for _ in paren:gmatch('%(') do
              paren_levels[paren_level] = paren_levels[paren_level] + 1
          end
          for _ in paren:gmatch('%)') do
              paren_level = paren_level - 1
          end
      end
      return paren_levels
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          level = level + 1
        elseif c == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          table.insert(paren_groups, paren_group)
      end
      local max_nesting = {}
      for _, paren_group in ipairs(paren_groups) do
          local nesting = 0
          local max_nesting_in_group = 0
          for char in paren_group:gmatch('.') do
              if char == '(' then
                  nesting = nesting + 1
              elseif char == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local paren_stack = {}
          local max_depth = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  table.insert(paren_stack, char)
                  max_depth = math.max(max_depth, #paren_stack)
              elseif char == ')' then
                  table.remove(paren_stack)
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- "\tlocal paren_levels = {}\n\tlocal paren_level = 0\n\tlocal paren_start = 0\n\tlocal
  paren_end = 0\n\tlocal paren_start_found = false\n\tlocal paren_end_found = false\n\tfor
  i = 1, #paren_string do\n\t\tif paren_string:sub(i, i) == '(' then\n\t\t\tif not
  paren_start_found then\n\t\t\t\tparen_start = i\n\t\t\t\tparen_start_found = true\n\t\t\tend\n\t\t\tparen_level
  = paren_level + 1\n\t\telseif paren_string:sub(i, i) == ')' then\n\t\t\tparen_level
  = paren_level - 1\n\t\t\tif paren_level == 0 then\n\t\t\t\tparen_end = i\n\t\t\t\tparen_end_found
  = true\n\t\t\tend\n\t\tend\n\t\tif paren_start_found and paren_end_found then\n\t\t\ttable.insert(paren_levels,
  paren_level)\n\t\t\tparen_start_found = false\n\t\t\tparen_end_found = false\n\t\tend\n\tend\n\treturn
  paren_levels\nend"
- |2-
    local paren_levels = {}
    local paren_level = 0
    for i = 1, #paren_string do
      local char = paren_string:sub(i, i)
      if char == '(' then
        paren_level = paren_level + 1
      elseif char == ')' then
        paren_level = paren_level - 1
      elseif char == ' ' then
        table.insert(paren_levels, paren_level)
        paren_level = 0
      end
    end
    return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local max_level = 0
      local level = 0
      for paren in group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        if level > max_level then
          max_level = level
        end
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for char in paren_group:gmatch('.') do
        if char == '(' then
          depth = depth + 1
          if depth > max_depth then
            max_depth = depth
          end
        elseif char == ')' then
          depth = depth - 1
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      local paren_start = false
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_level = paren_level + 1
              paren_start = true
          elseif c == ')' then
              paren_level = paren_level - 1
          elseif c == ' ' then
              if paren_start then
                  paren_levels[#paren_levels + 1] = paren_level
                  paren_start = false
              end
          end
      end
      if paren_start then
          paren_levels[#paren_levels + 1] = paren_level
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_levels = {}
    local paren_level = 0
    for paren in paren_string:gmatch('%S+') do
      paren_level = 0
      for c in paren:gmatch('.') do
        if c == '(' then
          paren_level = paren_level + 1
        elseif c == ')' then
          paren_level = paren_level - 1
        end
      end
      table.insert(paren_levels, paren_level)
    end
    return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local depth = 0
      local max_depth = 0
      for paren in group:gmatch('%S') do
        if paren == '(' then
          depth = depth + 1
        elseif paren == ')' then
          depth = depth - 1
        end
        if depth > max_depth then
          max_depth = depth
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local current_nesting = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          current_nesting = current_nesting + 1
        elseif paren == ')' then
          current_nesting = current_nesting - 1
        end
        if current_nesting > max_nesting then
          max_nesting = current_nesting
        end
      end
      table.insert(paren_groups, max_nesting)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for paren in group:gmatch('.') do
        if paren == '(' then
          depth = depth + 1
        elseif paren == ')' then
          depth = depth - 1
        end
        if depth > max_depth then
          max_depth = depth
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for paren in group:gmatch('.') do
        if paren == '(' then
          depth = depth + 1
        elseif paren == ')' then
          depth = depth - 1
        end
        if depth > max_depth then
          max_depth = depth
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_level = 0
      local level = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          level = level + 1
        elseif c == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          paren_groups[#paren_groups + 1] = paren_group
      end
      local max_nesting = {}
      for i, paren_group in ipairs(paren_groups) do
          local nesting = 0
          local max_nesting_for_group = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_for_group then
                  max_nesting_for_group = nesting
              end
          end
          max_nesting[i] = max_nesting_for_group
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%b()') do
          local max_nesting = 0
          local current_nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  current_nesting = current_nesting + 1
              elseif paren == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_count = {}
      local max_count = 0
      local count = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              count = count + 1
              max_count = math.max(max_count, count)
          elseif c == ')' then
              count = count - 1
          end
          if c == ' ' then
              table.insert(paren_count, max_count)
              max_count = 0
              count = 0
          end
      end
      table.insert(paren_count, max_count)
      return paren_count
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for paren in paren_string:gmatch('%b()') do
          paren_level = paren_level + 1
          paren_levels[paren_level] = paren_levels[paren_level] or 0
          for c in paren:gmatch('%b()') do
              paren_levels[paren_level] = paren_levels[paren_level] + 1
          end
      end
      return paren_levels
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for char in group:gmatch('.') do
        if char == '(' then
          level = level + 1
        elseif char == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local max_depth = 0
      local depth = 0
      local depths = {}
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              depth = depth + 1
              if depth > max_depth then
                  max_depth = depth
              end
          elseif char == ')' then
              depth = depth - 1
          elseif char == ' ' then
              depths[#depths + 1] = max_depth
              max_depth = 0
              depth = 0
          end
      end
      depths[#depths + 1] = max_depth
      return depths
  end
- |2-
    local paren_levels = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in paren_group:gmatch('%S') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_levels, max_level)
    end
    return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  depth = depth + 1
              elseif c == ')' then
                  depth = depth - 1
              end
              max_depth = math.max(max_depth, depth)
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
    local max_nesting = {}
    for group in paren_string:gmatch('%b()') do
      local nesting = 0
      for paren in group:gmatch('%b()') do
        nesting = nesting + 1
      end
      table.insert(max_nesting, nesting)
    end
    return max_nesting
  end
- |2-
      local paren_levels = {}
      local current_level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              current_level = current_level + 1
          elseif c == ')' then
              table.insert(paren_levels, current_level)
              current_level = current_level - 1
          end
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              if level > max_level then
                  max_level = level
              end
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_level = paren_level + 1
          elseif char == ')' then
              paren_level = paren_level - 1
          elseif char == ' ' then
              table.insert(paren_levels, paren_level)
              paren_level = 0
          end
      end
      return paren_levels
  end
- |2-
    local max_nesting = {}
    for paren_group in paren_string:gmatch('%S+') do
      local nesting = 0
      local max_nesting_in_group = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          nesting = nesting + 1
        elseif paren == ')' then
          nesting = nesting - 1
        end
        max_nesting_in_group = math.max(max_nesting_in_group, nesting)
      end
      table.insert(max_nesting, max_nesting_in_group)
    end
    return max_nesting
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_level = 0
          local current_level = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  current_level = current_level + 1
              elseif char == ')' then
                  current_level = current_level - 1
              end
              if current_level > max_level then
                  max_level = current_level
              end
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          paren_groups[#paren_groups + 1] = max_nesting
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          table.insert(paren_groups, paren_group)
      end
      local max_nesting = {}
      for _, paren_group in ipairs(paren_groups) do
          local nesting = 0
          local max_nesting_in_group = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  current_nesting = current_nesting + 1
              elseif paren == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for char in paren_group:gmatch('.') do
              if char == '(' then
                  depth = depth + 1
              elseif char == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for paren in paren_string:gmatch('%S') do
          if paren == '(' then
              paren_level = paren_level + 1
          elseif paren == ')' then
              paren_level = paren_level - 1
          end
          table.insert(paren_levels, paren_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = stringx.split(paren_string, ' ')
      local max_nesting = {}
      for _, paren_group in ipairs(paren_groups) do
          local nesting = 0
          local max_nesting_in_group = 0
          for _, c in ipairs(paren_group) do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  if nesting > max_nesting_in_group then
                      max_nesting_in_group = nesting
                  end
                  nesting = nesting - 1
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local paren_levels = {}
          local level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              table.insert(paren_levels, level)
          end
          table.insert(paren_groups, math.max(unpack(paren_levels)))
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  level = level + 1
              elseif char == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local current_level = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              current_level = current_level + 1
          elseif c == ')' then
              table.insert(paren_levels, current_level)
              current_level = current_level - 1
          end
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  current_nesting = current_nesting + 1
              elseif paren == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('[^%s]+') do
          local max_depth = 0
          local depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%b()') do
      local depth = 0
      local max_depth = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          depth = depth + 1
          if depth > max_depth then
            max_depth = depth
          end
        elseif paren == ')' then
          depth = depth - 1
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local curr_nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  curr_nesting = curr_nesting + 1
              elseif paren == ')' then
                  curr_nesting = curr_nesting - 1
              end
              if curr_nesting > max_nesting then
                  max_nesting = curr_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_depth = {}
    local current_depth = 0
    for c in paren_string:gmatch('.') do
      if c == '(' then
        current_depth = current_depth + 1
      elseif c == ')' then
        table.insert(paren_depth, current_depth)
        current_depth = current_depth - 1
      end
    end
    return paren_depth
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          table.insert(paren_groups, parse_nested_parens_single(paren_group))
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local paren_stack = {}
          local max_depth = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  table.insert(paren_stack, paren)
                  max_depth = math.max(max_depth, #paren_stack)
              elseif paren == ')' then
                  table.remove(paren_stack)
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
    local paren_levels = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_levels, max_level)
    end
    return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  depth = depth + 1
              elseif c == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local depth = 0
      local max_depth = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          depth = depth + 1
        elseif paren == ')' then
          depth = depth - 1
        end
        max_depth = math.max(max_depth, depth)
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
    local paren_groups = split(paren_string, ' ')
    local max_nesting = {}
    for i, paren_group in ipairs(paren_groups) do
      local nesting = 0
      local max_nesting_in_group = 0
      for j = 1, #paren_group do
        local char = paren_group:sub(j, j)
        if char == '(' then
          nesting = nesting + 1
        elseif char == ')' then
          nesting = nesting - 1
        end
        if nesting > max_nesting_in_group then
          max_nesting_in_group = nesting
        end
      end
      max_nesting[i] = max_nesting_in_group
    end
    return max_nesting
  end
- |2-
      local paren_groups = {}
      for group in string.gmatch(paren_string, '%S+') do
          local level = 0
          local max_level = 0
          for char in string.gmatch(group, '.') do
              if char == '(' then
                  level = level + 1
              elseif char == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  current_nesting = current_nesting + 1
              elseif paren == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for _, char in utf8.codes(paren_string) do
          if char == 40 then
              paren_level = paren_level + 1
          elseif char == 41 then
              paren_level = paren_level - 1
              table.insert(paren_levels, paren_level)
          end
      end
      return paren_levels
  end
- |2-
      local paren_table = {}
      local paren_level = 0
      local paren_level_max = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_level = paren_level + 1
              if paren_level > paren_level_max then
                  paren_level_max = paren_level
              end
          elseif char == ')' then
              paren_level = paren_level - 1
          elseif char == ' ' then
              table.insert(paren_table, paren_level_max)
              paren_level_max = 0
              paren_level = 0
          end
      end
      table.insert(paren_table, paren_level_max)
      return paren_table
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local depth = 0
      local max_depth = 0
      for paren in paren_group:gmatch('%S') do
        if paren == '(' then
          depth = depth + 1
        elseif paren == ')' then
          depth = depth - 1
        end
        if depth > max_depth then
          max_depth = depth
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  level = level + 1
              elseif char == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local current_nesting = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          current_nesting = current_nesting + 1
        elseif paren == ')' then
          current_nesting = current_nesting - 1
        end
        if current_nesting > max_nesting then
          max_nesting = current_nesting
        end
      end
      table.insert(paren_groups, max_nesting)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local paren_stack = {}
          local max_depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  table.insert(paren_stack, paren)
                  max_depth = math.max(max_depth, #paren_stack)
              elseif paren == ')' then
                  table.remove(paren_stack)
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- "\tlocal max_nested_parens = {}\n\tfor group in paren_string:gmatch('[^%s]+') do\n\t\tlocal
  max_nested = 0\n\t\tlocal current_nested = 0\n\t\tfor paren in group:gmatch('.')
  do\n\t\t\tif paren == '(' then\n\t\t\t\tcurrent_nested = current_nested + 1\n\t\t\t\tif
  current_nested > max_nested then\n\t\t\t\t\tmax_nested = current_nested\n\t\t\t\tend\n\t\t\telseif
  paren == ')' then\n\t\t\t\tcurrent_nested = current_nested - 1\n\t\t\tend\n\t\tend\n\t\ttable.insert(max_nested_parens,
  max_nested)\n\tend\n\treturn max_nested_parens\nend"
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in string.gmatch(paren_string, '%S+') do
      local paren_stack = {}
      local max_level = 0
      for c in string.gmatch(group, '.') do
        if c == '(' then
          table.insert(paren_stack, c)
          max_level = math.max(max_level, #paren_stack)
        elseif c == ')' then
          table.remove(paren_stack)
        end
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
    local max_levels = {}
    for _, paren_group in ipairs(paren_string:split(' ')) do
      local level = 0
      local max_level = 0
      for _, char in ipairs(paren_group:split('')) do
        if char == '(' then
          level = level + 1
        elseif char == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(max_levels, max_level)
    end
    return max_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_level = paren_level + 1
          elseif char == ')' then
              paren_level = paren_level - 1
          elseif char == ' ' then
              table.insert(paren_levels, paren_level)
              paren_level = 0
          end
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local depth = 0
          local max_depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              max_depth = math.max(max_depth, depth)
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      local paren_group = ''
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == ' ' then
              table.insert(paren_groups, paren_group)
              paren_group = ''
          else
              paren_group = paren_group .. char
          end
      end
      table.insert(paren_groups, paren_group)
      local max_nested_parens = {}
      for _, paren_group in ipairs(paren_groups) do
          local max_nested = 0
          local curr_nested = 0
          for i = 1, #paren_group do
              local char = paren_group:sub(i, i)
              if char == '(' then
                  curr_nested = curr_nested + 1
              elseif char == ')' then
                  curr_nested = curr_nested - 1
              end
              if curr_nested > max_nested then
                  max_nested = curr_nested
              end
          end
          table.insert(max_nested_parens, max_nested)
      end
      return max_nested_parens
  end
- |2-
      local max_nesting = 0
      local nesting_levels = {}
      local current_nesting = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              current_nesting = current_nesting + 1
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          elseif char == ')' then
              table.insert(nesting_levels, current_nesting)
              current_nesting = current_nesting - 1
          end
      end
      return nesting_levels
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  current_nesting = current_nesting + 1
              elseif paren == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          paren_groups[#paren_groups + 1] = max_nesting
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  depth = depth + 1
              elseif char == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for char in group:gmatch('.') do
        if char == '(' then
          depth = depth + 1
          if depth > max_depth then
            max_depth = depth
          end
        elseif char == ')' then
          depth = depth - 1
        end
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  current_nesting = current_nesting + 1
              elseif char == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local current_nesting = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          current_nesting = current_nesting + 1
        elseif paren == ')' then
          current_nesting = current_nesting - 1
        end
        if current_nesting > max_nesting then
          max_nesting = current_nesting
        end
      end
      table.insert(paren_groups, max_nesting)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local depth = 0
          local max_depth = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              max_depth = math.max(max_depth, depth)
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%s*%b()%s*') do
          local nesting = 0
          local max_nesting_in_group = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = stringx.split(paren_string, ' ')
      local max_nesting = {}
      for _, paren_group in ipairs(paren_groups) do
          local nesting = 0
          local max_nesting_in_group = 0
          for _, char in ipairs(paren_group) do
              if char == '(' then
                  nesting = nesting + 1
              elseif char == ')' then
                  nesting = nesting - 1
              end
              max_nesting_in_group = math.max(max_nesting_in_group, nesting)
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local paren_level = 0
          local max_paren_level = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  paren_level = paren_level + 1
              elseif paren == ')' then
                  paren_level = paren_level - 1
              end
              if paren_level > max_paren_level then
                  max_paren_level = paren_level
              end
          end
          table.insert(paren_levels, max_paren_level)
      end
      return paren_levels
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local nesting = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          nesting = nesting + 1
        elseif paren == ')' then
          nesting = nesting - 1
        end
        if nesting > max_nesting then
          max_nesting = nesting
        end
      end
      table.insert(paren_groups, max_nesting)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local paren_level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  paren_level = paren_level + 1
              elseif paren == ')' then
                  paren_level = paren_level - 1
              end
              max_level = math.max(max_level, paren_level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local depth = 0
          local max_depth = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  depth = depth + 1
                  if depth > max_depth then
                      max_depth = depth
                  end
              elseif c == ')' then
                  depth = depth - 1
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- "\tlocal paren_groups = split(paren_string, ' ')\n\tlocal max_nesting = {}\n\tfor
  _, paren_group in ipairs(paren_groups) do\n\t\tlocal nesting = 0\n\t\tlocal max_nesting_in_group
  = 0\n\t\tfor _, paren in ipairs(paren_group) do\n\t\t\tif paren == '(' then\n\t\t\t\tnesting
  = nesting + 1\n\t\t\telseif paren == ')' then\n\t\t\t\tnesting = nesting - 1\n\t\t\tend\n\t\t\tif
  nesting > max_nesting_in_group then\n\t\t\t\tmax_nesting_in_group = nesting\n\t\t\tend\n\t\tend\n\t\ttable.insert(max_nesting,
  max_nesting_in_group)\n\tend\n\treturn max_nesting\nend"
- |2-
      local paren_list = {}
      local paren_level = 0
      local max_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_level = paren_level + 1
              if paren_level > max_level then
                  max_level = paren_level
              end
          elseif char == ')' then
              paren_level = paren_level - 1
          elseif char == ' ' then
              paren_list[#paren_list + 1] = max_level
              max_level = 0
          end
      end
      paren_list[#paren_list + 1] = max_level
      return paren_list
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          level = level + 1
        elseif paren == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_nesting = 0
      local nesting = 0
      for paren in paren_group:gmatch('%S') do
        if paren == '(' then
          nesting = nesting + 1
        elseif paren == ')' then
          nesting = nesting - 1
        end
        if nesting > max_nesting then
          max_nesting = nesting
        end
      end
      table.insert(paren_groups, max_nesting)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local paren_count = 0
          local max_paren_count = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  paren_count = paren_count + 1
              elseif paren == ')' then
                  paren_count = paren_count - 1
              end
              if paren_count > max_paren_count then
                  max_paren_count = paren_count
              end
          end
          table.insert(paren_groups, max_paren_count)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          level = level + 1
        elseif c == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_levels = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_levels, max_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          paren_groups[#paren_groups + 1] = max_nesting
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(max_nesting, max_level)
      end
      return max_nesting
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  if nesting > max_nesting_in_group then
                      max_nesting_in_group = nesting
                  end
                  nesting = nesting - 1
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
    local paren_levels = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          level = level + 1
        elseif c == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_levels, max_level)
    end
    return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local paren_level = 0
      local max_level = 0
      for paren in paren_group:gmatch('.') do
        if paren == '(' then
          paren_level = paren_level + 1
        elseif paren == ')' then
          paren_level = paren_level - 1
        end
        max_level = math.max(max_level, paren_level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for c in group:gmatch('.') do
              if c == '(' then
                  level = level + 1
              elseif c == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          depth = depth + 1
        elseif c == ')' then
          depth = depth - 1
        end
        max_depth = math.max(max_depth, depth)
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local depth = 0
          local max_depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              max_depth = math.max(max_depth, depth)
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local level = 0
      local max_level = 0
      for char in paren_group:gmatch('.') do
        if char == '(' then
          level = level + 1
        elseif char == ')' then
          level = level - 1
        end
        max_level = math.max(max_level, level)
      end
      table.insert(paren_groups, max_level)
    end
    return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for paren in paren_string:gmatch('%b()') do
          paren_level = paren_level + 1
          paren_levels[paren_level] = paren_levels[paren_level] or 0
          for c in paren:gmatch('%b()') do
              paren_levels[paren_level] = paren_levels[paren_level] + 1
          end
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_level = paren_level + 1
          elseif c == ')' then
              paren_level = paren_level - 1
          end
          table.insert(paren_levels, paren_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  level = level + 1
              elseif paren == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_level = 0
          local level = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  level = level + 1
              elseif char == ')' then
                  level = level - 1
              end
              if level > max_level then
                  max_level = level
              end
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('[^%s]+') do
          local depth = 0
          local max_depth = 0
          for paren in paren_group:gmatch('[()]') do
              if paren == '(' then
                  depth = depth + 1
              else
                  depth = depth - 1
              end
              max_depth = math.max(max_depth, depth)
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local current_nesting = 0
          for char in paren_group:gmatch('.') do
              if char == '(' then
                  current_nesting = current_nesting + 1
              elseif char == ')' then
                  current_nesting = current_nesting - 1
              end
              if current_nesting > max_nesting then
                  max_nesting = current_nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      local max_level = 0
      for i = 1, #paren_string do
          local char = paren_string:sub(i, i)
          if char == '(' then
              paren_level = paren_level + 1
              max_level = math.max(max_level, paren_level)
          elseif char == ')' then
              paren_level = paren_level - 1
          end
      end
      return max_level
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  nesting = nesting + 1
              elseif c == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for i = 1, #paren_string do
          local c = paren_string:sub(i, i)
          if c == '(' then
              paren_level = paren_level + 1
          elseif c == ')' then
              paren_level = paren_level - 1
          elseif c == ' ' then
              table.insert(paren_levels, paren_level)
              paren_level = 0
          end
      end
      return paren_levels
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for paren in paren_string:gmatch('%b()') do
          paren_level = paren_level + 1
          paren_levels[paren_level] = paren_levels[paren_level] or 0
          for c in paren:gmatch('%b()') do
              paren_levels[paren_level] = paren_levels[paren_level] + 1
          end
      end
      return paren_levels
  end
- |2-
    local paren_groups = {}
    for paren_group in paren_string:gmatch('%S+') do
      local max_depth = 0
      local depth = 0
      for c in paren_group:gmatch('.') do
        if c == '(' then
          depth = depth + 1
        elseif c == ')' then
          depth = depth - 1
        end
        max_depth = math.max(max_depth, depth)
      end
      table.insert(paren_groups, max_depth)
    end
    return paren_groups
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local level = 0
          local max_level = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  level = level + 1
              elseif char == ')' then
                  level = level - 1
              end
              max_level = math.max(max_level, level)
          end
          table.insert(paren_groups, max_level)
      end
      return paren_groups
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_level = paren_level + 1
          elseif c == ')' then
              paren_level = paren_level - 1
          end
          table.insert(paren_levels, paren_level)
      end
      return paren_levels
  end
- |2-
      local max_nesting = {}
      for paren_group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local depth = 0
          local max_depth = 0
          for paren in paren_group:gmatch('%S') do
              if paren == '(' then
                  depth = depth + 1
              elseif paren == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local max_nesting = {}
      for group in paren_string:gmatch('%S+') do
          local nesting = 0
          local max_nesting_in_group = 0
          for paren in group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting_in_group then
                  max_nesting_in_group = nesting
              end
          end
          table.insert(max_nesting, max_nesting_in_group)
      end
      return max_nesting
  end
- |2-
      local paren_levels = {}
      local paren_level = 0
      for c in paren_string:gmatch('.') do
          if c == '(' then
              paren_level = paren_level + 1
          elseif c == ')' then
              paren_level = paren_level - 1
          end
          table.insert(paren_levels, paren_level)
      end
      return paren_levels
  end
- |2-
      local paren_groups = {}
      for group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for char in group:gmatch('.') do
              if char == '(' then
                  nesting = nesting + 1
              elseif char == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_depth = 0
          local depth = 0
          for c in paren_group:gmatch('.') do
              if c == '(' then
                  depth = depth + 1
              elseif c == ')' then
                  depth = depth - 1
              end
              if depth > max_depth then
                  max_depth = depth
              end
          end
          table.insert(paren_groups, max_depth)
      end
      return paren_groups
  end
- |2-
      local paren_groups = {}
      for paren_group in paren_string:gmatch('%S+') do
          local max_nesting = 0
          local nesting = 0
          for paren in paren_group:gmatch('.') do
              if paren == '(' then
                  nesting = nesting + 1
              elseif paren == ')' then
                  nesting = nesting - 1
              end
              if nesting > max_nesting then
                  max_nesting = nesting
              end
          end
          table.insert(paren_groups, max_nesting)
      end
      return paren_groups
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
