---
name: HumanEval_39_prime_fib
language: lua
prompt: |
  -- prime_fib returns n-th number that is a Fibonacci number and it's also prime.
  -- >>> prime_fib(1)
  -- 2
  -- >>> prime_fib(2)
  -- 3
  -- >>> prime_fib(3)
  -- 5
  -- >>> prime_fib(4)
  -- 13
  -- >>> prime_fib(5)
  -- 89
  local function prime_fib(n)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = prime_fib
      lu.assertEquals(candidate(1), 2)
      lu.assertEquals(candidate(2), 3)
      lu.assertEquals(candidate(3), 5)
      lu.assertEquals(candidate(4), 13)
      lu.assertEquals(candidate(5), 89)
      lu.assertEquals(candidate(6), 233)
      lu.assertEquals(candidate(7), 1597)
      lu.assertEquals(candidate(8), 28657)
      lu.assertEquals(candidate(9), 514229)
      lu.assertEquals(candidate(10), 433494437)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local fib_n = fib(n)
      while not is_prime(fib_n) do
          n = n + 1
          fib_n = fib(n)
      end
      return fib_n
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i
  + j\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci(n)
      while not is_prime(fib) do
          fib = fibonacci(n)
          n = n + 1
      end
      return fib
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal count = 0\n\twhile count <
  n do\n\t\tk = i + j\n\t\ti = j\n\t\tj = k\n\t\tif is_prime(k) then\n\t\t\tcount
  = count + 1\n\t\tend\n\tend\n\treturn k\nend"
- |2-
    local a, b = 2, 3
    local i = 2
    while i < n do
      a, b = b, a + b
      if is_prime(b) then
        i = i + 1
      end
    end
    return b
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    local count = 0
    while count < n do
      k = i + j
      if is_prime(k) then
        count = count + 1
      end
      i = j
      j = k
    end
    return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 2
      local k = 3
      local count = 3
      while count < n do
          i = j
          j = k
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci()
      local prime = prime_numbers()
      local i = 1
      local f, p
      while i < n do
          f = fib()
          p = prime()
          if f == p then
              i = i + 1
          end
      end
      return f
  end
- |2-
      local i = 0
      local f = 0
      local f1 = 0
      local f2 = 1
      while i < n do
          f = f1 + f2
          f1 = f2
          f2 = f
          if is_prime(f) then
              i = i + 1
          end
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local a, b = 2, 3
      local i = 2
      while i < n do
          a, b = b, a + b
          if is_prime(b) then
              i = i + 1
          end
      end
      return b
  end
- |2-
      local fib = fibonacci()
      local prime = primes()
      local i = 0
      local f, p
      repeat
          i = i + 1
          f = fib()
          p = prime()
      until i == n
      return f
  end
- |2-
      local fib = fibonacci(n)
      while not is_prime(fib) do
          fib = fibonacci(n)
          n = n + 1
      end
      return fib
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\tlocal t = i
  + j\n\t\ti = j\n\t\tj = t\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn
  j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          if is_prime(i) then
              j = i
              k = k + 1
          end
          i = i + 1
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = i + j, i
          if is_prime(i) then
              k = k + 1
          end
      end
      return i
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci()
      local i = 1
      local f = fib()
      while i < n do
          f = fib()
          if is_prime(f) then
              i = i + 1
          end
      end
      return f
  end
- |2-
    local i = 1
    local f = 2
    while i < n do
      f = next_prime_fib(f)
      i = i + 1
    end
    return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local fib = 1
    while i < n do
      fib = fib + 1
      while not is_prime(fib) do
        fib = fib + 1
      end
      i = i + 1
    end
    return fib
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local f = fib()
      local i = 1
      local v
      repeat
          v = f()
          i = i + 1
      until is_prime(v) and i == n
      return v
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local fib = 1
      local prime_fib = 1
      while i < n do
          fib = fibonacci(i)
          if is_prime(fib) then
              prime_fib = fib
              i = i + 1
          end
      end
      return prime_fib
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 1\n\twhile count < n do\n\t\tlocal
  k = i + j\n\t\ti = j\n\t\tj = k\n\t\tif is_prime(k) then\n\t\t\tcount = count +
  1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 2
      local k = 1
      while k < n do
          if is_prime(j) then
              k = k + 1
          end
          local t = i + j
          i = j
          j = t
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      local t = i + j
      i = j
      j = t
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 1
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal count = 0\n\twhile count <
  n do\n\t\tk = i + j\n\t\ti = j\n\t\tj = k\n\t\tif is_prime(k) then\n\t\t\tcount
  = count + 1\n\t\tend\n\tend\n\treturn k\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci()
      local prime = prime_numbers()
      local i = 1
      local f, p = fib(), prime()
      while i < n do
          if f == p then
              i = i + 1
              p = prime()
          elseif f < p then
              f = fib()
          else
              p = prime()
          end
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    local count = 0
    while count < n do
      if is_prime(i) then
        count = count + 1
      end
      if count == n then
        return i
      end
      k = i + j
      i = j
      j = k
    end
  end
- |2-
    local i = 1
    local j = 1
    local k = 0
    local count = 0
    while count < n do
      k = i + j
      i = j
      j = k
      if is_prime(k) then
        count = count + 1
      end
    end
    return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local a, b = 2, 3
      local i = 2
      while i < n do
          a, b = b, a + b
          if is_prime(b) then
              i = i + 1
          end
      end
      return b
  end
- |2-
      local i = 1
      local fib = 1
      local prime_fib = 1
      while i < n do
          fib = fibonacci(i)
          if is_prime(fib) then
              prime_fib = fib
              i = i + 1
          end
      end
      return prime_fib
  end
- |2-
      local i = 1
      local f = 1
      local p = 2
      while i < n do
          f = fib(p)
          if is_prime(f) then
              i = i + 1
          end
          p = p + 1
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      local t = i + j
      i = j
      j = t
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      local t = i + j
      i = j
      j = t
      if is_prime(t) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local f = 1
      local f1 = 1
      local f2 = 1
      while i < n do
          f = f1 + f2
          f1 = f2
          f2 = f
          if is_prime(f) then
              i = i + 1
          end
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci(n)
      while not is_prime(fib) do
          fib = fibonacci(n)
          n = n + 1
      end
      return fib
  end
- |2-
    local a, b = 2, 3
    local i = 2
    while i < n do
      a, b = b, a + b
      if is_prime(b) then
        i = i + 1
      end
    end
    return b
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i
  + j\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local f = 1
      local p = 2
      while i < n do
          f = f + p
          if is_prime(f) then
              p = f
              i = i + 1
          end
      end
      return p
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local a, b = 2, 3
      local i = 1
      while i < n do
          if is_prime(b) then
              i = i + 1
          end
          a, b = b, a + b
      end
      return a
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    local count = 0
    while count < n do
      if is_prime(i) then
        count = count + 1
      end
      if count == n then
        return i
      end
      k = i + j
      i = j
      j = k
    end
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 0
      local f = 0
      while i < n do
          f = fib(f)
          if is_prime(f) then
              i = i + 1
          end
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          if is_prime(i) then
              count = count + 1
          end
          if count == n then
              return i
          end
          k = i + j
          i = j
          j = k
      end
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          if is_prime(i) then
              count = count + 1
          end
          if count == n then
              return i
          end
          k = i + j
          i = j
          j = k
      end
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      local t = i + j
      i = j
      j = t
      if is_prime(t) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local f = 1
      local p = 1
      while i < n do
          f = fib(p)
          if is_prime(f) then
              i = i + 1
          end
          p = p + 1
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local fib = 1
      local fib_prev = 1
      while i < n do
          local fib_next = fib + fib_prev
          fib_prev = fib
          fib = fib_next
          if is_prime(fib) then
              i = i + 1
          end
      end
      return fib
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i
  + j\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i
  + j\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local a, b = 2, 3
      local i = 2
      while i < n do
          a, b = b, a + b
          if is_prime(b) then
              i = i + 1
          end
      end
      return b
  end
- |2-
    local fib = fibonacci()
    local i = 0
    while i < n do
      local f = fib()
      if is_prime(f) then
        i = i + 1
      end
    end
    return f
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 2
      local j = 3
      local k = 5
      local count = 5
      while count < n do
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
          k = i + j
      end
      return k
  end
- |2-
    local a, b = 1, 1
    local i = 1
    while i < n do
      a, b = b, a + b
      if is_prime(b) then
        i = i + 1
      end
    end
    return b
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    local count = 0
    while count < n do
      if is_prime(i) then
        count = count + 1
      end
      if count == n then
        return i
      end
      k = i + j
      i = j
      j = k
    end
  end
- |2-
      local f1, f2 = 2, 3
      local i = 2
      while i < n do
          f1, f2 = f2, f1 + f2
          if is_prime(f2) then
              i = i + 1
          end
      end
      return f2
  end
- |2-
      local i = 1
      local j = 2
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
    local i = 1
    local j = 1
    local k = 0
    local count = 0
    while count < n do
      k = i + j
      i = j
      j = k
      if is_prime(k) then
        count = count + 1
      end
    end
    return k
  end
- |2-
      local i = 1
      local f = 1
      local f1 = 1
      local f2 = 1
      while i < n do
          f = f1 + f2
          f1 = f2
          f2 = f
          if is_prime(f) then
              i = i + 1
          end
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib_num = fib(n)
      while not is_prime(fib_num) do
          n = n + 1
          fib_num = fib(n)
      end
      return fib_num
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      local t = i + j
      i = j
      j = t
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
    local i = 0
    local f = 0
    while i < n do
      f = fib(f)
      if is_prime(f) then
        i = i + 1
      end
    end
    return f
  end
- |2-
      local fib = fibonacci(n)
      while not is_prime(fib) do
          fib = fibonacci(n)
          n = n + 1
      end
      return fib
  end
- |2-
    local i = 1
    local j = 2
    local k = 3
    local count = 2
    while count < n do
      i = j
      j = k
      k = i + j
      if is_prime(k) then
        count = count + 1
      end
    end
    return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci()
      local i = 1
      while i < n do
          local f = fib()
          if is_prime(f) then
              i = i + 1
          end
      end
      return fib()
  end
- |2-
      local i = 0
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while n > 0 do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              n = n - 1
          end
      end
      return k
  end
- "\tlocal i = 1\n\tlocal f = 1\n\tlocal p = 1\n\twhile i < n do\n\t\tf = fib(p)\n\t\tif
  is_prime(f) then\n\t\t\ti = i + 1\n\t\tend\n\t\tp = p + 1\n\tend\n\treturn f\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i
  + j\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci(n)
      while not is_prime(fib) do
          fib = fibonacci(n)
          n = n + 1
      end
      return fib
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal count = 1\n\twhile count <
  n do\n\t\tk = i + j\n\t\tif is_prime(k) then\n\t\t\tcount = count + 1\n\t\tend\n\t\ti
  = j\n\t\tj = k\n\tend\n\treturn k\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local c = 0
      while c < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              c = c + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib_n = fib(n)
      if is_prime(fib_n) then
          return fib_n
      else
          return prime_fib(n + 1)
      end
  end
- |2-
      local i = 1
      local fib = 1
      while i < n do
          fib = fib + 1
          if is_prime(fib) and is_fib(fib) then
              i = i + 1
          end
      end
      return fib
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      i, j = j, i + j
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- "\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile k < n do\n\t\ti, j = j, i
  + j\n\t\tif is_prime(j) then\n\t\t\tk = k + 1\n\t\tend\n\tend\n\treturn j\nend"
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          k = i + j
          if is_prime(k) then
              count = count + 1
          end
          i = j
          j = k
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
    local i = 1
    local j = 1
    local k = 0
    local count = 0
    while count < n do
      k = i + j
      i = j
      j = k
      if is_prime(k) then
        count = count + 1
      end
    end
    return k
  end
- |2-
    local i = 1
    local j = 1
    local k = 1
    while k < n do
      local t = i + j
      i = j
      j = t
      if is_prime(j) then
        k = k + 1
      end
    end
    return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local fib = fibonacci()
      local prime = prime_numbers()
      local i = 1
      local f, p = fib(), prime()
      while i < n do
          if f < p then
              f = fib()
          elseif f > p then
              p = prime()
          else
              i = i + 1
              f, p = fib(), prime()
          end
      end
      return f
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          local t = i + j
          i = j
          j = t
          if is_prime(t) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      local count = 0
      while count < n do
          if is_prime(i) then
              count = count + 1
          end
          if count == n then
              return i
          end
          k = i + j
          i = j
          j = k
      end
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
- |2-
      local i = 1
      local j = 1
      local k = 1
      while k < n do
          i, j = j, i + j
          if is_prime(j) then
              k = k + 1
          end
      end
      return j
  end
- |2-
      local i = 1
      local j = 1
      local k = 0
      local count = 0
      while count < n do
          k = i + j
          i = j
          j = k
          if is_prime(k) then
              count = count + 1
          end
      end
      return k
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
