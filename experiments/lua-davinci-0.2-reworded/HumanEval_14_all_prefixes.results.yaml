---
name: HumanEval_14_all_prefixes
language: lua
results:
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of all prefixes from shortest to longest of the input
    string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\tlocal
    prefixes = {}\n\tfor i = 1, #string do\n\t\tprefixes[#prefixes + 1] = string:sub(1,
    i)\n\tend\n\treturn prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),
    {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),
    {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of all prefixes from shortest to longest of the input
    string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\tlocal
    prefixes = {}\n\tfor i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1,
    i))\n\tend\n\treturn prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal
    candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),
    {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),
    {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        table.insert(result, string:sub(1, i))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        table.insert(result, string:sub(1, i))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local t = {}
        for i = 1, #string do
            t[#t + 1] = string:sub(1, i)
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local t = {}
        for i = 1, #string do
            t[#t + 1] = string:sub(1, i)
        end
        return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        table.insert(prefixes, string:sub(1, i))
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        table.insert(result, string:sub(1, i))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local prefixes = {}
      for i = 1, #string do
        prefixes[#prefixes + 1] = string:sub(1, i)
      end
      return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        result[i] = string:sub(1, i)
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local result = {}
      for i = 1, #string do
        table.insert(result, string:sub(1, i))
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            prefixes[#prefixes + 1] = string:sub(1, i)
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            result[#result + 1] = string:sub(1, i)
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local result = {}
        for i = 1, #string do
            table.insert(result, string:sub(1, i))
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
        local prefixes = {}
        for i = 1, #string do
            table.insert(prefixes, string:sub(1, i))
        end
        return prefixes
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Return table of all prefixes from shortest to longest of the input string
    -- >>> all_prefixes('abc')
    -- {'a', 'ab', 'abc'}
    local function all_prefixes(string)
      local t = {}
      for i = 1, #string do
        t[#t+1] = string:sub(1, i)
      end
      return t
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = all_prefixes
        lu.assertEquals(candidate(''), {})
        lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})
        lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
