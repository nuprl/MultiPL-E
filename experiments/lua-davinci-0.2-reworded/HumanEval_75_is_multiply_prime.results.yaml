name: HumanEval_75_is_multiply_prime
language: lua
results:
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm05s2bdr.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm05s2bdr.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal l = 1\n\tlocal m = 1\n\tlocal\
    \ n = 1\n\tlocal o = 1\n\tlocal p = 1\n\tlocal q = 1\n\tlocal r = 1\n\tlocal s\
    \ = 1\n\tlocal t = 1\n\tlocal u = 1\n\tlocal v = 1\n\tlocal w = 1\n\tlocal x =\
    \ 1\n\tlocal y = 1\n\tlocal z = 1\n\tlocal aa = 1\n\tlocal bb = 1\n\tlocal cc\
    \ = 1\n\tlocal dd = 1\n\tlocal ee = 1\n\tlocal ff = 1\n\tlocal gg = 1\n\tlocal\
    \ hh = 1\n\tlocal ii = 1\n\tlocal jj = 1\n\tlocal kk = 1\n\tlocal ll = 1\n\tlocal\
    \ mm = 1\n\tlocal nn = 1\n\tlocal oo = 1\n\tlocal pp = 1\n\tlocal qq = 1\n\tlocal\
    \ rr = 1\n\tlocal ss = 1\n\tlocal tt = 1\n\tlocal uu = 1\n\tlocal vv = 1\n\tlocal\
    \ ww = 1\n\tlocal xx = 1\n\tlocal yy = 1\n\tlocal zz = 1\n\tlocal aaa = 1\n\t\
    local bbb = 1\n\tlocal ccc = 1\n\tlocal ddd = 1\n\tlocal eee = 1\n\tlocal fff\
    \ = 1\n\tlocal ggg = 1\n\tlocal hhh = 1\n\tlocal iii = 1\n\tlocal jjj = 1\n\t\
    local kkk = 1\n\tlocal lll = 1\n\tlocal mmm = 1\n\tlocal nnn = 1\n\tlocal ooo\
    \ = 1\n\tlocal ppp = 1\n\tlocal qqq = 1\n\tlocal rrr = 1\n\tlocal sss = 1\n\t\
    local ttt = 1\n\tlocal uuu = 1\n\tlocal vvv = 1\n\tlocal www = 1\n\tlocal xxx\
    \ = 1\n\tlocal yyy = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2ku2gxep.lua:96: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfkm66825.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    if n ==\
    \ 1 then\n      return false\n    end\n    for i = 2, n - 1 do\n      if n % i\
    \ == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  for i = 1, a do\n    if is_prime(i) and a % i == 0 then\n      for j = 1, a\
    \ do\n        if is_prime(j) and a % j == 0 and i ~= j then\n          for k =\
    \ 1, a do\n            if is_prime(k) and a % k == 0 and i ~= k and j ~= k then\n\
    \              if i * j * k == a then\n                return true\n         \
    \     end\n            end\n          end\n        end\n      end\n    end\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfvoq8m2.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgfvoq8m2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local i = 1\n    local j = 1\n    local k = 1\n    local found = false\n  \
    \  while i <= #primes and not found do\n        j = 1\n        while j <= #primes\
    \ and not found do\n            k = 1\n            while k <= #primes and not\
    \ found do\n                if primes[i] * primes[j] * primes[k] == a then\n \
    \                   found = true\n                end\n                k = k +\
    \ 1\n            end\n            j = j + 1\n        end\n        i = i + 1\n\
    \    end\n    return found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprj010vcu.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptdiol3zw.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_wscthpp.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a %\
    \ i == 0 then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzge0389_.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzge0389_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then return false end\n        for i = 2, n - 1 do\n            if n %\
    \ i == 0 then return false end\n        end\n        return true\n    end\n  \
    \  for i = 2, a - 1 do\n        if is_prime(i) and a % i == 0 then\n         \
    \   for j = 2, a - 1 do\n                if is_prime(j) and a % j == 0 and i ~=\
    \ j then\n                    for k = 2, a - 1 do\n                        if\
    \ is_prime(k) and a % k == 0 and i ~= k and j ~= k then\n                    \
    \        if i * j * k == a then\n                                return true\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_whwpdg.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq_whwpdg.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile primes[i]\
    \ do\n\t\twhile primes[j] do\n\t\t\twhile primes[k] do\n\t\t\t\tif primes[i] *\
    \ primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\t\
    \tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = 1\n\t\tend\n\t\ti = i + 1\n\
    \t\tj = 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgovcsi6z.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        if\
    \ a == 1 then\n            return false\n        end\n        for i = 2, a - 1\
    \ do\n            if a % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if a % i == 0 and is_prime(i) then\n            for j = 2, a - 1 do\n\
    \                if a % j == 0 and is_prime(j) and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n                            if i * j * k == a then\n\
    \                                return true\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz27bwr01.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz27bwr01.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tif n <\
    \ 2 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, n-1 do\n\t\t\tif n % i ==\
    \ 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\t\
    local function is_multiply_prime_helper(a, b)\n\t\tif a == 1 then\n\t\t\treturn\
    \ true\n\t\tend\n\t\tif is_prime(a) then\n\t\t\treturn is_multiply_prime_helper(b,\
    \ a)\n\t\tend\n\t\tfor i = 2, a-1 do\n\t\t\tif a % i == 0 and is_prime(i) then\n\
    \t\t\t\treturn is_multiply_prime_helper(a/i, b*i)\n\t\t\tend\n\t\tend\n\t\treturn\
    \ false\n\tend\n\treturn is_multiply_prime_helper(a, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86reyjxx.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp86reyjxx.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local i = 1\n    local j = 1\n    local k = 1\n    local result = false\n \
    \   while i <= #primes do\n        while j <= #primes do\n            while k\
    \ <= #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    result = true\n                end\n                k = k\
    \ + 1\n            end\n            j = j + 1\n        end\n        i = i + 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89rhz53r.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp89rhz53r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n == 1 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if is_prime(i) and a % i == 0 then\n            for j = 2, a - 1 do\n\
    \                if is_prime(j) and a % j == 0 and i * j < a then\n          \
    \          for k = 2, a - 1 do\n                        if is_prime(k) and a %\
    \ k == 0 and i * j * k == a then\n                            return true\n  \
    \                      end\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  for\
    \ i = 1, #primes do\n    for j = 1, #primes do\n      for k = 1, #primes do\n\
    \        if primes[i] * primes[j] * primes[k] == a then\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tif a ==\
    \ 1 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, a - 1 do\n\t\t\tif a % i\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\
    \tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a % i == 0 then\n\t\t\tfor j = 2,\
    \ a - 1 do\n\t\t\t\tif is_prime(j) and a % j == 0 and i ~= j then\n\t\t\t\t\t\
    for k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k) and a % k == 0 and i ~= k and\
    \ j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\t\t\treturn true\n\
    \t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6k44zkw.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo6k44zkw.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp73ozehnr.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzuwhw9kw.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a %\
    \ i == 0 then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkqbb_54.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnkqbb_54.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    for i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local function is_prime(a)\n        for i = 1, #primes do\n            if a\
    \ == primes[i] then\n                return true\n            end\n        end\n\
    \        return false\n    end\n    for i = 1, #primes do\n        if a % primes[i]\
    \ == 0 then\n            if is_prime(a / primes[i]) then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2utyal4.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg2utyal4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local is_multiply = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\
    \t\t\tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a\
    \ then\n\t\t\t\t\tis_multiply = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn is_multiply\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    for i =\
    \ 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n   \
    \ end\n    return true\n  end\n  for i = 2, a - 1 do\n    if is_prime(i) and a\
    \ % i == 0 then\n      for j = 2, a - 1 do\n        if is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n          for k = 2, a - 1 do\n            if is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n              return true\n     \
    \       end\n          end\n        end\n      end\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa6s7uak.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqa6s7uak.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp40aufylc.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local is_multiply = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    is_multiply = true\n            \
    \    end\n            end\n        end\n    end\n    return is_multiply\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal flag = false\n\tfor i = 1,\
    \ #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tflag = true\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn flag\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n == 1 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if a % i == 0 and is_prime(i) then\n            for j = 2, a - 1 do\n\
    \                if a % j == 0 and is_prime(j) and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n                            if i * j * k == a then\n\
    \                                return true\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6q0kaou2.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6q0kaou2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then return false end\n        for i = 2, n - 1 do\n            if n %\
    \ i == 0 then return false end\n        end\n        return true\n    end\n  \
    \  for i = 2, a - 1 do\n        if is_prime(i) and a % i == 0 then\n         \
    \   for j = 2, a - 1 do\n                if is_prime(j) and a % j == 0 and i ~=\
    \ j then\n                    for k = 2, a - 1 do\n                        if\
    \ is_prime(k) and a % k == 0 and i ~= k and j ~= k then\n                    \
    \        if i * j * k == a then\n                                return true\n\
    \                            end\n                        end\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1fq_sfi.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb1fq_sfi.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    for i =\
    \ 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n   \
    \ end\n    return true\n  end\n  for i = 2, a - 1 do\n    if a % i == 0 and is_prime(i)\
    \ then\n      for j = 2, a - 1 do\n        if a % j == 0 and is_prime(j) and i\
    \ ~= j then\n          for k = 2, a - 1 do\n            if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n              if i * j * k == a then\n         \
    \       return true\n              end\n            end\n          end\n     \
    \   end\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq8g3msp.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplq8g3msp.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile i <=\
    \ #primes do\n\t\twhile j <= #primes do\n\t\t\twhile k <= #primes do\n\t\t\t\t\
    if a == primes[i] * primes[j] * primes[k] then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtojtb5f.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwtojtb5f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile i <=\
    \ #primes do\n\t\twhile j <= #primes do\n\t\t\twhile k <= #primes do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dpx9ckf.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2dpx9ckf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxz243o60.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\twhile primes[i] < a do\n\t\twhile\
    \ primes[j] < a do\n\t\t\twhile primes[k] < a do\n\t\t\t\tif primes[i] * primes[j]\
    \ * primes[k] == a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\
    \t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuanbjj7i.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuanbjj7i.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile i <=\
    \ #primes do\n\t\twhile j <= #primes do\n\t\t\twhile k <= #primes do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlutu0ho.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxlutu0ho.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal is_multiply = false\n\twhile\
    \ primes[i] do\n\t\twhile primes[j] do\n\t\t\twhile primes[k] do\n\t\t\t\tif primes[i]\
    \ * primes[j] * primes[k] == a then\n\t\t\t\t\tis_multiply = true\n\t\t\t\tend\n\
    \t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = 1\n\t\tend\n\t\ti = i\
    \ + 1\n\t\tj = 1\n\tend\n\treturn is_multiply\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        if a % primes[i] ==\
    \ 0 then\n            result = true\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx3rs9pc.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfx3rs9pc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp92it6bkk.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(a)\n    for i =\
    \ 2, a - 1 do\n      if a % i == 0 then\n        return false\n      end\n   \
    \ end\n    return true\n  end\n  for i = 2, a - 1 do\n    if a % i == 0 and is_prime(i)\
    \ then\n      for j = 2, a - 1 do\n        if a % j == 0 and is_prime(j) and i\
    \ ~= j then\n          for k = 2, a - 1 do\n            if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n              return true\n            end\n   \
    \       end\n        end\n      end\n    end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg398l8ct.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg398l8ct.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2uhyz00.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb2uhyz00.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local b = a\n    local c = 0\n    for\
    \ i = 2, b do\n        if b % i == 0 then\n            b = b / i\n           \
    \ c = c + 1\n            if c == 3 then\n                return true\n       \
    \     end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jd00l0v.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8jd00l0v.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl98tfw36.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(num)\n      \
    \  for i = 2, num - 1 do\n            if num % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpywgfi7f8.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal found = false\n\twhile primes[i]\
    \ < a do\n\t\twhile primes[j] < a do\n\t\t\twhile primes[k] < a do\n\t\t\t\tif\
    \ primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tfound = true\n\t\t\t\t\
    \tbreak\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn found\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_q6o6yxm.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_q6o6yxm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local function is_multiply_prime_helper(a,\
    \ b)\n        if a == 1 then\n            return true\n        end\n        if\
    \ is_prime(a) then\n            return true\n        end\n        for i = 2, a\
    \ - 1 do\n            if a % i == 0 and is_prime(i) then\n                return\
    \ is_multiply_prime_helper(a / i, b + 1)\n            end\n        end\n     \
    \   return false\n    end\n    return is_multiply_prime_helper(a, 0)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9apt94vd.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9apt94vd.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    for i =\
    \ 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n   \
    \ end\n    return true\n  end\n  for i = 2, a - 1 do\n    if is_prime(i) and a\
    \ % i == 0 then\n      for j = 2, a - 1 do\n        if is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n          for k = 2, a - 1 do\n            if is_prime(k)\
    \ and a % k == 0 and k ~= i and k ~= j then\n              return true\n     \
    \       end\n          end\n        end\n      end\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndyxivuw.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpndyxivuw.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif a == primes[i] * primes[j] * primes[k] then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tif a == 1 then\n\t\treturn false\n\tend\n\
    \tlocal primes = {}\n\tlocal i = 2\n\twhile a > 1 do\n\t\tif a % i == 0 then\n\
    \t\t\ttable.insert(primes, i)\n\t\t\ta = a / i\n\t\telse\n\t\t\ti = i + 1\n\t\t\
    end\n\tend\n\treturn #primes == 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    for i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    for i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local prime_numbers = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local result = false\n    for i = 1, #prime_numbers do\n        for\
    \ j = 1, #prime_numbers do\n            for k = 1, #prime_numbers do\n       \
    \         if prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a then\n\
    \                    result = true\n                end\n            end\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpro4xstwd.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local is_multiply = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\
    \t\t\tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a\
    \ then\n\t\t\t\t\tis_multiply = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn is_multiply\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n-1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \t\treturn true\n\tend\n\tlocal function is_multiply_prime_aux(a, b)\n\t\tif a\
    \ == 1 then\n\t\t\treturn true\n\t\telseif is_prime(a) then\n\t\t\treturn is_multiply_prime_aux(b,\
    \ b)\n\t\telse\n\t\t\tfor i = 2, a-1 do\n\t\t\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\t\t\treturn is_multiply_prime_aux(a/i, b)\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn is_multiply_prime_aux(a, a)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n == 1 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if a % i == 0 and is_prime(i) then\n            for j = 2, a - 1 do\n\
    \                if a % j == 0 and is_prime(j) and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n                            return true\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6ibz9wd.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa6ibz9wd.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n-1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \t\treturn true\n\tend\n\tfor i = 2, a-1 do\n\t\tif a % i == 0 then\n\t\t\tif\
    \ is_prime(i) then\n\t\t\t\tfor j = 2, a-1 do\n\t\t\t\t\tif a % j == 0 then\n\t\
    \t\t\t\t\tif is_prime(j) then\n\t\t\t\t\t\t\tfor k = 2, a-1 do\n\t\t\t\t\t\t\t\
    \tif a % k == 0 then\n\t\t\t\t\t\t\t\t\tif is_prime(k) then\n\t\t\t\t\t\t\t\t\t\
    \tif i * j * k == a then\n\t\t\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\t\t\
    \tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\
    \t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo8en3hf.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvo8en3hf.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(x)\n        for\
    \ i = 2, x - 1 do\n            if x % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvhqyxet8.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkgdev0xc.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tif n ==\
    \ 1 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, n - 1 do\n\t\t\tif n % i\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\
    \tlocal function is_multiply_prime(a)\n\t\tlocal function is_prime(n)\n\t\t\t\
    if n == 1 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tfor i = 2, n - 1 do\n\t\
    \t\t\tif n % i == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\
    \treturn true\n\t\tend\n\t\tlocal function is_multiply_prime(a)\n\t\t\tlocal function\
    \ is_prime(n)\n\t\t\t\tif n == 1 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\
    \t\t\tfor i = 2, n - 1 do\n\t\t\t\t\tif n % i == 0 then\n\t\t\t\t\t\treturn false\n\
    \t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tlocal function\
    \ is_multiply_prime(a)\n\t\t\t\tlocal function is_prime(n)\n\t\t\t\t\tif n ==\
    \ 1 then\n\t\t\t\t\t\treturn false\n\t\t\t\t\tend\n\t\t\t\t\tfor i = 2, n - 1\
    \ do\n\t\t\t\t\t\tif n % i == 0 then\n\t\t\t\t\t\t\treturn false\n\t\t\t\t\t\t\
    end\n\t\t\t\t\tend\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t\tlocal function\
    \ is_multiply_prime(a)\n\t\t\t\t\tlocal function is_prime(n)\n\t\t\t\t\t\tif n\
    \ == 1 then\n\t\t\t\t\t\t\treturn false\n\t\t\t\t\t\tend\n\t\t\t\t\t\tfor i =\
    \ 2, n - 1 do\n\t\t\t\t\t\t\tif n % i == 0 then\n\t\t\t\t\t\t\t\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_kikml_e.lua:80: 'end' expected (to close 'if' at line 62)\
    \ near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local function is_prime(a)\n\t\tfor i = 1, #primes do\n\t\t\tif a == primes[i]\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\tlocal\
    \ function is_multiply_prime_rec(a, i)\n\t\tif a == 1 then\n\t\t\treturn true\n\
    \t\tend\n\t\tif a % primes[i] == 0 then\n\t\t\treturn is_multiply_prime_rec(a\
    \ / primes[i], i)\n\t\telse\n\t\t\treturn is_multiply_prime_rec(a, i + 1)\n\t\t\
    end\n\tend\n\treturn is_multiply_prime_rec(a, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1r_ap4f.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt1r_ap4f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local prime_factors = {}\n\tlocal i = 1\n\twhile a > 1 do\n\t\tif a % primes[i]\
    \ == 0 then\n\t\t\ttable.insert(prime_factors, primes[i])\n\t\t\ta = a / primes[i]\n\
    \t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\tif #prime_factors == 3 then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tif n <\
    \ 2 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, n - 1 do\n\t\t\tif n % i\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\
    \tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a % i == 0 then\n\t\t\tfor j = 2,\
    \ a - 1 do\n\t\t\t\tif is_prime(j) and a % j == 0 and i ~= j then\n\t\t\t\t\t\
    for k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k) and a % k == 0 and i ~= k and\
    \ j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\t\t\treturn true\n\
    \t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5yj0ro5.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj5yj0ro5.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local function is_prime(a)\n\t\tfor i = 1, #primes do\n\t\t\tif a == primes[i]\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\tfor\
    \ i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\t\
    \t\t\tif a == primes[i] * primes[j] * primes[k] then\n\t\t\t\t\treturn true\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal found = false\n\twhile i <=\
    \ #primes and not found do\n\t\tj = 1\n\t\twhile j <= #primes and not found do\n\
    \t\t\tk = 1\n\t\t\twhile k <= #primes and not found do\n\t\t\t\tif a == primes[i]\
    \ * primes[j] * primes[k] then\n\t\t\t\t\tfound = true\n\t\t\t\tend\n\t\t\t\t\
    k = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    for i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a %\
    \ i == 0 then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk_vip5_.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfk_vip5_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile i <=\
    \ #primes do\n\t\twhile j <= #primes do\n\t\t\twhile k <= #primes do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y3b081u.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8y3b081u.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile primes[i]\
    \ <= a do\n\t\tj = 1\n\t\twhile primes[j] <= a do\n\t\t\tk = 1\n\t\t\twhile primes[k]\
    \ <= a do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\t\
    result = true\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkr2ata0.lua:18:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdkr2ata0.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpdkr2ata0.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    for i =\
    \ 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n   \
    \ end\n    return true\n  end\n  for i = 2, a - 1 do\n    if is_prime(i) and a\
    \ % i == 0 then\n      for j = 2, a - 1 do\n        if is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n          for k = 2, a - 1 do\n            if is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n              if i * j * k == a then\n\
    \                return true\n              end\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qyxag3l.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5qyxag3l.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local primes_count = #primes\n\tlocal i = 1\n\tlocal result = false\n\twhile i\
    \ <= primes_count do\n\t\tif a % primes[i] == 0 then\n\t\t\ta = a / primes[i]\n\
    \t\t\tif a == 1 then\n\t\t\t\tresult = true\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kud242h.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_kud242h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if a % i == 0 and is_prime(i) then\n            for j = 2, a - 1 do\n\
    \                if a % j == 0 and is_prime(j) and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n                            if i * j * k == a then\n\
    \                                return true\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jx5pp04.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_jx5pp04.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local\
    \ result = false\n  for i = 1, #primes do\n    for j = 1, #primes do\n      for\
    \ k = 1, #primes do\n        if primes[i] * primes[j] * primes[k] == a then\n\
    \          result = true\n        end\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauhrlexi.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpauhrlexi.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tlocal function is_multiply_prime_aux(a, b)\n\t\t\
    if a == 1 then\n\t\t\treturn true\n\t\telseif is_prime(a) and is_prime(b) then\n\
    \t\t\treturn true\n\t\telseif is_prime(a) and is_multiply_prime_aux(a / b, b)\
    \ then\n\t\t\treturn true\n\t\telseif is_prime(b) and is_multiply_prime_aux(a,\
    \ b + 1) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn is_multiply_prime_aux(a,\
    \ b + 1)\n\t\tend\n\tend\n\treturn is_multiply_prime_aux(a, 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmu97isje.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmu97isje.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    for i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(a)\n    if a ==\
    \ 1 then\n      return false\n    end\n    for i = 2, a - 1 do\n      if a % i\
    \ == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  for i = 1, a do\n    if is_prime(i) then\n      for j = 1, a do\n        if\
    \ is_prime(j) then\n          for k = 1, a do\n            if is_prime(k) then\n\
    \              if i * j * k == a then\n                return true\n         \
    \     end\n            end\n          end\n        end\n      end\n    end\n \
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n-1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \t\treturn true\n\tend\n\tlocal function is_multiply_prime_aux(a, b)\n\t\tif a\
    \ == 1 then\n\t\t\treturn true\n\t\telseif is_prime(a) then\n\t\t\treturn is_multiply_prime_aux(b,\
    \ b)\n\t\telse\n\t\t\tfor i = 2, a-1 do\n\t\t\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\t\t\treturn is_multiply_prime_aux(a/i, b)\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn is_multiply_prime_aux(a, a)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tlocal i = 1\n\twhile primes[i] <= a do\n\t\tif a % primes[i]\
    \ == 0 then\n\t\t\ta = a / primes[i]\n\t\t\tif a == 1 then\n\t\t\t\tresult = true\n\
    \t\t\tend\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6lih48w.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_6lih48w.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local is_prime = function(n)\n      \
    \  for i = 2, n - 1 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb9_gxnqs.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptppw9fbi.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptppw9fbi.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpz4ap8l8y.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqxuu7df3.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n == 1 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if is_prime(i) and a % i == 0 then\n            for j = 2, a - 1 do\n\
    \                if is_prime(j) and a % j == 0 and i * j < a then\n          \
    \          for k = 2, a - 1 do\n                        if is_prime(k) and a %\
    \ k == 0 and i * j * k == a then\n                            return true\n  \
    \                      end\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if a == primes[i] * primes[j]\
    \ * primes[k] then\n                    result = true\n                end\n \
    \           end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local function is_multiply_prime_helper(a,\
    \ b)\n        if a == 1 then\n            return true\n        end\n        if\
    \ is_prime(a) then\n            return is_multiply_prime_helper(b, a)\n      \
    \  end\n        for i = 2, a - 1 do\n            if a % i == 0 and is_prime(i)\
    \ then\n                return is_multiply_prime_helper(a / i, b * i)\n      \
    \      end\n        end\n        return false\n    end\n    return is_multiply_prime_helper(a,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp75_cul.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzp75_cul.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n <= 1 then\n            return false\n        elseif n <= 3 then\n        \
    \    return true\n        elseif n % 2 == 0 or n % 3 == 0 then\n            return\
    \ false\n        end\n        local i = 5\n        while i * i <= n do\n     \
    \       if n % i == 0 or n % (i + 2) == 0 then\n                return false\n\
    \            end\n            i = i + 6\n        end\n        return true\n  \
    \  end\n    local function is_multiply_prime_helper(a, b, c)\n        if a ==\
    \ b * c then\n            return true\n        elseif b > a then\n           \
    \ return false\n        elseif is_prime(b) and is_prime(c) then\n            return\
    \ is_multiply_prime_helper(a, b + 1, c) or is_multiply_prime_helper(a, b, c +\
    \ 1)\n        else\n            return is_multiply_prime_helper(a, b + 1, c)\n\
    \        end\n    end\n    return is_multiply_prime_helper(a, 2, 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys2g1uts.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpys2g1uts.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local prime_factors = {}\n    local i = 1\n    while a > 1 do\n        if a\
    \ % primes[i] == 0 then\n            table.insert(prime_factors, primes[i])\n\
    \            a = a / primes[i]\n        else\n            i = i + 1\n        end\n\
    \    end\n    if #prime_factors == 3 then\n        return true\n    else\n   \
    \     return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {}\n    for i = 1, a do\n\
    \        if is_prime(i) then\n            table.insert(primes, i)\n        end\n\
    \    end\n    for i = 1, #primes do\n        for j = 1, #primes do\n         \
    \   for k = 1, #primes do\n                if primes[i] * primes[j] * primes[k]\
    \ == a then\n                    return true\n                end\n          \
    \  end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahhak6mo.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpahhak6mo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpahhak6mo.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tif n <=\
    \ 1 then\n\t\t\treturn false\n\t\telseif n == 2 then\n\t\t\treturn true\n\t\t\
    elseif n % 2 == 0 then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\t\t\tif n % i == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend\n\tlocal function is_multiply_prime(a)\n\
    \t\tif a <= 1 then\n\t\t\treturn false\n\t\telseif a == 2 then\n\t\t\treturn true\n\
    \t\telseif a % 2 == 0 then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(a),\
    \ 2 do\n\t\t\t\tif a % i == 0 then\n\t\t\t\t\tlocal b = a / i\n\t\t\t\t\tif is_prime(i)\
    \ and is_prime(b) then\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\
    \t\tend\n\t\t\treturn false\n\t\tend\n\tend\n\treturn is_multiply_prime(a)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja9jndu5.lua:51:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpja9jndu5.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        if\
    \ a == 1 then\n            return false\n        end\n        for i = 2, a - 1\
    \ do\n            if a % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if is_prime(i) and a % i == 0 then\n            for j = 2, a - 1 do\n\
    \                if is_prime(j) and a % j == 0 and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if is_prime(k) and a % k\
    \ == 0 and i ~= k and j ~= k then\n                            if i * j * k ==\
    \ a then\n                                return true\n                      \
    \      end\n                        end\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg1bhwbu.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzg1bhwbu.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tlocal function is_multiply_prime(a)\n\t\tfor i\
    \ = 2, a - 1 do\n\t\t\tif a % i == 0 and is_prime(i) then\n\t\t\t\tfor j = 2,\
    \ a - 1 do\n\t\t\t\t\tif a % j == 0 and is_prime(j) and i ~= j then\n\t\t\t\t\t\
    \tfor k = 2, a - 1 do\n\t\t\t\t\t\t\tif a % k == 0 and is_prime(k) and i ~= k\
    \ and j ~= k then\n\t\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\t\t\t\t\
    return true\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\
    \tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\treturn is_multiply_prime(a)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz56n_s0n.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz56n_s0n.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local found = false\n  while primes[i]\
    \ < a do\n    while primes[j] < a do\n      while primes[k] < a do\n        if\
    \ primes[i] * primes[j] * primes[k] == a then\n          found = true\n      \
    \    break\n        end\n        k = k + 1\n      end\n      if found then\n \
    \       break\n      end\n      j = j + 1\n      k = 1\n    end\n    if found\
    \ then\n      break\n    end\n    i = i + 1\n    j = 1\n    k = 1\n  end\n  return\
    \ found\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq_foxk2.lua:16:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzq_foxk2.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpzq_foxk2.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i, v in ipairs(primes) do\n\t\tif a % v == 0 then\n\
    \t\t\tresult = true\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsu9yly7.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmsu9yly7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif a == primes[i] * primes[j] * primes[k] then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqjstd7ew.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif a == primes[i] * primes[j] * primes[k] then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local\
    \ i = 1\n  while primes[i] <= a do\n    local j = 1\n    while primes[j] <= a\
    \ do\n      local k = 1\n      while primes[k] <= a do\n        if primes[i] *\
    \ primes[j] * primes[k] == a then\n          return true\n        end\n      \
    \  k = k + 1\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ruxqww1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9ruxqww1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9ruxqww1.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    for i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\
    \t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        if\
    \ a == 1 then\n            return false\n        end\n        for i = 2, a - 1\
    \ do\n            if a % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if a % i == 0 and is_prime(i) then\n            for j = 2, a - 1 do\n\
    \                if a % j == 0 and is_prime(j) and a % (i * j) == 0 and is_prime(a\
    \ / (i * j)) then\n                    return true\n                end\n    \
    \        end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {}\n\tlocal function is_prime(n)\n\
    \t\tfor i = 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i)\
    \ then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\tfor i = 1, #primes do\n\
    \t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\t\t\t\tif primes[i] *\
    \ primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.270 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local prime_numbers = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    for i = 1, #prime_numbers do\n        for j = 1, #prime_numbers do\n\
    \            for k = 1, #prime_numbers do\n                if a == prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] then\n                    return true\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a %\
    \ i == 0 then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9ik9w30.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt9ik9w30.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile i <=\
    \ #primes do\n\t\twhile j <= #primes do\n\t\t\twhile k <= #primes do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9vk4d2v.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe9vk4d2v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal prime_numbers = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n\tlocal result = false\n\tfor i = 1, #prime_numbers do\n\t\tfor j = 1,\
    \ #prime_numbers do\n\t\t\tfor k = 1, #prime_numbers do\n\t\t\t\tif prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a then\n\t\t\t\t\tresult = true\n\t\
    \t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local n = 1\n    local result = false\n    while n <= #primes do\n        local\
    \ i = 1\n        while i <= #primes do\n            local j = 1\n            while\
    \ j <= #primes do\n                if primes[n] * primes[i] * primes[j] == a then\n\
    \                    result = true\n                end\n                j = j\
    \ + 1\n            end\n            i = i + 1\n        end\n        n = n + 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    for i =\
    \ 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n   \
    \ end\n    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnysj2twu.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n == 1 then\n            return false\n        end\n        for i = 2, math.sqrt(n)\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a do\n    \
    \    if is_prime(i) and a % i == 0 then\n            for j = 2, a do\n       \
    \         if is_prime(j) and a % j == 0 and i ~= j then\n                    for\
    \ k = 2, a do\n                        if is_prime(k) and a % k == 0 and i ~=\
    \ k and j ~= k then\n                            if i * j * k == a then\n    \
    \                            return true\n                            end\n  \
    \                      end\n                    end\n                end\n   \
    \         end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrxwnj9c.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplrxwnj9c.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n-1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\
    \t\treturn true\n\tend\n\tfor i = 2, a-1 do\n\t\tif a % i == 0 then\n\t\t\tif\
    \ is_prime(i) then\n\t\t\t\tfor j = 2, a-1 do\n\t\t\t\t\tif a % j == 0 then\n\t\
    \t\t\t\t\tif is_prime(j) then\n\t\t\t\t\t\t\tfor k = 2, a-1 do\n\t\t\t\t\t\t\t\
    \tif a % k == 0 then\n\t\t\t\t\t\t\t\t\tif is_prime(k) then\n\t\t\t\t\t\t\t\t\t\
    \tif i * j * k == a then\n\t\t\t\t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\t\t\t\
    \tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\
    \t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tif a ==\
    \ 1 then\n\t\t\treturn false\n\t\tend\n\t\tfor i = 2, a - 1 do\n\t\t\tif a % i\
    \ == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\
    \tlocal function is_multiply_prime(a)\n\t\tfor i = 2, a - 1 do\n\t\t\tif is_prime(i)\
    \ and a % i == 0 then\n\t\t\t\tfor j = 2, a - 1 do\n\t\t\t\t\tif is_prime(j) and\
    \ a % j == 0 and i * j < a then\n\t\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\t\
    \tif is_prime(k) and a % k == 0 and i * j * k == a then\n\t\t\t\t\t\t\t\treturn\
    \ true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\t\treturn false\n\tend\n\treturn is_multiply_prime(a)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local\
    \ result = false\n  for i = 1, #primes do\n    for j = 1, #primes do\n      for\
    \ k = 1, #primes do\n        if primes[i] * primes[j] * primes[k] == a then\n\
    \          result = true\n        end\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tfor j = 2, a - 1 do\n\t\
    \t\tfor k = 2, a - 1 do\n\t\t\t\tif i * j * k == a and is_prime(i) and is_prime(j)\
    \ and is_prime(k) then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local i = 1\n    local j = 1\n    local k = 1\n    local result = false\n \
    \   while primes[i] < a do\n        while primes[j] < a do\n            while\
    \ primes[k] < a do\n                if primes[i] * primes[j] * primes[k] == a\
    \ then\n                    result = true\n                end\n             \
    \   k = k + 1\n            end\n            j = j + 1\n        end\n        i\
    \ = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xrz0t3f.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3xrz0t3f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile primes[i]\
    \ <= a do\n\t\twhile primes[j] <= a do\n\t\t\twhile primes[k] <= a do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0neztt1.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz0neztt1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal result = false\n\twhile primes[i]\
    \ < a do\n\t\twhile primes[j] < a do\n\t\t\twhile primes[k] < a do\n\t\t\t\tif\
    \ primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tresult = true\n\t\t\t\
    \tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnb5r_v3o.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnb5r_v3o.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local is_prime = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\
    \t\tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tis_prime = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn is_prime\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local result = false\n  local primes =\
    \ {}\n  local i = 2\n  while i < a do\n    if is_prime(i) then\n      table.insert(primes,\
    \ i)\n    end\n    i = i + 1\n  end\n  for i = 1, #primes do\n    for j = i +\
    \ 1, #primes do\n      for k = j + 1, #primes do\n        if primes[i] * primes[j]\
    \ * primes[k] == a then\n          result = true\n        end\n      end\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnswi1mk.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpwnswi1mk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpwnswi1mk.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gs74xm6.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8gs74xm6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tlocal i = 1\n\twhile primes[i] <= a do\n\t\tif a % primes[i]\
    \ == 0 then\n\t\t\tif a / primes[i] == 1 then\n\t\t\t\tresult = true\n\t\t\t\t\
    break\n\t\t\telse\n\t\t\t\ta = a / primes[i]\n\t\t\t\ti = 1\n\t\t\tend\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotywt16k.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpotywt16k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(a)\n    if a ==\
    \ 1 then\n      return false\n    end\n    for i = 2, a - 1 do\n      if a % i\
    \ == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  for i = 2, a - 1 do\n    if is_prime(i) and a % i == 0 then\n      for j =\
    \ 2, a - 1 do\n        if is_prime(j) and a % j == 0 and i ~= j then\n       \
    \   for k = 2, a - 1 do\n            if is_prime(k) and a % k == 0 and i ~= k\
    \ and j ~= k then\n              if i * j * k == a then\n                return\
    \ true\n              end\n            end\n          end\n        end\n     \
    \ end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq90hnv7.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoq90hnv7.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(a)\n        for\
    \ i = 2, a - 1 do\n            if a % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwu1l2yyp.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if is_prime(i) and a % i == 0 then\n            for j = 2, a - 1 do\n\
    \                if is_prime(j) and a % j == 0 and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if is_prime(k) and a % k\
    \ == 0 and i ~= k and j ~= k then\n                            if i * j * k ==\
    \ a then\n                                return true\n                      \
    \      end\n                        end\n                    end\n           \
    \     end\n            end\n        end\n    end\n    return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw4vobbf.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdw4vobbf.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local prime_numbers = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local is_multiply_prime = false\n    for i = 1, #prime_numbers do\n\
    \        if a % prime_numbers[i] == 0 then\n            is_multiply_prime = true\n\
    \        end\n    end\n    return is_multiply_prime\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44z0qfs8.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp44z0qfs8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i) and a %\
    \ i == 0 then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif is_prime(j) and a % j ==\
    \ 0 and i ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif is_prime(k)\
    \ and a % k == 0 and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\
    \t\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8_ue6eo.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8_ue6eo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tif a == 1 then\n\t\treturn false\n\tend\n\
    \tlocal primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\tfor i = 1, #primes do\n\t\tfor j = 1,\
    \ #primes do\n\t\t\tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] *\
    \ primes[k] == a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {}\n\tlocal function is_prime(a)\n\
    \t\tfor i = 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\tend\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif is_prime(i)\
    \ then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\tfor i = 1, #primes do\n\
    \t\tfor j = 1, #primes do\n\t\t\tfor k = 1, #primes do\n\t\t\t\tif primes[i] *\
    \ primes[j] * primes[k] == a then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.260 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi5mnnh9.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzi5mnnh9.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq62ukin1.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpq62ukin1.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, math.sqrt(n) do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\t\treturn true\n\tend\n\tfor i = 2, a do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a do\n\t\t\t\tif a % j == 0 and is_prime(j) and i ~=\
    \ j then\n\t\t\t\t\tfor k = 2, a do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tm3ttps.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3tm3ttps.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplp7t7dkj.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    for i = 2, a - 1 do\n        if a % i\
    \ == 0 then\n            for j = 2, a - 1 do\n                if a % j == 0 and\
    \ i ~= j then\n                    for k = 2, a - 1 do\n                     \
    \   if a % k == 0 and i ~= k and j ~= k then\n                            if i\
    \ * j * k == a then\n                                return true\n           \
    \                 end\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4hfpag8.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr4hfpag8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif primes[i] * primes[j] * primes[k] == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if is_prime(i) and a % i == 0 then\n            for j = 2, a - 1 do\n\
    \                if is_prime(j) and a % j == 0 and a % (i * j) == 0 then\n   \
    \                 for k = 2, a - 1 do\n                        if is_prime(k)\
    \ and a % k == 0 and a % (i * j * k) == 0 then\n                            return\
    \ true\n                        end\n                    end\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuo8z9ei4.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuo8z9ei4.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  for i = 1, #primes do\n        for j = 1, #primes do\n            for k = 1,\
    \ #primes do\n                if primes[i] * primes[j] * primes[k] == a then\n\
    \                    return true\n                end\n            end\n     \
    \   end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  \
    \  local result = false\n    for i = 1, #primes do\n        for j = 1, #primes\
    \ do\n            for k = 1, #primes do\n                if primes[i] * primes[j]\
    \ * primes[k] == a then\n                    result = true\n                end\n\
    \            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpe1br6e86.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(n)\n\t\tfor i =\
    \ 2, n - 1 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdg37h4g.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphdg37h4g.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye7hg3lo.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpye7hg3lo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local primes = {}\n    for i = 2, a do\n\
    \        if is_prime(i) then\n            table.insert(primes, i)\n        end\n\
    \    end\n    for i = 1, #primes do\n        for j = i, #primes do\n         \
    \   for k = j, #primes do\n                if primes[i] * primes[j] * primes[k]\
    \ == a then\n                    return true\n                end\n          \
    \  end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuoy0u776.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuoy0u776.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpuoy0u776.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local function is_prime(n)\n    if n ==\
    \ 1 then\n      return false\n    end\n    for i = 2, n - 1 do\n      if n % i\
    \ == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local function is_multiply_prime_helper(a, b)\n    if a == 1 then\n      return\
    \ true\n    end\n    if is_prime(a) then\n      return is_multiply_prime_helper(b,\
    \ a)\n    end\n    for i = 2, a - 1 do\n      if a % i == 0 and is_prime(i) then\n\
    \        return is_multiply_prime_helper(a / i, b * i)\n      end\n    end\n \
    \   return false\n  end\n  return is_multiply_prime_helper(a, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphx052e4.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpphx052e4.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local function is_prime(n)\n        if\
    \ n < 2 then\n            return false\n        end\n        for i = 2, n - 1\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    for i = 2, a - 1 do\n\
    \        if a % i == 0 and is_prime(i) then\n            for j = 2, a - 1 do\n\
    \                if a % j == 0 and is_prime(j) and i ~= j then\n             \
    \       for k = 2, a - 1 do\n                        if a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n                            return true\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2tkto24.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc2tkto24.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrw8lff5.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbrw8lff5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal is_multiply = false\n\twhile\
    \ primes[i] ~= nil do\n\t\tj = 1\n\t\twhile primes[j] ~= nil do\n\t\t\tk = 1\n\
    \t\t\twhile primes[k] ~= nil do\n\t\t\t\tif primes[i] * primes[j] * primes[k]\
    \ == a then\n\t\t\t\t\tis_multiply = true\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\
    \tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn is_multiply\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal flag = false\n\twhile primes[i]\
    \ <= a do\n\t\twhile primes[j] <= a do\n\t\t\twhile primes[k] <= a do\n\t\t\t\t\
    if primes[i] * primes[j] * primes[k] == a then\n\t\t\t\t\tflag = true\n\t\t\t\t\
    \tbreak\n\t\t\t\tend\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn flag\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlhtnoa0.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnlhtnoa0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tfor i =\
    \ 2, a - 1 do\n\t\t\tif a % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\treturn true\n\tend\n\tfor i = 2, a - 1 do\n\t\tif a % i == 0 and is_prime(i)\
    \ then\n\t\t\tfor j = 2, a - 1 do\n\t\t\t\tif a % j == 0 and is_prime(j) and i\
    \ ~= j then\n\t\t\t\t\tfor k = 2, a - 1 do\n\t\t\t\t\t\tif a % k == 0 and is_prime(k)\
    \ and i ~= k and j ~= k then\n\t\t\t\t\t\t\tif i * j * k == a then\n\t\t\t\t\t\
    \t\t\treturn true\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx271o653.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx271o653.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal primes = {2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\t\
    local result = false\n\tfor i = 1, #primes do\n\t\tfor j = 1, #primes do\n\t\t\
    \tfor k = 1, #primes do\n\t\t\t\tif (primes[i] * primes[j] * primes[k]) == a then\n\
    \t\t\t\t\tresult = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
