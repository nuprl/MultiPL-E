name: HumanEval_148_bf
language: lua
results:
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2\n    for i, v in ipairs(planets) do\n\
    \        if v == planet1 then\n            i1 = i\n        end\n        if v ==\
    \ planet2 then\n            i2 = i\n        end\n    end\n    if i1 == nil or\
    \ i2 == nil then\n        return {}\n    end\n    local res = {}\n    if i1 <\
    \ i2 then\n        for i = i1 + 1, i2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = i2 + 1, i1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig0cwsp5.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpig0cwsp5.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = nil\n  local p2 = nil\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n\
    \      p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n\
    \  end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n \
    \     table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib1yf92b.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpib1yf92b.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if not p1 or not p2 then return {} end\n    local res = {}\n \
    \   for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res,\
    \ planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2215tr9.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmps2215tr9.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmps2215tr9.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local res = {}\n\
    \    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local index1, index2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then\n      index1 = i\n    end\n    if planet\
    \ == planet2 then\n      index2 = i\n    end\n  end\n  if index1 == 0 or index2\
    \ == 0 then\n    return {}\n  end\n  local result = {}\n  if index1 < index2 then\n\
    \    for i = index1 + 1, index2 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  else\n    for i = index2 + 1, index1 - 1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, p in ipairs(planets) do\n\
    \    if p == planet1 then p1 = i end\n    if p == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1+1, p2-1 do\n      table.insert(res, planets[i])\n    end\n  else\n\
    \    for i = p1-1, p2+1, -1 do\n      table.insert(res, planets[i])\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdf6x43t.lua:44:\
    \ expected: {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}\nactual:\
    \ {\"Uranus\", \"Saturn\", \"Jupiter\", \"Mars\", \"Earth\"}\nstack traceback:\n\
    \t/tmp/tmpvdf6x43t.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapi5qlza.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpapi5qlza.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local result = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal r = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\
    \tend\n\tif p1 == 0 or p2 == 0 then return {} end\n\tif p1 > p2 then\n\t\tp1,\
    \ p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(r, planets[i])\n\
    \tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n\
    \        p1, p2 = p2, p1\n    end\n    local result = {}\n    for i = p1 + 1,\
    \ p2 - 1 do\n        table.insert(result, planets[i])\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local planet1_index = 0\n    local planet2_index =\
    \ 0\n    local result = {}\n    for i, planet in ipairs(planets) do\n        if\
    \ planet == planet1 then\n            planet1_index = i\n        end\n       \
    \ if planet == planet2 then\n            planet2_index = i\n        end\n    end\n\
    \    if planet1_index == 0 or planet2_index == 0 then\n        return result\n\
    \    end\n    if planet1_index < planet2_index then\n        for i = planet1_index\
    \ + 1, planet2_index - 1 do\n            table.insert(result, planets[i])\n  \
    \      end\n    else\n        for i = planet2_index + 1, planet1_index - 1 do\n\
    \            table.insert(result, planets[i])\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = planets[planet1], planets[planet2]\n\
    \  if not p1 or not p2 then return {} end\n  local t = {}\n  for i = p1, p2 do\n\
    \    table.insert(t, planets[i])\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8r2rei0.lua:31:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpc8r2rei0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nke7snp.lua:24:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp4nke7snp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, p in ipairs(planets)\
    \ do\n        if p == planet1 then\n            p1 = i\n        end\n        if\
    \ p == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\t\
    end\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\
    \t\ttable.insert(result, planets[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n     \
    \ table.insert(result, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local t = {}\n    if p1 < p2\
    \ then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(t,\
    \ planets[i])\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then\n      p1 = i\n    end\n    if planet == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return\
    \ {}\n  end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n\
    \      table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1\
    \ - 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if not p1 or not p2 then return {} end\n    local res = {}\n \
    \   for i = p1, p2 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3w7o9o6.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpd3w7o9o6.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpd3w7o9o6.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i = 1, #planets do\n    if\
    \ planets[i] == planet1 then\n      p1 = i\n    end\n    if planets[i] == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return\
    \ {}\n  end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n\
    \      res[#res + 1] = planets[i]\n    end\n  else\n    for i = p2 + 1, p1 - 1\
    \ do\n      res[#res + 1] = planets[i]\n    end\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n  \
    \  lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
    \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local result =\
    \ {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if not p1 or not p2 then return {} end\n    local res = {}\n \
    \   if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d5bq1pq.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp9d5bq1pq.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp9d5bq1pq.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5kvwi2it.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp5kvwi2it.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp5kvwi2it.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\t\
    end\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\
    \t\ttable.insert(result, planets[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, p in ipairs(planets)\
    \ do\n        if p == planet1 then\n            p1 = i\n        end\n        if\
    \ p == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdgci4sp.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpcdgci4sp.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5ddkd13.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpg5ddkd13.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local index1 = 0\n    local index2 = 0\n    local\
    \ result = {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n\
    \            index1 = i\n        end\n        if v == planet2 then\n         \
    \   index2 = i\n        end\n    end\n    if index1 == 0 or index2 == 0 then\n\
    \        return {}\n    end\n    if index1 < index2 then\n        for i = index1\
    \ + 1, index2 - 1 do\n            table.insert(result, planets[i])\n        end\n\
    \    else\n        for i = index2 + 1, index1 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then p1 = i end\n    if planet == planet2 then\
    \ p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2\
    \ then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n  \
    \  table.insert(res, planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyby4_ldm.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpyby4_ldm.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, planet in ipairs(planets) do\n    if planet == planet1 then\n      p1\
    \ = i\n    end\n    if planet == planet2 then\n      p2 = i\n    end\n  end\n\
    \  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for\
    \ i = p2, p1 do\n      table.insert(result, planets[i])\n    end\n  else\n   \
    \ for i = p1, p2 do\n      table.insert(result, planets[i])\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5m59b13.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpn5m59b13.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  for\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrvch1rs.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpjrvch1rs.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpjrvch1rs.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local planet1_pos, planet2_pos\n    local result =\
    \ {}\n    for i, planet in ipairs(planets) do\n        if planet == planet1 then\n\
    \            planet1_pos = i\n        end\n        if planet == planet2 then\n\
    \            planet2_pos = i\n        end\n    end\n    if planet1_pos == nil\
    \ or planet2_pos == nil then\n        return {}\n    end\n    if planet1_pos <\
    \ planet2_pos then\n        for i = planet1_pos + 1, planet2_pos - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    else\n        for\
    \ i = planet2_pos + 1, planet1_pos - 1 do\n            table.insert(result, planets[i])\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local result\
    \ = {}\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3l63nt2.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpx3l63nt2.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    local result = {}\n    for i, v\
    \ in ipairs(planets) do\n        if v == planet1 then\n            p1 = i\n  \
    \      end\n        if v == planet2 then\n            p2 = i\n        end\n  \
    \  end\n    if p1 == nil or p2 == nil then\n        return {}\n    end\n    if\
    \ p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result, planets[i])\n\
    \        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo3uthq4.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpmo3uthq4.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i = 1, #planets do\n       \
    \ if planets[i] == planet1 then\n            p1 = i\n        end\n        if planets[i]\
    \ == planet2 then\n            p2 = i\n        end\n    end\n    if not p1 or\
    \ not p2 then\n        return {}\n    end\n    local result = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, v in ipairs(planets) do\n\
    \        if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == nil or\
    \ p2 == nil then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    if p1 >\
    \ p2 then\n        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1\
    \ + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    if p1 >\
    \ p2 then\n        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1\
    \ + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return result\n\
    \    end\n    if p1 > p2 then\n        local temp = p1\n        p1 = p2\n    \
    \    p2 = temp\n    end\n    for i = p1 + 1, p2 - 1 do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    return table.slice(planets, p1 + 1, p2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgiegpqqd.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpgiegpqqd.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpgiegpqqd.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1\
    \ end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local i1, i2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            i1 = i\n        end\n        if\
    \ v == planet2 then\n            i2 = i\n        end\n    end\n    if i1 == 0\
    \ or i2 == 0 then\n        return {}\n    end\n    local result = {}\n    if i1\
    \ < i2 then\n        for i = i1 + 1, i2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = i2 + 1, i1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i = 1, #planets do\n    if\
    \ planets[i] == planet1 then\n      p1 = i\n    end\n    if planets[i] == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return\
    \ {}\n  end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n  local res = {}\n\
    \  for i = p1 + 1, p2 - 1 do\n    res[#res + 1] = planets[i]\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, v in ipairs(planets) do\n   \
    \ if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n    \
    \  p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n \
    \ end\n  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p2 + 1,\
    \ p1 - 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tlocal res = {}\n\tfor i = 1, #planets\
    \ do\n\t\tif planets[i] == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planets[i]\
    \ == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\
    \t\treturn res\n\tend\n\tif p1 > p2 then\n\t\tlocal temp = p1\n\t\tp1 = p2\n\t\
    \tp2 = temp\n\tend\n\tfor i = p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal planet1_index = 0\n\tlocal planet2_index = 0\n\tlocal result\
    \ = {}\n\tfor i, planet in ipairs(planets) do\n\t\tif planet == planet1 then\n\
    \t\t\tplanet1_index = i\n\t\tend\n\t\tif planet == planet2 then\n\t\t\tplanet2_index\
    \ = i\n\t\tend\n\tend\n\tif planet1_index == 0 or planet2_index == 0 then\n\t\t\
    return {}\n\tend\n\tif planet1_index > planet2_index then\n\t\tfor i = planet2_index\
    \ + 1, planet1_index - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\
    \telse\n\t\tfor i = planet1_index + 1, planet2_index - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then p1 = i end\n    if planet == planet2 then\
    \ p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2\
    \ then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n  \
    \  table.insert(res, planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, planet in ipairs(planets) do\n\t\
    \tif planet == planet1 then p1 = i end\n\t\tif planet == planet2 then p2 = i end\n\
    \tend\n\tif p1 == 0 or p2 == 0 then return {} end\n\tlocal res = {}\n\tif p1 <\
    \ p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\
    \t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\
    \t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 and p2 then\n    local t = {}\n    if p1 < p2 then\n     \
    \ for i = p1 + 1, p2 - 1 do\n        table.insert(t, planets[i])\n      end\n\
    \    else\n      for i = p1 - 1, p2 + 1, -1 do\n        table.insert(t, planets[i])\n\
    \      end\n    end\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4zfbl8z.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpn4zfbl8z.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpn4zfbl8z.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, v in ipairs(planets) do\n   \
    \ if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n    \
    \  p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n \
    \ end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n  \
    \    table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i = 1, #planets do\n\t\tif planets[i]\
    \ == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planets[i] == planet2 then\n\t\
    \t\tp2 = i\n\t\tend\n\tend\n\tlocal res = {}\n\tif p1 == 0 or p2 == 0 then\n\t\
    \treturn res\n\tend\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i =\
    \ p1 + 1, p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  if p1 < p2 then\n\
    \    for i = p1, p2 do\n      table.insert(t, planets[i])\n    end\n  else\n \
    \   for i = p1, p2, -1 do\n      table.insert(t, planets[i])\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvitujpa.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpvvitujpa.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1\
    \ then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\
    \tend\n\tif not p1 or not p2 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\t\
    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 and p2 then\n        local t = {}\n        if p1 < p2 then\n\
    \            for i = p1 + 1, p2 - 1 do\n                table.insert(t, planets[i])\n\
    \            end\n        else\n            for i = p1 - 1, p2 + 1, -1 do\n  \
    \              table.insert(t, planets[i])\n            end\n        end\n   \
    \     return t\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmup8fv54.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpmup8fv54.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmup8fv54.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxfinu3o.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmprxfinu3o.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, v in ipairs(planets) do\n\
    \        if v == planet1 then\n            p1 = i\n        end\n        if v ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == nil or\
    \ p2 == nil then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n\tif not p1 or not p2 then return {} end\n\tlocal res = {}\n\tfor\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67qpzd9l.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp67qpzd9l.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp67qpzd9l.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunlljm8y.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpunlljm8y.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local planet1_index = 0\n    local planet2_index =\
    \ 0\n    local result = {}\n    for i, planet in ipairs(planets) do\n        if\
    \ planet == planet1 then\n            planet1_index = i\n        end\n       \
    \ if planet == planet2 then\n            planet2_index = i\n        end\n    end\n\
    \    if planet1_index == 0 or planet2_index == 0 then\n        return {}\n   \
    \ end\n    if planet1_index < planet2_index then\n        for i = planet1_index\
    \ + 1, planet2_index - 1 do\n            table.insert(result, planets[i])\n  \
    \      end\n    else\n        for i = planet2_index + 1, planet1_index - 1 do\n\
    \            table.insert(result, planets[i])\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n    if p1 == nil or p2 == nil then return {} end\n    if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n   \
    \     table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph70rz1xw.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmph70rz1xw.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmph70rz1xw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    if p1 >\
    \ p2 then\n        local tmp = p1\n        p1 = p2\n        p2 = tmp\n    end\n\
    \    local res = {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(res,\
    \ planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = table.find(planets, planet1)\n    local\
    \ p2 = table.find(planets, planet2)\n    if p1 == nil or p2 == nil then\n    \
    \    return {}\n    end\n    local result = {}\n    if p1 < p2 then\n        for\
    \ i = p1 + 1, p2 - 1 do\n            table.insert(result, planets[i])\n      \
    \  end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4xamt3d0.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp4xamt3d0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp4xamt3d0.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local planet1_index = 0\n    local planet2_index =\
    \ 0\n    local result = {}\n    for i, planet in ipairs(planets) do\n        if\
    \ planet == planet1 then\n            planet1_index = i\n        end\n       \
    \ if planet == planet2 then\n            planet2_index = i\n        end\n    end\n\
    \    if planet1_index == 0 or planet2_index == 0 then\n        return result\n\
    \    end\n    if planet1_index > planet2_index then\n        for i = planet2_index,\
    \ planet1_index do\n            table.insert(result, planets[i])\n        end\n\
    \    else\n        for i = planet1_index, planet2_index do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkt9d3ba.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmphkt9d3ba.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local t = {}\n\
    \    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(t,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(t, planets[i])\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 >\
    \ p2 then\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2\n\tfor i, v in ipairs(planets) do\n\t\tif v == planet1\
    \ then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\
    \tend\n\tif not p1 or not p2 then\n\t\treturn {}\n\tend\n\tlocal res = {}\n\t\
    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(t, planets[i])\n    end\n \
    \ else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(t, planets[i])\n   \
    \ end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 == nil or p2 == nil then return {} end\n  if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n  local result = {}\n  for i = p1+1, p2-1 do\n    table.insert(result,\
    \ planets[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtf5_u1a.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmphtf5_u1a.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmphtf5_u1a.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, p in ipairs(planets) do\n\
    \        if p == planet1 then\n            p1 = i\n        end\n        if p ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if not p1 or not\
    \ p2 then\n        return {}\n    end\n    local t = {}\n    if p1 < p2 then\n\
    \        for i = p1 + 1, p2 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(t,\
    \ planets[i])\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local index1 = 0\n  local index2 = 0\n  for i, v in\
    \ ipairs(planets) do\n    if v == planet1 then\n      index1 = i\n    end\n  \
    \  if v == planet2 then\n      index2 = i\n    end\n  end\n  if index1 == 0 or\
    \ index2 == 0 then\n    return {}\n  end\n  local result = {}\n  if index1 < index2\
    \ then\n    for i = index1 + 1, index2 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  else\n    for i = index2 + 1, index1 - 1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, p in ipairs(planets) do\n\
    \        if p == planet1 then\n            p1 = i\n        end\n        if p ==\
    \ planet2 then\n            p2 = i\n        end\n    end\n    if p1 == nil or\
    \ p2 == nil then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  if p1\
    \ < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  else\n    for i = p1 - 1, p2 + 1, -1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp87cdw1c2.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp87cdw1c2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp87cdw1c2.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  if p1\
    \ < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  else\n    for i = p1 - 1, p2 + 1, -1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctjfs1gk.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpctjfs1gk.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpctjfs1gk.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = nil\n  local p2 = nil\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n\
    \      p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n\
    \  end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n \
    \     table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  for i = p1, p2\
    \ do\n    table.insert(res, planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpah3edce0.lua:35:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpah3edce0.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\t\
    if p1 == 0 or p2 == 0 then return {} end\n\tlocal res = {}\n\tif p1 < p2 then\n\
    \t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\tend\n\t\
    else\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res, planets[i])\n\t\t\
    end\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local pos1, pos2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            pos1 = i\n        end\n      \
    \  if v == planet2 then\n            pos2 = i\n        end\n    end\n    if pos1\
    \ == 0 or pos2 == 0 then\n        return {}\n    end\n    if pos1 > pos2 then\n\
    \        pos1, pos2 = pos2, pos1\n    end\n    local res = {}\n    for i = pos1\
    \ + 1, pos2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if p1 and p2 then\n    local t = {}\n    if p1 < p2 then\n     \
    \ for i = p1 + 1, p2 - 1 do\n        table.insert(t, planets[i])\n      end\n\
    \    else\n      for i = p1 - 1, p2 + 1, -1 do\n        table.insert(t, planets[i])\n\
    \      end\n    end\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz6uxtrz.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpcz6uxtrz.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpcz6uxtrz.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = table.indexof(planets, planet1)\n    local\
    \ p2 = table.indexof(planets, planet2)\n    if p1 == nil or p2 == nil then\n \
    \       return {}\n    end\n    local result = {}\n    if p1 < p2 then\n     \
    \   for i = p1 + 1, p2 do\n            table.insert(result, planets[i])\n    \
    \    end\n    else\n        for i = p1 - 1, p2, -1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy8n75wra.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpy8n75wra.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpy8n75wra.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if planet1 == v then\n            p1 = i\n        end\n        if\
    \ planet2 == v then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    if p1 >\
    \ p2 then\n        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1\
    \ + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tlocal res = {}\n\tif p1 == 0 or p2 == 0 then\n\t\treturn\
    \ res\n\tend\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor i = p1 + 1,\
    \ p2 - 1 do\n\t\ttable.insert(res, planets[i])\n\tend\n\treturn res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1\
    \ end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local index1 = 0\n    local index2 = 0\n    for i,\
    \ v in ipairs(planets) do\n        if v == planet1 then\n            index1 =\
    \ i\n        end\n        if v == planet2 then\n            index2 = i\n     \
    \   end\n    end\n    if index1 == 0 or index2 == 0 then\n        return {}\n\
    \    end\n    if index1 > index2 then\n        local temp = index1\n        index1\
    \ = index2\n        index2 = temp\n    end\n    local result = {}\n    for i =\
    \ index1 + 1, index2 - 1 do\n        table.insert(result, planets[i])\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, v in ipairs(planets) do\n   \
    \ if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n    \
    \  p2 = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n \
    \ end\n  local res = {}\n  if p1 > p2 then\n    for i = p2, p1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p1, p2 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo07abqq.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpxo07abqq.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local pos1, pos2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            pos1 = i\n        end\n      \
    \  if v == planet2 then\n            pos2 = i\n        end\n    end\n    if pos1\
    \ == 0 or pos2 == 0 then\n        return {}\n    end\n    if pos1 > pos2 then\n\
    \        pos1, pos2 = pos2, pos1\n    end\n    local res = {}\n    for i = pos1\
    \ + 1, pos2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tfor i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\t\t\
    table.insert(res, planets[i])\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n   \
    \ end\n    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63t2fz85.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp63t2fz85.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2\n\tlocal result = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\
    \tend\n\tif p1 and p2 then\n\t\tif p1 < p2 then\n\t\t\tfor i = p1 + 1, p2 - 1\
    \ do\n\t\t\t\ttable.insert(result, planets[i])\n\t\t\tend\n\t\telse\n\t\t\tfor\
    \ i = p2 + 1, p1 - 1 do\n\t\t\t\ttable.insert(result, planets[i])\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2p2kyap.lua:24:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpd2p2kyap.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tlocal result = {}\n\tfor i = 1, #planets\
    \ do\n\t\tif planets[i] == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif planets[i]\
    \ == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\
    \t\treturn result\n\tend\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 do\n\t\t\t\
    table.insert(result, planets[i])\n\t\tend\n\telse\n\t\tfor i = p1 - 1, p2, -1\
    \ do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag661v3h.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Saturn\", \"Uranus\", \"Neptune\"\
    }\nstack traceback:\n\t/tmp/tmpag661v3h.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal res = {}\n\tlocal p1, p2\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 and p2 then\n\t\tif p1 < p2 then\n\t\t\t\
    for i = p1 + 1, p2 - 1 do\n\t\t\t\ttable.insert(res, planets[i])\n\t\t\tend\n\t\
    \telse\n\t\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\t\ttable.insert(res, planets[i])\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 == nil or p2 == nil then return {} end\n  local result = {}\n\
    \  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(result,\
    \ planets[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuifv6py3.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpuifv6py3.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpuifv6py3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  for\
    \ i = math.min(p1, p2), math.max(p1, p2) do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphlbcadyu.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmphlbcadyu.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmphlbcadyu.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(t, planets[i])\n    end\n \
    \ else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(t, planets[i])\n   \
    \ end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuw6rvj2.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpvuw6rvj2.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local index1, index2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      index1 = i\n    end\n    if v == planet2\
    \ then\n      index2 = i\n    end\n  end\n  if index1 == 0 or index2 == 0 then\n\
    \    return {}\n  end\n  local result = {}\n  for i = index1 + 1, index2 - 1 do\n\
    \    table.insert(result, planets[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn33vwqz.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpkn33vwqz.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return result\n  end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  for i = p1, p2 do\n    table.insert(result, planets[i])\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yxvnsf4.lua:45:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp8yxvnsf4.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local result =\
    \ {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local result =\
    \ {}\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n     \
    \       p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n\
    \        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return result\n\
    \    end\n    if p1 > p2 then\n        p1, p2 = p2, p1\n    end\n    for i = p1\
    \ + 1, p2 - 1 do\n        table.insert(result, planets[i])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets,\
    \ planet2)\n    if p1 == -1 or p2 == -1 then return {} end\n    local result =\
    \ {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(result,\
    \ planets[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwyopli3.lua:19:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmpmwyopli3.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmwyopli3.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal i1, i2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\ti1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\ti2\
    \ = i\n\t\tend\n\tend\n\tif i1 == 0 or i2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif i1 > i2 then\n\t\tfor i = i2, i1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = i1, i2 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpual973o6.lua:47:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpual973o6.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2\n  for i, p in ipairs(planets) do\n   \
    \ if p == planet1 then\n      p1 = i\n    end\n    if p == planet2 then\n    \
    \  p2 = i\n    end\n  end\n  if not p1 or not p2 then\n    return {}\n  end\n\
    \  local res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n \
    \   table.insert(res, planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 > p2 then\n\
    \    for i = p2, p1 do\n      table.insert(res, planets[i])\n    end\n  else\n\
    \    for i = p1, p2 do\n      table.insert(res, planets[i])\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sxoxy6g.lua:41:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp7sxoxy6g.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzxdadp6.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdzxdadp6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    -- TODO: Implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpzybvig.lua:24:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpnpzybvig.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if p1 and p2 then\n    if p1 > p2 then\n      p1, p2 = p2, p1\n\
    \    end\n    return table.slice(planets, p1 + 1, p2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt5xqxkwp.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpt5xqxkwp.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpt5xqxkwp.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n\tif not p1 or not p2 then return {} end\n\tlocal t = {}\n\tif p1\
    \ < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(t, planets[i])\n\
    \t\tend\n\telse\n\t\tfor i = p1 - 1, p2 + 1, -1 do\n\t\t\ttable.insert(t, planets[i])\n\
    \t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk17ufqnv.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpk17ufqnv.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpk17ufqnv.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local index1, index2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      index1 = i\n    end\n    if v == planet2\
    \ then\n      index2 = i\n    end\n  end\n  if index1 == 0 or index2 == 0 then\n\
    \    return {}\n  end\n  local result = {}\n  if index1 < index2 then\n    for\
    \ i = index1 + 1, index2 - 1 do\n      table.insert(result, planets[i])\n    end\n\
    \  else\n    for i = index2 + 1, index1 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal planet1_index = 0\n\tlocal planet2_index = 0\n\tlocal result\
    \ = {}\n\tfor i, planet in ipairs(planets) do\n\t\tif planet == planet1 then\n\
    \t\t\tplanet1_index = i\n\t\telseif planet == planet2 then\n\t\t\tplanet2_index\
    \ = i\n\t\tend\n\tend\n\tif planet1_index == 0 or planet2_index == 0 then\n\t\t\
    return result\n\tend\n\tif planet1_index < planet2_index then\n\t\tfor i = planet1_index\
    \ + 1, planet2_index - 1 do\n\t\t\ttable.insert(result, planets[i])\n\t\tend\n\
    \telse\n\t\tfor i = planet2_index + 1, planet1_index - 1 do\n\t\t\ttable.insert(result,\
    \ planets[i])\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = table.indexof(planets, planet1)\n  local\
    \ p2 = table.indexof(planets, planet2)\n  local result = {}\n  if p1 and p2 then\n\
    \    if p1 > p2 then\n      for i = p2, p1 do\n        table.insert(result, planets[i])\n\
    \      end\n    else\n      for i = p1, p2 do\n        table.insert(result, planets[i])\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv258r3jb.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpv258r3jb.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpv258r3jb.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == nil or p2 == nil then\n        return {}\n    end\n    local result\
    \ = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local res\
    \ = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local result = {}\n  local p1, p2 = 0, 0\n  for i, p\
    \ in ipairs(planets) do\n    if p == planet1 then p1 = i end\n    if p == planet2\
    \ then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1\
    \ < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  else\n    for i = p1 - 1, p2 + 1, -1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigbgyo7y.lua:44:\
    \ expected: {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}\nactual:\
    \ {\"Uranus\", \"Saturn\", \"Jupiter\", \"Mars\", \"Earth\"}\nstack traceback:\n\
    \t/tmp/tmpigbgyo7y.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 and p2 then\n    local t = {}\n    for i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n      table.insert(t, planets[i])\n    end\n \
    \   return t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9ffb_az.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpq9ffb_az.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpq9ffb_az.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if p1 and p2 then\n    local res = {}\n    if p1 < p2 then\n   \
    \   for i = p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n      end\n\
    \    else\n      for i = p1 - 1, p2 + 1, -1 do\n        table.insert(res, planets[i])\n\
    \      end\n    end\n    return res\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp700v4jo.lua:19:\
    \ attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmpp700v4jo.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpp700v4jo.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, p in ipairs(planets)\
    \ do\n        if p == planet1 then\n            p1 = i\n        end\n        if\
    \ p == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wn00yn_.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7wn00yn_.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i = 1, #planets do\n\
    \        if planets[i] == planet1 then\n            p1 = i\n        end\n    \
    \    if planets[i] == planet2 then\n            p2 = i\n        end\n    end\n\
    \    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local res = {}\n\
    \    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local planet1_index, planet2_index\n    for i, planet\
    \ in ipairs(planets) do\n        if planet == planet1 then\n            planet1_index\
    \ = i\n        end\n        if planet == planet2 then\n            planet2_index\
    \ = i\n        end\n    end\n    if planet1_index == nil or planet2_index == nil\
    \ then\n        return {}\n    end\n    local result = {}\n    if planet1_index\
    \ < planet2_index then\n        for i = planet1_index + 1, planet2_index - 1 do\n\
    \            table.insert(result, planets[i])\n        end\n    else\n       \
    \ for i = planet2_index + 1, planet1_index - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2\n\tlocal result = {}\n\tfor i, v in ipairs(planets)\
    \ do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\
    \t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 and p2 then\n\t\tif p1 > p2 then\n\t\t\t\
    for i = p2, p1 do\n\t\t\t\ttable.insert(result, planets[i])\n\t\t\tend\n\t\telse\n\
    \t\t\tfor i = p1, p2 do\n\t\t\t\ttable.insert(result, planets[i])\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgll_ed52.lua:46:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpgll_ed52.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    if p1 > p2 then\n        p1,\
    \ p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 + 1, p2 - 1 do\n  \
    \      table.insert(res, planets[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tlocal result = {}\n\tfor i, v\
    \ in ipairs(planets) do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\t\
    if v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\
    \t\treturn result\n\tend\n\tif p1 > p2 then\n\t\tp1, p2 = p2, p1\n\tend\n\tfor\
    \ i = p1 + 1, p2 - 1 do\n\t\ttable.insert(result, planets[i])\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2\n    for i, planet in ipairs(planets)\
    \ do\n        if planet == planet1 then\n            p1 = i\n        end\n   \
    \     if planet == planet2 then\n            p2 = i\n        end\n    end\n  \
    \  if p1 == nil or p2 == nil then\n        return {}\n    end\n    if p1 > p2\
    \ then\n        p1, p2 = p2, p1\n    end\n    local res = {}\n    for i = p1 +\
    \ 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = 0\n    local p2 = 0\n    local res = {}\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n\
    \    if p1 > p2 then\n        for i = p2, p1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p1, p2 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijm303qa.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmpijm303qa.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1\
    \ end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 == nil or p2 == nil then return {} end\n  if p1 > p2 then\
    \ p1, p2 = p2, p1 end\n  return table.slice(planets, p1 + 1, p2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qjnxsn2.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp9qjnxsn2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp9qjnxsn2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local res\
    \ = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(res, planets[i])\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \tlocal planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'}\n\tlocal p1, p2 = 0, 0\n\tfor i, v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2\
    \ = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\t\
    local res = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(res,\
    \ planets[i])\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n     \
    \ table.insert(result, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n \
    \     p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n\
    \  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n     \
    \ table.insert(result, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
    \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1, p2 do\n        if i ~= p1 and i ~= p2 then\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwu1_4pe3.lua:44:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwu1_4pe3.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then p1 = i end\n        if v == planet2 then p2\
    \ = i end\n    end\n    if p1 == 0 or p2 == 0 then return {} end\n    local res\
    \ = {}\n    for i = p1, p2 do\n        table.insert(res, planets[i])\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rg3te4m.lua:35:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp_rg3te4m.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    if p1 <\
    \ p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res,\
    \ planets[i])\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = bf\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Neptune'), {'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'),\
    \ {'Venus'})\n    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'),\
    \ {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1 = table.indexof(planets, planet1)\n    local\
    \ p2 = table.indexof(planets, planet2)\n    if p1 == nil or p2 == nil then return\
    \ {} end\n    local result = {}\n    if p1 > p2 then\n        for i = p2, p1 do\n\
    \            table.insert(result, planets[i])\n        end\n    else\n       \
    \ for i = p1, p2 do\n            table.insert(result, planets[i])\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii81byoy.lua:19:\
    \ attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpii81byoy.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpii81byoy.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn',\
    \ 'Uranus'})\n    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n\
    \    lu.assertEquals(candidate('Mercury', 'Uranus'), {'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune', 'Venus'), {'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \    local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = bf\n    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n\
    \    lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v2rzvtp.lua:42:\
    \ expected: {\"Venus\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4v2rzvtp.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- There are eight planets in our solar system: the closerst to the Sun\
    \ \n-- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    -- Uranus, Neptune.\n-- Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n-- The function should return a table containing all\
    \ planets whose orbits are \n-- located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n-- the proximity to the sun. \n-- The function should\
    \ return an empty table if planet1 or planet2\n-- are not correct planet names.\
    \ \n-- Examples\n-- >>> bf('Jupiter', 'Neptune')\n-- {'Saturn', 'Uranus'}\n--\
    \ >>> bf('Earth', 'Mercury')\n-- 'Venus'\n-- >>> bf('Mercury', 'Uranus')\n-- {'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn'}\nlocal function bf(planet1, planet2)\n\
    \  local planets = {'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'}\n  local p1 = 0\n  local p2 = 0\n  local result = {}\n\
    \  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n  \
    \  end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then\n    return {}\n  end\n  if p1 > p2 then\n    for i = p2, p1 do\n\
    \      table.insert(result, planets[i])\n    end\n  else\n    for i = p1, p2 do\n\
    \      table.insert(result, planets[i])\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n \
    \   lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n \
    \   lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
    \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
    \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
    \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
    \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_otgrf2r.lua:48:\
    \ expected: {\"Saturn\", \"Uranus\"}\nactual: {\"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\nstack traceback:\n\t/tmp/tmp_otgrf2r.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
