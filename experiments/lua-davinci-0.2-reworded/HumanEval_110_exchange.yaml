---
name: HumanEval_110_exchange
language: lua
prompt: |
  -- In this problem, you will implement a function that takes two tables of numbers,
  -- and determines whether it is possible to perform an exchange of elements
  -- between them to make lst1 a table of only even numbers.
  -- There is no limit on the number of exchanged elements between lst1 and lst2.
  -- If it is possible to exchange elements between the lst1 and lst2 to make
  -- all the elements of lst1 to be even, return "YES".
  -- Otherwise, return "NO".
  -- For example:
  -- >>> exchange({1, 2, 3, 4}, {1, 2, 3, 4})
  -- 'YES'
  -- >>> exchange({1, 2, 3, 4}, {1, 5, 3, 4})
  -- 'NO'
  -- It is assumed that the input tables will be non-empty.
  local function exchange(lst1, lst2)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = exchange
      lu.assertEquals(candidate({1, 2, 3, 4}, {1, 2, 3, 4}), 'YES')
      lu.assertEquals(candidate({1, 2, 3, 4}, {1, 5, 3, 4}), 'NO')
      lu.assertEquals(candidate({1, 2, 3, 4}, {2, 1, 4, 3}), 'YES')
      lu.assertEquals(candidate({5, 7, 3}, {2, 6, 4}), 'YES')
      lu.assertEquals(candidate({5, 7, 3}, {2, 6, 3}), 'NO')
      lu.assertEquals(candidate({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}), 'NO')
      lu.assertEquals(candidate({100, 200}, {200, 200}), 'YES')
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local evens = 0
      local odds = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      if evens % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    for i = 1, #lst1 do
      if lst1[i] % 2 == 1 then
        for j = 1, #lst2 do
          if lst2[j] % 2 == 1 then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            break
          end
        end
      end
    end
    for i = 1, #lst1 do
      if lst1[i] % 2 == 1 then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, n in ipairs(lst) do
        if is_even(n) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    if is_all_even(lst2) then
      return 'NO'
    end
    if is_all_odd(lst2) then
      return 'YES'
    end
    return 'YES'
  end
- |2-
      local even = 0
      local odd = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      if even % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          local lst1_odd_idx = {}
          local lst2_even_idx = {}
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  table.insert(lst1_odd_idx, i)
              end
          end
          for i, v in ipairs(lst2) do
              if is_even(v) then
                  table.insert(lst2_even_idx, i)
              end
          end
          if #lst1_odd_idx > #lst2_even_idx then
              return false
          end
          for i = 1, #lst1_odd_idx do
              local idx1 = lst1_odd_idx[i]
              local idx2 = lst2_even_idx[i]
              lst1[idx1], lst2[idx2] = lst2[idx2], lst1[idx1]
          end
          return true
      end
      return exchange_elements(lst1, lst2) and is_all_even(lst1) and "YES" or "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_elements_helper(lst1, lst2, i, j)
        if i > #lst1 then
          return true
        elseif is_even(lst1[i]) then
          return exchange_elements_helper(lst1, lst2, i + 1, j)
        elseif j > #lst2 then
          return false
        elseif is_odd(lst2[j]) then
          return exchange_elements_helper(lst1, lst2, i, j + 1)
        else
          lst1[i], lst2[j] = lst2[j], lst1[i]
          return exchange_elements_helper(lst1, lst2, i + 1, j + 1)
        end
      end
      return exchange_elements_helper(lst1, lst2, 1, 1)
    end
    return exchange_elements(lst1, lst2) and "YES" or "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local lst1_even, lst1_odd = {}, {}
      local lst2_even, lst2_odd = {}, {}
      for _, n in ipairs(lst1) do
        if is_even(n) then
          table.insert(lst1_even, n)
        else
          table.insert(lst1_odd, n)
        end
      end
      for _, n in ipairs(lst2) do
        if is_even(n) then
          table.insert(lst2_even, n)
        else
          table.insert(lst2_odd, n)
        end
      end
      if #lst1_even == #lst1 then
        return true
      elseif #lst1_even > #lst1_odd and #lst2_odd > #lst2_even then
        return true
      else
        return false
      end
    end
    if exchange_elements(lst1, lst2) then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local lst1_even_count = 0
      local lst2_odd_count = 0
      for _, v in ipairs(lst1) do
        if is_even(v) then
          lst1_even_count = lst1_even_count + 1
        end
      end
      for _, v in ipairs(lst2) do
        if is_odd(v) then
          lst2_odd_count = lst2_odd_count + 1
        end
      end
      return lst1_even_count == lst2_odd_count
    end
    if is_all_even(lst1) then
      return "YES"
    elseif exchange_elements(lst1, lst2) then
      return "YES"
    else
      return "NO"
    end
  end
- |2-
      local evens = 0
      local odds = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      if evens % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_all_even(lst)
          for _, x in ipairs(lst) do
              if is_odd(x) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      for i, x in ipairs(lst1) do
          if is_odd(x) then
              for j, y in ipairs(lst2) do
                  if is_even(y) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local even_count = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              even_count = even_count + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              even_count = even_count - 1
          end
      end
      return even_count == 0 and "YES" or "NO"
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(t)
      for _, v in ipairs(t) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(t1, t2)
      local t = {}
      for i = 1, #t1 do
        if is_odd(t1[i]) then
          for j = 1, #t2 do
            if is_even(t2[j]) then
              t1[i], t2[j] = t2[j], t1[i]
              t[#t + 1] = {i, j}
              break
            end
          end
        end
      end
      return t
    end
    local t = exchange_elements(lst1, lst2)
    if is_all_even(lst1) then
      return 'YES', t
    else
      return 'NO'
    end
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    for i, v in ipairs(lst1) do
      if is_odd(v) then
        for j, w in ipairs(lst2) do
          if is_even(w) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange(lst1, lst2)
          end
        end
      end
    end
    return 'NO'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      if is_all_even(lst1) then
          return "YES"
      else
          while exchange_elements(lst1, lst2) do
              if is_all_even(lst1) then
                  return "YES"
              end
          end
          return "NO"
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local new_lst1 = {}
      local new_lst2 = {}
      for i = 1, #lst1 do
        if is_even(lst1[i]) then
          new_lst1[#new_lst1 + 1] = lst1[i]
        else
          new_lst2[#new_lst2 + 1] = lst1[i]
        end
      end
      for i = 1, #lst2 do
        if is_odd(lst2[i]) then
          new_lst2[#new_lst2 + 1] = lst2[i]
        else
          new_lst1[#new_lst1 + 1] = lst2[i]
        end
      end
      return new_lst1, new_lst2
    end
    local function is_all_even(lst)
      for i = 1, #lst do
        if is_odd(lst[i]) then
          return false
        end
      end
      return true
    end
    local new_lst1, new_lst2 = exchange_elements(lst1, lst2)
    if is_all_even(new_lst1) then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      return exchange(lst1, lst2)
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
      -- TODO: Implement this function
  end
- |2-
      -- YOUR CODE HERE
      local odd1 = 0
      local odd2 = 0
      for i, v in ipairs(lst1) do
          if v % 2 == 1 then
              odd1 = odd1 + 1
          end
      end
      for i, v in ipairs(lst2) do
          if v % 2 == 1 then
              odd2 = odd2 + 1
          end
      end
      if odd1 == odd2 then
          return "YES"
      else
          return "NO"
      end
  end
- |2-
    local evens = {}
    local odds = {}
    for _, v in ipairs(lst1) do
      if v % 2 == 0 then
        table.insert(evens, v)
      else
        table.insert(odds, v)
      end
    end
    for _, v in ipairs(lst2) do
      if v % 2 == 0 then
        table.insert(evens, v)
      else
        table.insert(odds, v)
      end
    end
    return #evens >= #odds and 'YES' or 'NO'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      local even = {}
      local odd = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(even, v)
          else
              table.insert(odd, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(even, v)
          else
              table.insert(odd, v)
          end
      end
      if #even >= #odd then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          local lst1_even, lst1_odd = {}, {}
          local lst2_even, lst2_odd = {}, {}
          for _, v in ipairs(lst1) do
              if is_even(v) then
                  table.insert(lst1_even, v)
              else
                  table.insert(lst1_odd, v)
              end
          end
          for _, v in ipairs(lst2) do
              if is_even(v) then
                  table.insert(lst2_even, v)
              else
                  table.insert(lst2_odd, v)
              end
          end
          for _, v in ipairs(lst1_odd) do
              table.insert(lst2_odd, v)
          end
          for _, v in ipairs(lst2_even) do
              table.insert(lst1_even, v)
          end
          return lst1_even, lst2_odd
      end
      local lst1_even, lst2_odd = exchange_elements(lst1, lst2)
      if is_all_even(lst1_even) then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
    -- your code here
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_elements_helper(lst1, lst2, acc)
        if #lst1 == 0 then
          return acc
        elseif is_even(lst1[1]) then
          return exchange_elements_helper(
            table.slice(lst1, 2, #lst1),
            lst2,
            acc
          )
        elseif is_odd(lst1[1]) then
          local i = 1
          while i <= #lst2 do
            if is_even(lst2[i]) then
              local temp = lst1[1]
              lst1[1] = lst2[i]
              lst2[i] = temp
              return exchange_elements_helper(
                table.slice(lst1, 2, #lst1),
                lst2,
                acc + 1
              )
            end
            i = i + 1
          end
          return false
        end
      end
      return exchange_elements_helper(lst1, lst2, 0)
    end
    local result = exchange_elements(lst1, lst2)
    if result then
      return "YES"
    else
      return "NO"
    end
  end
- |2-
    -- your code here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function exchange_elements(lst1, lst2)
          local lst1_even = true
          for _, v in ipairs(lst1) do
              if not is_even(v) then
                  lst1_even = false
                  break
              end
          end
          if lst1_even then
              return true
          end
          for i, v in ipairs(lst1) do
              if not is_even(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = w, v
                          if exchange_elements(lst1, lst2) then
                              return true
                          end
                          lst1[i], lst2[j] = v, w
                      end
                  end
              end
          end
          return false
      end
      return exchange_elements(lst1, lst2) and "YES" or "NO"
  end
- |2-
      local even_count = 0
      for i = 1, #lst1 do
          if lst1[i] % 2 == 0 then
              even_count = even_count + 1
          end
      end
      for i = 1, #lst2 do
          if lst2[i] % 2 == 0 then
              even_count = even_count - 1
          end
      end
      if even_count == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 ~= 0
      end
      local function is_even_list(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_even_list(lst1) do
          if not exchange_one(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function exchange_elements(lst1, lst2)
      local lst1_even = true
      for _, v in ipairs(lst1) do
        if not is_even(v) then
          lst1_even = false
          break
        end
      end
      if lst1_even then
        return true
      end
      for i, v in ipairs(lst1) do
        if not is_even(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = w, v
              if exchange_elements(lst1, lst2) then
                return true
              end
              lst1[i], lst2[j] = v, w
            end
          end
        end
      end
      return false
    end
    return exchange_elements(lst1, lst2) and "YES" or "NO"
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
    -- your code here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function has_even(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return true
              end
          end
          return false
      end
      local function has_odd(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return true
              end
          end
          return false
      end
      if has_even(lst1) and has_odd(lst2) then
          return 'YES'
      elseif has_even(lst2) and has_odd(lst1) then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local even = function(x) return x % 2 == 0 end
      local odd = function(x) return x % 2 ~= 0 end
      local lst1_even = all(even, lst1)
      local lst2_even = all(even, lst2)
      local lst1_odd = all(odd, lst1)
      local lst2_odd = all(odd, lst2)
      if lst1_even and lst2_even then
          return 'YES'
      elseif lst1_odd and lst2_odd then
          return 'YES'
      elseif lst1_even and lst2_odd then
          return 'YES'
      elseif lst1_odd and lst2_even then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
      local evens = 0
      local odds = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      if evens % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(num)
      return num % 2 == 0
    end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      local even_count = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              even_count = even_count + 1
          end
      end
      local odd_count = #lst1 - even_count
      local even_count2 = 0
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              even_count2 = even_count2 + 1
          end
      end
      local odd_count2 = #lst2 - even_count2
      if odd_count == 0 then
          return "YES"
      elseif odd_count > even_count2 then
          return "NO"
      else
          return "YES"
      end
  end
- |2-
    -- your code here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          local lst1_odd_idx = {}
          local lst2_even_idx = {}
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  table.insert(lst1_odd_idx, i)
              end
          end
          for i, n in ipairs(lst2) do
              if is_even(n) then
                  table.insert(lst2_even_idx, i)
              end
          end
          if #lst1_odd_idx == 0 or #lst2_even_idx == 0 then
              return false
          end
          for _, i in ipairs(lst1_odd_idx) do
              for _, j in ipairs(lst2_even_idx) do
                  lst1[i], lst2[j] = lst2[j], lst1[i]
                  if is_all_even(lst1) then
                      return true
                  end
                  lst1[i], lst2[j] = lst2[j], lst1[i]
              end
          end
          return false
      end
      if is_all_even(lst1) then
          return 'YES'
      end
      if exchange_elements(lst1, lst2) then
          return 'YES'
      end
      return 'NO'
  end
- |2-
      local evens = {}
      local odds = {}
      for i = 1, #lst1 do
          if lst1[i] % 2 == 0 then
              table.insert(evens, lst1[i])
          else
              table.insert(odds, lst1[i])
          end
      end
      for i = 1, #lst2 do
          if lst2[i] % 2 == 0 then
              table.insert(evens, lst2[i])
          else
              table.insert(odds, lst2[i])
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- your code here
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_element(lst1, lst2, i, j)
          local tmp = lst1[i]
          lst1[i] = lst2[j]
          lst2[j] = tmp
      end
      local function exchange_elements(lst1, lst2, i, j)
          if is_all_even(lst1) then
              return true
          end
          if i > #lst1 then
              return false
          end
          for j = 1, #lst2 do
              if is_odd(lst1[i]) and is_even(lst2[j]) then
                  exchange_element(lst1, lst2, i, j)
                  if exchange_elements(lst1, lst2, i + 1, j) then
                      return true
                  end
                  exchange_element(lst1, lst2, i, j)
              end
          end
          return exchange_elements(lst1, lst2, i + 1, j)
      end
      if exchange_elements(lst1, lst2, 1, 1) then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(t)
          for _, v in ipairs(t) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(t1, t2)
          local t = {}
          for i = 1, #t1 do
              if is_odd(t1[i]) then
                  for j = 1, #t2 do
                      if is_even(t2[j]) then
                          t1[i], t2[j] = t2[j], t1[i]
                          t[#t + 1] = {i, j}
                          break
                      end
                  end
              end
          end
          return t
      end
      local t = exchange_elements(lst1, lst2)
      if is_all_even(lst1) then
          return "YES", t
      else
          return "NO"
      end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local lst1_odd_idx = {}
      local lst2_even_idx = {}
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          table.insert(lst1_odd_idx, i)
        end
      end
      for i, v in ipairs(lst2) do
        if is_even(v) then
          table.insert(lst2_even_idx, i)
        end
      end
      if #lst1_odd_idx ~= #lst2_even_idx then
        return false
      end
      for i = 1, #lst1_odd_idx do
        lst1[lst1_odd_idx[i]], lst2[lst2_even_idx[i]] =
          lst2[lst2_even_idx[i]], lst1[lst1_odd_idx[i]]
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if exchange_elements(lst1, lst2) then
      return 'YES'
    end
    return 'NO'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    for i, n in ipairs(lst1) do
      if is_odd(n) then
        for j, m in ipairs(lst2) do
          if is_even(m) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            if is_all_even(lst1) then
              return 'YES'
            end
          end
        end
      end
    end
    return 'NO'
  end
- |2-
      local even_count = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              even_count = even_count + 1
          end
      end
      if even_count == #lst1 then
          return 'YES'
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              return 'YES'
          end
      end
      return 'NO'
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
    -- your code here
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      for _, v in ipairs(lst1) do
          if v % 2 == 1 then
              for _, v2 in ipairs(lst2) do
                  if v2 % 2 == 0 then
                      return 'YES'
                  end
              end
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
    -- your code here
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function has_even(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return true
              end
          end
          return false
      end
      local function has_odd(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return true
              end
          end
          return false
      end
      if has_even(lst1) and has_odd(lst2) then
          return 'YES'
      elseif has_even(lst2) and has_odd(lst1) then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, x in ipairs(lst) do
        if is_odd(x) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, x in ipairs(lst1) do
        if is_odd(x) then
          for j, y in ipairs(lst2) do
            if is_even(y) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return "NO"
      end
    end
    return "YES"
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_even_table(t)
          for _, v in ipairs(t) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      if is_even_table(lst1) then
          return "YES"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_even_table(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, n in ipairs(lst1) do
        if is_odd(n) then
          for j, m in ipairs(lst2) do
            if is_even(m) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    local function is_even(num)
      return num % 2 == 0
    end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_even_list(lst)
          for _, x in ipairs(lst) do
              if is_odd(x) then
                  return false
              end
          end
          return true
      end
      if is_even_list(lst1) then
          return "YES"
      end
      for i, x in ipairs(lst1) do
          if is_odd(x) then
              for j, y in ipairs(lst2) do
                  if is_even(y) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_even_list(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    local function is_even(num)
      return num % 2 == 0
    end
- |2-
      -- YOUR CODE HERE
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return "YES"
      else
          return "NO"
      end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return "NO"
      end
    end
    return "YES"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function contains_odd(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return true
        end
      end
      return false
    end
    if contains_odd(lst1) then
      for _, v in ipairs(lst2) do
        if is_even(v) then
          return 'YES'
        end
      end
    else
      return 'YES'
    end
    return 'NO'
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local lst1_odd = {}
      local lst2_even = {}
      for _, x in ipairs(lst1) do
        if is_odd(x) then
          table.insert(lst1_odd, x)
        end
      end
      for _, x in ipairs(lst2) do
        if is_even(x) then
          table.insert(lst2_even, x)
        end
      end
      if #lst1_odd == #lst2_even then
        return true
      else
        return false
      end
    end
    if exchange_elements(lst1, lst2) then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, n in ipairs(lst) do
              if is_even(n) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, n in ipairs(lst1) do
          if is_odd(n) then
              for j, m in ipairs(lst2) do
                  if is_even(m) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    for i, v in ipairs(lst1) do
      if is_odd(v) then
        for j, w in ipairs(lst2) do
          if is_even(w) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange(lst1, lst2)
          end
        end
      end
    end
    return 'NO'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    -- your code here
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
    -- Write your code here
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return "YES"
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return "NO"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          local lst = {}
          for _, v in ipairs(lst1) do
              if is_odd(v) then
                  for i, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i] = w
                          lst2[i] = v
                          table.insert(lst, {v, w})
                          break
                      end
                  end
              end
          end
          return lst
      end
      if is_all_even(lst1) then
          return 'YES'
      else
          local lst = exchange_elements(lst1, lst2)
          if is_all_even(lst1) then
              return 'YES'
          else
              return 'NO'
          end
      end
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_element(lst1, lst2, i)
        if i > #lst1 then
          return true
        end
        local n = lst1[i]
        if is_even(n) then
          return exchange_element(lst1, lst2, i + 1)
        end
        for j = 1, #lst2 do
          if is_even(lst2[j]) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            if exchange_element(lst1, lst2, i + 1) then
              return true
            end
            lst1[i], lst2[j] = lst2[j], lst1[i]
          end
        end
        return false
      end
      return exchange_element(lst1, lst2, 1)
    end
    return exchange_elements(lst1, lst2) and "YES" or "NO"
  end
- |2-
      local even = 0
      local odd = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              even = even + 1
          else
              odd = odd + 1
          end
      end
      if even % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- TODO: implement the function here
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_elements_helper(lst1, lst2, i, j)
        if i > #lst1 then
          return true
        elseif is_even(lst1[i]) then
          return exchange_elements_helper(lst1, lst2, i + 1, j)
        elseif j > #lst2 then
          return false
        elseif is_odd(lst2[j]) then
          return exchange_elements_helper(lst1, lst2, i, j + 1)
        else
          lst1[i], lst2[j] = lst2[j], lst1[i]
          return exchange_elements_helper(lst1, lst2, i + 1, j + 1)
        end
      end
      return exchange_elements_helper(lst1, lst2, 1, 1)
    end
    if exchange_elements(lst1, lst2) then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      if is_all_even(lst2) then
          return "NO"
      end
      if is_all_odd(lst2) then
          return "YES"
      end
      return "YES"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_element(lst1, lst2, i)
        if i > #lst1 then
          return lst1, lst2
        end
        if is_even(lst1[i]) then
          return exchange_element(lst1, lst2, i + 1)
        end
        for j = 1, #lst2 do
          if is_even(lst2[j]) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange_element(lst1, lst2, i + 1)
          end
        end
        return lst1, lst2
      end
      return exchange_element(lst1, lst2, 1)
    end
    local lst1, lst2 = exchange_elements(lst1, lst2)
    if is_all_even(lst1) then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(t)
          for _, v in ipairs(t) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(t1, t2)
          for i, v in ipairs(t1) do
              if is_odd(v) then
                  for j, w in ipairs(t2) do
                      if is_even(w) then
                          t1[i], t2[j] = t2[j], t1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- your code here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return 'YES'
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return 'YES'
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return 'NO'
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_once(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      if is_all_even(lst1) then
          return "YES"
      elseif is_all_odd(lst2) then
          return "NO"
      else
          return exchange_once(lst1, lst2) and exchange(lst1, lst2) or "NO"
      end
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function exchange_one(lst1, lst2)
      for i, n in ipairs(lst1) do
        if is_odd(n) then
          for j, m in ipairs(lst2) do
            if is_even(m) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_one(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_elements_helper(lst1, lst2, acc)
        if #lst1 == 0 then
          return acc
        elseif is_even(lst1[1]) then
          return exchange_elements_helper(
            {table.unpack(lst1, 2)},
            lst2,
            acc
          )
        elseif is_odd(lst1[1]) then
          local new_lst1 = {table.unpack(lst1, 2)}
          local new_lst2 = {table.unpack(lst2, 2)}
          local new_acc = {table.unpack(acc)}
          table.insert(new_acc, lst1[1])
          table.insert(new_acc, lst2[1])
          return exchange_elements_helper(
            new_lst1,
            new_lst2,
            new_acc
          )
        end
      end
      return exchange_elements_helper(lst1, lst2, {})
    end
    local function is_all_even(lst)
      local function is_all_even_helper(lst, acc)
        if #lst == 0 then
          return acc
        elseif is_even(lst[1]) then
          return is_all_even_helper(
            {table.unpack(lst, 2)},
            true
          )
        elseif is_odd(lst[1]) then
          return is_all_even_helper(
            {table.unpack(lst, 2)},
            false
          )
        end
      end
      return is_all_even_helper(lst, true)
    end
    local exchanged_lst = exchange_elements(lst1, lst2)
    if is_all_even(exchanged
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return "NO"
      end
    end
    return "YES"
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, x in ipairs(lst) do
        if is_odd(x) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, x in ipairs(lst1) do
        if is_odd(x) then
          for j, y in ipairs(lst2) do
            if is_even(y) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return "NO"
      end
    end
    return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
    local function is_even(x)
      return x % 2 == 0
    end
    local function is_odd(x)
      return x % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_one(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_one(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    -- TODO: Your code here
  end
- |2-
      local evens = 0
      local odds = 0
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      if evens % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local evens = {}
      local odds = {}
      for i, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for i, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_even_table(t)
          for _, n in ipairs(t) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(t1, t2)
          local t = {}
          for _, n in ipairs(t1) do
              if is_odd(n) then
                  for i, m in ipairs(t2) do
                      if is_even(m) then
                          t[#t + 1] = {i, n}
                          break
                      end
                  end
              end
          end
          return t
      end
      local function exchange_table(t1, t2, ex)
          for _, v in ipairs(ex) do
              t1[v[1]], t2[v[2]] = t2[v[2]], t1[v[1]]
          end
      end
      local ex = exchange_elements(lst1, lst2)
      if #ex == 0 then
          return is_even_table(lst1) and "YES" or "NO"
      end
      exchange_table(lst1, lst2, ex)
      return is_even_table(lst1) and "YES" or "NO"
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_element(lst1, lst2, i)
        if i > #lst1 then
          return lst1, lst2
        end
        if is_even(lst1[i]) then
          return exchange_element(lst1, lst2, i + 1)
        end
        for j = 1, #lst2 do
          if is_even(lst2[j]) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange_element(lst1, lst2, i + 1)
          end
        end
        return lst1, lst2
      end
      return exchange_element(lst1, lst2, 1)
    end
    local function is_all_even(lst)
      for i = 1, #lst do
        if is_odd(lst[i]) then
          return false
        end
      end
      return true
    end
    local lst1, lst2 = exchange_elements(lst1, lst2)
    return is_all_even(lst1) and "YES" or "NO"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, n in ipairs(lst1) do
              if is_odd(n) then
                  for j, m in ipairs(lst2) do
                      if is_even(m) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(t)
          for _, v in ipairs(t) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(t)
          for _, v in ipairs(t) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return 'YES'
      end
      if is_all_odd(lst2) then
          return 'NO'
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      return exchange(lst1, lst2)
                  end
              end
          end
      end
      return 'NO'
  end
- |2-
    -- your code here
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    for i, v in ipairs(lst1) do
      if is_odd(v) then
        for j, w in ipairs(lst2) do
          if is_even(w) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange(lst1, lst2)
          end
        end
      end
    end
    return 'NO'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    if is_all_even(lst2) then
      return 'NO'
    end
    if is_all_odd(lst2) then
      return 'YES'
    end
    return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for i = 1, #lst do
        if is_odd(lst[i]) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i = 1, #lst1 do
        if is_odd(lst1[i]) then
          for j = 1, #lst2 do
            if is_even(lst2[j]) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local lst = {}
      for _, v in ipairs(lst1) do
        if is_odd(v) then
          table.insert(lst, v)
        end
      end
      for _, v in ipairs(lst2) do
        if is_even(v) then
          table.insert(lst, v)
        end
      end
      return lst
    end
    if is_all_even(lst1) then
      return 'YES'
    elseif is_all_odd(lst2) then
      return 'NO'
    else
      return exchange_elements(lst1, lst2)
    end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      if is_all_even(lst1) then
          return "YES"
      else
          while exchange_elements(lst1, lst2) do
              if is_all_even(lst1) then
                  return "YES"
              end
          end
          return "NO"
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
    -- YOUR CODE HERE
    local odd_count = 0
    for _, v in ipairs(lst1) do
      if v % 2 == 1 then
        odd_count = odd_count + 1
      end
    end
    for _, v in ipairs(lst2) do
      if v % 2 == 1 then
        odd_count = odd_count - 1
      end
    end
    if odd_count == 0 then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
    -- your code here
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local lst1_odd_idx = {}
      local lst2_even_idx = {}
      for i, n in ipairs(lst1) do
        if is_odd(n) then
          table.insert(lst1_odd_idx, i)
        end
      end
      for i, n in ipairs(lst2) do
        if is_even(n) then
          table.insert(lst2_even_idx, i)
        end
      end
      if #lst1_odd_idx == 0 or #lst2_even_idx == 0 then
        return false
      end
      for _, i in ipairs(lst1_odd_idx) do
        for _, j in ipairs(lst2_even_idx) do
          lst1[i], lst2[j] = lst2[j], lst1[i]
          if is_all_even(lst1) then
            return true
          end
          lst1[i], lst2[j] = lst2[j], lst1[i]
        end
      end
      return false
    end
    return exchange_elements(lst1, lst2) and 'YES' or 'NO'
  end
- |2-
      local even_numbers = {}
      local odd_numbers = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(even_numbers, v)
          else
              table.insert(odd_numbers, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(even_numbers, v)
          else
              table.insert(odd_numbers, v)
          end
      end
      if #even_numbers >= #odd_numbers then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      local function is_even(num)
          return num % 2 == 0
      end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 ~= 0
      end
      local function is_all_even(lst)
          for i = 1, #lst do
              if is_odd(lst[i]) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      for i = 1, #lst1 do
          for j = 1, #lst2 do
              if is_even(lst1[i]) and is_odd(lst2[j]) then
                  lst1[i], lst2[j] = lst2[j], lst1[i]
                  if is_all_even(lst1) then
                      return "YES"
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_even_list(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_odd_list(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_even_list(lst1) then
      return 'YES'
    end
    if is_odd_list(lst2) then
      return 'NO'
    end
    for i, v in ipairs(lst1) do
      if is_odd(v) then
        for j, w in ipairs(lst2) do
          if is_even(w) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange(lst1, lst2)
          end
        end
      end
    end
    return 'NO'
  end
- |2-
    -- your code here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return 'YES'
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      if is_all_even(lst1) then
                          return 'YES'
                      end
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                  end
              end
          end
      end
      return 'NO'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for i = 1, #lst do
        if is_odd(lst[i]) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i = 1, #lst1 do
        if is_odd(lst1[i]) then
          for j = 1, #lst2 do
            if is_even(lst2[j]) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_element(lst1, lst2)
        local function exchange_element_with_odd(lst1, lst2)
          local function exchange_element_with_odd_at(lst1, lst2, i)
            local function exchange_element_with_odd_at_from(lst1, lst2, i, j)
              if j > #lst2 then
                return false
              elseif is_even(lst2[j]) then
                return false
              else
                lst1[i], lst2[j] = lst2[j], lst1[i]
                return true
              end
            end
            return exchange_element_with_odd_at_from(lst1, lst2, i, 1)
          end
          return exchange_element_with_odd_at(lst1, lst2, 1)
        end
        return exchange_element_with_odd(lst1, lst2)
      end
      return exchange_element(lst1, lst2)
    end
    local function exchange_elements_until_all_even(lst1, lst2)
      local function exchange_elements_until_all_even_from(lst1, lst2, i)
        if i > #lst1 then
          return true
        elseif is_even(lst1[i]) then
          return exchange_elements_until_all_even_from(lst1, lst2, i + 1)
        else
          return exchange_elements(lst1, lst2) and
                 exchange_elements_until_all_even_from(lst1, lst2, i)
        end
      end
      return exchange_elements_until_all_even_from(lst1, lst2, 1)
    end
    return exchange_elements_until_all_even(lst1, lst2) and 'YES' or 'NO'
- |2-
    local even = {}
    local odd = {}
    for i, v in ipairs(lst1) do
      if v % 2 == 0 then
        even[#even + 1] = v
      else
        odd[#odd + 1] = v
      end
    end
    for i, v in ipairs(lst2) do
      if v % 2 == 0 then
        even[#even + 1] = v
      else
        odd[#odd + 1] = v
      end
    end
    if #even >= #odd then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
      local evens = 0
      local odds = 0
      for i = 1, #lst1 do
          if lst1[i] % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      for i = 1, #lst2 do
          if lst2[i] % 2 == 0 then
              evens = evens + 1
          else
              odds = odds + 1
          end
      end
      if evens % 2 == 0 then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- TODO: implement this function
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    for i, v in ipairs(lst1) do
      if is_odd(v) then
        for j, w in ipairs(lst2) do
          if is_even(w) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange(lst1, lst2)
          end
        end
      end
    end
    return 'NO'
  end
- |2-
    for i = 1, #lst1 do
      if lst1[i] % 2 == 1 then
        for j = 1, #lst2 do
          if lst2[j] % 2 == 1 then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return 'YES'
          end
        end
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, n in ipairs(lst) do
        if is_even(n) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_element(lst1, lst2, i, j)
        local tmp = lst1[i]
        lst1[i] = lst2[j]
        lst2[j] = tmp
      end
      for i, n in ipairs(lst1) do
        if is_odd(n) then
          for j, m in ipairs(lst2) do
            if is_even(m) then
              exchange_element(lst1, lst2, i, j)
              return true
            end
          end
        end
      end
      return false
    end
    if is_all_even(lst1) then
      return 'YES'
    elseif is_all_odd(lst2) then
      return 'NO'
    else
      while exchange_elements(lst1, lst2) do
        if is_all_even(lst1) then
          return 'YES'
        end
      end
      return 'NO'
    end
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_one(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_one(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- "\tlocal function is_even(n)\n\t\treturn n % 2 == 0\n\tend\n\tlocal function is_odd(n)\n\t\treturn
  n % 2 ~= 0\n\tend\n\tlocal function is_all_even(lst)\n\t\tfor _, v in ipairs(lst)
  do\n\t\t\tif is_odd(v) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn
  true\n\tend\n\tlocal function exchange_elements(lst1, lst2)\n\t\tfor i, v in ipairs(lst1)
  do\n\t\t\tif is_odd(v) then\n\t\t\t\tfor j, w in ipairs(lst2) do\n\t\t\t\t\tif is_even(w)
  then\n\t\t\t\t\t\tlst1[i], lst2[j] = lst2[j], lst1[i]\n\t\t\t\t\t\treturn true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn
  false\n\tend\n\twhile not is_all_even(lst1) do\n\t\tif not exchange_elements(lst1,
  lst2) then\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\treturn \"YES\"\nend"
- "\tlocal evens = {}\n\tlocal odds = {}\n\tfor i, v in ipairs(lst1) do\n\t\tif v
  % 2 == 0 then\n\t\t\tevens[#evens + 1] = v\n\t\telse\n\t\t\todds[#odds + 1] = v\n\t\tend\n\tend\n\tfor
  i, v in ipairs(lst2) do\n\t\tif v % 2 == 0 then\n\t\t\tevens[#evens + 1] = v\n\t\telse\n\t\t\todds[#odds
  + 1] = v\n\t\tend\n\tend\n\tif #evens >= #odds then\n\t\treturn 'YES'\n\telse\n\t\treturn
  'NO'\n\tend\nend"
- |2-
    -- TODO: Implement this function.
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, n in ipairs(lst1) do
        if is_odd(n) then
          for j, m in ipairs(lst2) do
            if is_even(m) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
      -- your code here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_odd_in_lst1(n)
          return is_odd(n) and not is_even(n)
      end
      local function is_even_in_lst2(n)
          return is_even(n) and not is_odd(n)
      end
      local function is_odd_in_lst2(n)
          return is_odd(n) and not is_even(n)
      end
      local function is_even_in_lst1(n)
          return is_even(n) and not is_odd(n)
      end
      local function is_odd_in_lst1_and_even_in_lst2(n)
          return is_odd_in_lst1(n) and is_even_in_lst2(n)
      end
      local function is_even_in_lst1_and_odd_in_lst2(n)
          return is_even_in_lst1(n) and is_odd_in_lst2(n)
      end
      local function is_odd_in_lst1_and_odd_in_lst2(n)
          return is_odd_in_lst1(n) and is_odd_in_lst2(n)
      end
      local function is_even_in_lst1_and_even_in_lst2(n)
          return is_even_in_lst1(n) and is_even_in_lst2(n)
      end
      local function is_odd_in_lst1_and_even_in_lst2_or_even_in_lst1_and_odd_in_lst2(n)
          return is_odd_in_lst1_and_even_in_lst2(n) or is_even_in_lst1_and_odd_in_lst2(n)
      end
- |2-
    -- your code here
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local lst1_odd_indexes = {}
      local lst2_even_indexes = {}
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          table.insert(lst1_odd_indexes, i)
        end
      end
      for i, v in ipairs(lst2) do
        if is_even(v) then
          table.insert(lst2_even_indexes, i)
        end
      end
      if #lst1_odd_indexes == #lst2_even_indexes then
        for i, v in ipairs(lst1_odd_indexes) do
          lst1[v] = lst2[lst2_even_indexes[i]]
        end
        return true
      end
      return false
    end
    if exchange_elements(lst1, lst2) then
      return 'YES'
    end
    return 'NO'
  end
- |2-
    -- your code here
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function is_all_odd(lst)
      for _, v in ipairs(lst) do
        if is_even(v) then
          return false
        end
      end
      return true
    end
    if is_all_even(lst1) then
      return 'YES'
    end
    if is_all_odd(lst1) then
      return 'NO'
    end
    if is_all_even(lst2) then
      return 'NO'
    end
    if is_all_odd(lst2) then
      return 'YES'
    end
    return 'YES'
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 == 1
      end
      local function is_all_even(lst)
          for _, x in ipairs(lst) do
              if is_odd(x) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, x in ipairs(lst) do
              if is_even(x) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      if is_all_even(lst2) then
          return "NO"
      end
      if is_all_odd(lst2) then
          return "YES"
      end
      return "YES"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function exchange_elements(lst1, lst2)
          local lst1_odd_elements = {}
          local lst2_even_elements = {}
          for i = 1, #lst1 do
              if is_odd(lst1[i]) then
                  table.insert(lst1_odd_elements, lst1[i])
              end
          end
          for i = 1, #lst2 do
              if is_even(lst2[i]) then
                  table.insert(lst2_even_elements, lst2[i])
              end
          end
          if #lst1_odd_elements == #lst2_even_elements then
              return true
          else
              return false
          end
      end
      if exchange_elements(lst1, lst2) then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, n in ipairs(lst) do
              if is_even(n) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, n in ipairs(lst1) do
          if is_odd(n) then
              for j, m in ipairs(lst2) do
                  if is_even(m) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      return exchange(lst1, lst2)
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function exchange_elements(lst1, lst2)
      local lst1_even = true
      for _, v in ipairs(lst1) do
        if not is_even(v) then
          lst1_even = false
          break
        end
      end
      if lst1_even then
        return true
      end
      for i, v in ipairs(lst1) do
        if not is_even(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = w, v
              if exchange_elements(lst1, lst2) then
                return true
              end
              lst1[i], lst2[j] = v, w
            end
          end
        end
      end
      return false
    end
    return exchange_elements(lst1, lst2) and "YES" or "NO"
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_elements_helper(lst1, lst2, acc)
        if #lst1 == 0 then
          return acc
        elseif is_even(lst1[1]) then
          return exchange_elements_helper(
            table.slice(lst1, 2, #lst1),
            lst2,
            acc
          )
        elseif is_odd(lst1[1]) then
          local new_lst1 = table.slice(lst1, 2, #lst1)
          local new_lst2 = table.slice(lst2, 2, #lst2)
          local new_acc = table.slice(acc, 1, #acc)
          table.insert(new_acc, lst1[1])
          table.insert(new_acc, lst2[1])
          return exchange_elements_helper(new_lst1, new_lst2, new_acc)
        end
      end
      return exchange_elements_helper(lst1, lst2, {})
    end
    local function is_exchange_possible(lst1, lst2)
      local function is_exchange_possible_helper(lst1, lst2)
        if #lst1 == 0 then
          return true
        elseif is_even(lst1[1]) then
          return is_exchange_possible_helper(
            table.slice(lst1, 2, #lst1),
            lst2
          )
        elseif is_odd(lst1[1]) then
          return false
        end
      end
      return is_exchange_possible_helper(lst1, lst2)
    end
    local exchanged_lst = exchange_elements(lst1, lst2)
    return is_exchange_p
- |2-
    -- your code here
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, x in ipairs(lst) do
              if is_odd(x) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, x in ipairs(lst) do
              if is_even(x) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      elseif is_all_odd(lst1) then
          return "NO"
      else
          for i, x in ipairs(lst1) do
              if is_odd(x) then
                  for j, y in ipairs(lst2) do
                      if is_even(y) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return exchange(lst1, lst2)
                      end
                  end
              end
          end
      end
  end
- |2-
      -- TODO: Implement this function.
  end
- |2-
      local function is_even(x)
          return x % 2 == 0
      end
      local function is_odd(x)
          return x % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, x in ipairs(lst) do
              if is_odd(x) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          local lst1_odd_elements = {}
          local lst2_even_elements = {}
          for _, x in ipairs(lst1) do
              if is_odd(x) then
                  table.insert(lst1_odd_elements, x)
              end
          end
          for _, x in ipairs(lst2) do
              if is_even(x) then
                  table.insert(lst2_even_elements, x)
              end
          end
          for _, x in ipairs(lst1_odd_elements) do
              for i, y in ipairs(lst2_even_elements) do
                  lst1[x] = y
                  lst2[y] = x
                  lst2_even_elements[i] = nil
                  break
              end
          end
      end
      if is_all_even(lst1) then
          return 'YES'
      else
          exchange_elements(lst1, lst2)
          if is_all_even(lst1) then
              return 'YES'
          else
              return 'NO'
          end
      end
  end
- |2-
    local evens = 0
    local odds = 0
    for _, v in ipairs(lst1) do
      if v % 2 == 0 then
        evens = evens + 1
      else
        odds = odds + 1
      end
    end
    for _, v in ipairs(lst2) do
      if v % 2 == 0 then
        evens = evens + 1
      else
        odds = odds + 1
      end
    end
    return odds % 2 == 0 and 'YES' or 'NO'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, n in ipairs(lst) do
        if is_odd(n) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      local lst1_copy = table.copy(lst1)
      local lst2_copy = table.copy(lst2)
      for i = 1, #lst1_copy do
        if is_odd(lst1_copy[i]) then
          for j = 1, #lst2_copy do
            if is_even(lst2_copy[j]) then
              lst1_copy[i] = lst2_copy[j]
              lst2_copy[j] = lst1_copy[i]
              break
            end
          end
        end
      end
      return lst1_copy, lst2_copy
    end
    local lst1_copy, lst2_copy = exchange_elements(lst1, lst2)
    if is_all_even(lst1_copy) then
      return 'YES'
    else
      return 'NO'
    end
  end
- |2-
    -- TODO: implement the function here
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_one(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_one(lst1, lst2) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function is_all_even(lst)
      for _, v in ipairs(lst) do
        if is_odd(v) then
          return false
        end
      end
      return true
    end
    local function exchange_elements(lst1, lst2)
      for i, v in ipairs(lst1) do
        if is_odd(v) then
          for j, w in ipairs(lst2) do
            if is_even(w) then
              lst1[i], lst2[j] = lst2[j], lst1[i]
              return true
            end
          end
        end
      end
      return false
    end
    while not is_all_even(lst1) do
      if not exchange_elements(lst1, lst2) then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, n in ipairs(lst) do
              if is_odd(n) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, n in ipairs(lst) do
              if is_even(n) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, n in ipairs(lst1) do
          if is_odd(n) then
              for j, m in ipairs(lst2) do
                  if is_even(m) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      return exchange(lst1, lst2)
                  end
              end
          end
      end
      return "NO"
  end
- |2-
      local evens = {}
      local odds = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(evens, v)
          else
              table.insert(odds, v)
          end
      end
      if #evens >= #odds then
          return 'YES'
      else
          return 'NO'
      end
  end
- |2-
    -- TODO: implement the function here
  end
- |2-
      -- TODO: implement this function
  end
- |2-
    local function is_even(n)
      return n % 2 == 0
    end
    local function is_odd(n)
      return n % 2 ~= 0
    end
    local function exchange_elements(lst1, lst2)
      local function exchange_element(lst1, lst2, i)
        if i > #lst1 then
          return lst1, lst2
        end
        if is_even(lst1[i]) then
          return exchange_element(lst1, lst2, i + 1)
        end
        for j = 1, #lst2 do
          if is_even(lst2[j]) then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            return exchange_element(lst1, lst2, i + 1)
          end
        end
        return lst1, lst2
      end
      return exchange_element(lst1, lst2, 1)
    end
    local function is_all_even(lst)
      for i = 1, #lst do
        if is_odd(lst[i]) then
          return false
        end
      end
      return true
    end
    local lst1, lst2 = exchange_elements(lst1, lst2)
    return is_all_even(lst1) and "YES" or "NO"
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      return exchange(lst1, lst2)
                  end
              end
          end
      end
      return "NO"
  end
- |2-
    for i = 1, #lst1 do
      if lst1[i] % 2 == 1 then
        for j = 1, #lst2 do
          if lst2[j] % 2 == 1 then
            lst1[i], lst2[j] = lst2[j], lst1[i]
            break
          end
        end
      end
    end
    for i = 1, #lst1 do
      if lst1[i] % 2 == 1 then
        return 'NO'
      end
    end
    return 'YES'
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function has_odd(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return true
              end
          end
          return false
      end
      if has_odd(lst1) then
          for i, v in ipairs(lst2) do
              if is_even(v) then
                  lst2[i] = lst1[i]
                  lst1[i] = v
              end
          end
          if has_odd(lst1) then
              return 'NO'
          end
      end
      return 'YES'
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      -- TODO: implement this function
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function is_all_odd(lst)
          for _, v in ipairs(lst) do
              if is_even(v) then
                  return false
              end
          end
          return true
      end
      if is_all_even(lst1) then
          return "YES"
      end
      if is_all_odd(lst1) then
          return "NO"
      end
      for i, v in ipairs(lst1) do
          if is_odd(v) then
              for j, w in ipairs(lst2) do
                  if is_even(w) then
                      lst1[i], lst2[j] = lst2[j], lst1[i]
                      return exchange(lst1, lst2)
                  end
              end
          end
      end
      return "NO"
  end
- |2-
      local lst1_odd = {}
      local lst2_even = {}
      for _, v in ipairs(lst1) do
          if v % 2 == 1 then
              table.insert(lst1_odd, v)
          end
      end
      for _, v in ipairs(lst2) do
          if v % 2 == 0 then
              table.insert(lst2_even, v)
          end
      end
      if #lst1_odd == 0 then
          return 'YES'
      elseif #lst2_even == 0 then
          return 'NO'
      else
          return 'YES'
      end
  end
- |2-
    -- TODO: Implement this function.
  end
- |2-
      local function is_even(n)
          return n % 2 == 0
      end
      local function is_odd(n)
          return n % 2 ~= 0
      end
      local function is_all_even(lst)
          for _, v in ipairs(lst) do
              if is_odd(v) then
                  return false
              end
          end
          return true
      end
      local function exchange_elements(lst1, lst2)
          for i, v in ipairs(lst1) do
              if is_odd(v) then
                  for j, w in ipairs(lst2) do
                      if is_even(w) then
                          lst1[i], lst2[j] = lst2[j], lst1[i]
                          return true
                      end
                  end
              end
          end
          return false
      end
      while not is_all_even(lst1) do
          if not exchange_elements(lst1, lst2) then
              return "NO"
          end
      end
      return "YES"
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
