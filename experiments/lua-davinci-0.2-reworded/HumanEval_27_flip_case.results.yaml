---
name: HumanEval_27_flip_case
language: lua
results:
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped = flipped .. char:upper()
            elseif char:match('%u') then
                flipped = flipped .. char:lower()
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                flipped[i] = char:lower() == char and char:upper() or char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local result = {}
        for i = 1, #string do
            local c = string:sub(i, i)
            if c:match('%a') then
                if c:match('%l') then
                    result[i] = c:upper()
                else
                    result[i] = c:lower()
                end
            else
                result[i] = c
            end
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%l') then
                    flipped = flipped .. char:upper()
                else
                    flipped = flipped .. char:lower()
                end
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.010 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local new_string = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                new_string = new_string .. char:upper()
            elseif char:match('%u') then
                new_string = new_string .. char:lower()
            else
                new_string = new_string .. char
            end
        end
        return new_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%u') then
          flipped[i] = char:lower()
        elseif char:match('%l') then
          flipped[i] = char:upper()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                flipped[i] = char:lower() == char and char:upper() or char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:match('%u') then
          return char:lower()
        else
          return char:upper()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          char = char:upper()
        elseif char:match('%u') then
          char = char:lower()
        end
        flipped[i] = char
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local c = string:sub(i, i)
            if c:lower() == c then
                flipped[i] = c:upper()
            else
                flipped[i] = c:lower()
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c) return c:lower() == c and c:upper() or c:lower() end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local new_string = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:lower() == char then
                new_string = new_string .. char:upper()
            else
                new_string = new_string .. char:lower()
            end
        end
        return new_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:lower() == char then
                flipped[i] = char:upper()
            else
                flipped[i] = char:lower()
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local new_string = ""
      for i = 1, #string do
        local char = string:sub(i, i)
        if char == char:lower() then
          new_string = new_string .. char:upper()
        else
          new_string = new_string .. char:lower()
        end
      end
      return new_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local c = string:sub(i, i)
            if c:match('%a') then
                if c:match('%l') then
                    c = c:upper()
                else
                    c = c:lower()
                end
            end
            flipped[i] = c
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                flipped[i] = char:lower() == char and char:upper() or char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          flipped[i] = char:upper()
        elseif char:match('%u') then
          flipped[i] = char:lower()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped = flipped .. char:upper()
            elseif char:match('%u') then
                flipped = flipped .. char:lower()
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%l') then
                    flipped = flipped .. char:upper()
                else
                    flipped = flipped .. char:lower()
                end
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                char = char:upper()
            elseif char:match('%u') then
                char = char:lower()
            end
            flipped[i] = char
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:match('%u') then
          return char:lower()
        else
          return char:upper()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:upper() == char and char:lower() or char:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%l') then
                    flipped = flipped .. char:upper()
                else
                    flipped = flipped .. char:lower()
                end
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:match('%l') then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          flipped[i] = char:upper()
        elseif char:match('%u') then
          flipped[i] = char:lower()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            if char:match('%l') then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          char = char:upper()
        elseif char:match('%u') then
          char = char:lower()
        end
        flipped[i] = char
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          flipped[i] = char:upper()
        elseif char:match('%u') then
          flipped[i] = char:lower()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:lower() == char then
          flipped[i] = char:upper()
        else
          flipped[i] = char:lower()
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          flipped[i] = char:upper()
        elseif char:match('%u') then
          flipped[i] = char:lower()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local result = ''
      for i = 1, #string do
        local c = string:sub(i, i)
        if c:match('%a') then
          if c:match('%l') then
            result = result .. c:upper()
          else
            result = result .. c:lower()
          end
        else
          result = result .. c
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:lower() == char then
          flipped[i] = char:upper()
        else
          flipped[i] = char:lower()
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:lower() == char then
                flipped[i] = char:upper()
            else
                flipped[i] = char:lower()
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local result = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                result = result .. char:upper()
            elseif char:match('%u') then
                result = result .. char:lower()
            else
                result = result .. char
            end
        end
        return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(char)
        if char:match("%u") then
          return char:lower()
        else
          return char:upper()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local new_string = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%l') then
                    new_string = new_string .. char:upper()
                else
                    new_string = new_string .. char:lower()
                end
            else
                new_string = new_string .. char
            end
        end
        return new_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:lower() == char then
          flipped[i] = char:upper()
        else
          flipped[i] = char:lower()
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:lower() == char then
                flipped[i] = char:upper()
            else
                flipped[i] = char:lower()
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = string:gsub('%a', function(char)
            if char:match('%u') then
                return char:lower()
            else
                return char:upper()
            end
        end)
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%l') then
                    flipped[i] = char:upper()
                else
                    flipped[i] = char:lower()
                end
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:lower() == char then
                flipped[i] = char:upper()
            else
                flipped[i] = char:lower()
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%u') then
          flipped[i] = char:lower()
        elseif char:match('%l') then
          flipped[i] = char:upper()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c) return c == c:lower() and c:upper() or c:lower() end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                flipped[i] = char:lower() == char and char:upper() or char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                char = char:upper()
            elseif char:match('%u') then
                char = char:lower()
            end
            flipped[i] = char
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local result = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%u') then
                    char = char:lower()
                else
                    char = char:upper()
                end
            end
            result[i] = char
        end
        return table.concat(result)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local result = ''
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%a') then
          if char:match('%l') then
            char = char:upper()
          else
            char = char:lower()
          end
        end
        result = result .. char
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                flipped = flipped .. char:gsub('%a', function(c)
                    return c == c:lower() and c:upper() or c:lower()
                end)
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = ''
      for i = 1, #string do
        local char = string:sub(i, i)
        if char == char:lower() then
          flipped = flipped .. char:upper()
        else
          flipped = flipped .. char:lower()
        end
      end
      return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            return c == c:lower() and c:upper() or c:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          char = char:upper()
        elseif char:match('%u') then
          char = char:lower()
        end
        flipped[i] = char
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local c = string:sub(i, i)
            if c:lower() == c then
                flipped[i] = c:upper()
            else
                flipped[i] = c:lower()
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            return c == c:upper() and c:lower() or c:upper()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:match('%l') then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            if char:lower() == char then
                return char:upper()
            else
                return char:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          flipped[i] = char:upper()
        elseif char:match('%u') then
          flipped[i] = char:lower()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:lower() == char and char:upper() or char:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        if char:lower() == char then
          return char:upper()
        else
          return char:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local new_string = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:lower() == char then
                new_string = new_string .. char:upper()
            else
                new_string = new_string .. char:lower()
            end
        end
        return new_string
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        if c:lower() == c then
          return c:upper()
        else
          return c:lower()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(char)
        return char:upper() == char and char:lower() or char:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i=1,#string do
        local char = string:sub(i,i)
        if char:lower() == char then
          flipped[i] = char:upper()
        else
          flipped[i] = char:lower()
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(c)
        return c == c:lower() and c:upper() or c:lower()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = ''
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          flipped = flipped .. char:upper()
        elseif char:match('%u') then
          flipped = flipped .. char:lower()
        else
          flipped = flipped .. char
        end
      end
      return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local result = ''
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%l') then
          result = result .. char:upper()
        elseif char:match('%u') then
          result = result .. char:lower()
        else
          result = result .. char
        end
      end
      return result
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub("%a", function(char)
        if char:match("%u") then
          return char:lower()
        else
          return char:upper()
        end
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%l') then
                flipped[i] = char:upper()
            elseif char:match('%u') then
                flipped[i] = char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = ''
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                if char:match('%l') then
                    flipped = flipped .. char:upper()
                else
                    flipped = flipped .. char:lower()
                end
            else
                flipped = flipped .. char
            end
        end
        return flipped
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub("%a", function(c)
            if c:lower() == c then
                return c:upper()
            else
                return c:lower()
            end
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      local flipped = {}
      for i = 1, #string do
        local char = string:sub(i, i)
        if char:match('%u') then
          flipped[i] = char:lower()
        elseif char:match('%l') then
          flipped[i] = char:upper()
        else
          flipped[i] = char
        end
      end
      return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        return string:gsub('%a', function(char)
            return char:lower() == char and char:upper() or char:lower()
        end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
        local flipped = {}
        for i = 1, #string do
            local char = string:sub(i, i)
            if char:match('%a') then
                flipped[i] = char:lower() == char and char:upper() or char:lower()
            else
                flipped[i] = char
            end
        end
        return table.concat(flipped)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    -- >>> flip_case('Hello')
    -- 'hELLO'
    local function flip_case(string)
      return string:gsub('%a', function(c)
        return c == c:upper() and c:lower() or c:upper()
      end)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = flip_case
        lu.assertEquals(candidate(''), '')
        lu.assertEquals(candidate('Hello!'), 'hELLO!')
        lu.assertEquals(candidate('These violent delights have violent ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
