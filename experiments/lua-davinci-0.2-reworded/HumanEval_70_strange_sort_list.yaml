---
name: HumanEval_70_strange_sort_list
language: lua
prompt: |
  -- Given table of integers, return table in strange order.
  -- Strange sorting, is when you start with the minimum value,
  -- then maximum of the remaining integers, then minimum and so on.
  -- Examples:
  -- >>> strange_sort_list({1, 2, 3, 4})
  -- {1, 4, 2, 3}
  -- >>> strange_sort_list({5, 5, 5, 5})
  -- {5, 5, 5, 5}
  -- >>> strange_sort_list({})
  -- {}
  local function strange_sort_list(lst)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = strange_sort_list
      lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})
      lu.assertEquals(candidate({5, 6, 7, 8, 9}), {5, 9, 6, 8, 7})
      lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 5, 2, 4, 3})
      lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5, 8, 6, 7})
      lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})
      lu.assertEquals(candidate({}), {})
      lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3, 6, 4, 5})
      lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5, -5, 5, 0, 2, 2, 2})
      lu.assertEquals(candidate({111111}), {111111})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local sorted = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = lst:index_of(min), lst:index_of(max)
      local min_removed, max_removed = lst:remove_at(min_idx), lst:remove_at(max_idx)
      local min_removed_idx, max_removed_idx = min_removed:index_of(min), max_removed:index_of(max)
      local min_removed_removed, max_removed_removed = min_removed:remove_at(min_removed_idx), max_removed:remove_at(max_removed_idx)
      return sorted
  end
- |2-
    local function strange_sort(lst, res)
      if #lst == 0 then
        return res
      end
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      table.remove_value(lst, min)
      table.remove_value(lst, max)
      table.insert(res, min)
      table.insert(res, max)
      return strange_sort(lst, res)
    end
    return strange_sort(lst, {})
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      local min_val = table.remove(lst, min_idx)
      local max_val = table.remove(lst, max_idx - 1)
      table.insert(res, min_val)
      table.insert(res, max_val)
      while #lst > 0 do
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          min_idx = 1
          max_idx = 1
          for i, v in ipairs(lst) do
              if v == min then
                  min_idx = i
              elseif v == max then
                  max_idx = i
              end
          end
          min_val = table.remove(lst, min_idx)
          max_val = table.remove(lst, max_idx - 1)
          table.insert(res, min_val)
          table.insert(res, max_val)
      end
      return res
  end
- |2-
    local result = {}
    local min_value, max_value, min_index, max_index
    local min_max_indexes = {}
    local min_max_values = {}
    local min_max_index = 1
    local min_max_value = 1
    local min_max_value_index = 1
    local min_max_value_indexes = {}
    local min_max_value_values = {}
    local min_max_value_index_index = 1
    local min_max_value_value_index = 1
    local min_max_value_index_indexes = {}
    local min_max_value_value_indexes = {}
    local min_max_value_index_index_index = 1
    local min_max_value_value_index_index = 1
    local min_max_value_index_index_indexes = {}
    local min_max_value_value_index_indexes = {}
    local min_max_value_index_index_index_index = 1
    local min_max_value_value_index_index_index = 1
    local min_max_value_index_index_index_indexes = {}
    local min_max_value_value_index_index_indexes = {}
    local min_max_value_index_index_index_index_index = 1
    local min_max_value_value_index_index_index_index = 1
    local min_max_value_index_index_index_index_indexes = {}
    local min_max_value_value_index_index_index_indexes = {}
    local min_max_value_index_index_index_index_index_index = 1
    local min_max_value_value_index_index_index_index_index = 1
    local min_max_value_index_index_index_index_index_indexes = {}
    local min_max_value_value_index_index_index_index_indexes = {}
    local min_max_value_index_index_index_index_index_index_index = 1
    local min_max_value_value_index_index_index
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      elseif lst[i] == max then
        max_idx = i
      end
    end
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        res[i] = min
        table.remove(lst, min_idx)
      else
        res[i] = max
        table.remove(lst, max_idx)
      end
      min, max = math.min(unpack(lst)), math.max(unpack(lst))
      min_idx, max_idx = 1, 1
      for j = 1, #lst do
        if lst[j] == min then
          min_idx = j
        elseif lst[j] == max then
          max_idx = j
        end
      end
      i = i + 1
    end
    return res
  end
- |2-
    local result = {}
    local min_index, max_index = 1, #lst
    local min_value, max_value = lst[min_index], lst[max_index]
    local min_found, max_found = false, false
    local min_count, max_count = 0, 0
    local i = 1
    while i <= #lst do
      if not min_found then
        if lst[i] < min_value then
          min_value = lst[i]
          min_index = i
        end
        min_count = min_count + 1
        if min_count == #lst then
          min_found = true
        end
      end
      if not max_found then
        if lst[i] > max_value then
          max_value = lst[i]
          max_index = i
        end
        max_count = max_count + 1
        if max_count == #lst then
          max_found = true
        end
      end
      i = i + 1
    end
    result[1] = min_value
    result[2] = max_value
    local min_index_found, max_index_found = false, false
    local j = 1
    while j <= #lst do
      if not min_index_found then
        if j ~= min_index and j ~= max_index then
          min_value = lst[j]
          min_index = j
          min_index_found = true
        end
      end
      if not max_index_found then
        if j ~= min_index and j ~= max_index then
          max_value = lst[j]
          max_index = j
          max_index_found = true
        end
      end
      j = j + 1
    end
    result[3] = min_value
    result[4] = max_value
    return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = #lst
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min_idx = min_idx + 1
          else
              res[i] = max
              max_idx = max_idx - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local sorted_lst = {}
      local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i, v in ipairs(lst) do
          if v == min_val then
              min_idx = i
          elseif v == max_val then
              max_idx = i
          end
      end
      local min_max_idx = min_idx > max_idx and min_idx or max_idx
      local max_min_idx = min_idx > max_idx and max_idx or min_idx
      for i = 1, #lst, 2 do
          table.insert(sorted_lst, lst[min_max_idx])
          table.insert(sorted_lst, lst[max_min_idx])
      end
      return sorted_lst
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      local min_cnt, max_cnt = 0, 0
      for i = 1, #lst do
          if lst[i] == min then
              min_cnt = min_cnt + 1
          elseif lst[i] == max then
              max_cnt = max_cnt + 1
          end
      end
      for i = 1, #lst do
          if not min_found then
              if lst[i] == min then
                  min_idx = i
                  min_found = true
              end
          elseif not max_found then
              if lst[i] == max then
                  max_idx = i
                  max_found = true
              end
          end
          if min_found and max_found then
              break
          end
      end
      if min_idx < max_idx then
          for i = 1, #lst do
              if i % 2 == 1 then
                  table.insert(res, min)
              else
                  table.insert(res, max)
              end
          end
      else
          for i = 1, #lst do
              if i % 2 == 1 then
                  table.insert(res, max)
              else
                  table.insert(res, min)
              end
          end
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while min <= max do
      if i % 2 == 1 then
        res[#res + 1] = min
        min = min + 1
      else
        res[#res + 1] = max
        max = max - 1
      end
      i = i + 1
    end
    return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      for i = 1, #lst do
          if lst[i] == min and not min_found then
              min_idx = i
              min_found = true
          elseif lst[i] == max and not max_found then
              max_idx = i
              max_found = true
          end
      end
      local min_lst, max_lst = {}, {}
      for i = 1, #lst do
          if i ~= min_idx then
              table.insert(min_lst, lst[i])
          end
          if i ~= max_idx then
              table.insert(max_lst, lst[i])
          end
      end
      local min_min, min_max = math.min(unpack(min_lst)), math.max(unpack(min_lst))
      local max_min, max_max = math.min(unpack(max_lst)), math.max(unpack(max_lst))
      local min_min_idx, min_max_idx = 1, 1
      local max_min_idx, max_max_idx = 1, 1
      local min_min_found, min_max_found = false, false
      local max_min_found, max_max_found = false, false
      for i = 1, #min_lst do
          if min_lst[i] == min_min and not min_min_found then
              min_min_idx = i
              min_min_found = true
          elseif min_lst[i] == min_max and not min_max_found then
              min_max_idx = i
              min_max_found = true
          end
      end
      for i = 1, #max_lst do
          if max_lst[i] == max_min and not max_
- |2-
    local result = {}
    local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))
    local min_index, max_index = 1, #lst
    local min_found, max_found = false, false
    for i = 1, #lst do
      if not min_found and lst[i] == min_value then
        min_index = i
        min_found = true
      end
      if not max_found and lst[i] == max_value then
        max_index = i
        max_found = true
      end
      if min_found and max_found then
        break
      end
    end
    local min_first = min_index < max_index
    for i = 1, #lst do
      if min_first then
        result[i] = lst[min_index]
        min_index = min_index + 1
        min_first = false
      else
        result[i] = lst[max_index]
        max_index = max_index - 1
        min_first = true
      end
    end
    return result
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = 1
      local min = lst[1]
      local max = lst[1]
      for i = 1, #lst do
          if lst[i] < min then
              min = lst[i]
              min_idx = i
          end
          if lst[i] > max then
              max = lst[i]
              max_idx = i
          end
      end
      table.insert(res, min)
      table.insert(res, max)
      table.remove(lst, min_idx)
      table.remove(lst, max_idx - 1)
      while #lst > 0 do
          min = lst[1]
          min_idx = 1
          max = lst[1]
          max_idx = 1
          for i = 1, #lst do
              if lst[i] < min then
                  min = lst[i]
                  min_idx = i
              end
              if lst[i] > max then
                  max = lst[i]
                  max_idx = i
              end
          end
          table.insert(res, min)
          table.insert(res, max)
          table.remove(lst, min_idx)
          table.remove(lst, max_idx - 1)
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, #lst
      local min_found, max_found = false, false
      for i = 1, #lst do
          if not min_found and lst[i] == min then
              min_idx = i
              min_found = true
          end
          if not max_found and lst[i] == max then
              max_idx = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local min_lst, max_lst = {}, {}
      for i = 1, #lst do
          if i ~= min_idx and i ~= max_idx then
              table.insert(min_lst, lst[i])
              table.insert(max_lst, lst[i])
          end
      end
      local min_lst_sorted = strange_sort_list(min_lst)
      local max_lst_sorted = strange_sort_list(max_lst)
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min_lst_sorted[min_idx]
              min_idx = min_idx + 1
          else
              res[i] = max_lst_sorted[max_idx]
              max_idx = max_idx + 1
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = #lst
      local is_min = true
      for i = 1, #lst do
          if is_min then
              res[i] = min
              min_idx = min_idx + 1
              min = math.min(unpack(lst, min_idx))
          else
              res[i] = max
              max_idx = max_idx - 1
              max = math.max(unpack(lst, 1, max_idx))
          end
          is_min = not is_min
      end
      return res
  end
- |2-
      local function strange_sort(lst, res)
          if #lst == 0 then
              return res
          end
          local min_val, min_idx = math.min(unpack(lst))
          local max_val, max_idx = math.max(unpack(lst))
          table.insert(res, min_val)
          table.remove(lst, min_idx)
          table.insert(res, max_val)
          table.remove(lst, max_idx)
          return strange_sort(lst, res)
      end
      return strange_sort(lst, {})
  end
- |2-
    local res = {}
    local min_idx = 1
    local max_idx = #lst
    local min_val = lst[min_idx]
    local max_val = lst[max_idx]
    local min_found = false
    local max_found = false
    local i = 1
    while i <= #lst do
      if not min_found then
        for j = min_idx, max_idx do
          if lst[j] < min_val then
            min_val = lst[j]
            min_idx = j
          end
        end
        res[i] = min_val
        min_found = true
        i = i + 1
      end
      if not max_found then
        for j = max_idx, min_idx, -1 do
          if lst[j] > max_val then
            max_val = lst[j]
            max_idx = j
          end
        end
        res[i] = max_val
        max_found = true
        i = i + 1
      end
      min_found = false
      max_found = false
      min_val = lst[min_idx]
      max_val = lst[max_idx]
    end
    return res
  end
- |2-
    local function get_min_max(lst)
      local min, max = math.huge, -math.huge
      for _, v in ipairs(lst) do
        if v < min then min = v end
        if v > max then max = v end
      end
      return min, max
    end
- |2-
    local result = {}
    local min_index, max_index
    local min, max
    local min_removed, max_removed
    local i = 1
    while #lst > 0 do
      min_index, max_index = 1, 1
      min, max = lst[1], lst[1]
      for j = 1, #lst do
        if lst[j] < min then
          min_index = j
          min = lst[j]
        end
        if lst[j] > max then
          max_index = j
          max = lst[j]
        end
      end
      if i % 2 == 1 then
        result[i] = min
        min_removed = table.remove(lst, min_index)
      else
        result[i] = max
        max_removed = table.remove(lst, max_index)
      end
      i = i + 1
    end
    return result
  end
- |2-
      local sorted = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              table.insert(sorted, min)
              table.remove(lst, table.index_of(lst, min))
          else
              table.insert(sorted, max)
              table.remove(lst, table.index_of(lst, max))
          end
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          i = i + 1
      end
      return sorted
  end
- |2-
      local function get_min_max(lst)
          local min = math.min(unpack(lst))
          local max = math.max(unpack(lst))
          return min, max
      end
- |2-
      local res = {}
      local min_val, max_val
      local min_idx, max_idx
      local min_found, max_found
      local i, j
      local n = #lst
      for i = 1, n do
          min_found = false
          max_found = false
          for j = 1, n do
              if not min_found and not lst[j] then
                  min_found = true
                  min_val = lst[j]
                  min_idx = j
              elseif not max_found and not lst[j] then
                  max_found = true
                  max_val = lst[j]
                  max_idx = j
              elseif not min_found and lst[j] < min_val then
                  min_val = lst[j]
                  min_idx = j
              elseif not max_found and lst[j] > max_val then
                  max_val = lst[j]
                  max_idx = j
              end
          end
          if i % 2 == 1 then
              res[i] = min_val
              lst[min_idx] = nil
          else
              res[i] = max_val
              lst[max_idx] = nil
          end
      end
      return res
  end
- |2-
      local result = {}
      local min_index, max_index = 1, #lst
      local min_value, max_value = lst[min_index], lst[max_index]
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[min_index] < min_value then
                  min_value = lst[min_index]
                  min_index = min_index + 1
              else
                  min_found = true
                  result[i] = min_value
                  i = i + 1
              end
          end
          if not max_found then
              if lst[max_index] > max_value then
                  max_value = lst[max_index]
                  max_index = max_index - 1
              else
                  max_found = true
                  result[i] = max_value
                  i = i + 1
              end
          end
          if min_found and max_found then
              min_found, max_found = false, false
          end
      end
      return result
  end
- |2-
    local function min_max(lst)
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      return min, max
    end
    local function remove_min_max(lst, min, max)
      local new_lst = {}
      for _, v in ipairs(lst) do
        if v ~= min and v ~= max then
          table.insert(new_lst, v)
        end
      end
      return new_lst
    end
    local function strange_sort(lst)
      if #lst == 0 then
        return {}
      elseif #lst == 1 then
        return lst
      else
        local min, max = min_max(lst)
        local new_lst = remove_min_max(lst, min, max)
        local sorted_lst = strange_sort(new_lst)
        table.insert(sorted_lst, 1, min)
        table.insert(sorted_lst, max)
        return sorted_lst
      end
    end
    return strange_sort(lst)
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min = min + 1
          else
              res[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local len = #lst
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 0
      local max_idx = 0
      for i = 1, len do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      local idx = 1
      while idx <= len do
          if idx % 2 == 1 then
              res[idx] = min
              min_idx = min_idx + 1
          else
              res[idx] = max
              max_idx = max_idx + 1
          end
          idx = idx + 1
      end
      return res
  end
- |2-
    local result = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_idx = table.index_of(lst, min)
    local max_idx = table.index_of(lst, max)
    table.remove(lst, min_idx)
    table.remove(lst, max_idx)
    table.insert(result, min)
    table.insert(result, max)
    while #lst > 0 do
      min = math.min(unpack(lst))
      max = math.max(unpack(lst))
      min_idx = table.index_of(lst, min)
      max_idx = table.index_of(lst, max)
      table.remove(lst, min_idx)
      table.remove(lst, max_idx)
      table.insert(result, min)
      table.insert(result, max)
    end
    return result
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      while #res < #lst do
          if #res % 2 == 0 then
              res[#res + 1] = min
              min_idx = min_idx + 1
              min = math.min(unpack(lst, min_idx))
          else
              res[#res + 1] = max
              max_idx = max_idx + 1
              max = math.max(unpack(lst, max_idx))
          end
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while #lst > 0 do
          if i % 2 == 1 then
              table.insert(res, min)
              table.remove(lst, table.index_of(lst, min))
          else
              table.insert(res, max)
              table.remove(lst, table.index_of(lst, max))
          end
          min, max = math.min(unpack(lst)), math.max(unpack(lst))
          i = i + 1
      end
      return res
  end
- "    local sorted = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n
  \   local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst) do\n
  \       if v == min then\n            min_index = i\n        elseif v == max then\n
  \           max_index = i\n        end\n    end\n    local min_max = {min, max}\n
  \   local min_max_index = {min_index, max_index}\n    local min_max_index_sorted
  = {}\n    if min_index < max_index then\n        min_max_index_sorted = {min_index,
  max_index}\n    else\n        min_max_index_sorted = {max_index, min_index}\n    end\n
  \   local min_max_sorted = {}\n    for i, v in ipairs(min_max_index_sorted) do\n
  \       min_max_sorted[i] = min_max[v]\n    end\n    local lst_sorted = {}\n    for
  i, v in ipairs(min_max_index) do\n        lst_sorted[i] = lst[v]\n    end\n    local
  lst_sorted_remaining = {}\n    for i, v in ipairs(lst) do\n        if v ~= min and
  v ~= max then\n            table.insert(lst_sorted_remaining, v)\n        end\n
  \   end\n    local lst_sorted_remaining_sorted = {}\n    for i, v in ipairs(lst_sorted_remaining)
  do\n        lst_sorted_remaining_sorted[i] = v\n    end\n    local lst_sorted_remaining_sorted_reversed
  = {}\n    for i, v in ipairs(lst_sorted_remaining_sorted) do\n        lst_sorted_remaining_sorted_reversed[i]
  = v\n    end\n    local lst_sorted_remaining_sorted_reversed_sorted = {}\n   "
- |2-
    local res = {}
    local min, max = math.min(table.unpack(lst)), math.max(table.unpack(lst))
    local min_idx, max_idx = table.index_of(lst, min), table.index_of(lst, max)
    local min_cnt, max_cnt = 0, 0
    local min_idx_list, max_idx_list = {}, {}
    for i, v in ipairs(lst) do
      if v == min then
        min_cnt = min_cnt + 1
        table.insert(min_idx_list, i)
      elseif v == max then
        max_cnt = max_cnt + 1
        table.insert(max_idx_list, i)
      end
    end
    local min_idx_cnt, max_idx_cnt = 1, 1
    for i = 1, #lst do
      if i % 2 == 1 then
        res[i] = min
        if min_idx_cnt <= min_cnt then
          min_idx = min_idx_list[min_idx_cnt]
          min_idx_cnt = min_idx_cnt + 1
        end
      else
        res[i] = max
        if max_idx_cnt <= max_cnt then
          max_idx = max_idx_list[max_idx_cnt]
          max_idx_cnt = max_idx_cnt + 1
        end
      end
    end
    return res
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_index, max_index = 1, 1
      while min_index <= #lst or max_index <= #lst do
          if min_index <= #lst then
              table.insert(result, min)
              min_index = min_index + 1
          end
          if max_index <= #lst then
              table.insert(result, max)
              max_index = max_index + 1
          end
      end
      return result
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_index, max_index = 1, #lst
      local min_found, max_found = false, false
      for i = 1, #lst do
          if not min_found and lst[i] == min then
              min_index = i
              min_found = true
          end
          if not max_found and lst[i] == max then
              max_index = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local min_removed, max_removed = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_removed then
                  result[i] = min
                  min_removed = true
              else
                  result[i] = lst[min_index + 1]
                  min_index = min_index + 1
              end
          else
              if not max_removed then
                  result[i] = max
                  max_removed = true
              else
                  result[i] = lst[max_index - 1]
                  max_index = max_index - 1
              end
          end
      end
      return result
  end
- |2-
      local function min_max(lst)
          local min = math.min(unpack(lst))
          local max = math.max(unpack(lst))
          return min, max
      end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = #lst
      local min_found = false
      local max_found = false
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
              min_found = true
          end
          if lst[i] == max then
              max_idx = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local min_idx_found = false
      local max_idx_found = false
      local idx = 1
      while idx <= #lst do
          if idx == min_idx then
              min_idx_found = true
          end
          if idx == max_idx then
              max_idx_found = true
          end
          if min_idx_found and max_idx_found then
              break
          end
          if idx % 2 == 1 then
              res[idx] = min
              min_idx = min_idx + 1
          else
              res[idx] = max
              max_idx = max_idx - 1
          end
          idx = idx + 1
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while #lst > 0 do
      if i % 2 == 1 then
        table.insert(res, min)
        table.remove(lst, table.index_of(lst, min))
      else
        table.insert(res, max)
        table.remove(lst, table.index_of(lst, max))
      end
      min, max = math.min(unpack(lst)), math.max(unpack(lst))
      i = i + 1
    end
    return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        res[i] = min
        table.remove(lst, table.index_of(lst, min))
      else
        res[i] = max
        table.remove(lst, table.index_of(lst, max))
      end
      min, max = math.min(unpack(lst)), math.max(unpack(lst))
      i = i + 1
    end
    return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = table.index_of(lst, min), table.index_of(lst, max)
      local min_removed, max_removed = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_removed then
                  table.insert(res, min)
                  table.remove(lst, min_idx)
                  min_removed = true
              else
                  table.insert(res, math.min(unpack(lst)))
                  table.remove(lst, table.index_of(lst, math.min(unpack(lst))))
              end
          else
              if not max_removed then
                  table.insert(res, max)
                  table.remove(lst, max_idx)
                  max_removed = true
              else
                  table.insert(res, math.max(unpack(lst)))
                  table.remove(lst, table.index_of(lst, math.max(unpack(lst))))
              end
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          end
          if lst[i] == max then
              max_idx = i
          end
      end
      local min_removed = false
      local max_removed = false
      if min_idx < max_idx then
          min_removed = true
      else
          max_removed = true
      end
      for i = 1, #lst do
          if min_removed and max_removed then
              break
          end
          if min_removed and lst[i] == max then
              table.insert(res, max)
              max_removed = true
          elseif max_removed and lst[i] == min then
              table.insert(res, min)
              min_removed = true
          end
      end
      for i = 1, #lst do
          if lst[i] ~= min and lst[i] ~= max then
              table.insert(res, lst[i])
          end
      end
      return res
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] == min then
                  min_idx = i
                  min_found = true
              end
          end
          if not max_found then
              if lst[i] == max then
                  max_idx = i
                  max_found = true
              end
          end
          if min_found and max_found then
              break
          end
          i = i + 1
      end
      local min_removed, max_removed = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_removed then
                  table.insert(result, min)
                  min_removed = true
              else
                  table.insert(result, lst[min_idx])
              end
          else
              if not max_removed then
                  table.insert(result, max)
                  max_removed = true
              else
                  table.insert(result, lst[max_idx])
              end
          end
      end
      return result
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min = min + 1
          else
              res[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = 1
      local min = lst[1]
      local max = lst[1]
      local min_found = false
      local max_found = false
      for i, v in ipairs(lst) do
          if v < min then
              min = v
              min_idx = i
              min_found = true
          end
          if v > max then
              max = v
              max_idx = i
              max_found = true
          end
      end
      if not min_found then
          return lst
      end
      if not max_found then
          return lst
      end
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min_idx = min_idx + 1
              if min_idx > #lst then
                  min_idx = 1
              end
              min = lst[min_idx]
          else
              res[i] = max
              max_idx = max_idx + 1
              if max_idx > #lst then
                  max_idx = 1
              end
              max = lst[max_idx]
          end
          i = i + 1
      end
      return res
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_index, max_index = 1, #lst
      local min_found, max_found = false, false
      for i = 1, #lst do
          if lst[i] == min and not min_found then
              min_index = i
              min_found = true
          elseif lst[i] == max and not max_found then
              max_index = i
              max_found = true
          end
      end
      if min_index < max_index then
          for i = min_index, max_index do
              table.insert(result, lst[i])
          end
          for i = 1, min_index - 1 do
              table.insert(result, lst[i])
          end
          for i = max_index + 1, #lst do
              table.insert(result, lst[i])
          end
      else
          for i = max_index, min_index do
              table.insert(result, lst[i])
          end
          for i = 1, max_index - 1 do
              table.insert(result, lst[i])
          end
          for i = min_index + 1, #lst do
              table.insert(result, lst[i])
          end
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      local min_found = false
      local max_found = false
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
              min_found = true
          end
          if v == max then
              max_idx = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      if min_idx < max_idx then
          for i = 1, #lst, 2 do
              res[i] = min
              res[i + 1] = max
          end
      else
          for i = 1, #lst, 2 do
              res[i] = max
              res[i + 1] = min
          end
      end
      return res
  end
- |2-
      local result = {}
      local min_index = 1
      local max_index = #lst
      local is_min = true
      for i = 1, #lst do
          if is_min then
              result[i] = lst[min_index]
              min_index = min_index + 1
          else
              result[i] = lst[max_index]
              max_index = max_index - 1
          end
          is_min = not is_min
      end
      return result
  end
- |2-
    local result = {}
    local min_value = math.min(unpack(lst))
    local max_value = math.max(unpack(lst))
    local min_index = 1
    local max_index = #lst
    local is_min = true
    for i = 1, #lst do
      if is_min then
        result[i] = min_value
        min_index = min_index + 1
        min_value = lst[min_index]
        is_min = false
      else
        result[i] = max_value
        max_index = max_index - 1
        max_value = lst[max_index]
        is_min = true
      end
    end
    return result
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = table.index_of(lst, min)
      local max_index = table.index_of(lst, max)
      local min_found = false
      local max_found = false
      for i = 1, #lst do
          if i == min_index then
              min_found = true
          elseif i == max_index then
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      if min_found and max_found then
          table.insert(result, min)
          table.insert(result, max)
          table.remove(lst, min_index)
          table.remove(lst, max_index - 1)
      elseif min_found then
          table.insert(result, min)
          table.remove(lst, min_index)
      elseif max_found then
          table.insert(result, max)
          table.remove(lst, max_index)
      end
      if #lst > 0 then
          local sub_result = strange_sort_list(lst)
          for i = 1, #sub_result do
              table.insert(result, sub_result[i])
          end
      end
      return result
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while i <= #lst do
      res[i] = min
      res[#lst - i + 1] = max
      i = i + 1
    end
    return res
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      local min_found = false
      local max_found = false
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
              min_found = true
          end
          if v == max then
              max_idx = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local min_idx_found = false
      local max_idx_found = false
      for i, v in ipairs(lst) do
          if i == min_idx then
              min_idx_found = true
          end
          if i == max_idx then
              max_idx_found = true
          end
          if min_idx_found and max_idx_found then
              break
          end
          if i % 2 == 1 then
              table.insert(result, min)
          else
              table.insert(result, max)
          end
      end
      return result
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_val, max_val = min, max
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[min_idx] == min_val then
                  res[i] = min_val
                  min_found = true
                  i = i + 1
              end
              min_idx = min_idx + 1
          end
          if not max_found then
              if lst[max_idx] == max_val then
                  res[i] = max_val
                  max_found = true
                  i = i + 1
              end
              max_idx = max_idx + 1
          end
          if min_found and max_found then
              min_val = min_val + 1
              max_val = max_val - 1
              min_found, max_found = false, false
          end
      end
      return res
  end
- |2-
      local res = {}
      local min_index, max_index = 1, #lst
      local min_value, max_value = lst[min_index], lst[max_index]
      local min_found, max_found = false, false
      local min_value_index, max_value_index = 1, 1
      while min_index <= max_index do
          if not min_found then
              min_value_index, min_value = min_index, lst[min_index]
              for i = min_index, max_index do
                  if lst[i] < min_value then
                      min_value_index, min_value = i, lst[i]
                  end
              end
              min_found = true
          end
          if not max_found then
              max_value_index, max_value = max_index, lst[max_index]
              for i = max_index, min_index, -1 do
                  if lst[i] > max_value then
                      max_value_index, max_value = i, lst[i]
                  end
              end
              max_found = true
          end
          if min_found and max_found then
              res[#res + 1] = min_value
              res[#res + 1] = max_value
              min_index = min_value_index + 1
              max_index = max_value_index - 1
              min_found, max_found = false, false
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      table.insert(res, min)
      table.insert(res, max)
      table.remove(lst, min_idx)
      table.remove(lst, max_idx - 1)
      while #lst > 0 do
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          min_idx = 1
          max_idx = 1
          for i, v in ipairs(lst) do
              if v == min then
                  min_idx = i
              elseif v == max then
                  max_idx = i
              end
          end
          table.insert(res, min)
          table.insert(res, max)
          table.remove(lst, min_idx)
          table.remove(lst, max_idx - 1)
      end
      return res
  end
- |2-
      local res = {}
      local min_val, max_val
      local min_idx, max_idx
      local min_found, max_found
      local i, j
- |2-
      local res = {}
      local n = #lst
      local i = 1
      local j = n
      local k = 1
      while i <= n and j >= 1 do
          if k % 2 == 1 then
              res[k] = lst[i]
              i = i + 1
          else
              res[k] = lst[j]
              j = j - 1
          end
          k = k + 1
      end
      return res
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 1
      local max_index = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
          end
          if v == max then
              max_index = i
          end
      end
      local min_found = false
      local max_found = false
      for i, v in ipairs(lst) do
          if i == min_index then
              min_found = true
          end
          if i == max_index then
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local min_first = false
      if min_index < max_index then
          min_first = true
      end
      local i = 1
      while i <= #lst do
          if min_first then
              table.insert(result, min)
              min_first = false
          else
              table.insert(result, max)
              min_first = true
          end
          i = i + 1
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 0
      local max_idx = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      local min_first = min_idx < max_idx
      local i = 1
      while #lst > 0 do
          if min_first then
              table.insert(res, table.remove(lst, min_idx))
              min_first = false
          else
              table.insert(res, table.remove(lst, max_idx))
              min_first = true
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          end
          if lst[i] == max then
              max_idx = i
          end
      end
      local i = 1
      local j = 1
      local k = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min_idx = min_idx + 1
              min = math.min(unpack(lst, min_idx))
          else
              res[i] = max
              max_idx = max_idx + 1
              max = math.max(unpack(lst, max_idx))
          end
          i = i + 1
      end
      return res
  end
- |2-
    local min, max = math.min, math.max
    local function get_min_max(lst)
      local min, max = lst[1], lst[1]
      for i = 2, #lst do
        if lst[i] < min then min = lst[i] end
        if lst[i] > max then max = lst[i] end
      end
      return min, max
    end
    local function remove_min_max(lst, min, max)
      local new_lst = {}
      for i = 1, #lst do
        if lst[i] ~= min and lst[i] ~= max then
          new_lst[#new_lst + 1] = lst[i]
        end
      end
      return new_lst
    end
    local function strange_sort(lst)
      if #lst == 0 then return {} end
      local min, max = get_min_max(lst)
      local new_lst = {min, max}
      local remaining = remove_min_max(lst, min, max)
      return new_lst + strange_sort(remaining)
    end
    return strange_sort(lst)
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = #lst
      local min_cnt = 0
      local max_cnt = 0
      for i = 1, #lst do
          if lst[i] == min then
              min_cnt = min_cnt + 1
          end
          if lst[i] == max then
              max_cnt = max_cnt + 1
          end
      end
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min
              min_idx = min_idx + 1
          else
              res[i] = max
              max_idx = max_idx - 1
          end
      end
      if min_cnt > max_cnt then
          res[#lst] = min
      elseif min_cnt < max_cnt then
          res[#lst] = max
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      local min_found, max_found = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_found then
                  res[i] = min
                  min_found = true
              else
                  res[i] = max
                  max_found = true
              end
          else
              if not max_found then
                  res[i] = max
                  max_found = true
              else
                  res[i] = min
                  min_found = true
              end
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          res[i] = min
          res[#lst - i + 1] = max
          i = i + 1
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local asc = true
    for i = 1, #lst do
      if asc then
        res[i] = min
        min = min + 1
      else
        res[i] = max
        max = max - 1
      end
      asc = not asc
    end
    return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      elseif lst[i] == max then
        max_idx = i
      end
    end
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        res[i] = min
        min_idx = min_idx + 1
        min = lst[min_idx]
      else
        res[i] = max
        max_idx = max_idx - 1
        max = lst[max_idx]
      end
      i = i + 1
    end
    return res
  end
- |2-
      local function min_max(lst)
          local min = lst[1]
          local max = lst[1]
          for _, v in ipairs(lst) do
              if v < min then
                  min = v
              end
              if v > max then
                  max = v
              end
          end
          return min, max
      end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      local min_idx_used = false
      local max_idx_used = false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_idx_used then
                  res[i] = min
                  min_idx_used = true
              else
                  res[i] = max
                  max_idx_used = true
              end
          else
              if not max_idx_used then
                  res[i] = max
                  max_idx_used = true
              else
                  res[i] = min
                  min_idx_used = true
              end
          end
      end
      return res
  end
- |2-
      local result = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local min_idx_found = false
      local max_idx_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] <= min_val then
                  min_val = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  min_found = true
                  min_idx_found = true
              end
          end
          if not max_found then
              if lst[i] >= max_val then
                  max_val = lst[i]
                  max_idx = i
              end
              if i == #lst then
                  max_found = true
                  max_idx_found = true
              end
          end
          if min_found and max_found then
              if min_idx_found then
                  result[#result + 1] = min_val
                  min_found = false
                  min_idx_found = false
                  min_val = lst[max_idx + 1]
                  min_idx = max_idx + 1
                  i = max_idx + 1
              elseif max_idx_found then
                  result[#result + 1] = max_val
                  max_found = false
                  max_idx_found = false
                  max_val = lst[min_idx + 1]
                  max_idx = min_idx + 1
                  i = min_idx + 1
              end
          end
          i = i + 1
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      local min_cnt = 0
      local max_cnt = 0
      local min_val = min
      local max_val = max
      local min_idx = min_idx
      local max_idx = max_idx
      local lst_len = #lst
      for i = 1, lst_len do
          if i % 2 == 1 then
              res[i] = min_val
              min_cnt = min_cnt + 1
              if min_cnt == lst_len / 2 then
                  min_val = max_val
                  min_idx = max_idx
              else
                  min_val = math.min(unpack(lst))
                  for j, v in ipairs(lst) do
                      if v == min_val then
                          min_idx = j
                      end
                  end
              end
          else
              res[i] = max_val
              max_cnt = max_cnt + 1
              if max_cnt == lst_len / 2 then
                  max_val = min_val
                  max_idx = min_idx
              else
                  max_val = math.max(unpack(lst))
                  for j, v in ipairs(lst) do
                      if v == max_val then
                          max_idx = j
                      end
                  end
              end
          end
          table.remove(lst, min_idx)
          table.remove(lst, max_idx - 1)
      end
      return res
  end
- |2-
      local res = {}
      local n = #lst
      local i = 1
      while i <= n do
          local min_i, min_v = min_index(lst)
          table.insert(res, min_v)
          table.remove(lst, min_i)
          if i == n then
              break
          end
          local max_i, max_v = max_index(lst)
          table.insert(res, max_v)
          table.remove(lst, max_i)
          i = i + 2
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = #lst
      local min_flag = true
      for i = 1, #lst do
          if min_flag then
              res[i] = min
              min_idx = min_idx + 1
              min = math.min(unpack(lst, min_idx))
          else
              res[i] = max
              max_idx = max_idx - 1
              max = math.max(unpack(lst, 1, max_idx))
          end
          min_flag = not min_flag
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    local min_found, max_found = false, false
    for i = 1, #lst do
      if lst[i] == min and not min_found then
        min_idx = i
        min_found = true
      elseif lst[i] == max and not max_found then
        max_idx = i
        max_found = true
      end
    end
    if min_idx < max_idx then
      for i = 1, #lst do
        if i % 2 == 1 then
          res[i] = min
        else
          res[i] = max
        end
      end
    else
      for i = 1, #lst do
        if i % 2 == 1 then
          res[i] = max
        else
          res[i] = min
        end
      end
    end
    return res
  end
- |2-
      local res = {}
      local len = #lst
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= len do
          if i % 2 == 1 then
              res[i] = min
              min = min + 1
          else
              res[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = table.index_of(lst, min)
      local max_idx = table.index_of(lst, max)
      local min_removed = table.remove_at(lst, min_idx)
      local max_removed = table.remove_at(lst, max_idx)
      table.insert(res, min)
      table.insert(res, max)
      while #lst > 0 do
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          min_idx = table.index_of(lst, min)
          max_idx = table.index_of(lst, max)
          min_removed = table.remove_at(lst, min_idx)
          max_removed = table.remove_at(lst, max_idx)
          table.insert(res, min)
          table.insert(res, max)
      end
      return res
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local idx = 1
      while min_idx <= max_idx do
          res[idx] = lst[min_idx]
          idx = idx + 1
          if min_idx ~= max_idx then
              res[idx] = lst[max_idx]
              idx = idx + 1
          end
          min_idx = min_idx + 1
          max_idx = max_idx - 1
      end
      return res
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_index, max_index = 1, #lst
      local min_found, max_found = false, false
      for i = 1, #lst do
          if not min_found and lst[i] == min then
              min_index = i
              min_found = true
          end
          if not max_found and lst[i] == max then
              max_index = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local min_first = min_index < max_index
      local i = 1
      while i <= #lst do
          if min_first then
              result[i] = min
              min_first = false
          else
              result[i] = max
              min_first = true
          end
          i = i + 1
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 1
      local max_index = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
          elseif v == max then
              max_index = i
          end
      end
      local min_max = min_index > max_index
      local i = 1
      while i <= #lst do
          if min_max then
              res[i] = min
              res[i + 1] = max
              min_max = false
          else
              res[i] = max
              res[i + 1] = min
              min_max = true
          end
          i = i + 2
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, #lst
      local min_cnt, max_cnt = 0, 0
      for i = 1, #lst do
          if lst[i] == min then
              min_cnt = min_cnt + 1
          elseif lst[i] == max then
              max_cnt = max_cnt + 1
          end
      end
      while min_idx <= max_idx do
          if min_cnt > 0 then
              res[min_idx] = min
              min_idx = min_idx + 1
              min_cnt = min_cnt - 1
          end
          if max_cnt > 0 then
              res[max_idx] = max
              max_idx = max_idx - 1
              max_cnt = max_cnt - 1
          end
      end
      return res
  end
- |2-
    local res = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_idx = 1
    local max_idx = 1
    local idx = 1
    while idx <= #lst do
      if idx % 2 == 1 then
        res[idx] = min
        min_idx = min_idx + 1
        min = math.min(unpack(lst, min_idx))
      else
        res[idx] = max
        max_idx = max_idx + 1
        max = math.max(unpack(lst, max_idx))
      end
      idx = idx + 1
    end
    return res
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              result[i] = min
              min = min + 1
          else
              result[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return result
  end
- |2-
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local res = {}
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
          else
              res[i] = max
          end
          i = i + 1
      end
      return res
  end
- |2-
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local res = {}
    local i = 1
    while #lst > 0 do
      if i % 2 == 1 then
        table.insert(res, min)
        table.remove(lst, table.index_of(lst, min))
      else
        table.insert(res, max)
        table.remove(lst, table.index_of(lst, max))
      end
      min = math.min(unpack(lst))
      max = math.max(unpack(lst))
      i = i + 1
    end
    return res
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_index, max_index = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_index = i
          elseif lst[i] == max then
              max_index = i
          end
      end
      local min_flag = true
      for i = 1, #lst do
          if min_flag then
              result[i] = min
              min_flag = false
          else
              result[i] = max
              min_flag = true
          end
      end
      return result
  end
- |2-
    local result = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_index, max_index = 1, #lst
    local min_found, max_found = false, false
    for i = 1, #lst do
      if not min_found and lst[i] == min then
        min_index = i
        min_found = true
      elseif not max_found and lst[i] == max then
        max_index = i
        max_found = true
      end
      if min_found and max_found then
        break
      end
    end
    local min_removed, max_removed = false, false
    for i = 1, #lst do
      if i % 2 == 1 then
        if not min_removed then
          result[i] = min
          min_removed = true
        else
          result[i] = lst[min_index + 1]
          min_index = min_index + 1
        end
      else
        if not max_removed then
          result[i] = max
          max_removed = true
        else
          result[i] = lst[max_index - 1]
          max_index = max_index - 1
        end
      end
    end
    return result
  end
- |2-
      local result = {}
      local min_index, max_index
      local min_value, max_value
      local min_found, max_found
      local i, j
      local n = #lst
      local k = 1
      while k <= n do
          min_found = false
          max_found = false
          for i = 1, n do
              if not result[i] then
                  if not min_found then
                      min_index = i
                      min_value = lst[i]
                      min_found = true
                  elseif lst[i] < min_value then
                      min_index = i
                      min_value = lst[i]
                  end
                  if not max_found then
                      max_index = i
                      max_value = lst[i]
                      max_found = true
                  elseif lst[i] > max_value then
                      max_index = i
                      max_value = lst[i]
                  end
              end
          end
          result[k] = min_value
          k = k + 1
          if k <= n then
              result[k] = max_value
              k = k + 1
          end
      end
      return result
  end
- |2-
    local res = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_idx = table.index_of(lst, min)
    local max_idx = table.index_of(lst, max)
    table.remove(lst, min_idx)
    table.remove(lst, max_idx)
    table.insert(res, min)
    table.insert(res, max)
    while #lst > 0 do
      min = math.min(unpack(lst))
      max = math.max(unpack(lst))
      min_idx = table.index_of(lst, min)
      max_idx = table.index_of(lst, max)
      table.remove(lst, min_idx)
      table.remove(lst, max_idx)
      table.insert(res, min)
      table.insert(res, max)
    end
    return res
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local i = 1
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      while min_idx <= max_idx do
          if i % 2 == 1 then
              res[i] = min_val
              min_idx = min_idx + 1
              min_val = lst[min_idx]
          else
              res[i] = max_val
              max_idx = max_idx - 1
              max_val = lst[max_idx]
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      local min_found = false
      local max_found = false
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
              min_found = true
          end
          if v == max then
              max_idx = i
              max_found = true
          end
          if min_found and max_found then
              break
          end
      end
      local idx = 1
      while idx <= #lst do
          if idx % 2 == 1 then
              table.insert(res, min)
              table.remove(lst, min_idx)
              min = math.min(unpack(lst))
              min_idx = 1
              min_found = false
              for i, v in ipairs(lst) do
                  if v == min then
                      min_idx = i
                      min_found = true
                  end
                  if min_found then
                      break
                  end
              end
          else
              table.insert(res, max)
              table.remove(lst, max_idx)
              max = math.max(unpack(lst))
              max_idx = 1
              max_found = false
              for i, v in ipairs(lst) do
                  if v == max then
                      max_idx = i
                      max_found = true
                  end
                  if max_found then
                      break
                  end
              end
          end
          idx = idx + 1
      end
      return res
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_index, max_index = 1, #lst
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              result[i] = min
              min_index = min_index + 1
              min = math.min(unpack(lst, min_index))
          else
              result[i] = max
              max_index = max_index - 1
              max = math.max(unpack(lst, 1, max_index))
          end
          i = i + 1
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local i = 1
      while min <= max do
          res[i] = min
          i = i + 1
          res[i] = max
          i = i + 1
          min = min + 1
          max = max - 1
      end
      return res
  end
- |2-
    local function min_max(lst)
      local min, max = lst[1], lst[1]
      for _, v in ipairs(lst) do
        if v < min then min = v end
        if v > max then max = v end
      end
      return min, max
    end
- |2-
      local res = {}
      local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i, v in ipairs(lst) do
          if v == min_val then
              min_idx = i
          elseif v == max_val then
              max_idx = i
          end
      end
      local min_idx, max_idx = min_idx, max_idx
      local min_val, max_val = min_val, max_val
      local min_idx_used, max_idx_used = false, false
      local min_val_used, max_val_used = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_val_used then
                  res[i] = min_val
                  min_val_used = true
              else
                  res[i] = lst[min_idx]
                  min_idx_used = true
              end
          else
              if not max_val_used then
                  res[i] = max_val
                  max_val_used = true
              else
                  res[i] = lst[max_idx]
                  max_idx_used = true
              end
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      local min_val = min
      local max_val = max
      local min_found = false
      local max_found = false
      local min_cnt = 0
      local max_cnt = 0
      for i = 1, #lst do
          if lst[i] == min then
              min_cnt = min_cnt + 1
          end
          if lst[i] == max then
              max_cnt = max_cnt + 1
          end
      end
      for i = 1, #lst do
          if lst[i] == min and not min_found then
              min_idx = i
              min_found = true
          end
          if lst[i] == max and not max_found then
              max_idx = i
              max_found = true
          end
      end
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min_val
              min_cnt = min_cnt - 1
              if min_cnt == 0 then
                  min_val = max_val
              end
          else
              res[i] = max_val
              max_cnt = max_cnt - 1
              if max_cnt == 0 then
                  max_val = min_val
              end
          end
      end
      return res
  end
- |2-
    local function min_max(lst)
      local min, max = lst[1], lst[1]
      for _, v in ipairs(lst) do
        if v < min then min = v end
        if v > max then max = v end
      end
      return min, max
    end
- |2-
      local lst_len = #lst
      local result = {}
      local min_index, max_index
      local min_value, max_value
      local min_value_set, max_value_set = false, false
      local min_value_set_count, max_value_set_count = 0, 0
      local i = 1
      while i <= lst_len do
          if not min_value_set then
              min_value, min_index = math.min(unpack(lst))
              min_value_set = true
              min_value_set_count = min_value_set_count + 1
          end
          if not max_value_set then
              max_value, max_index = math.max(unpack(lst))
              max_value_set = true
              max_value_set_count = max_value_set_count + 1
          end
          if min_value_set_count % 2 == 1 then
              table.insert(result, min_value)
              table.remove(lst, min_index)
              min_value_set = false
          else
              table.insert(result, max_value)
              table.remove(lst, max_index)
              max_value_set = false
          end
          i = i + 1
      end
      return result
  end
- |2-
    local result = {}
    local min_index, max_index
    local min_value, max_value
    local min_value_set, max_value_set = false, false
    local i = 1
    while i <= #lst do
      if not min_value_set then
        min_value, min_index = math.min(unpack(lst))
        min_value_set = true
      else
        max_value, max_index = math.max(unpack(lst))
        max_value_set = true
      end
      if min_value_set then
        table.insert(result, min_value)
        table.remove(lst, min_index)
        min_value_set = false
        i = i + 1
      end
      if max_value_set then
        table.insert(result, max_value)
        table.remove(lst, max_index)
        max_value_set = false
        i = i + 1
      end
    end
    return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          end
          if lst[i] == max then
              max_idx = i
          end
      end
      local min_removed = table.remove(lst, min_idx)
      local max_removed = table.remove(lst, max_idx)
      table.insert(res, min_removed)
      table.insert(res, max_removed)
      while #lst > 0 do
          local min = math.min(unpack(lst))
          local max = math.max(unpack(lst))
          local min_idx = 1
          local max_idx = 1
          for i = 1, #lst do
              if lst[i] == min then
                  min_idx = i
              end
              if lst[i] == max then
                  max_idx = i
              end
          end
          local min_removed = table.remove(lst, min_idx)
          local max_removed = table.remove(lst, max_idx)
          table.insert(res, min_removed)
          table.insert(res, max_removed)
      end
      return res
  end
- |2-
    local res = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_index = 1
    local max_index = #lst
    local min_done = false
    local max_done = false
    for i = 1, #lst do
      if i % 2 == 1 then
        if not min_done then
          res[i] = min
          min_done = true
        else
          res[i] = lst[min_index]
          min_index = min_index + 1
        end
      else
        if not max_done then
          res[i] = max
          max_done = true
        else
          res[i] = lst[max_index]
          max_index = max_index - 1
        end
      end
    end
    return res
  end
- |2-
      local result = {}
      local min_value, max_value
      local min_index, max_index
      local min_found, max_found
      local i, j
- |2-
      local res = {}
      local min_idx, max_idx = 1, #lst
      local min, max = lst[min_idx], lst[max_idx]
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] < min then
                  min = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  res[#res + 1] = min
                  min_found = true
                  i = min_idx
              end
          elseif not max_found then
              if lst[i] > max then
                  max = lst[i]
                  max_idx = i
              end
              if i == #lst then
                  res[#res + 1] = max
                  max_found = true
                  i = max_idx
              end
          else
              if lst[i] < min then
                  min = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  res[#res + 1] = min
                  min_found = true
                  i = min_idx
              end
          end
          i = i + 1
      end
      return res
  end
- |2-
      local function strange_sort_list_iter(lst, acc)
          if #lst == 0 then
              return acc
          end
          local min = math.min(unpack(lst))
          local max = math.max(unpack(lst))
          local min_idx = find_first_idx(lst, min)
          local max_idx = find_first_idx(lst, max)
          table.remove(lst, min_idx)
          table.remove(lst, max_idx - 1)
          table.insert(acc, min)
          table.insert(acc, max)
          return strange_sort_list_iter(lst, acc)
      end
      return strange_sort_list_iter(lst, {})
  end
- |2-
      local sorted = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = #lst
      local min_val = min
      local max_val = max
      local min_found = false
      local max_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[min_idx] == min_val then
                  table.insert(sorted, min_val)
                  min_found = true
                  min_val = math.min(unpack(lst))
                  min_idx = min_idx + 1
                  i = i + 1
              else
                  min_idx = min_idx + 1
              end
          elseif not max_found then
              if lst[max_idx] == max_val then
                  table.insert(sorted, max_val)
                  max_found = true
                  max_val = math.max(unpack(lst))
                  max_idx = max_idx - 1
                  i = i + 1
              else
                  max_idx = max_idx - 1
              end
          else
              min_found = false
              max_found = false
          end
      end
      return sorted
  end
- |2-
    local res = {}
    local min_idx, max_idx
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_cnt, max_cnt = 0, 0
    for i, v in ipairs(lst) do
      if v == min then
        min_cnt = min_cnt + 1
        min_idx = i
      elseif v == max then
        max_cnt = max_cnt + 1
        max_idx = i
      end
    end
    local min_idx_cnt, max_idx_cnt = 0, 0
    for i = 1, #lst do
      if i % 2 == 1 then
        if min_idx_cnt < min_cnt then
          min_idx_cnt = min_idx_cnt + 1
          res[i] = min
        else
          res[i] = max
        end
      else
        if max_idx_cnt < max_cnt then
          max_idx_cnt = max_idx_cnt + 1
          res[i] = max
        else
          res[i] = min
        end
      end
    end
    return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      local min_used = false
      local max_used = false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_used then
                  res[i] = min
                  min_used = true
              else
                  res[i] = max
                  max_used = true
              end
          else
              if not max_used then
                  res[i] = max
                  max_used = true
              else
                  res[i] = min
                  min_used = true
              end
          end
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      for i = 1, #lst do
          if not min_found and lst[i] == min then
              min_idx = i
              min_found = true
          end
          if not max_found and lst[i] == max then
              max_idx = i
              max_found = true
          end
      end
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              table.insert(res, lst[min_idx])
              table.remove(lst, min_idx)
          else
              table.insert(res, lst[max_idx])
              table.remove(lst, max_idx)
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min = min + 1
          else
              res[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min_index, max_index = 1, #lst
      local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))
      local min_value_count, max_value_count = 0, 0
      for _, v in ipairs(lst) do
          if v == min_value then
              min_value_count = min_value_count + 1
          elseif v == max_value then
              max_value_count = max_value_count + 1
          end
      end
      local min_value_index, max_value_index = 1, #lst - min_value_count + 1
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min_value
              min_value_index = min_value_index + 1
          else
              res[i] = max_value
              max_value_index = max_value_index + 1
          end
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          end
          if lst[i] == max then
              max_idx = i
          end
      end
      local min_found = false
      local max_found = false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_found then
                  res[i] = min
                  min_found = true
              else
                  res[i] = max
                  max_found = true
              end
          else
              if not max_found then
                  res[i] = max
                  max_found = true
              else
                  res[i] = min
                  min_found = true
              end
          end
      end
      return res
  end
- |2-
      local result = {}
      local min_index, max_index
      local min_value, max_value
      local min_found, max_found
      local i, j
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      elseif lst[i] == max then
        max_idx = i
      end
    end
    local min_idx_found, max_idx_found = false, false
    for i = 1, #lst do
      if i % 2 == 1 then
        if not min_idx_found then
          res[i] = min
          min_idx_found = true
        else
          res[i] = max
          max_idx_found = true
        end
      else
        if not max_idx_found then
          res[i] = max
          max_idx_found = true
        else
          res[i] = min
          min_idx_found = true
        end
      end
    end
    return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      local min_val, max_val = min, max
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min_val
              min_val = lst[min_idx % #lst + 1]
              min_idx = min_idx % #lst + 1
          else
              res[i] = max_val
              max_val = lst[max_idx % #lst + 1]
              max_idx = max_idx % #lst + 1
          end
      end
      return res
  end
- |2-
    local min_index, max_index = 1, #lst
    local result = {}
    local i = 1
    while i <= #lst do
      result[i] = lst[min_index]
      i = i + 1
      if i <= #lst then
        result[i] = lst[max_index]
        i = i + 1
      end
      min_index = min_index + 1
      max_index = max_index - 1
    end
    return result
  end
- |2-
    local sorted = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        sorted[i] = min
        min = min + 1
      else
        sorted[i] = max
        max = max - 1
      end
      i = i + 1
    end
    return sorted
  end
- |2-
    local res = {}
    local n = #lst
    local i = 1
    local j = n
    local k = 1
    while i <= n and j >= 1 do
      res[k] = lst[i]
      res[k + 1] = lst[j]
      i = i + 1
      j = j - 1
      k = k + 2
    end
    return res
  end
- |2-
      local result = {}
      local min_index = 1
      local max_index = #lst
      local min_value = lst[min_index]
      local max_value = lst[max_index]
      local min_found = false
      local max_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              min_value = lst[min_index]
              min_found = true
          end
          if not max_found then
              max_value = lst[max_index]
              max_found = true
          end
          if i % 2 == 1 then
              result[i] = min_value
              min_found = false
              min_index = min_index + 1
          else
              result[i] = max_value
              max_found = false
              max_index = max_index - 1
          end
          i = i + 1
      end
      return result
  end
- |2-
    local res = {}
    local len = #lst
    local i = 1
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_i, max_i = 0, 0
    while i <= len do
      if i % 2 == 1 then
        min_i = min_i + 1
        res[i] = min
        min = math.min(unpack(lst))
      else
        max_i = max_i + 1
        res[i] = max
        max = math.max(unpack(lst))
      end
      i = i + 1
    end
    return res
  end
- |2-
    local result = {}
    local min_val, max_val
    while #lst > 0 do
      min_val = math.min(unpack(lst))
      max_val = math.max(unpack(lst))
      table.insert(result, min_val)
      table.insert(result, max_val)
      table.remove_value(lst, min_val)
      table.remove_value(lst, max_val)
    end
    return result
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_is_next = true
      while min_idx <= max_idx do
          if min_is_next then
              table.insert(res, min_val)
              min_idx = min_idx + 1
              min_val = lst[min_idx]
          else
              table.insert(res, max_val)
              max_idx = max_idx - 1
              max_val = lst[max_idx]
          end
          min_is_next = not min_is_next
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while #lst > 0 do
      if i % 2 == 1 then
        table.insert(res, min)
        table.remove(lst, table.index_of(lst, min))
      else
        table.insert(res, max)
        table.remove(lst, table.index_of(lst, max))
      end
      min, max = math.min(unpack(lst)), math.max(unpack(lst))
      i = i + 1
    end
    return res
  end
- |2-
    local function strange_sort(lst, res)
      if #lst == 0 then
        return res
      end
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_i = table.indexof(lst, min)
      local max_i = table.indexof(lst, max)
      table.remove(lst, min_i)
      table.remove(lst, max_i - 1)
      table.insert(res, min)
      table.insert(res, max)
      return strange_sort(lst, res)
    end
    return strange_sort(lst, {})
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min = min + 1
          else
              res[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] == min then
                  min_idx = i
                  min_found = true
              end
          end
          if not max_found then
              if lst[i] == max then
                  max_idx = i
                  max_found = true
              end
          end
          if min_found and max_found then
              break
          end
          i = i + 1
      end
      local min_val, max_val = min, max
      local min_removed, max_removed = false, false
      for i = 1, #lst do
          if not min_removed then
              res[i] = min_val
              min_removed = true
          elseif not max_removed then
              res[i] = max_val
              max_removed = true
          else
              min_val = math.min(unpack(lst))
              max_val = math.max(unpack(lst))
              min_removed = false
              max_removed = false
              i = i - 1
          end
          table.remove(lst, min_idx)
          table.remove(lst, max_idx - 1)
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] == min then
                  min_idx = i
                  min_found = true
              end
          end
          if not max_found then
              if lst[i] == max then
                  max_idx = i
                  max_found = true
              end
          end
          if min_found and max_found then
              break
          end
          i = i + 1
      end
      local min_removed, max_removed = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_removed then
                  res[i] = min
                  min_removed = true
              else
                  res[i] = table.remove(lst, min_idx)
              end
          else
              if not max_removed then
                  res[i] = max
                  max_removed = true
              else
                  res[i] = table.remove(lst, max_idx)
              end
          end
      end
      return res
  end
- |2-
      local result = {}
      local min_index, max_index = 1, #lst
      local min_value, max_value = lst[min_index], lst[max_index]
      local is_min = true
      for i = 1, #lst do
          if is_min then
              result[i] = min_value
              min_index = min_index + 1
              min_value = lst[min_index]
              is_min = false
          else
              result[i] = max_value
              max_index = max_index - 1
              max_value = lst[max_index]
              is_min = true
          end
      end
      return result
  end
- |2-
    local min, max = math.min, math.max
    local function strange_sort(lst, res)
      if #lst == 0 then return res end
      local m = min(unpack(lst))
      local M = max(unpack(lst))
      local lst_new = {}
      for i = 1, #lst do
        if lst[i] ~= m and lst[i] ~= M then
          lst_new[#lst_new + 1] = lst[i]
        end
      end
      res[#res + 1] = m
      res[#res + 1] = M
      return strange_sort(lst_new, res)
    end
    return strange_sort(lst, {})
  end
- |2-
      local res = {}
      local n = #lst
      local i = 1
      local j = n
      local k = 1
      while i <= n and j >= 1 do
          res[k] = lst[i]
          k = k + 1
          res[k] = lst[j]
          k = k + 1
          i = i + 1
          j = j - 1
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      elseif lst[i] == max then
        max_idx = i
      end
    end
    local min_idx, max_idx = min_idx, max_idx
    local min_val, max_val = min, max
    for i = 1, #lst do
      if i % 2 == 1 then
        res[i] = min_val
        min_val = nil
      else
        res[i] = max_val
        max_val = nil
      end
    end
    for i = 1, #lst do
      if not res[i] then
        if i % 2 == 1 then
          res[i] = max_val
        else
          res[i] = min_val
        end
      end
    end
    return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      local idx = 1
      while idx <= #lst do
          if idx % 2 == 1 then
              res[idx] = min
              min_idx = min_idx + 1
          else
              res[idx] = max
              max_idx = max_idx + 1
          end
          idx = idx + 1
      end
      return res
  end
- |2-
    local res = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        res[i] = min
        table.remove(lst, table.index_of(lst, min))
      else
        res[i] = max
        table.remove(lst, table.index_of(lst, max))
      end
      min = math.min(unpack(lst))
      max = math.max(unpack(lst))
      i = i + 1
    end
    return res
  end
- |2-
    local res = {}
    local min_idx = 1
    local max_idx = #lst
    local min_val = lst[min_idx]
    local max_val = lst[max_idx]
    local min_found = false
    local max_found = false
    local i = 1
    while i <= #lst do
      if not min_found then
        for j = min_idx, max_idx do
          if lst[j] < min_val then
            min_val = lst[j]
            min_idx = j
          end
        end
        res[i] = min_val
        min_found = true
        i = i + 1
      end
      if not max_found then
        for j = max_idx, min_idx, -1 do
          if lst[j] > max_val then
            max_val = lst[j]
            max_idx = j
          end
        end
        res[i] = max_val
        max_found = true
        i = i + 1
      end
      min_found = false
      max_found = false
      min_val = lst[min_idx]
      max_val = lst[max_idx]
    end
    return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      local idx = 1
      while idx <= #lst do
          if idx % 2 == 1 then
              res[idx] = min
              min_idx = min_idx + 1
              min = math.min(unpack(lst, min_idx))
          else
              res[idx] = max
              max_idx = max_idx + 1
              max = math.max(unpack(lst, max_idx))
          end
          idx = idx + 1
      end
      return res
  end
- |2-
    local min, max = math.min, math.max
    local function min_max(t)
      local mn, mx = min(unpack(t)), max(unpack(t))
      local mn_i, mx_i = 0, 0
      for i, v in ipairs(t) do
        if v == mn then mn_i = i end
        if v == mx then mx_i = i end
      end
      return mn, mx, mn_i, mx_i
    end
    local function remove(t, i)
      local r = {}
      for j, v in ipairs(t) do
        if j ~= i then r[#r + 1] = v end
      end
      return r
    end
    local function strange_sort(t)
      if #t == 0 then return {} end
      local mn, mx, mn_i, mx_i = min_max(t)
      local r = {mn, mx}
      local t1, t2 = remove(t, mn_i), remove(t, mx_i)
      local r1, r2 = strange_sort(t1), strange_sort(t2)
      for i = 1, #r1 do r[#r + 1] = r1[i] end
      for i = 1, #r2 do r[#r + 1] = r2[i] end
      return r
    end
    return strange_sort(lst)
  end
- |2-
    local res = {}
    local min_idx = 1
    local max_idx = #lst
    local min_val = lst[min_idx]
    local max_val = lst[max_idx]
    local min_found = false
    local max_found = false
    local i = 1
    while i <= #lst do
      if not min_found then
        for j = min_idx, max_idx do
          if lst[j] < min_val then
            min_val = lst[j]
            min_idx = j
          end
        end
        res[i] = min_val
        min_found = true
        i = i + 1
      end
      if not max_found then
        for j = max_idx, min_idx, -1 do
          if lst[j] > max_val then
            max_val = lst[j]
            max_idx = j
          end
        end
        res[i] = max_val
        max_found = true
        i = i + 1
      end
      min_found = false
      max_found = false
      min_val = lst[min_idx]
      max_val = lst[max_idx]
    end
    return res
  end
- |2-
    if #lst == 0 then
      return {}
    end
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local new_lst = {}
    local i = 1
    while #lst > 0 do
      if i % 2 == 1 then
        table.insert(new_lst, min)
        table.remove(lst, table.index_of(lst, min))
      else
        table.insert(new_lst, max)
        table.remove(lst, table.index_of(lst, max))
      end
      min = math.min(unpack(lst))
      max = math.max(unpack(lst))
      i = i + 1
    end
    return new_lst
  end
- |2-
    local result = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_index, max_index = 1, 1
    local min_found, max_found = false, false
    for i = 1, #lst do
      if lst[i] == min then
        min_index = i
        min_found = true
      end
      if lst[i] == max then
        max_index = i
        max_found = true
      end
      if min_found and max_found then
        break
      end
    end
    local min_first = min_index < max_index
    local min_max_index = min_first and min_index or max_index
    local max_min_index = min_first and max_index or min_index
    local min_max_value = min_first and min or max
    local max_min_value = min_first and max or min
    for i = 1, #lst do
      if i % 2 == 1 then
        result[i] = min_max_value
        min_max_value = lst[min_max_index]
        min_max_index = min_max_index + 1
      else
        result[i] = max_min_value
        max_min_value = lst[max_min_index]
        max_min_index = max_min_index + 1
      end
    end
    return result
  end
- |2-
    local result = {}
    local min_index, max_index
    local min, max
    local i = 1
    while #lst > 0 do
      min_index, max_index = 1, 1
      min, max = lst[1], lst[1]
      for j = 1, #lst do
        if lst[j] < min then
          min = lst[j]
          min_index = j
        end
        if lst[j] > max then
          max = lst[j]
          max_index = j
        end
      end
      if i % 2 == 1 then
        result[i] = min
        table.remove(lst, min_index)
      else
        result[i] = max
        table.remove(lst, max_index)
      end
      i = i + 1
    end
    return result
  end
- |2-
      local result = {}
      local min_index, max_index
      local min_value, max_value
      local min_value_found, max_value_found
      local min_value_found_index, max_value_found_index
      local lst_len = #lst
      local i = 1
      while i <= lst_len do
          min_value_found = false
          max_value_found = false
          min_value_found_index = 0
          max_value_found_index = 0
          for j = 1, lst_len do
              if lst[j] ~= nil then
                  if not min_value_found then
                      min_value_found = true
                      min_value = lst[j]
                      min_value_found_index = j
                  elseif lst[j] < min_value then
                      min_value = lst[j]
                      min_value_found_index = j
                  end
                  if not max_value_found then
                      max_value_found = true
                      max_value = lst[j]
                      max_value_found_index = j
                  elseif lst[j] > max_value then
                      max_value = lst[j]
                      max_value_found_index = j
                  end
              end
          end
          if i % 2 == 1 then
              result[i] = min_value
              lst[min_value_found_index] = nil
          else
              result[i] = max_value
              lst[max_value_found_index] = nil
          end
          i = i + 1
      end
      return result
  end
- |2-
      local res = {}
      local min_index, max_index
      local min_value, max_value
      local min_value_found, max_value_found
      local i = 1
      while #lst > 0 do
          min_value_found = false
          max_value_found = false
          for j, v in ipairs(lst) do
              if not min_value_found then
                  min_value = v
                  min_index = j
                  min_value_found = true
              elseif v < min_value then
                  min_value = v
                  min_index = j
              end
              if not max_value_found then
                  max_value = v
                  max_index = j
                  max_value_found = true
              elseif v > max_value then
                  max_value = v
                  max_index = j
              end
          end
          if i % 2 == 1 then
              res[i] = min_value
              table.remove(lst, min_index)
          else
              res[i] = max_value
              table.remove(lst, max_index)
          end
          i = i + 1
      end
      return res
  end
- |2-
      local result = {}
      local len = #lst
      local min_index, max_index
      local min, max
      local i = 1
      while i <= len do
          min_index, max_index = min_max_index(lst)
          min, max = lst[min_index], lst[max_index]
          if i % 2 == 1 then
              result[i] = min
              lst[min_index] = max
          else
              result[i] = max
              lst[max_index] = min
          end
          i = i + 1
      end
      return result
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local i = 1
      while #lst > 0 do
          if i % 2 == 1 then
              table.insert(result, min)
              table.remove(lst, table.index_of(lst, min))
          else
              table.insert(result, max)
              table.remove(lst, table.index_of(lst, max))
          end
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          i = i + 1
      end
      return result
  end
- |2-
      if #lst == 0 then
          return {}
      end
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 0
      local max_index = 0
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
          elseif v == max then
              max_index = i
          end
      end
      local new_lst = {}
      for i, v in ipairs(lst) do
          if i == min_index then
              new_lst[#new_lst + 1] = min
          elseif i == max_index then
              new_lst[#new_lst + 1] = max
          else
              new_lst[#new_lst + 1] = v
          end
      end
      return strange_sort_list(new_lst)
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      table.insert(res, min)
      table.insert(res, max)
      for i = 1, #lst do
          if i ~= min_idx and i ~= max_idx then
              table.insert(res, lst[i])
          end
      end
      return res
  end
- |2-
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local res = {}
      local i = 1
      while i <= #lst do
          table.insert(res, min)
          table.insert(res, max)
          i = i + 2
      end
      return res
  end
- |2-
    local res = {}
    local min_idx = 1
    local max_idx = #lst
    local min_val = lst[min_idx]
    local max_val = lst[max_idx]
    local min_found = false
    local max_found = false
    local i = 1
    while i <= #lst do
      if not min_found then
        for j = min_idx, max_idx do
          if lst[j] < min_val then
            min_val = lst[j]
            min_idx = j
          end
        end
        res[i] = min_val
        min_found = true
        i = i + 1
      end
      if not max_found then
        for j = max_idx, min_idx, -1 do
          if lst[j] > max_val then
            max_val = lst[j]
            max_idx = j
          end
        end
        res[i] = max_val
        max_found = true
        i = i + 1
      end
      min_found = false
      max_found = false
      min_val = lst[min_idx]
      max_val = lst[max_idx]
    end
    return res
  end
- |2-
    local result = {}
    local min, max
    local min_index, max_index
    local i = 1
    while #lst > 0 do
      min, max = math.min(unpack(lst)), math.max(unpack(lst))
      min_index, max_index = index_of(lst, min), index_of(lst, max)
      if i % 2 == 1 then
        table.insert(result, min)
        table.remove(lst, min_index)
      else
        table.insert(result, max)
        table.remove(lst, max_index)
      end
      i = i + 1
    end
    return result
  end
- |2-
    local function strange_sort(lst, acc)
      if #lst == 0 then
        return acc
      end
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = index_of(lst, min)
      local max_idx = index_of(lst, max)
      local new_lst = remove_at(lst, min_idx)
      new_lst = remove_at(new_lst, max_idx - 1)
      acc[#acc + 1] = min
      acc[#acc + 1] = max
      return strange_sort(new_lst, acc)
    end
    return strange_sort(lst, {})
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = table.index_of(lst, min)
      local max_idx = table.index_of(lst, max)
      local min_removed = table.remove_at(lst, min_idx)
      local max_removed = table.remove_at(lst, max_idx)
      table.insert(res, min)
      table.insert(res, max)
      while #lst > 0 do
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          min_idx = table.index_of(lst, min)
          max_idx = table.index_of(lst, max)
          min_removed = table.remove_at(lst, min_idx)
          max_removed = table.remove_at(lst, max_idx)
          table.insert(res, min)
          table.insert(res, max)
      end
      return res
  end
- |2-
      local res = {}
      local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = lst:index_of(min_val), lst:index_of(max_val)
      local min_idx_used, max_idx_used = false, false
      local i = 1
      while #res < #lst do
          if not min_idx_used and not max_idx_used then
              if i % 2 == 1 then
                  res[#res + 1] = min_val
                  min_idx_used = true
              else
                  res[#res + 1] = max_val
                  max_idx_used = true
              end
          elseif min_idx_used and not max_idx_used then
              res[#res + 1] = max_val
              max_idx_used = true
          elseif not min_idx_used and max_idx_used then
              res[#res + 1] = min_val
              min_idx_used = true
          end
          i = i + 1
      end
      return res
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 1
      local max_index = #lst
      local min_value = min
      local max_value = max
      local min_found = false
      local max_found = false
      local min_value_found = false
      local max_value_found = false
      local min_value_index = 0
      local max_value_index = 0
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] == min then
                  min_found = true
                  min_index = i
              end
          end
          if not max_found then
              if lst[i] == max then
                  max_found = true
                  max_index = i
              end
          end
          if not min_value_found then
              if lst[i] > min_value then
                  min_value_found = true
                  min_value = lst[i]
                  min_value_index = i
              end
          end
          if not max_value_found then
              if lst[i] < max_value then
                  max_value_found = true
                  max_value = lst[i]
                  max_value_index = i
              end
          end
          i = i + 1
      end
      if min_index < max_index then
          result[1] = min
          result[2] = max_value
          result[3] = min_value
          result[4] = max
      else
          result[1] = min
          result[2] = min_value
          result[3] = max_value
          result[4] = max
      end
      return result
  end
- |2-
      local result = {}
      local min_index, max_index
      local min_value, max_value
      local min_value_index, max_value_index
      local min_value_index_found, max_value_index_found
      local i, j
- |2-
    local function strange_sort(lst, res)
      if #lst == 0 then
        return res
      end
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = table.indexof(lst, min)
      local max_idx = table.indexof(lst, max)
      table.remove(lst, min_idx)
      table.remove(lst, max_idx)
      table.insert(res, min)
      table.insert(res, max)
      return strange_sort(lst, res)
    end
    return strange_sort(lst, {})
  end
- |2-
      if #lst == 0 then
          return {}
      end
      local min_val = math.min(unpack(lst))
      local max_val = math.max(unpack(lst))
      local min_idx = table.index_of(lst, min_val)
      local max_idx = table.index_of(lst, max_val)
      local new_lst = {min_val}
      table.remove(lst, min_idx)
      while #lst > 0 do
          local min_val = math.min(unpack(lst))
          local max_val = math.max(unpack(lst))
          local min_idx = table.index_of(lst, min_val)
          local max_idx = table.index_of(lst, max_val)
          table.insert(new_lst, max_val)
          table.remove(lst, max_idx)
          if #lst > 0 then
              table.insert(new_lst, min_val)
              table.remove(lst, min_idx)
          end
      end
      return new_lst
  end
- |2-
      local result = {}
      local min_value, min_index
      local max_value, max_index
      local min_max_flag = true
      local i = 1
      while i <= #lst do
          if min_max_flag then
              min_value, min_index = math.min(unpack(lst))
              result[i] = min_value
              table.remove(lst, min_index)
          else
              max_value, max_index = math.max(unpack(lst))
              result[i] = max_value
              table.remove(lst, max_index)
          end
          min_max_flag = not min_max_flag
          i = i + 1
      end
      return result
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 1
      local max_index = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
          end
          if v == max then
              max_index = i
          end
      end
      local min_flag = true
      local max_flag = true
      for i = 1, #lst do
          if min_flag then
              result[i] = min
              min_flag = false
              max_flag = true
          elseif max_flag then
              result[i] = max
              max_flag = false
              min_flag = true
          end
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          end
          if lst[i] == max then
              max_idx = i
          end
      end
      local idx = 1
      local min_flag = true
      while idx <= #lst do
          if min_flag then
              res[idx] = min
              min_flag = false
              idx = idx + 1
          else
              res[idx] = max
              min_flag = true
              idx = idx + 1
          end
      end
      return res
  end
- |2-
    local result = {}
    local min_index, max_index
    local min_value, max_value
    local min_found, max_found
    local i, j
    local lst_len = #lst
    for i = 1, lst_len do
      min_found = false
      max_found = false
      for j = 1, lst_len do
        if not min_found and lst[j] then
          min_index = j
          min_value = lst[j]
          min_found = true
        elseif lst[j] and lst[j] < min_value then
          min_index = j
          min_value = lst[j]
        end
        if not max_found and lst[j] then
          max_index = j
          max_value = lst[j]
          max_found = true
        elseif lst[j] and lst[j] > max_value then
          max_index = j
          max_value = lst[j]
        end
      end
      if min_found then
        result[#result + 1] = min_value
        lst[min_index] = nil
      end
      if max_found then
        result[#result + 1] = max_value
        lst[max_index] = nil
      end
    end
    return result
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              table.insert(res, min)
              table.remove(lst, table.index_of(lst, min))
          else
              table.insert(res, max)
              table.remove(lst, table.index_of(lst, max))
          end
          min, max = math.min(unpack(lst)), math.max(unpack(lst))
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = 1
      local min_val = lst[1]
      local max_val = lst[1]
      for i, v in ipairs(lst) do
          if v < min_val then
              min_val = v
              min_idx = i
          end
          if v > max_val then
              max_val = v
              max_idx = i
          end
      end
      local min_done = false
      local max_done = false
      while not (min_done and max_done) do
          if not min_done then
              table.insert(res, min_val)
              min_done = true
          end
          if not max_done then
              table.insert(res, max_val)
              max_done = true
          end
          min_val = lst[1]
          max_val = lst[1]
          min_idx = 1
          max_idx = 1
          for i, v in ipairs(lst) do
              if i ~= min_idx and i ~= max_idx then
                  if v < min_val then
                      min_val = v
                      min_idx = i
                  end
                  if v > max_val then
                      max_val = v
                      max_idx = i
                  end
              end
          end
          if min_idx ~= max_idx then
              min_done = false
              max_done = false
          end
      end
      return res
  end
- |2-
      local result = {}
      local min_value, max_value
      local min_index, max_index
      local min_found, max_found
      local i, j
- |2-
    local result = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_index, max_index = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_index = i
      elseif lst[i] == max then
        max_index = i
      end
    end
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        result[i] = min
        min_index = min_index + 1
        min = lst[min_index]
      else
        result[i] = max
        max_index = max_index - 1
        max = lst[max_index]
      end
      i = i + 1
    end
    return result
  end
- |2-
      local result = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      for i = 1, #lst do
          if lst[i] == min and not min_found then
              min_idx = i
              min_found = true
          elseif lst[i] == max and not max_found then
              max_idx = i
              max_found = true
          end
      end
      local min_removed, max_removed = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_removed then
                  result[i] = min
                  min_removed = true
              else
                  result[i] = lst[min_idx + 1]
                  min_idx = min_idx + 1
              end
          else
              if not max_removed then
                  result[i] = max
                  max_removed = true
              else
                  result[i] = lst[max_idx - 1]
                  max_idx = max_idx - 1
              end
          end
      end
      return result
  end
- |2-
    local res = {}
    local min_idx = 1
    local max_idx = #lst
    local min_val = lst[min_idx]
    local max_val = lst[max_idx]
    local min_found = false
    local max_found = false
    local i = 1
    while i <= #lst do
      if not min_found then
        if lst[i] < min_val then
          min_val = lst[i]
          min_idx = i
        end
        if i == #lst then
          min_found = true
          i = 1
        end
      elseif not max_found then
        if lst[i] > max_val then
          max_val = lst[i]
          max_idx = i
        end
        if i == #lst then
          max_found = true
          i = 1
        end
      else
        if i == min_idx then
          table.insert(res, min_val)
          min_found = false
          min_val = max_val
          min_idx = max_idx
        elseif i == max_idx then
          table.insert(res, max_val)
          max_found = false
          max_val = min_val
          max_idx = min_idx
        end
        if i == #lst then
          i = 1
        end
      end
      i = i + 1
    end
    return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, #lst
    local i = 1
    while min_idx <= max_idx do
      if i % 2 == 1 then
        res[i] = min
        min_idx = min_idx + 1
      else
        res[i] = max
        max_idx = max_idx - 1
      end
      i = i + 1
    end
    return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      elseif lst[i] == max then
        max_idx = i
      end
    end
    local min_max = {min, max}
    local min_max_idx = {min_idx, max_idx}
    local min_max_idx_sorted = {}
    for i = 1, #min_max do
      local min_max_idx_sorted_i = math.min(unpack(min_max_idx))
      table.insert(min_max_idx_sorted, min_max_idx_sorted_i)
      table.remove(min_max_idx, min_max_idx_sorted_i)
    end
    for i = 1, #min_max do
      table.insert(res, min_max[i])
      table.remove(lst, min_max_idx_sorted[i])
    end
    if #lst > 0 then
      return strange_sort_list(res)
    else
      return res
    end
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      local min_found, max_found = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_found then
                  res[i] = min
                  min_found = true
              else
                  res[i] = max
                  max_found = true
              end
          else
              if not max_found then
                  res[i] = max
                  max_found = true
              else
                  res[i] = min
                  min_found = true
              end
          end
      end
      return res
  end
- |2-
      local res = {}
      local min_idx, max_idx
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      while #lst > 0 do
          min_idx, max_idx = nil, nil
          for i, v in ipairs(lst) do
              if v == min then
                  min_idx = i
              elseif v == max then
                  max_idx = i
              end
          end
          table.insert(res, min)
          table.insert(res, max)
          table.remove(lst, min_idx)
          table.remove(lst, max_idx)
          min, max = math.min(unpack(lst)), math.max(unpack(lst))
      end
      return res
  end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 1
      local max_index = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_index = i
          end
          if v == max then
              max_index = i
          end
      end
      local min_found = false
      local max_found = false
      for i, v in ipairs(lst) do
          if i == min_index then
              table.insert(result, v)
              min_found = true
          elseif i == max_index then
              table.insert(result, v)
              max_found = true
          end
      end
      if not min_found then
          table.insert(result, min)
      end
      if not max_found then
          table.insert(result, max)
      end
      return result
  end
- |2-
    local res = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_idx = 1
    local max_idx = 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      end
      if lst[i] == max then
        max_idx = i
      end
    end
    local min_flag = true
    for i = 1, #lst do
      if min_flag then
        res[i] = min
        min_flag = false
      else
        res[i] = max
        min_flag = true
      end
    end
    return res
  end
- |2-
      local result = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local min_found_idx = 0
      local max_found_idx = 0
      local min_found_val = 0
      local max_found_val = 0
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] < min_val then
                  min_found = true
                  min_found_idx = i
                  min_found_val = lst[i]
              end
          end
          if not max_found then
              if lst[i] > max_val then
                  max_found = true
                  max_found_idx = i
                  max_found_val = lst[i]
              end
          end
          if min_found and max_found then
              break
          end
          i = i + 1
      end
      if min_found then
          min_idx = min_found_idx
          min_val = min_found_val
      end
      if max_found then
          max_idx = max_found_idx
          max_val = max_found_val
      end
      local j = 1
      while j <= #lst do
          if j % 2 == 1 then
              table.insert(result, min_val)
              min_idx = min_idx + 1
              if min_idx <= #lst then
                  min_val = lst[min_idx]
              end
          else
              table.insert(result, max_val)
              max_idx = max_idx - 1
              if max_idx >= 1 then
                  max_val = lst[max_idx]
              end
          end
          j = j + 1
      end
      return result
  end
- |2-
      local result = {}
      local min_index, max_index = 1, #lst
      local min_value, max_value = lst[min_index], lst[max_index]
      local min_found, max_found = false, false
      local min_value_index, max_value_index = 1, 1
      local min_value_found, max_value_found = false, false
      local min_value_found_index, max_value_found_index = 1, 1
      local min_value_found_index_found, max_value_found_index_found = false, false
      local min_value_found_index_found_index, max_value_found_index_found_index = 1, 1
      local min_value_found_index_found_index_found, max_value_found_index_found_index_found = false, false
      local min_value_found_index_found_index_found_index, max_value_found_index_found_index_found_index = 1, 1
      local min_value_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found = false, false
      local min_value_found_index_found_index_found_index_found_index, max_value_found_index_found_index_found_index_found_index = 1, 1
      local min_value_found_index_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found_index_found = false, false
      local min_value_found_index_found_index_found_index_found_index_found_index, max_value_found_index_found_index_found_index_found_index_found_index = 1, 1
      local min_value_found_index_found_index_found_index_found_index_found_index_found, max_value_found_index_found_index_found_index_found_index_found_index_found = false, false
      local min_value_found_index_found_index_
- |2-
    local result = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_index = 1
    local max_index = 1
    for i = 1, #lst do
      if lst[i] == min then
        min_index = i
      end
      if lst[i] == max then
        max_index = i
      end
    end
    local min_flag = true
    local max_flag = true
    for i = 1, #lst do
      if min_flag then
        result[i] = min
        min_flag = false
        max_flag = true
      elseif max_flag then
        result[i] = max
        max_flag = false
        min_flag = true
      end
    end
    return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i, v in ipairs(lst) do
          if v == min then
              min_idx = i
          elseif v == max then
              max_idx = i
          end
      end
      local idx = 1
      while idx <= #lst do
          if idx % 2 == 1 then
              res[idx] = min
              min_idx = min_idx + 1
              if min_idx <= #lst then
                  min = math.min(unpack(lst, min_idx))
              end
          else
              res[idx] = max
              max_idx = max_idx + 1
              if max_idx <= #lst then
                  max = math.max(unpack(lst, max_idx))
              end
          end
          idx = idx + 1
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_idx = 1
      local max_idx = 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          end
          if lst[i] == max then
              max_idx = i
          end
      end
      if min_idx < max_idx then
          for i = 1, #lst do
              if i % 2 == 1 then
                  res[i] = min
                  min = min + 1
              else
                  res[i] = max
                  max = max - 1
              end
          end
      else
          for i = 1, #lst do
              if i % 2 == 1 then
                  res[i] = max
                  max = max - 1
              else
                  res[i] = min
                  min = min + 1
              end
          end
      end
      return res
  end
- |2-
    local function min_max(lst)
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      return min, max
    end
    local function remove_min_max(lst, min, max)
      local new_lst = {}
      for _, v in ipairs(lst) do
        if v ~= min and v ~= max then
          table.insert(new_lst, v)
        end
      end
      return new_lst
    end
    local function strange_sort(lst)
      if #lst == 0 then
        return {}
      elseif #lst == 1 then
        return lst
      else
        local min, max = min_max(lst)
        local new_lst = remove_min_max(lst, min, max)
        return {min, max} + strange_sort(new_lst)
      end
    end
    return strange_sort(lst)
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_found, max_found = false, false
      local min_cnt, max_cnt = 0, 0
      for i = 1, #lst do
          if lst[i] == min then
              min_cnt = min_cnt + 1
          elseif lst[i] == max then
              max_cnt = max_cnt + 1
          end
      end
      for i = 1, #lst do
          if not min_found then
              if lst[i] == min then
                  min_idx = i
                  min_found = true
              end
          elseif not max_found then
              if lst[i] == max then
                  max_idx = i
                  max_found = true
              end
          end
          if min_found and max_found then
              break
          end
      end
      if min_idx < max_idx then
          for i = 1, #lst do
              if i % 2 == 1 then
                  table.insert(res, min)
              else
                  table.insert(res, max)
              end
          end
      else
          for i = 1, #lst do
              if i % 2 == 1 then
                  table.insert(res, max)
              else
                  table.insert(res, min)
              end
          end
      end
      return res
  end
- |2-
      local function get_min(t)
          local min = math.huge
          for _, v in ipairs(t) do
              if v < min then
                  min = v
              end
          end
          return min
      end
- |2-
      local result = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = table.index_of(lst, min)
      local max_index = table.index_of(lst, max)
      local min_removed = table.remove_at(lst, min_index)
      local max_removed = table.remove_at(lst, max_index)
      table.insert(result, min)
      table.insert(result, max)
      while #lst > 0 do
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          min_index = table.index_of(lst, min)
          max_index = table.index_of(lst, max)
          min_removed = table.remove_at(lst, min_index)
          max_removed = table.remove_at(lst, max_index)
          table.insert(result, min)
          table.insert(result, max)
      end
      return result
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local min_cnt = 0
      local max_cnt = 0
      local i = 1
      while i <= #lst do
          if not min_found then
              if min_val == lst[i] then
                  min_found = true
                  min_cnt = min_cnt + 1
              else
                  min_idx = i
                  min_val = lst[i]
              end
          end
          if not max_found then
              if max_val == lst[i] then
                  max_found = true
                  max_cnt = max_cnt + 1
              else
                  max_idx = i
                  max_val = lst[i]
              end
          end
          if min_found and max_found then
              break
          end
          i = i + 1
      end
      local min_idx_start = min_idx
      local max_idx_start = max_idx
      local min_idx_end = min_idx + min_cnt - 1
      local max_idx_end = max_idx + max_cnt - 1
      local min_idx_cur = min_idx_start
      local max_idx_cur = max_idx_start
      local min_idx_inc = 1
      local max_idx_inc = 1
      local min_idx_end_reached = false
      local max_idx_end_reached = false
      local min_idx_start_reached = false
      local max_idx_start_reached = false
      while i <= #lst do
          if not min_idx_end_reached then
              res[i] = lst[min_idx_cur]
              min_idx_cur = min_idx_cur + min_idx_inc
- |2-
      local function strange_sort_list_iter(lst, res)
          if #lst == 0 then
              return res
          end
          local min_val, min_idx = math.min(unpack(lst))
          local max_val, max_idx = math.max(unpack(lst))
          table.insert(res, min_val)
          table.remove(lst, min_idx)
          if #lst > 0 then
              table.insert(res, max_val)
              table.remove(lst, max_idx)
          end
          return strange_sort_list_iter(lst, res)
      end
      return strange_sort_list_iter(lst, {})
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              if min_val > lst[i] then
                  min_val = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  min_found = true
                  res[#res + 1] = min_val
                  table.remove(lst, min_idx)
              end
          elseif not max_found then
              if max_val < lst[i] then
                  max_val = lst[i]
                  max_idx = i
              end
              if i == #lst then
                  max_found = true
                  res[#res + 1] = max_val
                  table.remove(lst, max_idx)
              end
          else
              min_found = false
              max_found = false
              min_idx = 1
              max_idx = #lst
              min_val = lst[min_idx]
              max_val = lst[max_idx]
              i = 1
          end
          i = i + 1
      end
      return res
  end
- |2-
    local res = {}
    local len = #lst
    local min, max = math.min, math.max
    local min_idx, max_idx = 1, 1
    for i = 1, len do
      if lst[min_idx] > lst[i] then min_idx = i end
      if lst[max_idx] < lst[i] then max_idx = i end
    end
    for i = 1, len do
      if i % 2 == 1 then
        res[i] = lst[min_idx]
        lst[min_idx] = max(unpack(lst))
      else
        res[i] = lst[max_idx]
        lst[max_idx] = min(unpack(lst))
      end
    end
    return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              res[i] = min
              min = min + 1
          else
              res[i] = max
              max = max - 1
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 0, 0
      for i, v in ipairs(lst) do
          if v == min_val then
              min_idx = i
          elseif v == max_val then
              max_idx = i
          end
      end
      local min_idx_used, max_idx_used = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_idx_used then
                  res[i] = min_val
                  min_idx_used = true
              else
                  res[i] = lst[min_idx]
              end
          else
              if not max_idx_used then
                  res[i] = max_val
                  max_idx_used = true
              else
                  res[i] = lst[max_idx]
              end
          end
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local min_idx, max_idx = 1, 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      elseif lst[i] == max then
        max_idx = i
      end
    end
    local min_first = min_idx < max_idx
    local idx = 1
    while #lst > 0 do
      if min_first then
        res[idx] = table.remove(lst, min_idx)
        min_first = false
      else
        res[idx] = table.remove(lst, max_idx)
        min_first = true
      end
      idx = idx + 1
    end
    return res
  end
- |2-
      local res = {}
      local min, max = min_max(lst)
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val, max_val = lst[min_idx], lst[max_idx]
      local min_cnt, max_cnt = 0, 0
      local min_idx, max_idx = min_max_idx(lst)
      local min_val,
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while #lst > 0 do
      if i % 2 == 1 then
        table.insert(res, min)
        table.remove(lst, table.index_of(lst, min))
      else
        table.insert(res, max)
        table.remove(lst, table.index_of(lst, max))
      end
      min, max = math.min(unpack(lst)), math.max(unpack(lst))
      i = i + 1
    end
    return res
  end
- |2-
      local result = {}
      local min_value, max_value, min_index, max_index
      local min_value_found, max_value_found = false, false
      local min_value_index_found, max_value_index_found = false, false
      local min_value_index, max_value_index
      local i = 1
      while i <= #lst do
          if not min_value_found then
              min_value = lst[i]
              min_value_index = i
              min_value_found = true
              min_value_index_found = true
          elseif not max_value_found then
              max_value = lst[i]
              max_value_index = i
              max_value_found = true
              max_value_index_found = true
          else
              if lst[i] < min_value then
                  min_value = lst[i]
                  min_value_index = i
                  min_value_index_found = true
              elseif lst[i] > max_value then
                  max_value = lst[i]
                  max_value_index = i
                  max_value_index_found = true
              end
          end
          if min_value_index_found and max_value_index_found then
              table.insert(result, min_value)
              table.insert(result, max_value)
              min_value_found, max_value_found = false, false
              min_value_index_found, max_value_index_found = false, false
              lst[min_value_index] = nil
              lst[max_value_index] = nil
              i = 1
          else
              i = i + 1
          end
      end
      return result
  end
- |2-
      local result = {}
      local min_value = math.min(unpack(lst))
      local max_value = math.max(unpack(lst))
      local min_index = 1
      local max_index = 1
      local index = 1
      while index <= #lst do
          if index % 2 == 1 then
              result[index] = min_value
              min_index = min_index + 1
          else
              result[index] = max_value
              max_index = max_index + 1
          end
          index = index + 1
      end
      return result
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local i = 1
      while i <= #lst do
          if i % 2 == 1 then
              table.insert(res, min)
              table.remove(lst, table.index_of(lst, min))
          else
              table.insert(res, max)
              table.remove(lst, table.index_of(lst, max))
          end
          min = math.min(unpack(lst))
          max = math.max(unpack(lst))
          i = i + 1
      end
      return res
  end
- |2-
    local result = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_idx = 1
    local max_idx = #lst
    local is_min = true
    for i = 1, #lst do
      if is_min then
        result[i] = min
        min_idx = min_idx + 1
        min = lst[min_idx]
        is_min = false
      else
        result[i] = max
        max_idx = max_idx - 1
        max = lst[max_idx]
        is_min = true
      end
    end
    return result
  end
- |2-
      local res = {}
      local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 0, 0
      local min_found, max_found = false, false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] == min_val then
                  min_idx = i
                  min_found = true
              end
          end
          if not max_found then
              if lst[i] == max_val then
                  max_idx = i
                  max_found = true
              end
          end
          if min_found and max_found then
              break
          end
          i = i + 1
      end
      local min_idx_found, max_idx_found = false, false
      for i = 1, #lst do
          if i % 2 == 1 then
              if not min_idx_found then
                  res[i] = min_val
                  min_idx_found = true
              else
                  res[i] = max_val
                  max_idx_found = true
              end
          else
              if not max_idx_found then
                  res[i] = max_val
                  max_idx_found = true
              else
                  res[i] = min_val
                  min_idx_found = true
              end
          end
      end
      return res
  end
- |2-
    local res = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_idx = 1
    local max_idx = 1
    for i = 1, #lst do
      if lst[i] == min then
        min_idx = i
      end
      if lst[i] == max then
        max_idx = i
      end
    end
    local i = 1
    while i <= #lst do
      if i % 2 == 1 then
        res[i] = min
        min_idx = min_idx + 1
        min = math.min(unpack(lst, min_idx))
      else
        res[i] = max
        max_idx = max_idx + 1
        max = math.max(unpack(lst, max_idx))
      end
      i = i + 1
    end
    return res
  end
- |2-
      local result = {}
      local min_index, max_index
      local min_value, max_value
      local min_value_set, max_value_set
      local i
- |2-
    local sorted = {}
    local min = math.min(unpack(lst))
    local max = math.max(unpack(lst))
    local min_index = table.index_of(lst, min)
    local max_index = table.index_of(lst, max)
    local min_removed = table.remove_at(lst, min_index)
    local max_removed = table.remove_at(lst, max_index)
    table.insert(sorted, min)
    table.insert(sorted, max)
    table.insert(sorted, unpack(lst))
    return sorted
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] < min_val then
                  min_val = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  min_found = true
                  i = 1
              end
          elseif not max_found then
              if lst[i] > max_val then
                  max_val = lst[i]
                  max_idx = i
              end
              if i == #lst then
                  max_found = true
                  i = 1
              end
          else
              if min_idx < max_idx then
                  res[#res + 1] = min_val
                  res[#res + 1] = max_val
                  lst[min_idx] = nil
                  lst[max_idx] = nil
                  min_found = false
                  max_found = false
                  i = 1
              else
                  res[#res + 1] = max_val
                  res[#res + 1] = min_val
                  lst[min_idx] = nil
                  lst[max_idx] = nil
                  min_found = false
                  max_found = false
                  i = 1
              end
          end
          i = i + 1
      end
      return res
  end
- |2-
    local res = {}
    local min, max = math.min(unpack(lst)), math.max(unpack(lst))
    local i = 1
    while #lst > 0 do
      if i % 2 == 1 then
        table.insert(res, table.remove(lst, lst[min]))
      else
        table.insert(res, table.remove(lst, lst[max]))
      end
      i = i + 1
    end
    return res
  end
- |2-
      local res = {}
      local i = 1
      while #lst > 0 do
          local min = math.min(unpack(lst))
          local max = math.max(unpack(lst))
          if i % 2 == 1 then
              res[i] = min
              table.remove(lst, table.index_of(lst, min))
          else
              res[i] = max
              table.remove(lst, table.index_of(lst, max))
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      local min_lst, max_lst = {}, {}
      for i, v in ipairs(lst) do
          if v == min then
              min_lst[min_idx] = i
              min_idx = min_idx + 1
          elseif v == max then
              max_lst[max_idx] = i
              max_idx = max_idx + 1
          end
      end
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = lst[min_lst[(i + 1) // 2]]
          else
              res[i] = lst[max_lst[i // 2]]
          end
      end
      return res
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local min_idx_found = false
      local max_idx_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] < min_val then
                  min_val = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  min_found = true
                  min_idx_found = true
              end
          end
          if not max_found then
              if lst[i] > max_val then
                  max_val = lst[i]
                  max_idx = i
              end
              if i == #lst then
                  max_found = true
                  max_idx_found = true
              end
          end
          if min_found and max_found then
              if min_idx_found then
                  table.insert(res, min_val)
                  min_found = false
                  min_idx_found = false
                  min_val = lst[max_idx + 1]
                  min_idx = max_idx + 1
              elseif max_idx_found then
                  table.insert(res, max_val)
                  max_found = false
                  max_idx_found = false
                  max_val = lst[min_idx + 1]
                  max_idx = min_idx + 1
              end
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min_idx = 1
      local max_idx = #lst
      local min_val = lst[min_idx]
      local max_val = lst[max_idx]
      local min_found = false
      local max_found = false
      local i = 1
      while i <= #lst do
          if not min_found then
              if lst[i] < min_val then
                  min_val = lst[i]
                  min_idx = i
              end
              if i == #lst then
                  min_found = true
                  res[#res + 1] = min_val
                  table.remove(lst, min_idx)
              end
          elseif not max_found then
              if lst[i] > max_val then
                  max_val = lst[i]
                  max_idx = i
              end
              if i == #lst then
                  max_found = true
                  res[#res + 1] = max_val
                  table.remove(lst, max_idx)
              end
          else
              min_found = false
              max_found = false
              i = 0
          end
          i = i + 1
      end
      return res
  end
- |2-
      local res = {}
      local min = math.min(unpack(lst))
      local max = math.max(unpack(lst))
      local min_index = 1
      local max_index = #lst
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min
              min_index = min_index + 1
          else
              res[i] = max
              max_index = max_index - 1
          end
      end
      return res
  end
- |2-
      local res = {}
      local min, max = math.min(unpack(lst)), math.max(unpack(lst))
      local min_idx, max_idx = 1, 1
      for i = 1, #lst do
          if lst[i] == min then
              min_idx = i
          elseif lst[i] == max then
              max_idx = i
          end
      end
      for i = 1, #lst do
          if i % 2 == 1 then
              res[i] = min
              lst[min_idx] = max
          else
              res[i] = max
              lst[max_idx] = min
          end
          min, max = math.min(unpack(lst)), math.max(unpack(lst))
          min_idx, max_idx = 1, 1
          for j = 1, #lst do
              if lst[j] == min then
                  min_idx = j
              elseif lst[j] == max then
                  max_idx = j
              end
          end
      end
      return res
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
