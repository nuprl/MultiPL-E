name: HumanEval_70_strange_sort_list
language: lua
prompt: "-- Given table of integers, return table in strange order.\n-- Strange sorting,\
  \ is when you start with the minimum value,\n-- then maximum of the remaining integers,\
  \ then minimum and so on.\n-- >>> strange_sort_list({1, 2, 3, 4})\n-- {1, 4, 2,\
  \ 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5, 5, 5}\n-- >>> strange_sort_list({})\n\
  -- {}\nlocal function strange_sort_list(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
  \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5,\
  \ 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}),\
  \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3,\
  \ 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5,\
  \ -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["    local res = {}\n    local n = #lst\n    local i = 1\n    local\
    \ j = n\n    local k = 1\n    while i <= n and j >= 1 do\n        if k % 2 ==\
    \ 1 then\n            res[k] = lst[i]\n            i = i + 1\n        else\n \
    \           res[k] = lst[j]\n            j = j - 1\n        end\n        k = k\
    \ + 1\n    end\n    return res\nend", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local i = 1\n    while #lst\
    \ > 0 do\n        if i % 2 == 1 then\n            table.insert(res, min)\n   \
    \         table.remove(lst, table.index_of(lst, min))\n        else\n        \
    \    table.insert(res, max)\n            table.remove(lst, table.index_of(lst,\
    \ max))\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        i = i + 1\n    end\n    return res\nend", "    if #lst == 0 then\n  \
    \      return {}\n    end\n    local min = math.min(unpack(lst))\n    local max\
    \ = math.max(unpack(lst))\n    local min_index = 1\n    local max_index = 1\n\
    \    local result = {}\n    for i, v in ipairs(lst) do\n        if v == min then\n\
    \            min_index = i\n        elseif v == max then\n            max_index\
    \ = i\n        end\n    end\n    local min_removed = table.remove(lst, min_index)\n\
    \    local max_removed = table.remove(lst, max_index - 1)\n    table.insert(result,\
    \ min_removed)\n    table.insert(result, max_removed)\n    return table.concat({result,\
    \ strange_sort_list(lst)})\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local min_cnt = 0\n    local max_cnt = 0\n    while min_cnt < #lst\
    \ and max_cnt < #lst do\n        table.insert(res, min)\n        min_cnt = min_cnt\
    \ + 1\n        if min_cnt < #lst then\n            table.insert(res, max)\n  \
    \          max_cnt = max_cnt + 1\n        end\n    end\n    return res\nend",
  "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n  local max\
    \ = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n  for i =\
    \ 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n    end\n    if lst[i]\
    \ == max then\n      max_idx = i\n    end\n  end\n  local min_flag = true\n  local\
    \ max_flag = true\n  for i = 1, #lst do\n    if min_flag then\n      res[i] =\
    \ min\n      min_flag = false\n      max_flag = true\n    elseif max_flag then\n\
    \      res[i] = max\n      max_flag = false\n      min_flag = true\n    end\n\
    \  end\n  return res\nend", "    local res = {}\n    local min_idx, max_idx =\
    \ 1, #lst\n    local min_val, max_val = lst[min_idx], lst[max_idx]\n    local\
    \ min_found, max_found = false, false\n    local min_cnt, max_cnt = 0, 0\n   \
    \ for _, v in ipairs(lst) do\n        if v == min_val then\n            min_cnt\
    \ = min_cnt + 1\n        elseif v == max_val then\n            max_cnt = max_cnt\
    \ + 1\n        end\n    end\n    while min_idx <= max_idx do\n        if not min_found\
    \ then\n            if min_cnt > 0 then\n                res[#res + 1] = min_val\n\
    \                min_cnt = min_cnt - 1\n            else\n                min_found\
    \ = true\n            end\n        end\n        if not max_found then\n      \
    \      if max_cnt > 0 then\n                res[#res + 1] = max_val\n        \
    \        max_cnt = max_cnt - 1\n            else\n                max_found =\
    \ true\n            end\n        end\n        if min_found and max_found then\n\
    \            min_idx = min_idx + 1\n            max_idx = max_idx - 1\n      \
    \      min_val, max_val = lst[min_idx], lst[max_idx]\n            min_found, max_found\
    \ = false, false\n            min_cnt, max_cnt = 0, 0\n            for _, v in\
    \ ipairs(lst) do\n                if v == min_val then\n                    min_cnt\
    \ = min_cnt + 1\n                elseif v == max_val then\n                  \
    \  max_cnt = max_cnt + 1\n                end\n            end\n        end\n\
    \    end\n    return res\nend", "  local min, max = math.min, math.max\n  local\
    \ function strange_sort(lst, res)\n    if #lst == 0 then return res end\n    local\
    \ m = min(unpack(lst))\n    local M = max(unpack(lst))\n    local i, j = table.find(lst,\
    \ m), table.find(lst, M)\n    table.remove(lst, i)\n    table.remove(lst, j -\
    \ 1)\n    table.insert(res, m)\n    table.insert(res, M)\n    return strange_sort(lst,\
    \ res)\n  end\n  return strange_sort(lst, {})\nend", "    local result = {}\n\
    \    local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, 1\n    local min_found, max_found = false,\
    \ false\n    for i, v in ipairs(lst) do\n        if v == min_value then\n    \
    \        min_index = i\n            min_found = true\n        elseif v == max_value\
    \ then\n            max_index = i\n            max_found = true\n        end\n\
    \        if min_found and max_found then\n            break\n        end\n   \
    \ end\n    local min_list, max_list = {}, {}\n    for i, v in ipairs(lst) do\n\
    \        if i == min_index then\n            table.insert(result, v)\n       \
    \ elseif i == max_index then\n            table.insert(result, v)\n        elseif\
    \ i < min_index then\n            table.insert(min_list, v)\n        elseif i\
    \ > max_index then\n            table.insert(max_list, v)\n        end\n    end\n\
    \    if #min_list > 0 then\n        local min_result = strange_sort_list(min_list)\n\
    \        for i, v in ipairs(min_result) do\n            table.insert(result, v)\n\
    \        end\n    end\n    if #max_list > 0 then\n        local max_result = strange_sort_list(max_list)\n\
    \        for i, v in ipairs(max_result) do\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "    local res = {}\n    local\
    \ min_idx = 1\n    local max_idx = 1\n    for i = 1, #lst do\n        if lst[i]\
    \ < lst[min_idx] then\n            min_idx = i\n        end\n        if lst[i]\
    \ > lst[max_idx] then\n            max_idx = i\n        end\n    end\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_idx\
    \ = 1\n    local max_idx = 1\n    for i = 1, #lst do\n        if lst[i] < lst[min_idx]\
    \ then\n            min_idx = i\n        end\n        if lst[i] > lst[max_idx]\
    \ then\n            max_idx = i\n        end\n    end\n    local min_val = lst[min_idx]\n\
    \    local max_val = lst[max_idx]\n    local min_idx = 1\n    local max_idx =\
    \ 1\n    for i = 1, #lst do\n        if lst[i] < lst[min_idx] then\n         \
    \   min_idx = i\n        end\n        if lst[i] > lst[max_idx] then\n        \
    \    max_idx = i\n        end\n    end\n    local min_val = lst[min_idx]\n   \
    \ local max_val = lst[max_idx]\n    local min_idx = 1\n    local max_idx = 1\n\
    \    for i = 1, #lst do\n        if lst[i] < lst[min_idx] then\n            min_idx\
    \ = i\n        end\n        if lst[i] > lst[max_idx] then\n            max_idx\
    \ = i\n        end\n    end\n    local min_val = lst[min_idx]\n    local max_val\
    \ = lst[max_idx]\n    local min_idx = 1\n    local max_idx = 1\n    for i = 1,\
    \ #", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    table.remove(lst, min_idx)\n\
    \    table.remove(lst, max_idx - 1)\n    res[1] = min\n    res[2] = max\n    local\
    \ i = 3\n    while #lst > 0 do\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_idx, max_idx = 1, 1\n        for j = 1, #lst do\n            if lst[j]\
    \ == min then\n                min_idx = j\n            elseif lst[j] == max then\n\
    \                max_idx = j\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        res[i] = min\n   \
    \     res[i + 1] = max\n        i = i + 2\n    end\n    return res\nend", "  local\
    \ res = {}\n  local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i, v in ipairs(lst) do\n    if v == min_val\
    \ then min_idx = i end\n    if v == max_val then max_idx = i end\n  end\n  local\
    \ min_idx_found, max_idx_found = false, false\n  for i = 1, #lst do\n    if i\
    \ % 2 == 1 then\n      if not min_idx_found then\n        res[i] = min_val\n \
    \       min_idx_found = true\n      else\n        res[i] = max_val\n        max_idx_found\
    \ = true\n      end\n    else\n      if not max_idx_found then\n        res[i]\
    \ = max_val\n        max_idx_found = true\n      else\n        res[i] = min_val\n\
    \        min_idx_found = true\n      end\n    end\n  end\n  for i, v in ipairs(lst)\
    \ do\n    if i ~= min_idx and i ~= max_idx then\n      table.insert(res, v)\n\
    \    end\n  end\n  return res\nend", "  local res = {}\n  local min_idx = 1\n\
    \  local max_idx = 1\n  local min_val = lst[1]\n  local max_val = lst[1]\n  local\
    \ min_found = false\n  local max_found = false\n  for i, v in ipairs(lst) do\n\
    \    if v < min_val then\n      min_val = v\n      min_idx = i\n      min_found\
    \ = true\n    end\n    if v > max_val then\n      max_val = v\n      max_idx =\
    \ i\n      max_found = true\n    end\n  end\n  if min_found then\n    table.insert(res,\
    \ min_val)\n    table.remove(lst, min_idx)\n  end\n  if max_found then\n    table.insert(res,\
    \ max_val)\n    table.remove(lst, max_idx)\n  end\n  if #lst > 0 then\n    return\
    \ strange_sort_list(lst)\n  else\n    return res\n  end\nend", "    local res\
    \ = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local min_removed = false\n\
    \    local max_removed = false\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            if not min_removed then\n                table.insert(res,\
    \ min)\n                min_removed = true\n            else\n               \
    \ table.insert(res, lst[min_idx + 1])\n                min_idx = min_idx + 1\n\
    \            end\n        else\n            if not max_removed then\n        \
    \        table.insert(res, max)\n                max_removed = true\n        \
    \    else\n                table.insert(res, lst[max_idx - 1])\n             \
    \   max_idx = max_idx - 1\n            end\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local min_idx = 1\n    local max_idx = 1\n    local\
    \ min_val = lst[1]\n    local max_val = lst[1]\n    local min_found = false\n\
    \    local max_found = false\n    local len = #lst\n    local i = 1\n    while\
    \ i <= len do\n        if not min_found then\n            if lst[i] < min_val\
    \ then\n                min_val = lst[i]\n                min_idx = i\n      \
    \      end\n            if i == len then\n                min_found = true\n \
    \               i = 1\n            end\n        elseif not max_found then\n  \
    \          if lst[i] > max_val then\n                max_val = lst[i]\n      \
    \          max_idx = i\n            end\n            if i == len then\n      \
    \          max_found = true\n                i = 1\n            end\n        else\n\
    \            if min_idx < max_idx then\n                table.insert(res, min_val)\n\
    \                table.insert(res, max_val)\n                table.remove(lst,\
    \ min_idx)\n                table.remove(lst, max_idx - 1)\n            else\n\
    \                table.insert(res, max_val)\n                table.insert(res,\
    \ min_val)\n                table.remove(lst, max_idx)\n                table.remove(lst,\
    \ min_idx - 1)\n            end\n            min_found = false\n            max_found\
    \ = false\n            min_val = lst[1]\n            max_val = lst[1]\n      \
    \      min_idx = 1\n            max_idx = 1\n            len = #lst\n        \
    \    i = 1\n        end\n        i = i + 1\n    end\n    return res\nend", " \
    \ local result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_idx, max_idx = min_idx, max_idx\n  local min_val, max_val\
    \ = min, max\n  local min_found, max_found = true, true\n  for i = 1, #lst do\n\
    \    if min_found then\n      result[i] = min_val\n      min_found = false\n \
    \   elseif max_found then\n      result[i] = max_val\n      max_found = false\n\
    \    end\n    if not min_found then\n      if min_idx == #lst then\n        min_found\
    \ = true\n      else\n        min_idx = min_idx + 1\n        min_val = lst[min_idx]\n\
    \      end\n    end\n    if not max_found then\n      if max_idx == 1 then\n \
    \       max_found = true\n      else\n        max_idx = max_idx - 1\n        max_val\
    \ = lst[max_idx]\n      end\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    local min_val, max_val\n    local min_idx, max_idx\n    local\
    \ min_found, max_found\n    local i, j", "    local result = {}\n    local min_idx\
    \ = 1\n    local max_idx = #lst\n    local min_val = lst[min_idx]\n    local max_val\
    \ = lst[max_idx]\n    local min_found = false\n    local max_found = false\n \
    \   local min_idx_found = false\n    local max_idx_found = false\n    local i\
    \ = 1\n    local j = #lst\n    local k = 1\n    local l = #lst\n    local min_val_found\
    \ = false\n    local max_val_found = false\n    local min_idx_found = false\n\
    \    local max_idx_found = false\n    local min_val_found = false\n    local max_val_found\
    \ = false\n    local min_idx_found = false\n    local max_idx_found = false\n\
    \    local min_val_found = false\n    local max_val_found = false\n    local min_idx_found\
    \ = false\n    local max_idx_found = false\n    local min_val_found = false\n\
    \    local max_val_found = false\n    local min_idx_found = false\n    local max_idx_found\
    \ = false\n    local min_val_found = false\n    local max_val_found = false\n\
    \    local min_idx_found = false\n    local max_idx_found = false\n    local min_val_found\
    \ = false\n    local max_val_found = false\n    local min_idx_found = false\n\
    \    local max_idx_found = false\n    local min_val_found = false\n    local max_val_found\
    \ = false\n    local min_idx_found = false\n    local max_idx_found = false\n\
    \    local min_val_found = false\n    local max_val_found = false\n    local min_idx_found\
    \ = false\n    local max_idx_found = false\n    local min_val_found = false\n\
    \    local max_val_found = false\n    local min_idx_found = false\n    local max_idx_found\
    \ = false\n    local min_val_found = false\n   ", "  local result = {}\n  local\
    \ min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx,\
    \ max_idx = 1, 1\n  local min_found, max_found = false, false\n  local i = 1\n\
    \  while i <= #lst do\n    if not min_found then\n      if lst[i] == min_val then\n\
    \        min_idx = i\n        min_found = true\n      end\n    end\n    if not\
    \ max_found then\n      if lst[i] == max_val then\n        max_idx = i\n     \
    \   max_found = true\n      end\n    end\n    if min_found and max_found then\n\
    \      break\n    end\n    i = i + 1\n  end\n  local min_idx_found, max_idx_found\
    \ = false, false\n  local j = 1\n  while j <= #lst do\n    if not min_idx_found\
    \ then\n      if j ~= min_idx then\n        table.insert(result, lst[j])\n   \
    \   else\n        min_idx_found = true\n      end\n    end\n    if not max_idx_found\
    \ then\n      if j ~= max_idx then\n        table.insert(result, lst[j])\n   \
    \   else\n        max_idx_found = true\n      end\n    end\n    if min_idx_found\
    \ and max_idx_found then\n      break\n    end\n    j = j + 1\n  end\n  return\
    \ result\nend", "    local function min_max(lst)\n        local min, max = lst[1],\
    \ lst[1]\n        for _, v in ipairs(lst) do\n            if v < min then\n  \
    \              min = v\n            elseif v > max then\n                max =\
    \ v\n            end\n        end\n        return min, max\n    end", "  local\
    \ function strange_sort_list_iter(lst, acc)\n    if #lst == 0 then\n      return\
    \ acc\n    else\n      local min_val, min_idx = math.min(unpack(lst))\n      local\
    \ max_val, max_idx = math.max(unpack(lst))\n      local min_removed = table.remove(lst,\
    \ min_idx)\n      local max_removed = table.remove(lst, max_idx)\n      return\
    \ strange_sort_list_iter(lst, acc .. min_removed .. max_removed)\n    end\n  end\n\
    \  return strange_sort_list_iter(lst, \"\")\nend", "    local sorted = {}\n  \
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_index,\
    \ max_index = 1, 1\n    for i, v in ipairs(lst) do\n        if v == min then\n\
    \            min_index = i\n        elseif v == max then\n            max_index\
    \ = i\n        end\n    end\n    local min_first = min_index < max_index\n   \
    \ local i = 1\n    while #lst > 0 do\n        if min_first then\n            table.insert(sorted,\
    \ table.remove(lst, min_index))\n            min_first = false\n        else\n\
    \            table.insert(sorted, table.remove(lst, max_index))\n            min_first\
    \ = true\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_index, max_index = 1, 1\n        for i, v in ipairs(lst) do\n   \
    \         if v == min then\n                min_index = i\n            elseif\
    \ v == max then\n                max_index = i\n            end\n        end\n\
    \    end\n    return sorted\nend", "  local res = {}\n  local min, max = min_max(lst)\n\
    \  local min_idx, max_idx = 1, #lst\n  local min_flag = true\n  for i = 1, #lst\
    \ do\n    if min_flag then\n      res[i] = min\n      min_idx = min_idx + 1\n\
    \      min = lst[min_idx]\n    else\n      res[i] = max\n      max_idx = max_idx\
    \ - 1\n      max = lst[max_idx]\n    end\n    min_flag = not min_flag\n  end\n\
    \  return res\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    for i = 1, #lst\
    \ do\n        if lst[i] == min then\n            min_idx = i\n        elseif lst[i]\
    \ == max then\n            max_idx = i\n        end\n    end\n    local min_found,\
    \ max_found = false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            if not min_found then\n                res[i] = min\n           \
    \     min_found = true\n            else\n                res[i] = max\n     \
    \           max_found = true\n            end\n        else\n            if not\
    \ max_found then\n                res[i] = max\n                max_found = true\n\
    \            else\n                res[i] = min\n                min_found = true\n\
    \            end\n        end\n    end\n    return res\nend", "  local res = {}\n\
    \  local min, max = min_max(lst)\n  local min_idx, max_idx = min_max_idx(lst)\n\
    \  local min_removed, max_removed = false, false\n  local i = 1\n  while i <=\
    \ #lst do\n    if not min_removed and i % 2 == 1 then\n      res[i] = min\n  \
    \    min_removed = true\n    elseif not max_removed and i % 2 == 0 then\n    \
    \  res[i] = max\n      max_removed = true\n    else\n      if min_removed then\n\
    \        min, min_idx = min_max(lst, min_idx)\n      else\n        max, max_idx\
    \ = min_max(lst, max_idx)\n      end\n      res[i] = min\n      min_removed =\
    \ true\n    end\n    i = i + 1\n  end\n  return res\nend", "  local res = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx,\
    \ max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx\
    \ = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n  end\n  local\
    \ min_max = min_idx < max_idx\n  for i = 1, #lst do\n    if min_max then\n   \
    \   res[i] = lst[min_idx]\n      min_idx = min_idx + 1\n      min_max = false\n\
    \    else\n      res[i] = lst[max_idx]\n      max_idx = max_idx - 1\n      min_max\
    \ = true\n    end\n  end\n  return res\nend", "    local result = {}\n    local\
    \ min_idx, max_idx = 1, #lst\n    local min_val, max_val = lst[min_idx], lst[max_idx]\n\
    \    local min_found, max_found = false, false\n    local i = 1\n    while i <=\
    \ #lst do\n        if not min_found then\n            if lst[i] < min_val then\n\
    \                min_idx = i\n                min_val = lst[i]\n            end\n\
    \            if i == #lst then\n                min_found = true\n           \
    \     result[#result + 1] = min_val\n                table.remove(lst, min_idx)\n\
    \                min_idx, max_idx = 1, #lst\n                min_val, max_val\
    \ = lst[min_idx], lst[max_idx]\n                i = 0\n            end\n     \
    \   elseif not max_found then\n            if lst[i] > max_val then\n        \
    \        max_idx = i\n                max_val = lst[i]\n            end\n    \
    \        if i == #lst then\n                max_found = true\n               \
    \ result[#result + 1] = max_val\n                table.remove(lst, max_idx)\n\
    \                min_idx, max_idx = 1, #lst\n                min_val, max_val\
    \ = lst[min_idx], lst[max_idx]\n                i = 0\n            end\n     \
    \   end\n        i = i + 1\n    end\n    return result\nend", "    local function\
    \ strange_sort_list_helper(lst, acc)\n        if #lst == 0 then\n            return\
    \ acc\n        else\n            local min = math.min(unpack(lst))\n         \
    \   local max = math.max(unpack(lst))\n            local min_index = table.index_of(lst,\
    \ min)\n            local max_index = table.index_of(lst, max)\n            table.remove(lst,\
    \ min_index)\n            table.remove(lst, max_index - 1)\n            table.insert(acc,\
    \ min)\n            table.insert(acc, max)\n            return strange_sort_list_helper(lst,\
    \ acc)\n        end\n    end\n    return strange_sort_list_helper(lst, {})\nend",
  "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_found, max_found =\
    \ false, false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n         \
    \   if not min_found then\n                res[i] = min\n                min_found\
    \ = true\n            else\n                res[i] = max\n                max_found\
    \ = true\n            end\n        else\n            if not max_found then\n \
    \               res[i] = max\n                max_found = true\n            else\n\
    \                res[i] = min\n                min_found = true\n            end\n\
    \        end\n    end\n    return res\nend", "    local res = {}\n    local min\
    \ = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local i\
    \ = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            table.insert(res,\
    \ min)\n            table.remove(lst, table.index_of(lst, min))\n        else\n\
    \            table.insert(res, max)\n            table.remove(lst, table.index_of(lst,\
    \ max))\n        end\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        i = i + 1\n    end\n    return res\nend", "  local res = {}\n  local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx\
    \ = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n\
    \    elseif lst[i] == max then\n      max_idx = i\n    end\n  end\n  if min_idx\
    \ < max_idx then\n    for i = 1, #lst do\n      if i % 2 == 1 then\n        res[i]\
    \ = min\n      else\n        res[i] = max\n      end\n    end\n  else\n    for\
    \ i = 1, #lst do\n      if i % 2 == 1 then\n        res[i] = max\n      else\n\
    \        res[i] = min\n      end\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local min_lst, max_lst = {},\
    \ {}\n    for i = 1, #lst do\n        if i ~= min_idx and i ~= max_idx then\n\
    \            table.insert(min_lst, lst[i])\n            table.insert(max_lst,\
    \ lst[i])\n        end\n    end\n    table.sort(min_lst)\n    table.sort(max_lst,\
    \ function(a, b) return a > b end)\n    local min_idx, max_idx = 1, 1\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            if i == 1 then\n   \
    \             res[i] = min\n            else\n                res[i] = min_lst[min_idx]\n\
    \                min_idx = min_idx + 1\n            end\n        else\n      \
    \      if i == 2 then\n                res[i] = max\n            else\n      \
    \          res[i] = max_lst[max_idx]\n                max_idx = max_idx + 1\n\
    \            end\n        end\n    end\n    return res\nend", "    local function\
    \ sort_func(a, b)\n        return a < b\n    end\n    local function sort_func_rev(a,\
    \ b)\n        return a > b\n    end\n    local function sort_func_swap(a, b)\n\
    \        return a > b\n    end\n    local function sort_func_swap_rev(a, b)\n\
    \        return a < b\n    end\n    local function sort_func_swap_rev_rev(a, b)\n\
    \        return a > b\n    end\n    local function sort_func_swap_rev_rev_rev(a,\
    \ b)\n        return a < b\n    end\n    local function sort_func_swap_rev_rev_rev_rev(a,\
    \ b)\n        return a > b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a < b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a > b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a < b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a > b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a < b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a > b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a < b\n    end\n    local function sort_func_swap_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(a,\
    \ b)\n        return a > b\n    end", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local min_done = false\n    local max_done = false\n    for i = 1,\
    \ #lst do\n        if i % 2 == 1 then\n            if not min_done then\n    \
    \            res[i] = min\n                min_done = true\n            else\n\
    \                res[i] = max\n                max_done = true\n            end\n\
    \        else\n            if not max_done then\n                res[i] = max\n\
    \                max_done = true\n            else\n                res[i] = min\n\
    \                min_done = true\n            end\n        end\n    end\n    return\
    \ res\nend", "  local result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = 1, #lst\n  local min_found, max_found = false,\
    \ false\n  for i = 1, #lst do\n    if lst[i] == min and not min_found then\n \
    \     min_index = i\n      min_found = true\n    elseif lst[i] == max and not\
    \ max_found then\n      max_index = i\n      max_found = true\n    end\n  end\n\
    \  local min_lst, max_lst = {}, {}\n  for i = 1, #lst do\n    if i ~= min_index\
    \ then\n      table.insert(min_lst, lst[i])\n    end\n    if i ~= max_index then\n\
    \      table.insert(max_lst, lst[i])\n    end\n  end\n  local min_max, max_min\
    \ = false, false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      if not min_max\
    \ then\n        table.insert(result, min)\n        min_max = true\n      else\n\
    \        table.insert(result, max)\n        max_min = true\n      end\n    else\n\
    \      if min_max then\n        table.insert(result, max_lst[#max_lst])\n    \
    \    table.remove(max_lst, #max_lst)\n        min_max = false\n      else\n  \
    \      table.insert(result, min_lst[#min_lst])\n        table.remove(min_lst,\
    \ #min_lst)\n        max_min = false\n      end\n    end\n  end\n  return result\n\
    end", "    local res = {}\n    local min = math.min(unpack(lst))\n    local max\
    \ = math.max(unpack(lst))\n    local min_idx = table.index_of(lst, min)\n    local\
    \ max_idx = table.index_of(lst, max)\n    local i = 1\n    while #lst > 0 do\n\
    \        if i % 2 == 1 then\n            table.insert(res, min)\n            table.remove(lst,\
    \ min_idx)\n            min = math.min(unpack(lst))\n            min_idx = table.index_of(lst,\
    \ min)\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ max_idx)\n            max = math.max(unpack(lst))\n            max_idx = table.index_of(lst,\
    \ max)\n        end\n        i = i + 1\n    end\n    return res\nend", "    local\
    \ res = {}\n    local n = #lst\n    local i = 1\n    local j = n\n    local k\
    \ = 1\n    while i <= n and j >= 1 do\n        if k % 2 == 1 then\n          \
    \  res[k] = lst[i]\n            i = i + 1\n        else\n            res[k] =\
    \ lst[j]\n            j = j - 1\n        end\n        k = k + 1\n    end\n   \
    \ return res\nend", "    local res = {}\n    local min_val, max_val\n    local\
    \ min_idx, max_idx\n    local min_found, max_found\n    local i, j\n    local\
    \ len = #lst\n    for i = 1, len do\n        min_found = false\n        max_found\
    \ = false\n        for j = 1, len do\n            if not min_found and not max_found\
    \ then\n                if lst[j] ~= nil then\n                    min_val = lst[j]\n\
    \                    min_idx = j\n                    max_val = lst[j]\n     \
    \               max_idx = j\n                    min_found = true\n          \
    \          max_found = true\n                end\n            elseif not min_found\
    \ then\n                if lst[j] ~= nil and lst[j] < min_val then\n         \
    \           min_val = lst[j]\n                    min_idx = j\n              \
    \  end\n            elseif not max_found then\n                if lst[j] ~= nil\
    \ and lst[j] > max_val then\n                    max_val = lst[j]\n          \
    \          max_idx = j\n                end\n            end\n        end\n  \
    \      if i % 2 == 1 then\n            res[i] = min_val\n            lst[min_idx]\
    \ = nil\n        else\n            res[i] = max_val\n            lst[max_idx]\
    \ = nil\n        end\n    end\n    return res\nend", "  local res = {}\n  local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local i = 1\n  while\
    \ #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res, min)\n      table.remove(lst,\
    \ table.index_of(lst, min))\n    else\n      table.insert(res, max)\n      table.remove(lst,\
    \ table.index_of(lst, max))\n    end\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    i = i + 1\n  end\n  return res\nend", "    local res = {}\n    local min,\
    \ max = nil, nil\n    local min_idx, max_idx = nil, nil\n    local i = 1\n   \
    \ while i <= #lst do\n        min, max = nil, nil\n        for j, v in ipairs(lst)\
    \ do\n            if min == nil or v < min then\n                min = v\n   \
    \             min_idx = j\n            end\n            if max == nil or v > max\
    \ then\n                max = v\n                max_idx = j\n            end\n\
    \        end\n        if i % 2 == 1 then\n            table.insert(res, min)\n\
    \            table.remove(lst, min_idx)\n        else\n            table.insert(res,\
    \ max)\n            table.remove(lst, max_idx)\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n\
    \  local min_val = min\n  local max_val = max\n  local min_found = false\n  local\
    \ max_found = false\n  local min_found_idx = 0\n  local max_found_idx = 0\n  local\
    \ min_found_val = 0\n  local max_found_val = 0\n  local min_found_idx_2 = 0\n\
    \  local max_found_idx_2 = 0\n  local min_found_val_2 = 0\n  local max_found_val_2\
    \ = 0\n  local min_found_2 = false\n  local max_found_2 = false\n  local min_found_idx_3\
    \ = 0\n  local max_found_idx_3 = 0\n  local min_found_val_3 = 0\n  local max_found_val_3\
    \ = 0\n  local min_found_3 = false\n  local max_found_3 = false\n  local min_found_idx_4\
    \ = 0\n  local max_found_idx_4 = 0\n  local min_found_val_4 = 0\n  local max_found_val_4\
    \ = 0\n  local min_found_4 = false\n  local max_found_4 = false\n  local min_found_idx_5\
    \ = 0\n  local max_found_idx_5 = 0\n  local min_found_val_5 = 0\n  local max_found_val_5\
    \ = 0\n  local min_found_5 = false\n  local max_found_5 = false\n  local min_found_idx_6\
    \ = 0\n  local max_found_idx_6 = 0\n  local min_found_val_6 = 0\n  local max_found_val_6\
    \ = 0\n  local min_found_6 = false\n  local max_found_6 = false\n  local min_found_idx_7\
    \ = 0\n  local max_found_idx_7 = 0\n  local min_found_val", "  local sorted_list\
    \ = {}\n  local min_value, max_value\n  local min_index, max_index\n  local min_found,\
    \ max_found\n  local i, j\n  local length = #lst\n  for i = 1, length do\n   \
    \ min_found = false\n    max_found = false\n    for j = 1, length do\n      if\
    \ not min_found and not max_found then\n        if not sorted_list[j] then\n \
    \         min_value = lst[j]\n          min_index = j\n          min_found = true\n\
    \        end\n      elseif min_found and not max_found then\n        if not sorted_list[j]\
    \ then\n          if lst[j] < min_value then\n            min_value = lst[j]\n\
    \            min_index = j\n          elseif lst[j] > min_value then\n       \
    \     max_value = lst[j]\n            max_index = j\n            max_found = true\n\
    \          end\n        end\n      elseif min_found and max_found then\n     \
    \   if not sorted_list[j] then\n          if lst[j] < min_value then\n       \
    \     min_value = lst[j]\n            min_index = j\n          elseif lst[j] >\
    \ max_value then\n            max_value = lst[j]\n            max_index = j\n\
    \          end\n        end\n      end\n    end\n    if i % 2 == 1 then\n    \
    \  sorted_list[min_index] = true\n      table.insert(sorted_list, min_value)\n\
    \    else\n      sorted_list[max_index] = true\n      table.insert(sorted_list,\
    \ max_value)\n    end\n  end\n  return sorted_list\nend", "  local res = {}\n\
    \  local min, max = min_max(lst)\n  local min_idx, max_idx = min_max_idx(lst)\n\
    \  local min_removed, max_removed = remove_idx(lst, min_idx), remove_idx(lst,\
    \ max_idx)\n  if min == max then\n    return lst\n  else\n    res[1] = min\n \
    \   res[2] = max\n    return concat(res, strange_sort_list(concat(min_removed,\
    \ max_removed)))\n  end\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, 1\n    local min_found,\
    \ max_found = false, false\n    for i = 1, #lst do\n        if lst[i] == min and\
    \ not min_found then\n            min_idx = i\n            min_found = true\n\
    \        elseif lst[i] == max and not max_found then\n            max_idx = i\n\
    \            max_found = true\n        end\n    end\n    local min_lst, max_lst\
    \ = {}, {}\n    for i = 1, #lst do\n        if i ~= min_idx then\n           \
    \ table.insert(min_lst, lst[i])\n        end\n        if i ~= max_idx then\n \
    \           table.insert(max_lst, lst[i])\n        end\n    end\n    for i = 1,\
    \ #lst do\n        if i % 2 == 1 then\n            table.insert(res, min)\n  \
    \      else\n            table.insert(res, max)\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = table.index_of(lst, min),\
    \ table.index_of(lst, max)\n    local min_removed, max_removed = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_removed then\n  \
    \          res[i] = min\n            min_removed = true\n            i = i + 1\n\
    \        end\n        if not max_removed then\n            res[i] = max\n    \
    \        max_removed = true\n            i = i + 1\n        end\n        if min_removed\
    \ and max_removed then\n            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            min_idx, max_idx = table.index_of(lst, min), table.index_of(lst,\
    \ max)\n            min_removed, max_removed = false, false\n        end\n   \
    \ end\n    return res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = #lst\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 then\n      res[i] = min\n      min_idx\
    \ = min_idx + 1\n    else\n      res[i] = max\n      max_idx = max_idx - 1\n \
    \   end\n  end\n  return res\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n\
    \    if lst[i] == min then\n      min_idx = i\n    elseif lst[i] == max then\n\
    \      max_idx = i\n    end\n  end\n  local i = 1\n  while i <= #lst do\n    if\
    \ i % 2 == 1 then\n      res[i] = min\n      min_idx = min_idx + 1\n      min\
    \ = lst[min_idx]\n    else\n      res[i] = max\n      max_idx = max_idx - 1\n\
    \      max = lst[max_idx]\n    end\n    i = i + 1\n  end\n  return res\nend",
  "    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_index, max_index = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n\
    \            min_index = i\n            min_found = true\n        elseif lst[i]\
    \ == max and not max_found then\n            max_index = i\n            max_found\
    \ = true\n        end\n    end\n    local min_table, max_table = {}, {}\n    for\
    \ i = 1, #lst do\n        if i ~= min_index then\n            table.insert(min_table,\
    \ lst[i])\n        end\n        if i ~= max_index then\n            table.insert(max_table,\
    \ lst[i])\n        end\n    end\n    local min_max, max_min = false, false\n \
    \   for i = 1, #lst do\n        if i % 2 == 1 then\n            table.insert(result,\
    \ min)\n            min_max = true\n        else\n            table.insert(result,\
    \ max)\n            max_min = true\n        end\n        if min_max then\n   \
    \         min = math.min(unpack(min_table))\n            for j = 1, #min_table\
    \ do\n                if min_table[j] == min then\n                    table.remove(min_table,\
    \ j)\n                    break\n                end\n            end\n      \
    \      min_max = false\n        elseif max_min then\n            max = math.max(unpack(max_table))\n\
    \            for j = 1, #max_table do\n                if max_table[j] == max\
    \ then\n                    table.remove(max_table, j)\n                    break\n\
    \                end\n            end\n            max_min = false\n        end\n\
    \    end\n    return result\nend", "    local result = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    local min_removed = false\n    local max_removed = false\n    for\
    \ i, v in ipairs(lst) do\n        if i == min_index and not min_removed then\n\
    \            table.insert(result, v)\n            min_removed = true\n       \
    \ elseif i == max_index and not max_removed then\n            table.insert(result,\
    \ v)\n            max_removed = true\n        end\n    end\n    local remaining\
    \ = {}\n    for i, v in ipairs(lst) do\n        if i ~= min_index and i ~= max_index\
    \ then\n            table.insert(remaining, v)\n        end\n    end\n    if #remaining\
    \ > 0 then\n        local remaining_sorted = strange_sort_list(remaining)\n  \
    \      for i, v in ipairs(remaining_sorted) do\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    local sorted = {}\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_val = lst[min_idx]\n\
    \    local max_val = lst[max_idx]\n    local min_found = false\n    local max_found\
    \ = false\n    local i = 1\n    while i <= #lst do\n        if not min_found then\n\
    \            if lst[i] < min_val then\n                min_val = lst[i]\n    \
    \            min_idx = i\n            end\n            if i == #lst then\n   \
    \             min_found = true\n                table.insert(sorted, min_val)\n\
    \                table.remove(lst, min_idx)\n                i = 1\n         \
    \   end\n        elseif not max_found then\n            if lst[i] > max_val then\n\
    \                max_val = lst[i]\n                max_idx = i\n            end\n\
    \            if i == #lst then\n                max_found = true\n           \
    \     table.insert(sorted, max_val)\n                table.remove(lst, max_idx)\n\
    \                i = 1\n            end\n        else\n            min_found =\
    \ false\n            max_found = false\n            min_val = lst[1]\n       \
    \     max_val = lst[1]\n            i = 1\n        end\n        i = i + 1\n  \
    \  end\n    return sorted\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = #lst\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min\n            min_idx = min_idx + 1\n            min = math.min(unpack(lst,\
    \ min_idx))\n        else\n            res[i] = max\n            max_idx = max_idx\
    \ - 1\n            max = math.max(unpack(lst, 1, max_idx))\n        end\n    end\n\
    \    return res\nend", "    local function strange_sort_list_iter(lst, res)\n\
    \        if #lst == 0 then\n            return res\n        end\n        local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n        table.remove_value(lst,\
    \ min)\n        table.remove_value(lst, max)\n        return strange_sort_list_iter(lst,\
    \ table.join(res, {min, max}))\n    end\n    return strange_sort_list_iter(lst,\
    \ {})\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_found, max_found = false, false\n  for i = 1, #lst do\n  \
    \  if i % 2 == 1 then\n      if not min_found then\n        res[i] = min\n   \
    \     min_found = true\n      else\n        res[i] = max\n        max_found =\
    \ true\n      end\n    else\n      if not max_found then\n        res[i] = max\n\
    \        max_found = true\n      else\n        res[i] = min\n        min_found\
    \ = true\n      end\n    end\n  end\n  return res\nend", "    local res = {}\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_remaining = table.remove_at(lst, min_idx)\n    local max_remaining\
    \ = table.remove_at(lst, max_idx)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    while #min_remaining > 0 do\n        local min = math.min(unpack(min_remaining))\n\
    \        local max = math.max(unpack(max_remaining))\n        local min_idx =\
    \ table.index_of(min_remaining, min)\n        local max_idx = table.index_of(max_remaining,\
    \ max)\n        local min_remaining_new = table.remove_at(min_remaining, min_idx)\n\
    \        local max_remaining_new = table.remove_at(max_remaining, max_idx)\n \
    \       table.insert(res, min)\n        table.insert(res, max)\n        min_remaining\
    \ = min_remaining_new\n        max_remaining = max_remaining_new\n    end\n  \
    \  return res\nend", "    local function strange_sort_list_iter(lst, res)\n  \
    \      if #lst == 0 then\n            return res\n        end\n        local min\
    \ = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n       \
    \ local min_idx = table.index_of(lst, min)\n        local max_idx = table.index_of(lst,\
    \ max)\n        table.remove(lst, min_idx)\n        table.remove(lst, max_idx\
    \ - 1)\n        table.insert(res, min)\n        table.insert(res, max)\n     \
    \   return strange_sort_list_iter(lst, res)\n    end\n    return strange_sort_list_iter(lst,\
    \ {})\nend", "  local res = {}\n  local min, max = min_max(lst)\n  local min_idx,\
    \ max_idx = 1, #lst\n  while min_idx <= max_idx do\n    res[min_idx] = min\n \
    \   res[max_idx] = max\n    min_idx = min_idx + 1\n    max_idx = max_idx - 1\n\
    \  end\n  return res\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1\
    \ then\n      res[#res + 1] = min\n      lst[min] = nil\n      min = math.min(unpack(lst))\n\
    \    else\n      res[#res + 1] = max\n      lst[max] = nil\n      max = math.max(unpack(lst))\n\
    \    end\n    i = i + 1\n  end\n  return res\nend", "    local res = {}\n    local\
    \ min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local\
    \ min_idx = 1\n    local max_idx = 1\n    local min_found = false\n    local max_found\
    \ = false\n    for i, v in ipairs(lst) do\n        if v == min then\n        \
    \    min_idx = i\n            min_found = true\n        end\n        if v == max\
    \ then\n            max_idx = i\n            max_found = true\n        end\n \
    \       if min_found and max_found then\n            break\n        end\n    end\n\
    \    if min_idx < max_idx then\n        for i = 1, #lst, 2 do\n            res[i]\
    \ = min\n            res[i + 1] = max\n        end\n    else\n        for i =\
    \ 1, #lst, 2 do\n            res[i] = max\n            res[i + 1] = min\n    \
    \    end\n    end\n    return res\nend", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx =\
    \ 1, 1\n    for i = 1, #lst do\n        if lst[i] == min then\n            min_idx\
    \ = i\n        elseif lst[i] == max then\n            max_idx = i\n        end\n\
    \    end\n    local min_val, max_val = min, max\n    local min_idx, max_idx =\
    \ min_idx, max_idx\n    for i = 1, #lst do\n        if i % 2 == 1 then\n     \
    \       res[i] = min_val\n            min_val = lst[min_idx % #lst + 1]\n    \
    \        min_idx = min_idx % #lst + 1\n        else\n            res[i] = max_val\n\
    \            max_val = lst[max_idx % #lst + 1]\n            max_idx = max_idx\
    \ % #lst + 1\n        end\n    end\n    return res\nend", "    local res = {}\n\
    \    local len = #lst\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_i, max_i = table.find(lst, min), table.find(lst, max)\n    local\
    \ min_used, max_used = false, false\n    for i = 1, len do\n        if i % 2 ==\
    \ 1 then\n            if not min_used then\n                res[i] = min\n   \
    \             min_used = true\n            else\n                res[i] = lst[min_i\
    \ + 1]\n                min_i = min_i + 1\n            end\n        else\n   \
    \         if not max_used then\n                res[i] = max\n               \
    \ max_used = true\n            else\n                res[i] = lst[max_i - 1]\n\
    \                max_i = max_i - 1\n            end\n        end\n    end\n  \
    \  return res\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_i, max_i = 1, 1\n  while #res < #lst do\n\
    \    if #res % 2 == 0 then\n      res[#res + 1] = min\n      min_i = min_i + 1\n\
    \      min = math.min(unpack(lst, min_i))\n    else\n      res[#res + 1] = max\n\
    \      max_i = max_i + 1\n      max = math.max(unpack(lst, max_i))\n    end\n\
    \  end\n  return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = table.index_of(lst,\
    \ min)\n    local max_idx = table.index_of(lst, max)\n    local min_removed =\
    \ table.remove_at(lst, min_idx)\n    local max_removed = table.remove_at(lst,\
    \ max_idx)\n    table.insert(res, min)\n    table.insert(res, max)\n    while\
    \ #lst > 0 do\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        min_idx = table.index_of(lst, min)\n        max_idx = table.index_of(lst,\
    \ max)\n        min_removed = table.remove_at(lst, min_idx)\n        max_removed\
    \ = table.remove_at(lst, max_idx)\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n    end\n    return res\nend", "    local result = {}\n    local min_index,\
    \ max_index\n    local min_value, max_value\n    local min_value_set, max_value_set\
    \ = false, false\n    local i = 1\n    while i <= #lst do\n        if not min_value_set\
    \ then\n            min_value = math.min(unpack(lst))\n            min_index =\
    \ table.index_of(lst, min_value)\n            min_value_set = true\n        elseif\
    \ not max_value_set then\n            max_value = math.max(unpack(lst))\n    \
    \        max_index = table.index_of(lst, max_value)\n            max_value_set\
    \ = true\n        end\n        if min_value_set and max_value_set then\n     \
    \       table.insert(result, lst[min_index])\n            table.insert(result,\
    \ lst[max_index])\n            table.remove(lst, min_index)\n            table.remove(lst,\
    \ max_index - 1)\n            min_value_set, max_value_set = false, false\n  \
    \          i = i + 2\n        end\n    end\n    return result\nend", "  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_found, max_found = false, false\n  for i = 1, #lst do\n  \
    \  if i % 2 == 1 then\n      if not min_found then\n        res[i] = min\n   \
    \     min_found = true\n      else\n        res[i] = lst[min_idx + 1]\n      \
    \  min_idx = min_idx + 1\n      end\n    else\n      if not max_found then\n \
    \       res[i] = max\n        max_found = true\n      else\n        res[i] = lst[max_idx\
    \ - 1]\n        max_idx = max_idx - 1\n      end\n    end\n  end\n  return res\n\
    end", "    local result = {}\n    local max_idx = #lst\n    local min_idx = 1\n\
    \    local min_val = math.min(unpack(lst))\n    local max_val = math.max(unpack(lst))\n\
    \    local min_found = false\n    local max_found = false\n    local min_idx_found\
    \ = 0\n    local max_idx_found = 0\n    local min_val_found = 0\n    local max_val_found\
    \ = 0\n    local min_idx_found_prev = 0\n    local max_idx_found_prev = 0\n  \
    \  local min_val_found_prev = 0\n    local max_val_found_prev = 0\n    local min_idx_found_prev_prev\
    \ = 0\n    local max_idx_found_prev_prev = 0\n    local min_val_found_prev_prev\
    \ = 0\n    local max_val_found_prev_prev = 0\n    local i = 1\n    while i <=\
    \ #lst do\n        for j = 1, #lst do\n            if lst[j] == min_val and not\
    \ min_found then\n                min_idx_found = j\n                min_val_found\
    \ = min_val\n                min_found = true\n            end\n            if\
    \ lst[j] == max_val and not max_found then\n                max_idx_found = j\n\
    \                max_val_found = max_val\n                max_found = true\n \
    \           end\n        end\n        if min_idx_found_prev_prev ~= min_idx_found\
    \ then\n            table.insert(result, min_val_found)\n            min_idx_found_prev_prev\
    \ = min_idx_found_prev\n            min_idx_found_prev = min_idx_found\n     \
    \       min_val_found_prev_prev = min_val_found_prev\n            min_val_found_prev\
    \ = min_val_found\n            min_found = false\n            min_val = math.max(unpack(lst))\n\
    \            min_idx = min_idx_found\n            i = i + 1\n        elseif max_idx",
  "  local result = {}\n  local min_value, max_value = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_index, max_index = lst:index(min_value), lst:index(max_value)\n \
    \ local min_found, max_found = false, false\n  local min_value_count, max_value_count\
    \ = 0, 0\n  local min_value_index, max_value_index = 0, 0\n  local min_value_indexes,\
    \ max_value_indexes = {}, {}\n  for i, v in ipairs(lst) do\n    if v == min_value\
    \ then\n      min_value_count = min_value_count + 1\n      min_value_indexes[min_value_count]\
    \ = i\n    elseif v == max_value then\n      max_value_count = max_value_count\
    \ + 1\n      max_value_indexes[max_value_count] = i\n    end\n  end\n  local i\
    \ = 1\n  while i <= #lst do\n    if not min_found then\n      result[i] = min_value\n\
    \      min_found = true\n      min_value_index = min_value_index + 1\n      if\
    \ min_value_index > min_value_count then\n        min_found = false\n      end\n\
    \    elseif not max_found then\n      result[i] = max_value\n      max_found =\
    \ true\n      max_value_index = max_value_index + 1\n      if max_value_index\
    \ > max_value_count then\n        max_found = false\n      end\n    end\n    i\
    \ = i + 1\n  end\n  return result\nend", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_index, max_index\
    \ = 1, 1\n    for i = 1, #lst do\n        if lst[i] == min then\n            min_index\
    \ = i\n        elseif lst[i] == max then\n            max_index = i\n        end\n\
    \    end\n    local min_used, max_used = false, false\n    for i = 1, #lst do\n\
    \        if i % 2 == 1 then\n            if not min_used then\n              \
    \  res[i] = min\n                min_used = true\n            else\n         \
    \       res[i] = max\n                max_used = true\n            end\n     \
    \   else\n            if not max_used then\n                res[i] = max\n   \
    \             max_used = true\n            else\n                res[i] = min\n\
    \                min_used = true\n            end\n        end\n    end\n    return\
    \ res\nend", "    local lst_len = #lst\n    if lst_len == 0 then\n        return\
    \ {}\n    end\n    local sorted_lst = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index_of(min_val), lst:index_of(max_val)\n\
    \    local min_val_count, max_val_count = lst:count(min_val), lst:count(max_val)\n\
    \    local min_val_idx, max_val_idx = 1, 1\n    local i = 1\n    while i <= lst_len\
    \ do\n        if min_val_idx <= min_val_count then\n            sorted_lst[i]\
    \ = min_val\n            min_val_idx = min_val_idx + 1\n            i = i + 1\n\
    \        end\n        if max_val_idx <= max_val_count then\n            sorted_lst[i]\
    \ = max_val\n            max_val_idx = max_val_idx + 1\n            i = i + 1\n\
    \        end\n    end\n    return sorted_lst\nend", "  local result = {}\n  local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_index,\
    \ max_index = 1, 1\n  local min_value, max_value = min, max\n  local min_found,\
    \ max_found = false, false\n  local min_found_index, max_found_index = 1, 1\n\
    \  local min_found_value, max_found_value = min, max\n  local min_found_index_value,\
    \ max_found_index_value = min, max\n  local min_found_index_value_index, max_found_index_value_index\
    \ = 1, 1\n  local min_found_index_value_index_value, max_found_index_value_index_value\
    \ = min, max\n  local min_found_index_value_index_value_index, max_found_index_value_index_value_index\
    \ = 1, 1\n  local min_found_index_value_index_value_index_value, max_found_index_value_index_value_index_value\
    \ = min, max\n  local min_found_index_value_index_value_index_value_index, max_found_index_value_index_value_index_value_index\
    \ = 1, 1\n  local min_found_index_value_index_value_index_value_index_value, max_found_index_value_index_value_index_value_index_value\
    \ = min, max\n  local min_found_index_value_index_value_index_value_index_value_index,\
    \ max_found_index_value_index_value_index_value_index_value_index = 1, 1\n  local\
    \ min_found_index_value_index_value_index_value_index_value_index_value, max_found_index_value_index_value_index_value_index_value_index_value\
    \ = min, max\n  local min_found_index_value_index_value_index_value_index_value_index_value_index,\
    \ max_found_index_value_index_value_index_value_index_value_index_value_index\
    \ = 1, 1\n", "  local res = {}\n  local min, max = min_max(lst)\n  local min_idx,\
    \ max_idx = min_max_idx(lst)\n  local min_val, max_val = lst[min_idx], lst[max_idx]\n\
    \  local min_cnt, max_cnt = 0, 0\n  local min_done, max_done = false, false\n\
    \  local i = 1\n  while i <= #lst do\n    if not min_done then\n      res[i] =\
    \ min_val\n      min_cnt = min_cnt + 1\n      if min_cnt == min then\n       \
    \ min_done = true\n      end\n    elseif not max_done then\n      res[i] = max_val\n\
    \      max_cnt = max_cnt + 1\n      if max_cnt == max then\n        max_done =\
    \ true\n      end\n    end\n    i = i + 1\n  end\n  return res\nend", "    local\
    \ res = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 0, 0\n    local min_found, max_found = false, false\n\
    \    local i = 1\n    while i <= #lst do\n        if not min_found then\n    \
    \        if lst[i] == min_val then\n                min_idx = i\n            \
    \    min_found = true\n            end\n        end\n        if not max_found\
    \ then\n            if lst[i] == max_val then\n                max_idx = i\n \
    \               max_found = true\n            end\n        end\n        if min_found\
    \ and max_found then\n            break\n        end\n        i = i + 1\n    end\n\
    \    local i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n       \
    \     res[i] = min_val\n            table.remove(lst, min_idx)\n            min_val\
    \ = math.min(unpack(lst))\n            min_idx = 0\n            min_found = false\n\
    \            local j = 1\n            while j <= #lst do\n                if not\
    \ min_found then\n                    if lst[j] == min_val then\n            \
    \            min_idx = j\n                        min_found = true\n         \
    \           end\n                end\n                if min_found then\n    \
    \                break\n                end\n                j = j + 1\n     \
    \       end\n        else\n            res[i] = max_val\n            table.remove(lst,\
    \ max_idx)\n            max_val = math.max(unpack(lst))\n            max_idx =\
    \ 0\n            max_found = false\n            local j = 1\n            while\
    \ j <= #lst do\n                if not max_found then\n                    if\
    \ lst[j] == max_val then\n                        max_idx = j\n              \
    \          max_found = true\n                    end\n                end\n  \
    \              if max_found then\n                    break\n                end\n\
    \                j = j + 1\n            end\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "  local result = {}\n  local min, max = min_max(lst)\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      result[i] = min[min_idx]\n      min_idx = min_idx + 1\n    else\n     \
    \ result[i] = max[max_idx]\n      max_idx = max_idx + 1\n    end\n  end\n  return\
    \ result\nend", "    local res = {}\n    local min, max = min_max(lst)\n    local\
    \ min_idx, max_idx = min_max_idx(lst)\n    local min_removed, max_removed = remove_idx(lst,\
    \ min_idx), remove_idx(lst, max_idx)\n    local min_removed_min, min_removed_max\
    \ = min_max(min_removed)\n    local max_removed_min, max_removed_max = min_max(max_removed)\n\
    \    local min_removed_min_idx, min_removed_max_idx = min_max_idx(min_removed)\n\
    \    local max_removed_min_idx, max_removed_max_idx = min_max_idx(max_removed)\n\
    \    local min_removed_min_removed, min_removed_max_removed = remove_idx(min_removed,\
    \ min_removed_min_idx), remove_idx(min_removed, min_removed_max_idx)\n    local\
    \ max_removed_min_removed, max_removed_max_removed = remove_idx(max_removed, max_removed_min_idx),\
    \ remove_idx(max_removed, max_removed_max_idx)\n    local min_removed_min_removed_min,\
    \ min_removed_min_removed_max = min_max(min_removed_min_removed)\n    local min_removed_max_removed_min,\
    \ min_removed_max_removed_max = min_max(min_removed_max_removed)\n    local max_removed_min_removed_min,\
    \ max_removed_min_removed_max = min_max(max_removed_min_removed)\n    local max_removed_max_removed_min,\
    \ max_removed_max_removed_max = min_max(max_removed_max_removed)\n    local min_removed_min_removed_min_idx,",
  "    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_cnt\
    \ = 0\n    local max_cnt = 0\n    local min_idx_found = false\n    local max_idx_found\
    \ = false\n    local min_val_found = false\n    local max_val_found = false\n\
    \    local min_val_cnt = 0\n    local max_val_cnt = 0\n    local min_val_idx =\
    \ 0\n    local max_val_idx = 0\n    local min_val_idx_found = false\n    local\
    \ max_val_idx_found = false\n    local min_val_idx_cnt = 0\n    local max_val_idx_cnt\
    \ = 0\n    local min_val_idx_cnt_found = false\n    local max_val_idx_cnt_found\
    \ = false\n    local min_val_idx_cnt_found_idx = 0\n    local max_val_idx_cnt_found_idx\
    \ = 0\n    local min_val_idx_cnt_found_idx_found = false\n    local max_val_idx_cnt_found_idx_found\
    \ = false\n    local min_val_idx_cnt_found_idx_found_cnt = 0\n    local max_val_idx_cnt_found_idx_found_cnt\
    \ = 0\n    local min_val_idx_cnt_found_idx_found_cnt_found = false\n    local\
    \ max_val_idx_cnt_found_idx_found_cnt_found = false\n    local min_val_idx_cnt_found_idx_found_cnt_found_idx\
    \ = 0\n    local max_val_idx_cnt_found_idx_found_cnt_found_idx = 0\n    local\
    \ min_val_idx_cnt_found_idx_found_cnt_found_idx_", "  local res = {}\n  local\
    \ min, max = min_max(lst)\n  local min_idx, max_idx = 1, #lst\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      res[i] = min\n      min_idx = min_idx + 1\n\
    \      min = lst[min_idx]\n    else\n      res[i] = max\n      max_idx = max_idx\
    \ - 1\n      max = lst[max_idx]\n    end\n  end\n  return res\nend", "  local\
    \ result = {}\n  local n = #lst\n  local i = 1\n  local j = n\n  local k = 1\n\
    \  while i <= n and j >= 1 do\n    result[k] = lst[i]\n    result[k + 1] = lst[j]\n\
    \    i = i + 1\n    j = j - 1\n    k = k + 2\n  end\n  return result\nend", " \
    \   local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    if min_idx < max_idx then\n\
    \        for i = 1, #lst do\n            if i % 2 == 1 then\n                res[i]\
    \ = min\n            else\n                res[i] = max\n            end\n   \
    \     end\n    else\n        for i = 1, #lst do\n            if i % 2 == 1 then\n\
    \                res[i] = max\n            else\n                res[i] = min\n\
    \            end\n        end\n    end\n    return res\nend", "  local res = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx,\
    \ max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx\
    \ = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n  end\n  if\
    \ min_idx < max_idx then\n    for i = 1, #lst do\n      if i % 2 == 1 then\n \
    \       res[i] = min\n      else\n        res[i] = max\n      end\n    end\n \
    \ else\n    for i = 1, #lst do\n      if i % 2 == 1 then\n        res[i] = max\n\
    \      else\n        res[i] = min\n      end\n    end\n  end\n  return res\nend",
  "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      res[#res +\
    \ 1] = min\n      lst[min] = nil\n      min = math.min(unpack(lst))\n    else\n\
    \      res[#res + 1] = max\n      lst[max] = nil\n      max = math.max(unpack(lst))\n\
    \    end\n    i = i + 1\n  end\n  return res\nend", "  local result = {}\n  local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx\
    \ = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n\
    \    elseif lst[i] == max then\n      max_idx = i\n    end\n  end\n  local min_first\
    \ = min_idx < max_idx\n  local min_idx, max_idx = min_idx, max_idx\n  for i =\
    \ 1, #lst do\n    if min_first then\n      result[i] = lst[min_idx]\n      min_idx\
    \ = min_idx + 1\n      min_first = false\n    else\n      result[i] = lst[max_idx]\n\
    \      max_idx = max_idx - 1\n      min_first = true\n    end\n  end\n  return\
    \ result\nend", "    local res = {}\n    local min, max = min_max(lst)\n    local\
    \ min_idx, max_idx = 1, #lst\n    local i = 1\n    while i <= #lst do\n      \
    \  if i % 2 == 1 then\n            res[i] = min\n            min_idx = min_idx\
    \ + 1\n            min = lst[min_idx]\n        else\n            res[i] = max\n\
    \            max_idx = max_idx - 1\n            max = lst[max_idx]\n        end\n\
    \        i = i + 1\n    end\n    return res\nend", "    local res = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i] == min then\n    \
    \        min_idx = i\n        elseif lst[i] == max then\n            max_idx =\
    \ i\n        end\n    end\n    local min_cnt, max_cnt = 0, 0\n    for i = 1, #lst\
    \ do\n        if i % 2 == 1 then\n            res[i] = min\n            min_cnt\
    \ = min_cnt + 1\n        else\n            res[i] = max\n            max_cnt =\
    \ max_cnt + 1\n        end\n    end\n    if min_cnt > max_cnt then\n        res[#res]\
    \ = min\n    else\n        res[1] = max\n    end\n    return res\nend", "    local\
    \ res = {}\n    local min_val, max_val\n    local min_idx, max_idx\n    local\
    \ min_removed, max_removed\n    local i = 1\n    while #lst > 0 do\n        min_val,\
    \ min_idx = min_val_idx(lst)\n        max_val, max_idx = max_val_idx(lst)\n  \
    \      if i % 2 == 1 then\n            res[i] = min_val\n            min_removed\
    \ = table.remove(lst, min_idx)\n        else\n            res[i] = max_val\n \
    \           max_removed = table.remove(lst, max_idx)\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend", "    local result = {}\n    local min_index\
    \ = 1\n    local max_index = #lst\n    local min_value = lst[min_index]\n    local\
    \ max_value = lst[max_index]\n    local min_value_index = min_index\n    local\
    \ max_value_index = max_index\n    local min_value_found = false\n    local max_value_found\
    \ = false\n    local min_value_found_index = min_index\n    local max_value_found_index\
    \ = max_index\n    local i = min_index\n    local j = max_index\n    local k =\
    \ 1\n    local n = #lst\n    local m = math.floor(n / 2)\n    local l = n % 2\n\
    \    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local\
    \ w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n\
    \    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local\
    \ f = 1\n    local g = 1\n    local h = 1\n    local p = 1\n    local q = 1\n\
    \    local r = 1\n    local o = 1\n    local min_value_found_index_1 = 1\n   \
    \ local max_value_found_index_1 = 1\n    local min_value_found_index_2 = 1\n \
    \   local max_value_found_index_2 = 1\n    local min_value_found_index_3 = 1\n\
    \    local max_value_found_index_3 = 1\n    local min_value_found_index_4 = 1\n\
    \    local max_value_found_index_4 = 1\n    local min_value_found_index_5 = 1\n\
    \    local max_value_found_index_5 = 1\n    local min_value_found_index_6 = 1\n\
    \    local max_value_found_index_6 = 1\n    local min_value_found_index_7 = 1\n\
    \    local max_value_found_index_7 = 1\n    local min_value_found_index_8 = 1\n\
    \    local max_value_", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = table.index_of(lst,\
    \ min)\n    local max_idx = table.index_of(lst, max)\n    local idx = 1\n    while\
    \ idx <= #lst do\n        if idx % 2 == 1 then\n            res[idx] = min\n \
    \           min_idx = min_idx + 1\n            min = lst[min_idx]\n        else\n\
    \            res[idx] = max\n            max_idx = max_idx - 1\n            max\
    \ = lst[max_idx]\n        end\n        idx = idx + 1\n    end\n    return res\n\
    end", "    local sorted = {}\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    local min_index = table.index_of(lst, min)\n\
    \    local max_index = table.index_of(lst, max)\n    table.insert(sorted, min)\n\
    \    table.insert(sorted, max)\n    table.remove(lst, min_index)\n    table.remove(lst,\
    \ max_index)\n    while #lst > 0 do\n        local min = math.min(unpack(lst))\n\
    \        local max = math.max(unpack(lst))\n        local min_index = table.index_of(lst,\
    \ min)\n        local max_index = table.index_of(lst, max)\n        table.insert(sorted,\
    \ min)\n        table.insert(sorted, max)\n        table.remove(lst, min_index)\n\
    \        table.remove(lst, max_index)\n    end\n    return sorted\nend", "   \
    \ local result = {}\n    local min_idx, max_idx\n    local min_val, max_val\n\
    \    local min_found, max_found\n    local i, j", "  local res = {}\n  local min\
    \ = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local min_idx\
    \ = table.index_of(lst, min)\n  local max_idx = table.index_of(lst, max)\n  local\
    \ min_found = false\n  local max_found = false\n  local i = 1\n  while i <= #lst\
    \ do\n    if not min_found and min_idx ~= max_idx then\n      res[i] = min\n \
    \     min_found = true\n      i = i + 1\n    end\n    if not max_found then\n\
    \      res[i] = max\n      max_found = true\n      i = i + 1\n    end\n    if\
    \ min_found and max_found then\n      min_found = false\n      max_found = false\n\
    \      lst[min_idx] = nil\n      lst[max_idx] = nil\n      min = math.min(unpack(lst))\n\
    \      max = math.max(unpack(lst))\n      min_idx = table.index_of(lst, min)\n\
    \      max_idx = table.index_of(lst, max)\n    end\n  end\n  return res\nend",
  "    local result = {}\n    local min_index, max_index = 1, #lst\n    local min_value,\
    \ max_value = lst[min_index], lst[max_index]\n    local min_found, max_found =\
    \ false, false\n    local min_value_found, max_value_found = false, false\n  \
    \  local min_value_index, max_value_index = 0, 0\n    local min_value_found_index,\
    \ max_value_found_index = 0, 0\n    local min_value_found_index_2, max_value_found_index_2\
    \ = 0, 0\n    local min_value_found_index_3, max_value_found_index_3 = 0, 0\n\
    \    local min_value_found_index_4, max_value_found_index_4 = 0, 0\n    local\
    \ min_value_found_index_5, max_value_found_index_5 = 0, 0\n    local min_value_found_index_6,\
    \ max_value_found_index_6 = 0, 0\n    local min_value_found_index_7, max_value_found_index_7\
    \ = 0, 0\n    local min_value_found_index_8, max_value_found_index_8 = 0, 0\n\
    \    local min_value_found_index_9, max_value_found_index_9 = 0, 0\n    local\
    \ min_value_found_index_10, max_value_found_index_10 = 0, 0\n    local min_value_found_index_11,\
    \ max_value_found_index_11 = 0, 0\n    local min_value_found_index_12, max_value_found_index_12\
    \ = 0, 0\n    local min_value_found_index_13, max_value_found_index_13 = 0, 0\n\
    \    local min_value_found_index_14, max_value_found_index_14 = 0, 0\n    local\
    \ min_value_found_index_15, max_value_found_index_15 = 0, 0\n    local min_value_found_index_16,\
    \ max_value_found_index_16 = 0, 0\n    local", "  local res = {}\n  local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx\
    \ = 1, 1\n  local min_found, max_found = false, false\n  for i = 1, #lst do\n\
    \    if lst[i] == min then\n      min_idx = i\n      min_found = true\n    elseif\
    \ lst[i] == max then\n      max_idx = i\n      max_found = true\n    end\n   \
    \ if min_found and max_found then\n      break\n    end\n  end\n  local min_idx_found,\
    \ max_idx_found = false, false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n\
    \      if min_idx_found then\n        table.insert(res, lst[max_idx])\n      else\n\
    \        table.insert(res, lst[min_idx])\n      end\n      if min_idx == i then\n\
    \        min_idx_found = true\n      end\n    else\n      if max_idx_found then\n\
    \        table.insert(res, lst[min_idx])\n      else\n        table.insert(res,\
    \ lst[max_idx])\n      end\n      if max_idx == i then\n        max_idx_found\
    \ = true\n      end\n    end\n  end\n  return res\nend", "    local res = {}\n\
    \    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local\
    \ i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min\n            lst[min] = nil\n            min = math.min(unpack(lst))\n\
    \        else\n            res[i] = max\n            lst[max] = nil\n        \
    \    max = math.max(unpack(lst))\n        end\n        i = i + 1\n    end\n  \
    \  return res\nend", "  local res = {}\n  local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  local min_cnt, max_cnt\
    \ = 0, 0\n  for i, v in ipairs(lst) do\n    if v == min_val then\n      min_cnt\
    \ = min_cnt + 1\n    elseif v == max_val then\n      max_cnt = max_cnt + 1\n \
    \   end\n  end\n  for i = 1, #lst do\n    if i % 2 == 1 then\n      res[i] = min_val\n\
    \      min_idx = min_idx + 1\n      if min_idx > min_cnt then\n        min_idx\
    \ = 1\n        min_val = max_val\n      end\n    else\n      res[i] = max_val\n\
    \      max_idx = max_idx + 1\n      if max_idx > max_cnt then\n        max_idx\
    \ = 1\n        max_val = min_val\n      end\n    end\n  end\n  return res\nend",
  "    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n    local\
    \ min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local min_found\
    \ = false\n    local max_found = false\n    local i = 1\n    while i <= #lst do\n\
    \        if not min_found then\n            if lst[i] < min_val then\n       \
    \         min_val = lst[i]\n                min_idx = i\n            end\n   \
    \         if i == #lst then\n                min_found = true\n              \
    \  res[#res + 1] = min_val\n                table.remove(lst, min_idx)\n     \
    \       end\n        elseif not max_found then\n            if lst[i] > max_val\
    \ then\n                max_val = lst[i]\n                max_idx = i\n      \
    \      end\n            if i == #lst then\n                max_found = true\n\
    \                res[#res + 1] = max_val\n                table.remove(lst, max_idx)\n\
    \            end\n        else\n            min_found = false\n            max_found\
    \ = false\n            min_idx = 1\n            max_idx = #lst\n            min_val\
    \ = lst[min_idx]\n            max_val = lst[max_idx]\n            i = 0\n    \
    \    end\n        i = i + 1\n    end\n    return res\nend", "  local res = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx,\
    \ max_idx = 1, 1\n  for i, v in ipairs(lst) do\n    if v == min then min_idx =\
    \ i end\n    if v == max then max_idx = i end\n  end\n  local min_idx, max_idx\
    \ = min_idx, max_idx\n  local min_val, max_val = min, max\n  local min_removed,\
    \ max_removed = false, false\n  for i = 1, #lst do\n    if i % 2 == 1 then\n \
    \     if min_removed then\n        min_val = math.min(unpack(lst))\n        for\
    \ j, v in ipairs(lst) do\n          if v == min_val then min_idx = j end\n   \
    \     end\n      end\n      res[i] = min_val\n      lst[min_idx] = nil\n     \
    \ min_removed = true\n    else\n      if max_removed then\n        max_val = math.max(unpack(lst))\n\
    \        for j, v in ipairs(lst) do\n          if v == max_val then max_idx =\
    \ j end\n        end\n      end\n      res[i] = max_val\n      lst[max_idx] =\
    \ nil\n      max_removed = true\n    end\n  end\n  return res\nend", "  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = #lst\n\
    \    local min_found = false\n    local max_found = false\n    for i = 1, #lst\
    \ do\n        if lst[i] == min then\n            min_found = true\n          \
    \  min_idx = i\n        end\n        if lst[i] == max then\n            max_found\
    \ = true\n            max_idx = i\n        end\n    end\n    if not min_found\
    \ or not max_found then\n        return lst\n    end\n    if min_idx < max_idx\
    \ then\n        for i = 1, #lst do\n            if i % 2 == 1 then\n         \
    \       res[i] = min\n            else\n                res[i] = max\n       \
    \     end\n        end\n    else\n        for i = 1, #lst do\n            if i\
    \ % 2 == 1 then\n                res[i] = max\n            else\n            \
    \    res[i] = min\n            end\n        end\n    end\n    return res\nend",
  "    local function strange_sort_list_iter(lst, acc)\n        if #lst == 0 then\n\
    \            return acc\n        end\n        local min_idx = 1\n        local\
    \ max_idx = 1\n        for i = 1, #lst do\n            if lst[i] < lst[min_idx]\
    \ then\n                min_idx = i\n            end\n            if lst[i] >\
    \ lst[max_idx] then\n                max_idx = i\n            end\n        end\n\
    \        table.insert(acc, lst[min_idx])\n        table.remove(lst, min_idx)\n\
    \        table.insert(acc, lst[max_idx])\n        table.remove(lst, max_idx)\n\
    \        return strange_sort_list_iter(lst, acc)\n    end\n    return strange_sort_list_iter(lst,\
    \ {})\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n    local\
    \ max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx = 1\n\
    \    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local min_removed = false\n    local max_removed = false\n    for\
    \ i = 1, #lst do\n        if i % 2 == 1 then\n            if not min_removed then\n\
    \                res[i] = min\n                min_removed = true\n          \
    \  else\n                res[i] = lst[min_idx + 1]\n                min_idx =\
    \ min_idx + 1\n            end\n        else\n            if not max_removed then\n\
    \                res[i] = max\n                max_removed = true\n          \
    \  else\n                res[i] = lst[max_idx - 1]\n                max_idx =\
    \ max_idx - 1\n            end\n        end\n    end\n    return res\nend", " \
    \   local min_idx, max_idx = 1, #lst\n    local result = {}\n    local i = 1\n\
    \    while i <= #lst do\n        if i % 2 == 1 then\n            result[i] = lst[min_idx]\n\
    \            min_idx = min_idx + 1\n        else\n            result[i] = lst[max_idx]\n\
    \            max_idx = max_idx - 1\n        end\n        i = i + 1\n    end\n\
    \    return result\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n    end\n\
    \    if lst[i] == max then\n      max_idx = i\n    end\n  end\n  if min_idx <\
    \ max_idx then\n    for i = 1, #lst do\n      if i % 2 == 1 then\n        res[i]\
    \ = min\n      else\n        res[i] = max\n      end\n    end\n  else\n    for\
    \ i = 1, #lst do\n      if i % 2 == 1 then\n        res[i] = max\n      else\n\
    \        res[i] = min\n      end\n    end\n  end\n  return res\nend", "    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_found = false\n    local max_found = false\n    local i\
    \ = 1\n    while i <= #lst do\n        if not min_found and min_idx ~= max_idx\
    \ then\n            res[i] = min\n            min_found = true\n            i\
    \ = i + 1\n        end\n        if not max_found then\n            res[i] = max\n\
    \            max_found = true\n            i = i + 1\n        end\n        if\
    \ min_found and max_found then\n            min_found = false\n            max_found\
    \ = false\n            local new_lst = table.remove_value(lst, min)\n        \
    \    new_lst = table.remove_value(new_lst, max)\n            min = math.min(unpack(new_lst))\n\
    \            max = math.max(unpack(new_lst))\n            min_idx = table.index_of(new_lst,\
    \ min)\n            max_idx = table.index_of(new_lst, max)\n            lst =\
    \ new_lst\n        end\n    end\n    return res\nend", "  local result = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local i =\
    \ 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      result[#result + 1] =\
    \ min\n      lst[min] = nil\n      min = math.min(unpack(lst))\n    else\n   \
    \   result[#result + 1] = max\n      lst[max] = nil\n      max = math.max(unpack(lst))\n\
    \    end\n    i = i + 1\n  end\n  return result\nend", "    local res = {}\n \
    \   local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 1, 1\n    local min_cnt, max_cnt = 0, 0\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_cnt = min_cnt + 1\n        elseif\
    \ v == max then\n            max_cnt = max_cnt + 1\n        end\n    end\n   \
    \ for i = 1, #lst do\n        if i % 2 == 1 then\n            res[i] = min\n \
    \           min_idx = min_idx + 1\n            if min_idx > min_cnt then\n   \
    \             min = max\n            end\n        else\n            res[i] = max\n\
    \            max_idx = max_idx + 1\n            if max_idx > max_cnt then\n  \
    \              max = min\n            end\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local min_idx = 1\n    local max_idx = 1\n    local\
    \ min_val = lst[1]\n    local max_val = lst[1]\n    local min_found = false\n\
    \    local max_found = false\n    local i = 1\n    while i <= #lst do\n      \
    \  if not min_found then\n            if lst[i] < min_val then\n             \
    \   min_val = lst[i]\n                min_idx = i\n            end\n         \
    \   if i == #lst then\n                min_found = true\n                i = 1\n\
    \            end\n        elseif not max_found then\n            if lst[i] > max_val\
    \ then\n                max_val = lst[i]\n                max_idx = i\n      \
    \      end\n            if i == #lst then\n                max_found = true\n\
    \                i = 1\n            end\n        else\n            if min_idx\
    \ < max_idx then\n                table.insert(res, min_val)\n               \
    \ table.insert(res, max_val)\n                table.remove(lst, min_idx)\n   \
    \             table.remove(lst, max_idx - 1)\n            else\n             \
    \   table.insert(res, max_val)\n                table.insert(res, min_val)\n \
    \               table.remove(lst, max_idx)\n                table.remove(lst,\
    \ min_idx - 1)\n            end\n            min_idx = 1\n            max_idx\
    \ = 1\n            min_val = lst[1]\n            max_val = lst[1]\n          \
    \  min_found = false\n            max_found = false\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend", "  local result = {}\n  local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx, max_idx = 1,\
    \ 1\n  for i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n    elseif\
    \ lst[i] == max then\n      max_idx = i\n    end\n  end\n  local min_found, max_found\
    \ = false, false\n  for i = 1, #lst do\n    if not min_found and min_idx == i\
    \ then\n      table.insert(result, min)\n      min_found = true\n    elseif not\
    \ max_found and max_idx == i then\n      table.insert(result, max)\n      max_found\
    \ = true\n    else\n      table.insert(result, lst[i])\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_index, max_index = 1, #lst\n  local min_found,\
    \ max_found = false, false\n  for i = 1, #lst do\n    if lst[i] == min and not\
    \ min_found then\n      min_index = i\n      min_found = true\n    elseif lst[i]\
    \ == max and not max_found then\n      max_index = i\n      max_found = true\n\
    \    end\n  end\n  local min_removed, max_removed = false, false\n  for i = 1,\
    \ #lst do\n    if i % 2 == 1 then\n      if not min_removed then\n        table.insert(result,\
    \ min)\n        min_removed = true\n      else\n        table.insert(result, lst[min_index])\n\
    \        table.remove(lst, min_index)\n      end\n    else\n      if not max_removed\
    \ then\n        table.insert(result, max)\n        max_removed = true\n      else\n\
    \        table.insert(result, lst[max_index])\n        table.remove(lst, max_index)\n\
    \      end\n    end\n  end\n  return result\nend", "    local sorted = {}\n  \
    \  local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local asc = true\n    while #lst > 0 do\n        if asc then\n          \
    \  table.insert(sorted, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n            min = math.min(unpack(lst))\n        else\n            table.insert(sorted,\
    \ max)\n            table.remove(lst, table.index_of(lst, max))\n            max\
    \ = math.max(unpack(lst))\n        end\n        asc = not asc\n    end\n    return\
    \ sorted\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend", "    local res = {}\n    local min_idx = 1\n    local max_idx = 1\n\
    \    local min_val = lst[1]\n    local max_val = lst[1]\n    local idx = 1\n \
    \   local len = #lst\n    while idx <= len do\n        for i = 1, len do\n   \
    \         if lst[i] < min_val then\n                min_val = lst[i]\n       \
    \         min_idx = i\n            end\n            if lst[i] > max_val then\n\
    \                max_val = lst[i]\n                max_idx = i\n            end\n\
    \        end\n        if idx % 2 == 1 then\n            table.insert(res, min_val)\n\
    \            lst[min_idx] = math.huge\n        else\n            table.insert(res,\
    \ max_val)\n            lst[max_idx] = -math.huge\n        end\n        min_val\
    \ = math.huge\n        max_val = -math.huge\n        idx = idx + 1\n    end\n\
    \    return res\nend", "    local result = {}\n    local min_index, max_index\n\
    \    local min_value, max_value\n    local min_value_index, max_value_index\n\
    \    local min_value_index_found, max_value_index_found\n    local min_value_found,\
    \ max_value_found\n    local i, j", "    local res = {}\n    local min, max =\
    \ math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx = 1,\
    \ 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_idx\
    \ = i\n        elseif v == max then\n            max_idx = i\n        end\n  \
    \  end\n    local min_first = min_idx < max_idx\n    local cur_min, cur_max =\
    \ min, max\n    local cur_min_idx, cur_max_idx = min_idx, max_idx\n    while cur_min_idx\
    \ <= #lst do\n        if min_first then\n            res[#res + 1] = cur_min\n\
    \            cur_min = math.min(unpack(lst, cur_min_idx + 1))\n            cur_min_idx\
    \ = cur_min_idx + 1\n            for i, v in ipairs(lst) do\n                if\
    \ v == cur_min then\n                    cur_min_idx = i\n                   \
    \ break\n                end\n            end\n            min_first = false\n\
    \        else\n            res[#res + 1] = cur_max\n            cur_max = math.max(unpack(lst,\
    \ cur_max_idx + 1))\n            cur_max_idx = cur_max_idx + 1\n            for\
    \ i, v in ipairs(lst) do\n                if v == cur_max then\n             \
    \       cur_max_idx = i\n                    break\n                end\n    \
    \        end\n            min_first = true\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local i = 1\n    while #lst > 0 do\n        if i % 2 == 1 then\n        \
    \    table.insert(res, min)\n            table.remove(lst, table.index_of(lst,\
    \ min))\n        else\n            table.insert(res, max)\n            table.remove(lst,\
    \ table.index_of(lst, max))\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        i = i + 1\n    end\n    return res\nend", " \
    \   local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            lst[min_idx]\
    \ = nil\n        else\n            res[i] = max\n            lst[max_idx] = nil\n\
    \        end\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        for j, v in ipairs(lst) do\n            if v == min then\n          \
    \      min_idx = j\n            elseif v == max then\n                max_idx\
    \ = j\n            end\n        end\n        i = i + 1\n    end\n    return res\n\
    end", "    local result = {}\n    local min_idx = 1\n    local max_idx = 1\n \
    \   local min = lst[1]\n    local max = lst[1]\n    for i, v in ipairs(lst) do\n\
    \        if v < min then\n            min = v\n            min_idx = i\n     \
    \   end\n        if v > max then\n            max = v\n            max_idx = i\n\
    \        end\n    end\n    local i = 1\n    while i <= #lst do\n        if min_idx\
    \ < max_idx then\n            result[i] = min\n            min_idx = min_idx +\
    \ 1\n            min = lst[min_idx]\n        else\n            result[i] = max\n\
    \            max_idx = max_idx - 1\n            max = lst[max_idx]\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "  local function strange_sort_list_iter(lst,\
    \ res)\n    if #lst == 0 then\n      return res\n    end\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = table.index_of(lst,\
    \ min)\n    local max_idx = table.index_of(lst, max)\n    table.remove(lst, min_idx)\n\
    \    table.remove(lst, max_idx - 1)\n    table.insert(res, min)\n    table.insert(res,\
    \ max)\n    return strange_sort_list_iter(lst, res)\n  end\n  return strange_sort_list_iter(lst,\
    \ {})\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      table.insert(res,\
    \ min)\n      table.remove(lst, table.index_of(lst, min))\n    else\n      table.insert(res,\
    \ max)\n      table.remove(lst, table.index_of(lst, max))\n    end\n    min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    i = i + 1\n  end\n  return\
    \ res\nend", "    local sorted = {}\n    local min = math.min(unpack(lst))\n \
    \   local max = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    local min_first = min_index < max_index\n    local i = 1\n    while\
    \ #lst > 0 do\n        local v = min_first and math.min(unpack(lst)) or math.max(unpack(lst))\n\
    \        table.insert(sorted, v)\n        table.remove(lst, table.index_of(lst,\
    \ v))\n        min_first = not min_first\n    end\n    return sorted\nend", " \
    \   local result = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = table.find(lst, min_val), table.find(lst, max_val)\n\
    \    local min_idx_removed, max_idx_removed = false, false\n    local min_idx_removed_count,\
    \ max_idx_removed_count = 0, 0\n    local min_idx_removed_count_max, max_idx_removed_count_max\
    \ = 0, 0\n    local min_idx_removed_count_max_idx, max_idx_removed_count_max_idx\
    \ = 0, 0\n    local min_idx_removed_count_max_idx_removed, max_idx_removed_count_max_idx_removed\
    \ = false, false\n    local min_idx_removed_count_max_idx_removed_count, max_idx_removed_count_max_idx_removed_count\
    \ = 0, 0\n    local min_idx_removed_count_max_idx_removed_count_max, max_idx_removed_count_max_idx_removed_count_max\
    \ = 0, 0\n    local min_idx_removed_count_max_idx_removed_count_max_idx, max_idx_removed_count_max_idx_removed_count_max_idx\
    \ = 0, 0\n    local min_idx_removed_count_max_idx_removed_count_max_idx_removed,\
    \ max_idx_removed_count_max_idx_removed_count_max_idx_removed = false, false\n\
    \    local min_idx_removed_count_max_idx_removed_count_max_idx_removed_count,\
    \ max_idx_removed_count_max_idx_removed_count_max_idx_removed_count = 0, 0\n \
    \   local min", "    local res = {}\n    local min = math.min(unpack(lst))\n \
    \   local max = math.max(unpack(lst))\n    local min_index = 1\n    local max_index\
    \ = 1\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_index\
    \ = i\n        elseif v == max then\n            max_index = i\n        end\n\
    \    end\n    local min_max = min_index < max_index\n    local i = 1\n    while\
    \ #lst > 0 do\n        if min_max then\n            res[i] = table.remove(lst,\
    \ min_index)\n            i = i + 1\n            res[i] = table.remove(lst, max_index\
    \ - 1)\n            i = i + 1\n        else\n            res[i] = table.remove(lst,\
    \ max_index)\n            i = i + 1\n            res[i] = table.remove(lst, min_index\
    \ - 1)\n            i = i + 1\n        end\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        min_index = 1\n        max_index\
    \ = 1\n        for i, v in ipairs(lst) do\n            if v == min then\n    \
    \            min_index = i\n            elseif v == max then\n               \
    \ max_index = i\n            end\n        end\n        min_max = min_index < max_index\n\
    \    end\n    return res\nend", "  local result = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n\
    \    if lst[i] == min then\n      min_idx = i\n    elseif lst[i] == max then\n\
    \      max_idx = i\n    end\n  end\n  table.remove(lst, min_idx)\n  table.remove(lst,\
    \ max_idx - 1)\n  result[1] = min\n  result[2] = max\n  local i = 3\n  while #lst\
    \ > 0 do\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    min_idx,\
    \ max_idx = 1, 1\n    for i = 1, #lst do\n      if lst[i] == min then\n      \
    \  min_idx = i\n      elseif lst[i] == max then\n        max_idx = i\n      end\n\
    \    end\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx - 1)\n\
    \    result[i] = min\n    result[i + 1] = max\n    i = i + 2\n  end\n  return\
    \ result\nend", "    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local res = {}\n    local i = 1\n    while i <= #lst do\n        if i % 2\
    \ == 1 then\n            res[i] = min\n        else\n            res[i] = max\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "  local res =\
    \ {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local\
    \ min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n \
    \     min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local min_found, max_found = false, false\n  for i = 1, #lst do\n  \
    \  if i % 2 == 1 then\n      if not min_found then\n        res[i] = min\n   \
    \     min_found = true\n      else\n        res[i] = max\n        max_found =\
    \ true\n      end\n    else\n      if not max_found then\n        res[i] = max\n\
    \        max_found = true\n      else\n        res[i] = min\n        min_found\
    \ = true\n      end\n    end\n  end\n  return res\nend", "    local res = {}\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local min_found = false\n \
    \   local max_found = false\n    for i, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if v == max then\n            max_idx = i\n            max_found = true\n\
    \        end\n        if min_found and max_found then\n            break\n   \
    \     end\n    end\n    local min_removed = false\n    local max_removed = false\n\
    \    for i, v in ipairs(lst) do\n        if i == min_idx and not min_removed then\n\
    \            min_removed = true\n        elseif i == max_idx and not max_removed\
    \ then\n            max_removed = true\n        else\n            table.insert(res,\
    \ v)\n        end\n    end\n    if min_idx < max_idx then\n        table.insert(res,\
    \ 1, min)\n        table.insert(res, max)\n    else\n        table.insert(res,\
    \ 1, max)\n        table.insert(res, min)\n    end\n    return res\nend", "  \
    \  local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    local min_rem = table.remove_at(lst, min_idx)\n    local max_rem =\
    \ table.remove_at(lst, max_idx)\n    local min_rem_idx = table.index_of(lst, min_rem)\n\
    \    local max_rem_idx = table.index_of(lst, max_rem)\n    local min_rem_rem =\
    \ table.remove_at(lst, min_rem_idx)\n    local max_rem_rem = table.remove_at(lst,\
    \ max_rem_idx)\n    table.insert(res, min)\n    table.insert(res, max)\n    table.insert(res,\
    \ min_rem)\n    table.insert(res, max_rem)\n    table.insert(res, min_rem_rem)\n\
    \    table.insert(res, max_rem_rem)\n    return res\nend", "    local res = {}\n\
    \    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    for i, v in ipairs(lst) do\n\
    \        if v == min then\n            min_idx = i\n        elseif v == max then\n\
    \            max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            lst[min_idx]\
    \ = nil\n        else\n            res[i] = max\n            lst[max_idx] = nil\n\
    \        end\n        min = math.min(unpack(lst))\n        max = math.max(unpack(lst))\n\
    \        for j, v in ipairs(lst) do\n            if v == min then\n          \
    \      min_idx = j\n            elseif v == max then\n                max_idx\
    \ = j\n            end\n        end\n        i = i + 1\n    end\n    return res\n\
    end", "    local res = {}\n    local min_idx = 1\n    local max_idx = #lst\n \
    \   local min_val = lst[min_idx]\n    local max_val = lst[max_idx]\n    local\
    \ is_min = true\n    for i = 1, #lst do\n        if is_min then\n            res[i]\
    \ = min_val\n            min_idx = min_idx + 1\n            min_val = lst[min_idx]\n\
    \            is_min = false\n        else\n            res[i] = max_val\n    \
    \        max_idx = max_idx - 1\n            max_val = lst[max_idx]\n         \
    \   is_min = true\n        end\n    end\n    return res\nend", "    local result\
    \ = {}\n    local min, max = min_max(lst)\n    local min_idx, max_idx = index_of(lst,\
    \ min), index_of(lst, max)\n    local min_removed, max_removed = remove_at(lst,\
    \ min_idx), remove_at(lst, max_idx)\n    local min_removed_min, min_removed_max\
    \ = min_max(min_removed)\n    local min_removed_min_idx, min_removed_max_idx =\
    \ index_of(min_removed, min_removed_min), index_of(min_removed, min_removed_max)\n\
    \    local min_removed_min_removed, min_removed_max_removed = remove_at(min_removed,\
    \ min_removed_min_idx), remove_at(min_removed, min_removed_max_idx)\n    local\
    \ min_removed_min_removed_min, min_removed_min_removed_max = min_max(min_removed_min_removed)\n\
    \    local min_removed_min_removed_min_idx, min_removed_min_removed_max_idx =\
    \ index_of(min_removed_min_removed, min_removed_min_removed_min), index_of(min_removed_min_removed,\
    \ min_removed_min_removed_max)\n    local min_removed_min_removed_min_removed,\
    \ min_removed_min_removed_max_removed = remove_at(min_removed_min_removed, min_removed_min_removed_min_idx),\
    \ remove_at(min_removed_min_removed, min_removed_min_removed_max_idx)\n    local\
    \ min_removed_min_removed_min_removed_min, min_removed_min_removed_min_removed_max\
    \ = min_max(min_removed_min_removed_min_removed)\n    local min_removed_min",
  "  local result = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_index = 1\n  local max_index = #lst\n  local min_found = false\n\
    \  local max_found = false\n  local i = 1\n  while i <= #lst do\n    if lst[min_index]\
    \ == min and not min_found then\n      result[i] = min\n      min_found = true\n\
    \      i = i + 1\n    end\n    if lst[max_index] == max and not max_found then\n\
    \      result[i] = max\n      max_found = true\n      i = i + 1\n    end\n   \
    \ if min_found and max_found then\n      min_found = false\n      max_found =\
    \ false\n      min_index = min_index + 1\n      max_index = max_index - 1\n  \
    \  end\n  end\n  return result\nend", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx =\
    \ lst:index_of(min), lst:index_of(max)\n    local min_found, max_found = false,\
    \ false\n    local i = 1\n    while i <= #lst do\n        if not min_found and\
    \ min_idx ~= max_idx then\n            res[i] = min\n            min_found = true\n\
    \            i = i + 1\n        end\n        if not max_found then\n         \
    \   res[i] = max\n            max_found = true\n            i = i + 1\n      \
    \  end\n        if min_found and max_found then\n            lst[min_idx] = nil\n\
    \            lst[max_idx] = nil\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = lst:index_of(min), lst:index_of(max)\n\
    \            min_found, max_found = false, false\n        end\n    end\n    return\
    \ res\nend", "    local res = {}\n    local asc = true\n    local i = 1\n    while\
    \ #lst > 0 do\n        local min = math.min(unpack(lst))\n        local max =\
    \ math.max(unpack(lst))\n        if asc then\n            res[i] = min\n     \
    \       table.remove(lst, table.index_of(lst, min))\n        else\n          \
    \  res[i] = max\n            table.remove(lst, table.index_of(lst, max))\n   \
    \     end\n        asc = not asc\n        i = i + 1\n    end\n    return res\n\
    end", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  local min_found, max_found = false, false\n\
    \  while #res < #lst do\n    if not min_found then\n      if lst[min_idx] == min\
    \ then\n        table.insert(res, min)\n        min_found = true\n      end\n\
    \      min_idx = min_idx + 1\n    end\n    if not max_found then\n      if lst[max_idx]\
    \ == max then\n        table.insert(res, max)\n        max_found = true\n    \
    \  end\n      max_idx = max_idx + 1\n    end\n    if min_found and max_found then\n\
    \      min, max = math.min(unpack(lst)), math.max(unpack(lst))\n      min_idx,\
    \ max_idx = 1, 1\n      min_found, max_found = false, false\n    end\n  end\n\
    \  return res\nend", "    local function strange_sort_list_iter(lst, acc)\n  \
    \      if #lst == 0 then\n            return acc\n        end\n        local min_idx\
    \ = 1\n        local max_idx = 1\n        for i, v in ipairs(lst) do\n       \
    \     if v < lst[min_idx] then\n                min_idx = i\n            end\n\
    \            if v > lst[max_idx] then\n                max_idx = i\n         \
    \   end\n        end\n        table.insert(acc, lst[min_idx])\n        table.remove(lst,\
    \ min_idx)\n        table.insert(acc, lst[max_idx])\n        table.remove(lst,\
    \ max_idx)\n        return strange_sort_list_iter(lst, acc)\n    end\n    return\
    \ strange_sort_list_iter(lst, {})\nend", "    local sorted = {}\n    local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    for i, v in ipairs(lst) do\n        if v == min then\n         \
    \   min_idx = i\n        elseif v == max then\n            max_idx = i\n     \
    \   end\n    end\n    local min_found, max_found = false, false\n    for i = 1,\
    \ #lst do\n        if i % 2 == 1 then\n            if not min_found then\n   \
    \             table.insert(sorted, min)\n                min_found = true\n  \
    \          else\n                table.insert(sorted, max)\n                max_found\
    \ = true\n            end\n        else\n            if not max_found then\n \
    \               table.insert(sorted, max)\n                max_found = true\n\
    \            else\n                table.insert(sorted, min)\n               \
    \ min_found = true\n            end\n        end\n    end\n    return sorted\n\
    end", "    local result = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    while min_idx <= #lst or max_idx <= #lst\
    \ do\n        if min_idx <= #lst then\n            table.insert(result, min)\n\
    \            min_idx = min_idx + 1\n        end\n        if max_idx <= #lst then\n\
    \            table.insert(result, max)\n            max_idx = max_idx + 1\n  \
    \      end\n    end\n    return result\nend", "  if #lst == 0 then\n    return\
    \ {}\n  end\n  local min_val = math.min(unpack(lst))\n  local max_val = math.max(unpack(lst))\n\
    \  local min_idx = nil\n  local max_idx = nil\n  local res = {}\n  for i, v in\
    \ ipairs(lst) do\n    if v == min_val then\n      min_idx = i\n    elseif v ==\
    \ max_val then\n      max_idx = i\n    end\n  end\n  table.remove(lst, min_idx)\n\
    \  table.remove(lst, max_idx - 1)\n  table.insert(res, min_val)\n  table.insert(res,\
    \ max_val)\n  return strange_sort_list(lst)\nend", "  local function strange_sort_list_iter(lst,\
    \ acc)\n    if #lst == 0 then\n      return acc\n    else\n      local min_val,\
    \ min_idx = math.min(unpack(lst))\n      local max_val, max_idx = math.max(unpack(lst))\n\
    \      local min_removed = table.remove(lst, min_idx)\n      local max_removed\
    \ = table.remove(lst, max_idx)\n      table.insert(acc, min_removed)\n      table.insert(acc,\
    \ max_removed)\n      return strange_sort_list_iter(lst, acc)\n    end\n  end\n\
    \  return strange_sort_list_iter(lst, {})\nend", "    local res = {}\n    local\
    \ min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local\
    \ min_idx = table.index_of(lst, min)\n    local max_idx = table.index_of(lst,\
    \ max)\n    table.remove(lst, min_idx)\n    table.remove(lst, max_idx)\n    table.insert(res,\
    \ min)\n    table.insert(res, max)\n    while #lst > 0 do\n        min = math.min(unpack(lst))\n\
    \        max = math.max(unpack(lst))\n        min_idx = table.index_of(lst, min)\n\
    \        max_idx = table.index_of(lst, max)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx)\n        table.insert(res, min)\n        table.insert(res,\
    \ max)\n    end\n    return res\nend", "    local result = {}\n    local sorted\
    \ = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_index = 1\n    local max_index = 1\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_index = i\n        end\n     \
    \   if v == max then\n            max_index = i\n        end\n    end\n    local\
    \ min_index_found = false\n    local max_index_found = false\n    for i, v in\
    \ ipairs(lst) do\n        if i == min_index then\n            min_index_found\
    \ = true\n        end\n        if i == max_index then\n            max_index_found\
    \ = true\n        end\n        if min_index_found and not max_index_found then\n\
    \            table.insert(result, max)\n        elseif max_index_found and not\
    \ min_index_found then\n            table.insert(result, min)\n        else\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local sorted = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if lst[i] == min and not min_found then\n   \
    \         min_idx = i\n            min_found = true\n        elseif lst[i] ==\
    \ max and not max_found then\n            max_idx = i\n            max_found =\
    \ true\n        end\n    end\n    if min_idx < max_idx then\n        for i = 1,\
    \ #lst do\n            if i % 2 == 1 then\n                table.insert(sorted,\
    \ min)\n            else\n                table.insert(sorted, max)\n        \
    \    end\n        end\n    else\n        for i = 1, #lst do\n            if i\
    \ % 2 == 1 then\n                table.insert(sorted, max)\n            else\n\
    \                table.insert(sorted, min)\n            end\n        end\n   \
    \ end\n    return sorted\nend", "    local result = {}\n    local min_max_list\
    \ = {}\n    local min_max_list_len = 0\n    local min_max_list_index = 1\n   \
    \ local min_max_list_index_inc = 1\n    local min_max_list_index_inc_inc = 1\n\
    \    local min_max_list_index_inc_inc_inc = 1\n    local min_max_list_index_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc = 1\n    local\
    \ min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc =\
    \ 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list_index_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc_inc\
    \ = 1\n    local min_max_list", "  local res = {}\n  local min, max = min_max(lst)\n\
    \  local min_idx, max_idx = min.idx, max.idx\n  local min_val, max_val = min.val,\
    \ max.val\n  local min_cnt, max_cnt = 0, 0\n  local min_found, max_found = false,\
    \ false\n  local min_first = true\n  local i = 1\n  while i <= #lst do\n    if\
    \ min_first then\n      if not min_found then\n        if lst[i] == min_val then\n\
    \          min_found = true\n          min_cnt = min_cnt + 1\n          res[i]\
    \ = min_val\n        end\n      else\n        if lst[i] == max_val then\n    \
    \      max_found = true\n          max_cnt = max_cnt + 1\n          res[i] = max_val\n\
    \        end\n      end\n    else\n      if not max_found then\n        if lst[i]\
    \ == max_val then\n          max_found = true\n          max_cnt = max_cnt + 1\n\
    \          res[i] = max_val\n        end\n      else\n        if lst[i] == min_val\
    \ then\n          min_found = true\n          min_cnt = min_cnt + 1\n        \
    \  res[i] = min_val\n        end\n      end\n    end\n    if min_cnt == min_idx\
    \ and max_cnt == max_idx then\n      min_first = not min_first\n      min_found\
    \ = false\n      max_found = false\n    end\n    i = i + 1\n  end\n  return res\n\
    end", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if lst[i] == min and not min_found then\n      min_idx\
    \ = i\n      min_found = true\n    elseif lst[i] == max and not max_found then\n\
    \      max_idx = i\n      max_found = true\n    end\n  end\n  local min_lst, max_lst\
    \ = {}, {}\n  for i = 1, #lst do\n    if i ~= min_idx then\n      table.insert(min_lst,\
    \ lst[i])\n    end\n    if i ~= max_idx then\n      table.insert(max_lst, lst[i])\n\
    \    end\n  end\n  local min_min, min_max = math.min(unpack(min_lst)), math.max(unpack(min_lst))\n\
    \  local max_min, max_max = math.min(unpack(max_lst)), math.max(unpack(max_lst))\n\
    \  local min_min_idx, min_max_idx = 1, 1\n  local max_min_idx, max_max_idx = 1,\
    \ 1\n  local min_min_found, min_max_found = false, false\n  local max_min_found,\
    \ max_max_found = false, false\n  for i = 1, #min_lst do\n    if min_lst[i] ==\
    \ min_min and not min_min_found then\n      min_min_idx = i\n      min_min_found\
    \ = true\n    elseif min_lst[i] == min_max and not min_max_found then\n      min_max_idx\
    \ = i\n      min_max_found = true\n    end\n  end\n  for i = 1, #max_lst do\n\
    \    if max_lst[i] == max_min and not max_", "    local lst_len = #lst\n    if\
    \ lst_len == 0 then\n        return {}\n    end\n    local sorted_lst = {}\n \
    \   local min_val = math.min(unpack(lst))\n    local max_val = math.max(unpack(lst))\n\
    \    local min_idx = 0\n    local max_idx = 0\n    for i, v in ipairs(lst) do\n\
    \        if v == min_val then\n            min_idx = i\n        elseif v == max_val\
    \ then\n            max_idx = i\n        end\n    end\n    local min_idx_found\
    \ = false\n    local max_idx_found = false\n    for i = 1, lst_len do\n      \
    \  if i == min_idx then\n            min_idx_found = true\n        elseif i ==\
    \ max_idx then\n            max_idx_found = true\n        end\n        if min_idx_found\
    \ and not max_idx_found then\n            table.insert(sorted_lst, max_val)\n\
    \        elseif max_idx_found and not min_idx_found then\n            table.insert(sorted_lst,\
    \ min_val)\n        else\n            table.insert(sorted_lst, lst[i])\n     \
    \   end\n    end\n    return sorted_lst\nend", "  local result = {}\n  local min\
    \ = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n  local i = 1\n\
    \  while i <= #lst do\n    if i % 2 == 1 then\n      table.insert(result, min)\n\
    \      for j = 1, #lst do\n        if lst[j] ~= min then\n          min = lst[j]\n\
    \          break\n        end\n      end\n    else\n      table.insert(result,\
    \ max)\n      for j = 1, #lst do\n        if lst[j] ~= max then\n          max\
    \ = lst[j]\n          break\n        end\n      end\n    end\n    i = i + 1\n\
    \  end\n  return result\nend", "    local function strange_sort_list_iter(lst,\
    \ res)\n        if #lst == 0 then\n            return res\n        end\n     \
    \   local min_val, min_idx = min_val_idx(lst)\n        local max_val, max_idx\
    \ = max_val_idx(lst)\n        local res = res or {}\n        table.insert(res,\
    \ min_val)\n        table.insert(res, max_val)\n        table.remove(lst, min_idx)\n\
    \        table.remove(lst, max_idx)\n        return strange_sort_list_iter(lst,\
    \ res)\n    end\n    return strange_sort_list_iter(lst)\nend", "    local res\
    \ = {}\n    local min_val, max_val = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, #lst\n    local min_found, max_found = false,\
    \ false\n    for i = 1, #lst do\n        if not min_found and lst[i] == min_val\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if not max_found and lst[i] == max_val then\n            max_idx = i\n\
    \            max_found = true\n        end\n        if min_found and max_found\
    \ then\n            break\n        end\n    end\n    local min_idx_found, max_idx_found\
    \ = false, false\n    for i = 1, #lst do\n        if not min_idx_found and i ~=\
    \ min_idx then\n            table.insert(res, lst[i])\n            min_idx_found\
    \ = true\n        end\n        if not max_idx_found and i ~= max_idx then\n  \
    \          table.insert(res, lst[i])\n            max_idx_found = true\n     \
    \   end\n        if min_idx_found and max_idx_found then\n            break\n\
    \        end\n    end\n    return res\nend", "    local res = {}\n    local min\
    \ = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n    local min_index\
    \ = 1\n    local max_index = 1\n    local min_count = 0\n    local max_count =\
    \ 0\n    for i, v in ipairs(lst) do\n        if v == min then\n            min_count\
    \ = min_count + 1\n        elseif v == max then\n            max_count = max_count\
    \ + 1\n        end\n    end\n    for i = 1, #lst do\n        if i % 2 == 1 then\n\
    \            res[i] = min\n            min_index = min_index + 1\n           \
    \ if min_index > min_count then\n                min = math.min(unpack(lst))\n\
    \                min_index = 1\n            end\n        else\n            res[i]\
    \ = max\n            max_index = max_index + 1\n            if max_index > max_count\
    \ then\n                max = math.max(unpack(lst))\n                max_index\
    \ = 1\n            end\n        end\n    end\n    return res\nend", "    local\
    \ res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local idx = 1\n    while idx\
    \ <= #lst do\n        if idx % 2 == 1 then\n            res[idx] = min\n     \
    \       min_idx = min_idx + 1\n        else\n            res[idx] = max\n    \
    \        max_idx = max_idx + 1\n        end\n        idx = idx + 1\n    end\n\
    \    return res\nend", "    local res = {}\n    local min_val, max_val = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = 1, #lst\n    local min_found,\
    \ max_found = false, false\n    for i = 1, #lst do\n        if lst[i] == min_val\
    \ and not min_found then\n            min_idx = i\n            min_found = true\n\
    \        elseif lst[i] == max_val and not max_found then\n            max_idx\
    \ = i\n            max_found = true\n        end\n    end\n    local min_idx_found,\
    \ max_idx_found = false, false\n    for i = 1, #lst do\n        if i % 2 == 1\
    \ then\n            if not min_idx_found then\n                res[i] = min_val\n\
    \                min_idx_found = true\n            else\n                res[i]\
    \ = max_val\n                max_idx_found = true\n            end\n        else\n\
    \            if not max_idx_found then\n                res[i] = max_val\n   \
    \             max_idx_found = true\n            else\n                res[i] =\
    \ min_val\n                min_idx_found = true\n            end\n        end\n\
    \    end\n    for i = 1, #lst do\n        if i ~= min_idx and i ~= max_idx then\n\
    \            table.insert(res, lst[i])\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i]\
    \ == min then\n            min_idx = i\n        elseif lst[i] == max then\n  \
    \          max_idx = i\n        end\n    end\n    local i = 1\n    while i <=\
    \ #lst do\n        if i % 2 == 1 then\n            res[i] = min\n            table.remove(lst,\
    \ min_idx)\n        else\n            res[i] = max\n            table.remove(lst,\
    \ max_idx)\n        end\n        min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \        min_idx, max_idx = 1, 1\n        for j = 1, #lst do\n            if lst[j]\
    \ == min then\n                min_idx = j\n            elseif lst[j] == max then\n\
    \                max_idx = j\n            end\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "    local res = {}\n    local n = #lst\n    local\
    \ i = 1\n    local j = n\n    local k = 1\n    while i <= n and j >= 1 do\n  \
    \      if k % 2 == 1 then\n            res[k] = lst[i]\n            i = i + 1\n\
    \        else\n            res[k] = lst[j]\n            j = j - 1\n        end\n\
    \        k = k + 1\n    end\n    return res\nend", "    local function strange_sort_list_iter(lst,\
    \ acc)\n        if #lst == 0 then\n            return acc\n        end\n     \
    \   local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n        local\
    \ min_idx, max_idx = 0, 0\n        for i, v in ipairs(lst) do\n            if\
    \ v == min then\n                min_idx = i\n            elseif v == max then\n\
    \                max_idx = i\n            end\n        end\n        table.remove(lst,\
    \ min_idx)\n        table.remove(lst, max_idx - 1)\n        table.insert(acc,\
    \ min)\n        table.insert(acc, max)\n        return strange_sort_list_iter(lst,\
    \ acc)\n    end\n    return strange_sort_list_iter(lst, {})\nend", "  local function\
    \ strange_sort_list_iter(lst, acc)\n    if #lst == 0 then\n      return acc\n\
    \    else\n      local min_val, min_idx = math.min(unpack(lst))\n      local max_val,\
    \ max_idx = math.max(unpack(lst))\n      local min_removed = table.remove(lst,\
    \ min_idx)\n      local max_removed = table.remove(lst, max_idx)\n      table.insert(acc,\
    \ min_removed)\n      table.insert(acc, max_removed)\n      return strange_sort_list_iter(lst,\
    \ acc)\n    end\n  end\n  return strange_sort_list_iter(lst, {})\nend", "    local\
    \ result = {}\n    local min_index = 1\n    local max_index = 1\n    local min_value\
    \ = lst[1]\n    local max_value = lst[1]\n    for i, v in ipairs(lst) do\n   \
    \     if v < min_value then\n            min_value = v\n            min_index\
    \ = i\n        end\n        if v > max_value then\n            max_value = v\n\
    \            max_index = i\n        end\n    end\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            table.insert(result, min_value)\n\
    \            table.remove(lst, min_index)\n            min_value = lst[1]\n  \
    \          min_index = 1\n            for j, v in ipairs(lst) do\n           \
    \     if v < min_value then\n                    min_value = v\n             \
    \       min_index = j\n                end\n            end\n        else\n  \
    \          table.insert(result, max_value)\n            table.remove(lst, max_index)\n\
    \            max_value = lst[1]\n            max_index = 1\n            for j,\
    \ v in ipairs(lst) do\n                if v > max_value then\n               \
    \     max_value = v\n                    max_index = j\n                end\n\
    \            end\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "  local res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, #lst\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if not min_found and lst[i] == min then\n      min_idx\
    \ = i\n      min_found = true\n    elseif not max_found and lst[i] == max then\n\
    \      max_idx = i\n      max_found = true\n    end\n    if min_found and max_found\
    \ then\n      break\n    end\n  end\n  local idx = 1\n  while idx <= #lst do\n\
    \    if idx == min_idx then\n      table.insert(res, min)\n      idx = idx + 1\n\
    \    elseif idx == max_idx then\n      table.insert(res, max)\n      idx = idx\
    \ + 1\n    else\n      table.insert(res, lst[idx])\n      table.insert(res, lst[#lst\
    \ - idx + 1])\n      idx = idx + 2\n    end\n  end\n  return res\nend", "  local\
    \ result = {}\n  local min, max = min_max(lst)\n  local min_index, max_index =\
    \ 1, #lst\n  local min_value, max_value = min, max\n  while min_index <= max_index\
    \ do\n    result[min_index] = min_value\n    result[max_index] = max_value\n \
    \   min_index = min_index + 1\n    max_index = max_index - 1\n    min_value =\
    \ min_value + 1\n    max_value = max_value - 1\n  end\n  return result\nend",
  "    local result = {}\n    local min_index, max_index\n    local min_value, max_value\n\
    \    local min_value_set, max_value_set = false, false\n    local i = 1\n    while\
    \ i <= #lst do\n        if not min_value_set then\n            min_value, min_index\
    \ = min(lst)\n            min_value_set = true\n        elseif not max_value_set\
    \ then\n            max_value, max_index = max(lst)\n            max_value_set\
    \ = true\n        end\n        if min_value_set and max_value_set then\n     \
    \       table.insert(result, min_value)\n            table.insert(result, max_value)\n\
    \            table.remove(lst, min_index)\n            table.remove(lst, max_index\
    \ - 1)\n            min_value_set, max_value_set = false, false\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "    local sorted = {}\n\
    \    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local\
    \ min_i, max_i = lst[1], lst[1]\n    for i, v in ipairs(lst) do\n        if v\
    \ == min then\n            min_i = i\n        elseif v == max then\n         \
    \   max_i = i\n        end\n    end\n    local min_i, max_i = min_i, max_i\n \
    \   local min_v, max_v = min, max\n    local min_removed, max_removed = false,\
    \ false\n    for i = 1, #lst do\n        if i % 2 == 1 then\n            if not\
    \ min_removed then\n                table.insert(sorted, min_v)\n            \
    \    min_removed = true\n            else\n                table.insert(sorted,\
    \ lst[min_i])\n            end\n        else\n            if not max_removed then\n\
    \                table.insert(sorted, max_v)\n                max_removed = true\n\
    \            else\n                table.insert(sorted, lst[max_i])\n        \
    \    end\n        end\n    end\n    return sorted\nend", "  local function strange_sort_list_iter(lst,\
    \ acc)\n    if #lst == 0 then\n      return acc\n    else\n      local min = math.min(unpack(lst))\n\
    \      local max = math.max(unpack(lst))\n      local min_index = table.indexof(lst,\
    \ min)\n      local max_index = table.indexof(lst, max)\n      table.remove(lst,\
    \ min_index)\n      table.remove(lst, max_index)\n      return strange_sort_list_iter(lst,\
    \ table.join(acc, {min, max}))\n    end\n  end\n  return strange_sort_list_iter(lst,\
    \ {})\nend", "    local sorted = {}\n    local min = math.min(unpack(lst))\n \
    \   local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = 1\n    local idx = 1\n    while idx <= #lst do\n        if idx % 2 == 1 then\n\
    \            sorted[idx] = min\n            min_idx = min_idx + 1\n          \
    \  min = math.min(unpack(lst, min_idx))\n        else\n            sorted[idx]\
    \ = max\n            max_idx = max_idx + 1\n            max = math.max(unpack(lst,\
    \ max_idx))\n        end\n        idx = idx + 1\n    end\n    return sorted\n\
    end", "    local res = {}\n    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    local min_idx, max_idx = 1, 1\n    local min_found, max_found = false, false\n\
    \    for i = 1, #lst do\n        if lst[i] == min then\n            min_idx =\
    \ i\n            min_found = true\n        end\n        if lst[i] == max then\n\
    \            max_idx = i\n            max_found = true\n        end\n        if\
    \ min_found and max_found then\n            break\n        end\n    end\n    local\
    \ i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min\n            table.remove(lst, min_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            min_found,\
    \ max_found = false, false\n            for j = 1, #lst do\n                if\
    \ lst[j] == min then\n                    min_idx = j\n                    min_found\
    \ = true\n                end\n                if lst[j] == max then\n       \
    \             max_idx = j\n                    max_found = true\n            \
    \    end\n                if min_found and max_found then\n                  \
    \  break\n                end\n            end\n        else\n            res[i]\
    \ = max\n            table.remove(lst, max_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            min_found,\
    \ max_found = false, false\n            for j = 1, #lst do\n                if\
    \ lst[j] == min then\n                    min_idx = j\n                    min_found\
    \ = true\n                end\n                if lst[j] == max then\n       \
    \             max_idx = j\n                    max_found = true\n            \
    \    end\n                if min_found and max_found then\n                  \
    \  break\n                end\n            end\n        end", "  local res = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local i =\
    \ 1\n  while #lst > 0 do\n    if i % 2 == 1 then\n      res[#res + 1] = min\n\
    \      lst[min] = nil\n      min = math.min(unpack(lst))\n    else\n      res[#res\
    \ + 1] = max\n      lst[max] = nil\n      max = math.max(unpack(lst))\n    end\n\
    \    i = i + 1\n  end\n  return res\nend", "    local res = {}\n    local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    while #res < #lst do\n        if #res % 2 == 0 then\n          \
    \  res[#res + 1] = min\n            min_idx = min_idx + 1\n            min = math.min(unpack(lst,\
    \ min_idx))\n        else\n            res[#res + 1] = max\n            max_idx\
    \ = max_idx + 1\n            max = math.max(unpack(lst, max_idx))\n        end\n\
    \    end\n    return res\nend", "    local res = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_idx = 1\n    local max_idx\
    \ = 1\n    for i = 1, #lst do\n        if lst[i] == min then\n            min_idx\
    \ = i\n        end\n        if lst[i] == max then\n            max_idx = i\n \
    \       end\n    end\n    local min_taken = false\n    local max_taken = false\n\
    \    for i = 1, #lst do\n        if i % 2 == 1 then\n            if not min_taken\
    \ then\n                res[i] = min\n                min_taken = true\n     \
    \       else\n                res[i] = max\n                max_taken = true\n\
    \            end\n        else\n            if not max_taken then\n          \
    \      res[i] = max\n                max_taken = true\n            else\n    \
    \            res[i] = min\n                min_taken = true\n            end\n\
    \        end\n    end\n    return res\nend", "    local res = {}\n    local min,\
    \ max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx\
    \ = 1, 1\n    local min_found, max_found = false, false\n    for i, v in ipairs(lst)\
    \ do\n        if v == min then\n            min_idx = i\n            min_found\
    \ = true\n        elseif v == max then\n            max_idx = i\n            max_found\
    \ = true\n        end\n        if min_found and max_found then\n            break\n\
    \        end\n    end\n    local min_idx_found, max_idx_found = false, false\n\
    \    for i, v in ipairs(lst) do\n        if i == min_idx then\n            min_idx_found\
    \ = true\n        elseif i == max_idx then\n            max_idx_found = true\n\
    \        end\n        if min_idx_found and max_idx_found then\n            break\n\
    \        end\n        if i % 2 == 1 then\n            table.insert(res, min)\n\
    \        else\n            table.insert(res, max)\n        end\n    end\n    return\
    \ res\nend", "    local function strange_sort_list_iter(lst, acc)\n        if\
    \ #lst == 0 then\n            return acc\n        end\n        local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n        local min_idx, max_idx\
    \ = find_index(lst, min), find_index(lst, max)\n        local new_lst = remove_at(lst,\
    \ min_idx)\n        new_lst = remove_at(new_lst, max_idx - 1)\n        return\
    \ strange_sort_list_iter(new_lst, concat({acc, {min, max}}))\n    end\n    return\
    \ strange_sort_list_iter(lst, {})\nend", "    local result = {}\n    local min_index,\
    \ max_index\n    local min_value, max_value\n    local min_found, max_found\n\
    \    local min_removed, max_removed\n    local i, j\n    local lst_len = #lst\n\
    \    for i = 1, lst_len do\n        min_found = false\n        max_found = false\n\
    \        for j = 1, lst_len do\n            if not min_found and not min_removed[j]\
    \ then\n                min_index = j\n                min_value = lst[j]\n  \
    \              min_found = true\n            end\n            if not max_found\
    \ and not max_removed[j] then\n                max_index = j\n               \
    \ max_value = lst[j]\n                max_found = true\n            end\n    \
    \        if min_found and max_found then\n                break\n            end\n\
    \        end\n        for j = 1, lst_len do\n            if not min_removed[j]\
    \ and lst[j] < min_value then\n                min_index = j\n               \
    \ min_value = lst[j]\n            end\n            if not max_removed[j] and lst[j]\
    \ > max_value then\n                max_index = j\n                max_value =\
    \ lst[j]\n            end\n        end\n        if i % 2 == 1 then\n         \
    \   result[i] = min_value\n            min_removed[min_index] = true\n       \
    \ else\n            result[i] = max_value\n            max_removed[max_index]\
    \ = true\n        end\n    end\n    return result\nend", "  local sorted = {}\n\
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n  local min_idx,\
    \ max_idx = 1, 1\n  local min_found, max_found = false, false\n  for i = 1, #lst\
    \ do\n    if lst[i] == min and not min_found then\n      min_idx = i\n      min_found\
    \ = true\n    elseif lst[i] == max and not max_found then\n      max_idx = i\n\
    \      max_found = true\n    end\n  end\n  local min_lst, max_lst = {}, {}\n \
    \ for i = 1, #lst do\n    if i ~= min_idx then\n      table.insert(min_lst, lst[i])\n\
    \    end\n    if i ~= max_idx then\n      table.insert(max_lst, lst[i])\n    end\n\
    \  end\n  local min_min, min_max = math.min(unpack(min_lst)), math.max(unpack(min_lst))\n\
    \  local max_min, max_max = math.min(unpack(max_lst)), math.max(unpack(max_lst))\n\
    \  local min_min_idx, min_max_idx = 1, 1\n  local max_min_idx, max_max_idx = 1,\
    \ 1\n  local min_min_found, min_max_found = false, false\n  local max_min_found,\
    \ max_max_found = false, false\n  for i = 1, #min_lst do\n    if min_lst[i] ==\
    \ min_min and not min_min_found then\n      min_min_idx = i\n      min_min_found\
    \ = true\n    elseif min_lst[i] == min_max and not min_max_found then\n      min_max_idx\
    \ = i\n      min_max_found = true\n    end\n  end\n  for i = 1, #max_lst do\n\
    \    if max_lst[i] == max_min and not max_", "  local sorted = {}\n  local min,\
    \ max = min_max(lst)\n  local min_idx, max_idx = 1, #lst\n  for i = 1, #lst do\n\
    \    if i % 2 == 1 then\n      sorted[i] = min\n      min_idx = min_idx + 1\n\
    \      min = lst[min_idx]\n    else\n      sorted[i] = max\n      max_idx = max_idx\
    \ - 1\n      max = lst[max_idx]\n    end\n  end\n  return sorted\nend", "    local\
    \ result = {}\n    local min_idx, max_idx\n    local min_val, max_val\n    local\
    \ min_idx_found, max_idx_found\n    local min_val_found, max_val_found\n    local\
    \ min_idx_removed, max_idx_removed\n    local min_val_removed, max_val_removed\n\
    \    local i, j\n    local lst_len = #lst\n    local lst_len_half = math.floor(lst_len\
    \ / 2)\n    local lst_len_half_plus_one = lst_len_half + 1\n    local lst_len_half_minus_one\
    \ = lst_len_half - 1\n    local lst_len_half_plus_one_is_odd = lst_len_half_plus_one\
    \ % 2 == 1\n    local lst_len_half_is_odd = lst_len_half % 2 == 1\n    local lst_len_is_odd\
    \ = lst_len % 2 == 1\n    local lst_len_is_even = not lst_len_is_odd\n    local\
    \ lst_len_is_one = lst_len == 1\n    local lst_len_is_two = lst_len == 2\n   \
    \ local lst_len_is_three = lst_len == 3\n    local lst_len_is_four = lst_len ==\
    \ 4\n    local lst_len_is_five = lst_len == 5\n    local lst_len_is_six = lst_len\
    \ == 6\n    local lst_len_is_seven = lst_len == 7\n    local lst_len_is_eight\
    \ = lst_len == 8\n    local lst_len_is_nine = lst_len == 9\n    local lst_len_is_ten\
    \ = lst_len == 10\n    local lst_len_is_eleven = lst_len == 11\n    local lst_len_is_twelve\
    \ = lst_len == 12\n    local lst_len_is_thirteen = lst_len == 13\n    local l",
  "    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local i = 1\n    while i\
    \ <= #lst do\n        if i % 2 == 1 then\n            res[i] = min\n         \
    \   min_idx = min_idx + 1\n        else\n            res[i] = max\n          \
    \  max_idx = max_idx - 1\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n  local max\
    \ = math.max(unpack(lst))\n  local i = 1\n  while i <= #lst do\n    if i % 2 ==\
    \ 1 then\n      res[i] = min\n      min = min + 1\n    else\n      res[i] = max\n\
    \      max = max - 1\n    end\n    i = i + 1\n  end\n  return res\nend", "  local\
    \ result = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if lst[i] == min and not min_found then\n      min_idx\
    \ = i\n      min_found = true\n    elseif lst[i] == max and not max_found then\n\
    \      max_idx = i\n      max_found = true\n    end\n  end\n  for i = 1, #lst\
    \ do\n    if i % 2 == 1 then\n      table.insert(result, lst[min_idx])\n     \
    \ min_idx = min_idx + 1\n    else\n      table.insert(result, lst[max_idx])\n\
    \      max_idx = max_idx - 1\n    end\n  end\n  return result\nend", "  local\
    \ res = {}\n  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n    if lst[i] == min then\n\
    \      min_idx = i\n    elseif lst[i] == max then\n      max_idx = i\n    end\n\
    \  end\n  local i = 1\n  while i <= #lst do\n    if i % 2 == 1 then\n      res[i]\
    \ = min\n      min_idx = min_idx + 1\n      if min_idx <= #lst then\n        min\
    \ = lst[min_idx]\n      end\n    else\n      res[i] = max\n      max_idx = max_idx\
    \ - 1\n      if max_idx > 0 then\n        max = lst[max_idx]\n      end\n    end\n\
    \    i = i + 1\n  end\n  return res\nend", "  local res = {}\n  local min = math.min(unpack(lst))\n\
    \  local max = math.max(unpack(lst))\n  local min_idx = table.index_of(lst, min)\n\
    \  local max_idx = table.index_of(lst, max)\n  local is_min = true\n  local idx\
    \ = 1\n  while #res < #lst do\n    if is_min then\n      res[idx] = min\n    \
    \  min_idx = table.index_of(lst, min, min_idx + 1)\n      if min_idx then\n  \
    \      min = lst[min_idx]\n      else\n        min = nil\n      end\n    else\n\
    \      res[idx] = max\n      max_idx = table.index_of(lst, max, max_idx + 1)\n\
    \      if max_idx then\n        max = lst[max_idx]\n      else\n        max =\
    \ nil\n      end\n    end\n    is_min = not is_min\n    idx = idx + 1\n  end\n\
    \  return res\nend", "    local function get_min_max(lst)\n        local min,\
    \ max = math.huge, -math.huge\n        for _, v in ipairs(lst) do\n          \
    \  if v < min then min = v end\n            if v > max then max = v end\n    \
    \    end\n        return min, max\n    end", "  local res = {}\n  local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n  local i = 1\n  while #lst\
    \ > 0 do\n    if i % 2 == 1 then\n      table.insert(res, min)\n      table.remove(lst,\
    \ table.index_of(lst, min))\n    else\n      table.insert(res, max)\n      table.remove(lst,\
    \ table.index_of(lst, max))\n    end\n    min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \    i = i + 1\n  end\n  return res\nend", "    local function strange_sort_list_iter(lst,\
    \ acc)\n        if #lst == 0 then\n            return acc\n        end\n     \
    \   local min = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n\
    \        local min_idx = table.indexof(lst, min)\n        local max_idx = table.indexof(lst,\
    \ max)\n        table.remove(lst, min_idx)\n        table.remove(lst, max_idx\
    \ - 1)\n        table.insert(acc, min)\n        table.insert(acc, max)\n     \
    \   return strange_sort_list_iter(lst, acc)\n    end\n    return strange_sort_list_iter(lst,\
    \ {})\nend", "    local result = {}\n    local min_max = {}\n    local min = math.min(unpack(lst))\n\
    \    local max = math.max(unpack(lst))\n    local min_max_index = 1\n    local\
    \ min_max_value = min\n    local min_max_direction = 1\n    local lst_index =\
    \ 1\n    local lst_value = lst[lst_index]\n    local lst_direction = 1\n    local\
    \ lst_length = #lst\n    local lst_min_max_length = math.max(lst_length, 2)\n\
    \    local lst_min_max_length_half = math.floor(lst_min_max_length / 2)\n    local\
    \ lst_min_max_length_half_plus_one = lst_min_max_length_half + 1\n    local lst_min_max_length_half_plus_one_is_odd\
    \ = lst_min_max_length_half_plus_one % 2 == 1\n    local lst_min_max_length_half_is_odd\
    \ = lst_min_max_length_half % 2 == 1\n    local lst_min_max_length_is_odd = lst_min_max_length\
    \ % 2 == 1\n    local lst_min_max_length_is_even = not lst_min_max_length_is_odd\n\
    \    local lst_min_max_length_half_plus_one_is_even = not lst_min_max_length_half_plus_one_is_odd\n\
    \    local lst_min_max_length_half_is_even = not lst_min_max_length_half_is_odd\n\
    \    local lst_min_max_length_half_plus_one_is_greater_than_lst_length = lst_min_max_length_half_plus_one\
    \ > lst_length\n    local lst_min_max_length_half_is_greater_than_lst_length =\
    \ lst_min_max_length_half > lst_length\n    local lst_min_max_length_half_plus_one_",
  "    local res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = 1\n    local min_found = false\n \
    \   local max_found = false\n    for i, v in ipairs(lst) do\n        if v == min\
    \ then\n            min_idx = i\n            min_found = true\n        end\n \
    \       if v == max then\n            max_idx = i\n            max_found = true\n\
    \        end\n        if min_found and max_found then\n            break\n   \
    \     end\n    end\n    if min_idx < max_idx then\n        for i = 1, #lst, 2\
    \ do\n            res[i] = min\n            res[i + 1] = max\n        end\n  \
    \  else\n        for i = 1, #lst, 2 do\n            res[i] = max\n           \
    \ res[i + 1] = min\n        end\n    end\n    return res\nend", "    local res\
    \ = {}\n    local min_idx, max_idx = 1, #lst\n    local min_val, max_val = lst[min_idx],\
    \ lst[max_idx]\n    local min_found, max_found = false, false\n    local min_cnt,\
    \ max_cnt = 0, 0\n    local min_cnt_limit, max_cnt_limit = 1, 1\n    local min_idx_limit,\
    \ max_idx_limit = 1, #lst\n    local min_idx_step, max_idx_step = 1, -1\n    local\
    \ min_idx_step_limit, max_idx_step_limit = 1, 1\n    local min_idx_step_cnt, max_idx_step_cnt\
    \ = 0, 0\n    local min_idx_step_cnt_limit, max_idx_step_cnt_limit = 1, 1\n  \
    \  local min_idx_step_cnt_limit_step, max_idx_step_cnt_limit_step = 1, 1\n   \
    \ local min_idx_step_cnt_limit_step_limit, max_idx_step_cnt_limit_step_limit =\
    \ 1, 1\n    local min_idx_step_cnt_limit_step_limit_step, max_idx_step_cnt_limit_step_limit_step\
    \ = 1, 1\n    local min_idx_step_cnt_limit_step_limit_step_limit, max_idx_step_cnt_limit_step_limit_step_limit\
    \ = 1, 1\n    local min_idx_step_cnt_limit_step_limit_step_limit_step, max_idx_step_cnt_limit_step_limit_step_limit_step\
    \ = 1, 1\n    local min_idx_step_cnt_limit_step_limit_step_limit_step_limit, max_idx_step_cnt_limit_step_limit_step_limit_step_limit\
    \ = 1, 1\n    local min_idx_step_cnt_limit_step_limit_step_limit_step", "  local\
    \ min, max = math.min, math.max\n  local function min_max(lst)\n    local mn,\
    \ mx = min(lst), max(lst)\n    local mn_idx, mx_idx = 0, 0\n    for i, v in ipairs(lst)\
    \ do\n      if v == mn then mn_idx = i end\n      if v == mx then mx_idx = i end\n\
    \    end\n    return mn, mx, mn_idx, mx_idx\n  end\n  local function remove(lst,\
    \ idx)\n    local res = {}\n    for i, v in ipairs(lst) do\n      if i ~= idx\
    \ then res[#res + 1] = v end\n    end\n    return res\n  end\n  local res = {}\n\
    \  while #lst > 0 do\n    local mn, mx, mn_idx, mx_idx = min_max(lst)\n    res[#res\
    \ + 1] = mn\n    res[#res + 1] = mx\n    lst = remove(lst, mn_idx)\n    lst =\
    \ remove(lst, mx_idx - 1)\n  end\n  return res\nend", "    local res = {}\n  \
    \  local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i] == min then\n    \
    \        min_idx = i\n        elseif lst[i] == max then\n            max_idx =\
    \ i\n        end\n    end\n    local i = 1\n    while i <= #lst do\n        if\
    \ i % 2 == 1 then\n            table.insert(res, min)\n            table.remove(lst,\
    \ min_idx)\n            min, max = math.min(unpack(lst)), math.max(unpack(lst))\n\
    \            min_idx, max_idx = 1, 1\n            for j = 1, #lst do\n       \
    \         if lst[j] == min then\n                    min_idx = j\n           \
    \     elseif lst[j] == max then\n                    max_idx = j\n           \
    \     end\n            end\n        else\n            table.insert(res, max)\n\
    \            table.remove(lst, max_idx)\n            min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n            min_idx, max_idx = 1, 1\n            for\
    \ j = 1, #lst do\n                if lst[j] == min then\n                    min_idx\
    \ = j\n                elseif lst[j] == max then\n                    max_idx\
    \ = j\n                end\n            end\n        end\n        i = i + 1\n\
    \    end\n    return res\nend", "  local result = {}\n  local min, max = min_max(lst)\n\
    \  local min_index, max_index = 1, #lst\n  local min_value, max_value = min, max\n\
    \  local min_found, max_found = false, false\n  for i = 1, #lst do\n    if not\
    \ min_found and lst[i] == min_value then\n      min_found = true\n    elseif not\
    \ max_found and lst[i] == max_value then\n      max_found = true\n    end\n  \
    \  if min_found and max_found then\n      min_value, max_value = min_max(lst,\
    \ i)\n      min_found, max_found = false, false\n    end\n    if i % 2 == 1 then\n\
    \      result[min_index] = min_value\n      min_index = min_index + 1\n    else\n\
    \      result[max_index] = max_value\n      max_index = max_index - 1\n    end\n\
    \  end\n  return result\nend", "  local res = {}\n  local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n  local min_idx, max_idx = 1, 1\n  for i = 1, #lst do\n\
    \    if lst[i] == min then\n      min_idx = i\n    elseif lst[i] == max then\n\
    \      max_idx = i\n    end\n  end\n  local min_found, max_found = false, false\n\
    \  for i = 1, #lst do\n    if i % 2 == 1 then\n      if not min_found then\n \
    \       res[i] = min\n        min_found = true\n      else\n        res[i] = max\n\
    \        max_found = true\n      end\n    else\n      if not max_found then\n\
    \        res[i] = max\n        max_found = true\n      else\n        res[i] =\
    \ min\n        min_found = true\n      end\n    end\n  end\n  return res\nend",
  "    local t = {}\n    local n = #lst\n    local i = 1\n    while n > 0 do\n   \
    \     local min = math.min(unpack(lst))\n        local max = math.max(unpack(lst))\n\
    \        if i % 2 == 1 then\n            t[i] = min\n            table.remove(lst,\
    \ table.index_of(lst, min))\n        else\n            t[i] = max\n          \
    \  table.remove(lst, table.index_of(lst, max))\n        end\n        i = i + 1\n\
    \        n = n - 1\n    end\n    return t\nend", "    local res = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx,\
    \ max_idx = 1, 1\n    for i = 1, #lst do\n        if lst[i] == min then\n    \
    \        min_idx = i\n        elseif lst[i] == max then\n            max_idx =\
    \ i\n        end\n    end\n    local min_removed = table.remove(lst, min_idx)\n\
    \    local max_removed = table.remove(lst, max_idx - 1)\n    table.insert(res,\
    \ min_removed)\n    table.insert(res, max_removed)\n    while #lst > 0 do\n  \
    \      min, max = math.min(unpack(lst)), math.max(unpack(lst))\n        min_idx,\
    \ max_idx = 1, 1\n        for i = 1, #lst do\n            if lst[i] == min then\n\
    \                min_idx = i\n            elseif lst[i] == max then\n        \
    \        max_idx = i\n            end\n        end\n        min_removed = table.remove(lst,\
    \ min_idx)\n        max_removed = table.remove(lst, max_idx - 1)\n        table.insert(res,\
    \ min_removed)\n        table.insert(res, max_removed)\n    end\n    return res\n\
    end", "  local res = {}\n  local min = math.min(unpack(lst))\n  local max = math.max(unpack(lst))\n\
    \  local min_idx = 1\n  local max_idx = 1\n  local min_val = min\n  local max_val\
    \ = max\n  local min_found = false\n  local max_found = false\n  local min_count\
    \ = 0\n  local max_count = 0\n  local i = 1\n  while i <= #lst do\n    if lst[i]\
    \ == min_val then\n      min_idx = i\n      min_found = true\n    elseif lst[i]\
    \ == max_val then\n      max_idx = i\n      max_found = true\n    end\n    if\
    \ min_found and max_found then\n      if min_idx < max_idx then\n        res[#res\
    \ + 1] = min_val\n        res[#res + 1] = max_val\n        min_count = min_count\
    \ + 1\n        max_count = max_count + 1\n        min_val = min + min_count\n\
    \        max_val = max - max_count\n        min_found = false\n        max_found\
    \ = false\n      else\n        res[#res + 1] = max_val\n        res[#res + 1]\
    \ = min_val\n        min_count = min_count + 1\n        max_count = max_count\
    \ + 1\n        min_val = min + min_count\n        max_val = max - max_count\n\
    \        min_found = false\n        max_found = false\n      end\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "  local res = {}\n  local min_idx, max_idx\
    \ = 1, #lst\n  local min_val, max_val = lst[min_idx], lst[max_idx]\n  local min_found,\
    \ max_found = false, false\n  local min_idx_found, max_idx_found = false, false\n\
    \  local min_idx_found_prev, max_idx_found_prev = false, false\n  local min_idx_found_prev_prev,\
    \ max_idx_found_prev_prev = false, false\n  local min_idx_found_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev = false, false\n  local min_idx_found_prev_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev_prev = false, false\n  local min_idx_found_prev_prev_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev_prev_prev = false, false\n  local min_idx_found_prev_prev_prev_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev_prev_prev_prev = false, false\n  local min_idx_found_prev_prev_prev_prev_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev_prev_prev_prev_prev = false, false\n  local min_idx_found_prev_prev_prev_prev_prev_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev_prev_prev_prev_prev_prev = false, false\n  local\
    \ min_idx_found_prev_prev_prev_prev_prev_prev_prev_prev_prev, max_idx_found_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = false, false\n  local min_idx_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev,\
    \ max_idx_found_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = false, false\n\
    \  local min_idx", "  local res = {}\n  local min = math.min(unpack(lst))\n  local\
    \ max = math.max(unpack(lst))\n  local min_idx = 1\n  local max_idx = 1\n  for\
    \ i = 1, #lst do\n    if lst[i] == min then\n      min_idx = i\n    end\n    if\
    \ lst[i] == max then\n      max_idx = i\n    end\n  end\n  local i = 1\n  while\
    \ i <= #lst do\n    if i % 2 == 1 then\n      res[i] = min\n      min_idx = min_idx\
    \ + 1\n    else\n      res[i] = max\n      max_idx = max_idx - 1\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "    local res = {}\n    local min, max\
    \ = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_idx, max_idx =\
    \ 1, 1\n    local min_found, max_found = false, false\n    for i = 1, #lst do\n\
    \        if lst[i] == min and not min_found then\n            min_idx = i\n  \
    \          min_found = true\n        elseif lst[i] == max and not max_found then\n\
    \            max_idx = i\n            max_found = true\n        end\n    end\n\
    \    local min_lst, max_lst = {}, {}\n    for i = 1, #lst do\n        if i ~=\
    \ min_idx then\n            table.insert(min_lst, lst[i])\n        end\n     \
    \   if i ~= max_idx then\n            table.insert(max_lst, lst[i])\n        end\n\
    \    end\n    local min_min, min_max = math.min(unpack(min_lst)), math.max(unpack(min_lst))\n\
    \    local max_min, max_max = math.min(unpack(max_lst)), math.max(unpack(max_lst))\n\
    \    local min_min_idx, min_max_idx = 1, 1\n    local max_min_idx, max_max_idx\
    \ = 1, 1\n    local min_min_found, min_max_found = false, false\n    local max_min_found,\
    \ max_max_found = false, false\n    for i = 1, #min_lst do\n        if min_lst[i]\
    \ == min_min and not min_min_found then\n            min_min_idx = i\n       \
    \     min_min_found = true\n        elseif min_lst[i] == min_max and not min_max_found\
    \ then\n            min_max_idx = i\n            min_max_found = true\n      \
    \  end\n    end\n    for i = 1, #max_lst do\n        if max_lst[i] == max_min\
    \ and not max_", "    local min, max = min_max(lst)\n    local res = {}\n    local\
    \ i = 1\n    while i <= #lst do\n        if i % 2 == 1 then\n            res[i]\
    \ = min\n            min = min + 1\n        else\n            res[i] = max\n \
    \           max = max - 1\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend", "    local min, max = math.min, math.max\n    local function strange_sort(lst,\
    \ res)\n        if #lst == 0 then return res end\n        local mn, mx = min(unpack(lst)),\
    \ max(unpack(lst))\n        local mn_i, mx_i = 1, 1\n        for i, v in ipairs(lst)\
    \ do\n            if v == mn then mn_i = i end\n            if v == mx then mx_i\
    \ = i end\n        end\n        table.remove(lst, mn_i)\n        table.remove(lst,\
    \ mx_i - 1)\n        table.insert(res, mn)\n        table.insert(res, mx)\n  \
    \      return strange_sort(lst, res)\n    end\n    return strange_sort(lst, {})\n\
    end", "    local result = {}\n    local min_index, max_index\n    local min_value,\
    \ max_value\n    local min_removed, max_removed\n    local i", "    local function\
    \ strange_sort_list_iter(lst, acc)\n        if #lst == 0 then\n            return\
    \ acc\n        end\n        local min_val, min_idx = math.min(unpack(lst))\n \
    \       local max_val, max_idx = math.max(unpack(lst))\n        local min_removed\
    \ = table.remove(lst, min_idx)\n        local max_removed = table.remove(lst,\
    \ max_idx - 1)\n        table.insert(acc, min_removed)\n        table.insert(acc,\
    \ max_removed)\n        return strange_sort_list_iter(lst, acc)\n    end\n   \
    \ return strange_sort_list_iter(lst, {})\nend", "    local result = {}\n    local\
    \ min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local min_index,\
    \ max_index = 1, 1\n    local min_found, max_found = false, false\n    for i =\
    \ 1, #lst do\n        if lst[i] == min and not min_found then\n            min_index\
    \ = i\n            min_found = true\n        elseif lst[i] == max and not max_found\
    \ then\n            max_index = i\n            max_found = true\n        end\n\
    \    end\n    local min_lst, max_lst = {}, {}\n    for i = 1, #lst do\n      \
    \  if i ~= min_index then\n            table.insert(min_lst, lst[i])\n       \
    \ end\n        if i ~= max_index then\n            table.insert(max_lst, lst[i])\n\
    \        end\n    end\n    local min_min, min_max = math.min(unpack(min_lst)),\
    \ math.max(unpack(min_lst))\n    local max_min, max_max = math.min(unpack(max_lst)),\
    \ math.max(unpack(max_lst))\n    local min_min_index, min_max_index = 1, 1\n \
    \   local max_min_index, max_max_index = 1, 1\n    for i = 1, #min_lst do\n  \
    \      if min_lst[i] == min_min then\n            min_min_index = i\n        elseif\
    \ min_lst[i] == min_max then\n            min_max_index = i\n        end\n   \
    \ end\n    for i = 1, #max_lst do\n        if max_lst[i] == max_min then\n   \
    \         max_min_index = i\n        elseif max_lst[i] == max_max then\n     \
    \       max_max_index = i\n        end\n    end\n    local min_min_lst, min_max_lst\
    \ = {}, {}\n    local max_min_lst, max_max_lst = {}, {}\n    for", "    local\
    \ res = {}\n    local min = math.min(unpack(lst))\n    local max = math.max(unpack(lst))\n\
    \    local min_idx = 1\n    local max_idx = #lst\n    local min_found = false\n\
    \    local max_found = false\n    for i = 1, #lst do\n        if lst[i] == min\
    \ then\n            min_found = true\n            min_idx = i\n        end\n \
    \       if lst[i] == max then\n            max_found = true\n            max_idx\
    \ = i\n        end\n    end\n    if min_found and max_found then\n        local\
    \ new_lst = {}\n        for i = 1, #lst do\n            if i ~= min_idx and i\
    \ ~= max_idx then\n                table.insert(new_lst, lst[i])\n           \
    \ end\n        end\n        return strange_sort_list(new_lst)\n    else\n    \
    \    return lst\n    end\nend", "    local res = {}\n    local min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n    local min_idx, max_idx = lst:index(min), lst:index(max)\n\
    \    local min_removed, max_removed = false, false\n    local i = 1\n    while\
    \ #lst > 0 do\n        if not min_removed and (max_removed or min_idx < max_idx)\
    \ then\n            res[i] = min\n            lst:remove(min)\n            min_removed\
    \ = true\n        else\n            res[i] = max\n            lst:remove(max)\n\
    \            max_removed = true\n        end\n        min, max = math.min(unpack(lst)),\
    \ math.max(unpack(lst))\n        min_idx, max_idx = lst:index(min), lst:index(max)\n\
    \        min_removed, max_removed = false, false\n        i = i + 1\n    end\n\
    \    return res\nend", "    local sorted = {}\n    local asc, desc = {}, {}\n\
    \    for _, v in ipairs(lst) do\n        if v > 0 then\n            table.insert(asc,\
    \ v)\n        elseif v < 0 then\n            table.insert(desc, v)\n        else\n\
    \            table.insert(sorted, v)\n        end\n    end\n    table.sort(asc)\n\
    \    table.sort(desc, function(a, b) return a > b end)\n    for i = 1, #asc do\n\
    \        table.insert(sorted, asc[i])\n        if desc[i] then\n            table.insert(sorted,\
    \ desc[i])\n        end\n    end\n    return sorted\nend", "    local res = {}\n\
    \    local min, max = math.min(unpack(lst)), math.max(unpack(lst))\n    local\
    \ min_idx, max_idx = 1, 1\n    while min_idx <= #lst or max_idx <= #lst do\n \
    \       if min_idx <= #lst then\n            res[#res + 1] = min\n           \
    \ min_idx = min_idx + 1\n        end\n        if max_idx <= #lst then\n      \
    \      res[#res + 1] = max\n            max_idx = max_idx + 1\n        end\n \
    \   end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
