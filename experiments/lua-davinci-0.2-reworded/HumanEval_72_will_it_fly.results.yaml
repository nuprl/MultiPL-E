---
name: HumanEval_72_will_it_fly
language: lua
results:
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i, v in ipairs(q) do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local len = #q
      for i = 1, len / 2 do
        if q[i] ~= q[len - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local is_palindromic = true
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                is_palindromic = false
                break
            end
        end
        return is_palindromic
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu3q40vyp.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpu3q40vyp.lua:21:
    in local 'candidate'\n\t/tmp/tmpu3q40vyp.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i, v in ipairs(q) do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i, v in ipairs(q) do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local is_palindromic = true
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                is_palindromic = false
                break
            end
        end
        return is_palindromic
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i, j = 1, #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9qvgofx.lua:23:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_9qvgofx.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_palindrome = true
        for i = 1, #q / 2 do
            if q[i] ~= q[#q - i + 1] then
                is_palindrome = false
                break
            end
        end
        return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgeqdygy3.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpgeqdygy3.lua:21:
    in local 'candidate'\n\t/tmp/tmpgeqdygy3.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_balanced = true
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                is_balanced = false
                break
            end
        end
        return is_balanced
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the object q will fly, and false
    otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)
    and the sum of its elements is less than or equal the maximum possible weight
    w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than
    the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2, 3},
    1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible
    weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than the
    maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n-- true\n--
    # 3 is less than the maximum possible weight, and it's balanced.\nlocal function
    will_it_fly(q, w)\n\tlocal sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum
    + v\n\tend\n\treturn sum <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,
    2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},
    5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,
    2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9ljuhop.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpc9ljuhop.lua:21:
    in local 'candidate'\n\t/tmp/tmpc9ljuhop.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk990uoba.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpk990uoba.lua:21:
    in local 'candidate'\n\t/tmp/tmpk990uoba.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local left = 1
      local right = #q
      while left < right do
        if q[left] ~= q[right] then
          return false
        end
        left = left + 1
        right = right - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local n = #q
      for i = 1, math.floor(n / 2) do
        if q[i] ~= q[n - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i, v in ipairs(q) do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local reverse = {}
      for i = #q, 1, -1 do
        table.insert(reverse, q[i])
      end
      for i, v in ipairs(q) do
        if q[i] ~= reverse[i] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5fsvxyz.lua:23:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpg5fsvxyz.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local reverse = {}
      for i = #q, 1, -1 do
        reverse[#reverse + 1] = q[i]
      end
      for i = 1, #q do
        if q[i] ~= reverse[i] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local len = #q
        for i = 1, len do
            if q[i] ~= q[len - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nve_8c9.lua:23:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1nve_8c9.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i, j = 1, #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i, j = 1, #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local len = #q
      for i = 1, len do
        if q[i] ~= q[len - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_palindrome = true
        for i = 1, #q / 2 do
            if q[i] ~= q[#q - i + 1] then
                is_palindrome = false
                break
            end
        end
        return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiyen0oan.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpiyen0oan.lua:21:
    in local 'candidate'\n\t/tmp/tmpiyen0oan.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local len = #q
      for i = 1, len do
        if q[i] ~= q[len - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for k, v in pairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local reverse = {}
      for k, v in pairs(q) do
        reverse[#q-k+1] = v
      end
      for k, v in pairs(q) do
        if q[k] ~= reverse[k] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgr8p5a0d.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpgr8p5a0d.lua:21:
    in local 'candidate'\n\t/tmp/tmpgr8p5a0d.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_palindrome = true
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                is_palindrome = false
                break
            end
        end
        return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      return is_balanced(q) and sum(q) <= w
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6nlyy26.lua:17:
    attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpu6nlyy26.lua:17:
    in local 'candidate'\n\t/tmp/tmpu6nlyy26.lua:23: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i, j = 1, #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiijm7n4w.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpiijm7n4w.lua:21:
    in local 'candidate'\n\t/tmp/tmpiijm7n4w.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2yzioro.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpn2yzioro.lua:21:
    in local 'candidate'\n\t/tmp/tmpn2yzioro.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        local is_balanced = true
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                is_balanced = false
                break
            end
        end
        return is_balanced and sum <= w
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local n = #q
      for i = 1, n do
        if q[i] ~= q[n - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_palindrome = true
        for i = 1, #q / 2 do
            if q[i] ~= q[#q - i + 1] then
                is_palindrome = false
                break
            end
        end
        return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdsjnz41.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpgdsjnz41.lua:21:
    in local 'candidate'\n\t/tmp/tmpgdsjnz41.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i,v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local len = #q
        for i=1,len/2 do
            if q[i] ~= q[len-i+1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local l = #q
        for i = 1, l do
            if q[i] ~= q[l - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local half = math.floor(#q / 2)
      for i = 1, half do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local n = #q
      for i = 1, n do
        if q[i] ~= q[n - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_palindrome = true
        for i = 1, #q / 2 do
            if q[i] ~= q[#q - i + 1] then
                is_palindrome = false
                break
            end
        end
        return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local is_palindrome = true
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                is_palindrome = false
                break
            end
        end
        return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      local is_balanced = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_balanced = false
          break
        end
      end
      return is_balanced and sum <= w
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local len = #q
      for i = 1, len do
        if q[i] ~= q[len-i+1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_balanced = true
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          is_balanced = false
          break
        end
      end
      return is_balanced
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28rmc2kg.lua:23:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp28rmc2kg.lua:23: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i, j = 1, #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local n = #q
        for i = 1, n do
            if q[i] ~= q[n - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local len = #q
      for i = 1, len / 2 do
        if q[i] ~= q[len - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q/2 do
        if q[i] ~= q[#q-i+1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        local i, j = 1, #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q / 2 do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      return sum <= w and is_palindrome(q)
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lb0z_l3.lua:21:
    attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp5lb0z_l3.lua:21:
    in local 'candidate'\n\t/tmp/tmp5lb0z_l3.lua:27: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i, v in ipairs(q) do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local n = #q
      for i = 1, n do
        if q[i] ~= q[n - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i, v in ipairs(q) do
            sum = sum + v
        end
        if sum > w then
            return false
        end
        for i, v in ipairs(q) do
            if q[i] ~= q[#q - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the object q will fly, and false
    otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)
    and the sum of its elements is less than or equal the maximum possible weight
    w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than
    the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2, 3},
    1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible
    weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than the
    maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n-- true\n--
    # 3 is less than the maximum possible weight, and it's balanced.\nlocal function
    will_it_fly(q, w)\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif
    sum > w then\n\t\treturn false\n\tend\n\tfor i = 1, #q do\n\t\tif q[i] ~= q[#q
    - i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction
    test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,
    2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},
    5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,
    2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local is_palindrome = true
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          is_palindrome = false
          break
        end
      end
      return is_palindrome
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        local i = 1
        local j = #q
        while i < j do
            if q[i] ~= q[j] then
                return false
            end
            i = i + 1
            j = j - 1
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i = 1, #q do
        sum = sum + q[i]
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for i, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
        local sum = 0
        for i = 1, #q do
            sum = sum + q[i]
        end
        if sum > w then
            return false
        end
        for i = 1, #q do
            if q[i] ~= q[#q - i + 1] then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      local i = 1
      local j = #q
      while i < j do
        if q[i] ~= q[j] then
          return false
        end
        i = i + 1
        j = j - 1
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- Write a function that returns true if the object q will fly, and false otherwise.
    -- The object q will fly if it's balanced (it is a palindromic table) and the sum of its elements is less than or equal the maximum possible weight w.
    -- Example:
    -- >>> will_it_fly({1, 2}, 5)
    -- false
    -- # 1+2 is less than the maximum possible weight, but it's unbalanced.
    -- >>> will_it_fly({3, 2, 3}, 1)
    -- false
    -- # it's balanced, but 3+2+3 is more than the maximum possible weight.
    -- >>> will_it_fly({3, 2, 3}, 9)
    -- true
    -- # 3+2+3 is less than the maximum possible weight, and it's balanced.
    -- >>> will_it_fly({3}, 5)
    -- true
    -- # 3 is less than the maximum possible weight, and it's balanced.
    local function will_it_fly(q, w)
      local sum = 0
      for _, v in ipairs(q) do
        sum = sum + v
      end
      if sum > w then
        return false
      end
      for i = 1, #q do
        if q[i] ~= q[#q - i + 1] then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = will_it_fly
        lu.assertEquals(candidate({3, 2, 3}, 9), true)
        lu.assertEquals(candidate({1, 2}, 5), false)
        lu.assertEquals(candidate({3}, 5), true)
        lu.assertEquals(candidate({3, 2, 3}, 1), false)
        lu.assertEquals(candidate({1, 2, 3}, 6), false)
        lu.assertEquals(candidate({5}, 5), true)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
