---
language: lua
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkathvnl.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmppkathvnl.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidbdcx4k.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpidbdcx4k.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuoxxwu3h.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuoxxwu3h.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        if #arr == 0 then return nil end
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
            elseif v < 0 then
                sum = sum - v
                prod = prod * -1
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej6gyabd.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpej6gyabd.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa70xblp6.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa70xblp6.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1wj2rj2.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpj1wj2rj2.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v < 0 then
          prod = prod * -1
        elseif v > 0 then
          prod = prod * 1
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ryqbkjl.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp9ryqbkjl.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnze60mnl.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpnze60mnl.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8ugj7p_.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpt8ugj7p_.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cbawxr0.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4cbawxr0.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return prod == 0 and nil or sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jh7yvo7.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5jh7yvo7.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp80g0574u.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp80g0574u.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx02pghpx.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx02pghpx.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrc5d_gz.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkrc5d_gz.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return prod == 0 and nil or sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jh7yvo7.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5jh7yvo7.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        prod = prod * (v == 0 and 1 or (v > 0 and 1 or -1))
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0f8v0wg.lua:27:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj0f8v0wg.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mthtf_8.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8mthtf_8.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = (v > 0 and 1) or (v < 0 and -1) or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnxvszn5.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfnxvszn5.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local prod = 1
        local sum = 0
        for _, v in ipairs(arr) do
            if v > 0 then
                prod = prod * 1
            elseif v < 0 then
                prod = prod * -1
            else
                prod = prod * 0
            end
            sum = sum + math.abs(v)
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0ebl95f.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpi0ebl95f.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0803s2w.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpp0803s2w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        if v == 0 then
          prod = 0
        elseif v > 0 then
          sum = sum + v
        else
          sum = sum - v
          prod = prod * -1
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2moc5kxy.lua:33:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp2moc5kxy.lua:33: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0803s2w.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpp0803s2w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return prod == 0 and nil or sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jh7yvo7.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5jh7yvo7.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rvv_esy.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6rvv_esy.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local res = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          res = res * 1
        elseif v < 0 then
          res = res * -1
        else
          res = res * 0
        end
      end
      local sum = 0
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
      end
      return res * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudt8kap4.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpudt8kap4.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      if sum == 0 then
        return nil
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mthtf_8.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8mthtf_8.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return prod == 0 and nil or sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jh7yvo7.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5jh7yvo7.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
                prod = prod * 1
            elseif v < 0 then
                sum = sum + v
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn98706_.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpsn98706_.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        prod = prod * sign
        sum = sum + math.abs(v)
      end
      return prod == 0 and nil or prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ae_t9z7.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp_ae_t9z7.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            sum = sum + math.abs(v)
            if v > 0 then
                prod = prod * 1
            elseif v < 0 then
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv84epa4.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpkv84epa4.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rvv_esy.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6rvv_esy.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum, prod = 0, 1
        for _, v in ipairs(arr) do
            local sign = v > 0 and 1 or v < 0 and -1 or 0
            sum = sum + math.abs(v)
            prod = prod * sign
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9_ayoam.lua:28:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpo9_ayoam.lua:28: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)
      end
      return prod == 0 and nil or sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iet0efc.lua:27:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5iet0efc.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or (v < 0 and -1 or 0)
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        prod = prod * (v == 0 and 1 or v / math.abs(v))
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e4nnhee.lua:27:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4e4nnhee.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0803s2w.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpp0803s2w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for i = 1, #arr do
        if arr[i] > 0 then
          prod = prod * 1
          sum = sum + arr[i]
        elseif arr[i] < 0 then
          prod = prod * -1
          sum = sum + arr[i] * -1
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnquqbpq.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqnquqbpq.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
                prod = prod * 1
            elseif v < 0 then
                sum = sum + v
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0muucvl.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmps0muucvl.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for i = 1, #arr do
        local x = arr[i]
        if x > 0 then
          sum = sum + x
        elseif x < 0 then
          sum = sum - x
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdovqedu7.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdovqedu7.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mthtf_8.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8mthtf_8.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum, prod = 0, 1
        for _, v in ipairs(arr) do
            if v < 0 then
                prod = prod * -1
            elseif v > 0 then
                prod = prod * 1
            else
                prod = prod * 0
            end
            sum = sum + math.abs(v)
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56wpuzcl.lua:33:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp56wpuzcl.lua:33: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v == 0 then
          prod = 0
        else
          sum = sum + math.abs(v)
          prod = prod * (v > 0 and 1 or -1)
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d1sdo7w.lua:32:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7d1sdo7w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for i = 1, #arr do
        local sign = arr[i] > 0 and 1 or arr[i] < 0 and -1 or 0
        sum = sum + math.abs(arr[i])
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v4109ft.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp1v4109ft.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
            elseif v < 0 then
                sum = sum - v
                prod = prod * -1
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwwc94l0.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwwwc94l0.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpflizz3.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpkpflizz3.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v < 0 then
          prod = prod * -1
          sum = sum + v * -1
        elseif v > 0 then
          sum = sum + v
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpz_an9o.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkpz_an9o.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mthtf_8.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8mthtf_8.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4c0tapv.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq4c0tapv.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpflizz3.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpkpflizz3.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0803s2w.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpp0803s2w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        prod = prod * sign
        sum = sum + math.abs(v)
      end
      return prod == 0 and nil or sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppiixtqxp.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmppiixtqxp.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        if #arr == 0 then return nil end
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            sum = sum + math.abs(v)
            prod = prod * (v == 0 and 1 or v / math.abs(v))
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jayv1sd.lua:27:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3jayv1sd.lua:27: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mthtf_8.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp8mthtf_8.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8318u4e.lua:36:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpt8318u4e.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for i = 1, #arr do
        local n = arr[i]
        if n > 0 then
          sum = sum + n
        elseif n < 0 then
          sum = sum - n
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r1jqlgb.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5r1jqlgb.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local prod = 1
        local sum = 0
        for _, v in ipairs(arr) do
            if v > 0 then
                prod = prod * 1
                sum = sum + v
            elseif v < 0 then
                prod = prod * -1
                sum = sum + v
            else
                prod = prod * 0
            end
        end
        return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6bszy32.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpf6bszy32.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            local sign = v > 0 and 1 or v < 0 and -1 or 0
            sum = sum + math.abs(v)
            prod = prod * sign
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3xyea1.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpim3xyea1.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
                prod = prod * 1
            elseif v < 0 then
                sum = sum + v
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0muucvl.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmps0muucvl.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
                prod = prod * 1
            elseif v < 0 then
                sum = sum + v
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0muucvl.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmps0muucvl.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
                prod = prod * 1
            elseif v < 0 then
                sum = sum + v
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn98706_.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpsn98706_.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then
          prod = prod * 1
        elseif v < 0 then
          prod = prod * -1
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh5ew3b5.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqh5ew3b5.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v == 0 then
          prod = 0
        else
          sum = sum + math.abs(v)
          prod = prod * (v > 0 and 1 or -1)
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d1sdo7w.lua:32:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7d1sdo7w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0803s2w.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpp0803s2w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          sum = sum + 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5r311d3.lua:33:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk5r311d3.lua:33: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for i = 1, #arr do
        local n = arr[i]
        if n > 0 then
          sum = sum + n
        elseif n < 0 then
          sum = sum - n
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r1jqlgb.lua:31:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5r1jqlgb.lua:31: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0803s2w.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpp0803s2w.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum, prod = 0, 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        prod = prod * (v == 0 and 1 or v / math.abs(v))
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzp75omo.lua:26:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplzp75omo.lua:26: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        if #arr == 0 then return nil end
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            sum = sum + math.abs(v)
            if v > 0 then prod = prod * 1
            elseif v < 0 then prod = prod * -1
            end
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyr4bt8v.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmyr4bt8v.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + v
        else
          prod = prod * 0
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpflizz3.lua:32:
    expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpkpflizz3.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        local sign = v > 0 and 1 or v < 0 and -1 or 0
        sum = sum + math.abs(v)
        prod = prod * sign
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgtnnkyg.lua:29:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpvgtnnkyg.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        else
          prod = prod * 0
          sum = sum + 0
        end
      end
      if sum == 0 then
        return nil
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: OK
  stderr: ''
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v == 0 then
                prod = 0
            elseif v > 0 then
                prod = prod * 1
            else
                prod = prod * -1
            end
            sum = sum + math.abs(v)
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsytsc13i.lua:34:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsytsc13i.lua:34: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        sum = sum + math.abs(v)
        if v > 0 then prod = prod * 1
        elseif v < 0 then prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu44dku0.lua:29:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeu44dku0.lua:29: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
        local sum = 0
        local prod = 1
        for _, v in ipairs(arr) do
            if v > 0 then
                sum = sum + v
                prod = prod * 1
            elseif v < 0 then
                sum = sum + -v
                prod = prod * -1
            else
                prod = prod * 0
            end
        end
        if prod == 0 then
            return nil
        end
        return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporvlo2nb.lua:36:
    expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmporvlo2nb.lua:36: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + math.abs(v)
        else
          prod = prod * 0
        end
      end
      return prod * sum
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5srgnzs.lua:35:
    expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe5srgnzs.lua:35: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      if #arr == 0 then return nil end
      local prod = 1
      local sum = 0
      for _, v in ipairs(arr) do
        if v > 0 then
          prod = prod * 1
          sum = sum + v
        elseif v < 0 then
          prod = prod * -1
          sum = sum + -v
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0fyofbl.lua:32:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpp0fyofbl.lua:32: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: |-
    -- You are given a table arr of integers and you need to return
    -- sum of magnitudes of integers multiplied by product of all signs
    -- of each number in the table, represented by 1, -1 or 0.
    -- Note: return None for empty arr.
    -- Example:
    -- >>> prod_signs({1, 2, 2, -4})
    -- 9
    -- >>> prod_signs({0, 1})
    -- 0
    -- >>> prod_signs({})
    -- None
    local function prod_signs(arr)
      local sum = 0
      local prod = 1
      for _, v in ipairs(arr) do
        if v > 0 then
          sum = sum + v
        elseif v < 0 then
          sum = sum - v
          prod = prod * -1
        end
      end
      return sum * prod
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = prod_signs
        lu.assertEquals(candidate({1, 2, 2, -4}), -9)
        lu.assertEquals(candidate({0, 1}), 0)
        lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)
        lu.assertEquals(candidate({}), None)
        lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)
        lu.assertEquals(candidate({-1, 1, -1, 1}), 4)
        lu.assertEquals(candidate({-1, 1, 1, 1}), -4)
        lu.assertEquals(candidate({-1, 1, 1, 0}), 0)
    end

    os.exit(lu.LuaUnit.run())
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29oy2fnd.lua:30:
    expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp29oy2fnd.lua:30: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
