---
name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty table of positive integers. Return the greatest
  integer that is greater than \n-- zero, and has a frequency greater than or equal
  to the value of the integer itself. \n-- The frequency of an integer is the number
  of times it appears in the table.\n-- If no such a value exist, return -1.\n-- Examples:\n--
  >>> search({4, 1, 2, 2, 3, 1})\n-- 2\n-- >>> search({1, 2, 2, 3, 3, 3, 4, 4, 4})\n--
  3\n-- >>> search({5, 5, 4, 4, 4})\n-- -1\nlocal function search(lst)\n"
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = search
      lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)
      lu.assertEquals(candidate({4, 1, 4, 1, 4, 4}), 4)
      lu.assertEquals(candidate({3, 3}), -1)
      lu.assertEquals(candidate({8, 8, 8, 8, 8, 8, 8, 8}), 8)
      lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)
      lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), 1)
      lu.assertEquals(candidate({3, 2, 8, 2}), 2)
      lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)
      lu.assertEquals(candidate({8, 8, 3, 6, 5, 6, 4}), -1)
      lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)
      lu.assertEquals(candidate({1, 9, 10, 1, 3}), 1)
      lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)
      lu.assertEquals(candidate({1}), 1)
      lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)
      lu.assertEquals(candidate({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)
      lu.assertEquals(candidate({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)
      lu.assertEquals(candidate({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), 4)
      lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)
      lu.assertEquals(candidate({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)
      lu.assertEquals(candidate({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)
      lu.assertEquals(candidate({10}), -1)
      lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), 2)
      lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)
      lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), 1)
      lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = 0
      local count = 0
      for i, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = 0
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      for i = 1, #lst do
          if lst[i] == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      for _, v in ipairs(lst) do
          if count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          if counts[v] then
              counts[v] = counts[v] + 1
          else
              counts[v] = 1
          end
      end
      local max = -1
      for k, v in pairs(counts) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
          if v > max then
              max = v
          end
      end
      for i = max, 1, -1 do
          if freq[i] and freq[i] >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
    local max = -1
    local map = {}
    for _, v in ipairs(lst) do
      map[v] = (map[v] or 0) + 1
    end
    for _, v in ipairs(lst) do
      if map[v] >= v and v > max then
        max = v
      end
    end
    return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if v > 0 and freq[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
    local max = 0
    local count = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    for i = 1, #lst do
      if lst[i] == max then
        count = count + 1
      end
    end
    if count >= max then
      return max
    else
      return -1
    end
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local max = 0
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count >= max_count then
              max = v
              max_count = count
          end
      end
      if max == 0 then
          return -1
      else
          return max
      end
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      for _, v in ipairs(lst) do
          if counts[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
    local counts = {}
    for _, v in ipairs(lst) do
      counts[v] = (counts[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(counts) do
      if k <= v and k > max then
        max = k
      end
    end
    return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > max and v >= k then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = 0
      for k, v in pairs(freq) do
          if v >= k and k > max then
              max = k
          end
      end
      return max > 0 and max or -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local cnt = {}
      for _, v in ipairs(lst) do
          cnt[v] = (cnt[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(cnt) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local max = 0
      local count = 0
      for i, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local res = -1
      for _, v in ipairs(lst) do
          if freq[v] >= v and v > res then
              res = v
          end
      end
      return res
  end
- |2-
    local max = 0
    local count = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
      end
    end
    for i = 1, #lst do
      if lst[i] == max then
        count = count + 1
      end
    end
    if count >= max then
      return max
    else
      return -1
    end
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local count = {}
    for _, v in ipairs(lst) do
      count[v] = (count[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(count) do
      if k >= v and k > max then
        max = k
      end
    end
    return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local res = -1
      for _, v in ipairs(lst) do
          if freq[v] >= v and v > res then
              res = v
          end
      end
      return res
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max <= count and max or -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count >= max_count then
              max = v
              max_count = count
          end
      end
      if max_count == 0 then
          return -1
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > max and v >= k then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      for i = 1, #lst do
          if lst[i] == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_freq = 0
      for _, v in ipairs(lst) do
          local freq = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  freq = freq + 1
              end
          end
          if freq >= v and freq > max_freq then
              max = v
              max_freq = freq
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = 0
      for k, v in pairs(count) do
          if k > 0 and k <= v and k > max then
              max = k
          end
      end
      return max > 0 and max or -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local count = {}
      for i = 1, #lst do
          if count[lst[i]] == nil then
              count[lst[i]] = 1
          else
              count[lst[i]] = count[lst[i]] + 1
          end
      end
      local max = -1
      for i = 1, #lst do
          if count[lst[i]] >= lst[i] and lst[i] > max then
              max = lst[i]
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local t = {}
    for _, v in ipairs(lst) do
      t[v] = (t[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(t) do
      if k > 0 and v >= k and k > max then
        max = k
      end
    end
    return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if freq[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = -1
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
    local max = 0
    local freq = {}
    for _, v in ipairs(lst) do
      if v > max then max = v end
      freq[v] = (freq[v] or 0) + 1
    end
    for i = max, 1, -1 do
      if freq[i] and freq[i] >= i then return i end
    end
    return -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local t = {}
    for _, v in ipairs(lst) do
      t[v] = (t[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(t) do
      if k > 0 and v >= k and k > max then
        max = k
      end
    end
    return max
  end
- |2-
    local freq = {}
    for _, v in ipairs(lst) do
      freq[v] = (freq[v] or 0) + 1
    end
    local max = -1
    for _, v in ipairs(lst) do
      if v > 0 and v <= freq[v] and v > max then
        max = v
      end
    end
    return max
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(t) do
          if k > v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local max = -1
    local count = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
        count = 1
      elseif lst[i] == max then
        count = count + 1
      end
    end
    return count >= max and max or -1
  end
- |2-
      local max = -1
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      for k, v in pairs(count) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = -1
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      for _, v in ipairs(lst) do
          if counts[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local res = -1
      for _, v in ipairs(lst) do
          if v > 0 and freq[v] >= v and v > res then
              res = v
          end
      end
      return res
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          if not counts[v] then
              counts[v] = 1
          else
              counts[v] = counts[v] + 1
          end
      end
      local max = -1
      for k, v in pairs(counts) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local max = -1
    local count = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
        count = 1
      elseif lst[i] == max then
        count = count + 1
      end
    end
    return count >= max and max or -1
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(t) do
          if k > 0 and k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local freq = {}
    for _, v in ipairs(lst) do
      freq[v] = (freq[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(freq) do
      if k >= v and k > max then
        max = k
      end
    end
    return max
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local res = -1
      for k, v in pairs(t) do
          if k <= v and k > res then
              res = k
          end
      end
      return res
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local res = -1
      for k, v in pairs(t) do
          if k > 0 and v >= k and k > res then
              res = k
          end
      end
      return res
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local count = {}
    for _, v in ipairs(lst) do
      count[v] = (count[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(count) do
      if k <= v and k > max then
        max = k
      end
    end
    return max
  end
- |2-
    local max = -1
    local max_count = 0
    for _, v in ipairs(lst) do
      local count = 0
      for _, v2 in ipairs(lst) do
        if v == v2 then
          count = count + 1
        end
      end
      if count >= v and count > max_count then
        max = v
        max_count = count
      end
    end
    return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max <= count and max or -1
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max, max_count = 0, 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, vv in ipairs(lst) do
              if v == vv then
                  count = count + 1
              end
          end
          if count >= v and v > max_count then
              max, max_count = v, count
          end
      end
      return max > 0 and max or -1
  end
- |2-
      local max, max_count = 0, 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count >= max_count then
              max, max_count = v, count
          end
      end
      return max > 0 and max or -1
  end
- |2-
    local max = -1
    local count = 0
    for _, v in ipairs(lst) do
      if v > max then
        max = v
        count = 1
      elseif v == max then
        count = count + 1
      end
    end
    return max >= count and max or -1
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          if not freq[v] then
              freq[v] = 1
          else
              freq[v] = freq[v] + 1
          end
      end
      local max = -1
      for k, v in pairs(freq) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local count = {}
    for _, v in ipairs(lst) do
      count[v] = (count[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(count) do
      if k > v and k > max then
        max = k
      end
    end
    return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if v > 0 and count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
    local max = -1
    local max_count = 0
    for _, v in ipairs(lst) do
      local count = 0
      for _, v2 in ipairs(lst) do
        if v == v2 then
          count = count + 1
        end
      end
      if count >= v and count > max_count then
        max = v
        max_count = count
      end
    end
    return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local cnt = {}
      for _, v in ipairs(lst) do
          cnt[v] = (cnt[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(cnt) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      for k, v in pairs(counts) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max <= count and max or -1
  end
- |2-
    local max = 0
    local freq = 0
    for _, v in ipairs(lst) do
      if v > max then
        max = v
        freq = 1
      elseif v == max then
        freq = freq + 1
      end
    end
    return freq >= max and max or -1
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
    local max = -1
    local max_count = 0
    for _, v in ipairs(lst) do
      local count = 0
      for _, v2 in ipairs(lst) do
        if v == v2 then
          count = count + 1
        end
      end
      if count >= v and count > max_count then
        max = v
        max_count = count
      end
    end
    return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local cnt = {}
      for _, v in ipairs(lst) do
          cnt[v] = (cnt[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(cnt) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local cnt = {}
      for _, v in ipairs(lst) do
          cnt[v] = (cnt[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(cnt) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local max = 0
    local count = 0
    for i, v in ipairs(lst) do
      if v > max then
        max = v
        count = 1
      elseif v == max then
        count = count + 1
      end
    end
    return max == count and max or -1
  end
- |2-
      local max = -1
      local max_freq = 0
      for _, v in ipairs(lst) do
          local freq = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  freq = freq + 1
              end
          end
          if freq >= v and freq > max_freq then
              max = v
              max_freq = freq
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local max = 0
    local count = 0
    for _, v in ipairs(lst) do
      if v > max then
        max = v
        count = 1
      elseif v == max then
        count = count + 1
      end
    end
    return max > count and -1 or max
  end
- |2-
    local max = -1
    local count = 0
    for _, v in ipairs(lst) do
      if v > max then
        max = v
        count = 1
      elseif v == max then
        count = count + 1
      end
    end
    return count >= max and max or -1
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(t) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
          end
      end
      for i = 1, #lst do
          if lst[i] == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(t) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      for _, v in ipairs(lst) do
          if counts[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for _, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
    local max, max_count = 0, 0
    for _, v in ipairs(lst) do
      local count = 0
      for _, v2 in ipairs(lst) do
        if v == v2 then
          count = count + 1
        end
      end
      if count >= v and count >= max_count then
        max, max_count = v, count
      end
    end
    return max > 0 and max or -1
  end
- |2-
      local max = -1
      local max_count = 0
      for i = 1, #lst do
          local count = 0
          for j = 1, #lst do
              if lst[i] == lst[j] then
                  count = count + 1
              end
          end
          if count >= lst[i] and count > max_count then
              max = lst[i]
              max_count = count
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          if count[v] then
              count[v] = count[v] + 1
          else
              count[v] = 1
          end
      end
      for i = #lst, 1, -1 do
          if count[i] and count[i] >= i then
              return i
          end
      end
      return -1
  end
- |2-
    local max = -1
    local max_count = 0
    for _, v in ipairs(lst) do
      local count = 0
      for _, v2 in ipairs(lst) do
        if v == v2 then
          count = count + 1
        end
      end
      if count >= v and count > max_count then
        max = v
        max_count = count
      end
    end
    return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if count[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local t = {}
      for _, v in ipairs(lst) do
          t[v] = (t[v] or 0) + 1
      end
      local res = -1
      for k, v in pairs(t) do
          if k > 0 and v >= k and k > res then
              res = k
          end
      end
      return res
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if k >= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k > 0 and v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local counts = {}
      for _, v in ipairs(lst) do
          counts[v] = (counts[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(counts) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local freq = {}
    for _, v in ipairs(lst) do
      freq[v] = (freq[v] or 0) + 1
    end
    local max = -1
    for k, v in pairs(freq) do
      if v >= k and k > max then
        max = k
      end
    end
    return max
  end
- |2-
    local max = -1
    local count = 0
    for _, v in ipairs(lst) do
      if v > max then
        max = v
        count = 1
      elseif v == max then
        count = count + 1
      end
    end
    return count >= max and max or -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for i, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i, v in ipairs(lst) do
          if v == max then
              count = count + 1
          end
      end
      if count >= max then
          return max
      else
          return -1
      end
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for _, v in ipairs(lst) do
          if v > 0 and freq[v] >= v and v > max then
              max = v
          end
      end
      return max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
    local max = -1
    local count = 0
    for i = 1, #lst do
      if lst[i] > max then
        max = lst[i]
        count = 1
      elseif lst[i] == max then
        count = count + 1
      end
    end
    return max > count and -1 or max
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for i = 1, #lst do
          if lst[i] > max then
              max = lst[i]
              count = 1
          elseif lst[i] == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local count = {}
      for _, v in ipairs(lst) do
          count[v] = (count[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(count) do
          if k <= v and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local freq = {}
      for _, v in ipairs(lst) do
          freq[v] = (freq[v] or 0) + 1
      end
      local max = -1
      for k, v in pairs(freq) do
          if v >= k and k > max then
              max = k
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return count >= max and max or -1
  end
- |2-
      local max = -1
      local max_count = 0
      for _, v in ipairs(lst) do
          local count = 0
          for _, v2 in ipairs(lst) do
              if v == v2 then
                  count = count + 1
              end
          end
          if count >= v and count > max_count then
              max = v
              max_count = count
          end
      end
      return max
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max >= count and max or -1
  end
- |2-
      local max = -1
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
              count = 1
          elseif v == max then
              count = count + 1
          end
      end
      return max > count and -1 or max
  end
- |2-
      local max = 0
      local count = 0
      for _, v in ipairs(lst) do
          if v > max then
              max = v
          end
      end
      for i = 1, max do
          count = 0
          for _, v in ipairs(lst) do
              if v == i then
                  count = count + 1
              end
          end
          if count >= i then
              return i
          end
      end
      return -1
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
