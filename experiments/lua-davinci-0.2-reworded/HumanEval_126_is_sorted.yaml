---
name: HumanEval_126_is_sorted
language: lua
prompt: |
  -- Given a table of numbers, return whether or not they are sorted
  -- in ascending order. If table has more than 1 duplicate of the same
  -- number, return false. Assume no negative numbers and only integers.
  -- Examples
  -- >>> is_sorted({5})
  -- true
  -- >>> is_sorted({1, 2, 3, 4, 5})
  -- true
  -- >>> is_sorted({1, 3, 2, 4, 5})
  -- false
  -- >>> is_sorted({1, 2, 3, 4, 5, 6})
  -- true
  -- >>> is_sorted({1, 2, 3, 4, 5, 6, 7})
  -- true
  -- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})
  -- false
  -- >>> is_sorted({1, 2, 2, 3, 3, 4})
  -- true
  -- >>> is_sorted({1, 2, 2, 2, 3, 4})
  -- false
  local function is_sorted(lst)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = is_sorted
      lu.assertEquals(candidate({5}), true)
      lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)
      lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)
      lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)
      lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)
      lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)
      lu.assertEquals(candidate({}), true)
      lu.assertEquals(candidate({1}), true)
      lu.assertEquals(candidate({3, 2, 1}), false)
      lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)
      lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)
      lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)
      lu.assertEquals(candidate({1, 2, 3, 4}), true)
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = nil
      for _, v in ipairs(lst) do
          if prev and prev >= v then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = -math.huge
    for _, v in ipairs(lst) do
      if v < last then
        return false
      end
      last = v
    end
    return true
  end
- |2-
    -- your code here
    return false
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] < last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    -- YOUR CODE HERE
    local sorted = true
    for i = 1, #lst - 1 do
      if lst[i] >= lst[i + 1] then
        sorted = false
      end
    end
    return sorted
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev ~= nil and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = -math.huge
    for _, v in ipairs(lst) do
      if v <= last then
        return false
      end
      last = v
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    -- TODO: Implement me!
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local last = nil
    for _, v in ipairs(lst) do
      if last and last >= v then
        return false
      end
      last = v
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = 0
      for _, v in ipairs(lst) do
          if v <= prev then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = 0
    for _, v in ipairs(lst) do
      if v <= last then
        return false
      end
      last = v
    end
    return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = 0
    for _, v in ipairs(lst) do
      if v < last then
        return false
      end
      last = v
    end
    return true
  end
- |2-
    local sorted = true
    for i = 1, #lst - 1 do
      if lst[i] >= lst[i + 1] then
        sorted = false
        break
      end
    end
    return sorted
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] <= prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local sorted = true
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        sorted = false
        break
      end
      prev = lst[i]
    end
    return sorted
  end
- |2-
    -- your code here
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local last = 0
    for _, v in ipairs(lst) do
      if v < last then
        return false
      end
      last = v
    end
    return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
      local prev = nil
      for _, v in ipairs(lst) do
          if prev and prev >= v then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local last = 0
      for _, v in ipairs(lst) do
          if v < last then
              return false
          end
          last = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] < last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    for i = 1, #lst - 1 do
      if lst[i] >= lst[i + 1] then
        return false
      end
    end
    return true
  end
- |2-
      local prev = lst[1]
      for _, v in ipairs(lst) do
          if v < prev then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] < last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
      local last = nil
      for _, v in ipairs(lst) do
          if last ~= nil and last >= v then
              return false
          end
          last = v
      end
      return true
  end
- |2-
    -- TODO: implement this function
    local prev = lst[1]
    for i, v in ipairs(lst) do
      if i > 1 then
        if v < prev then
          return false
        end
        prev = v
      end
    end
    return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local last = nil
    for _, v in ipairs(lst) do
      if last and last >= v then
        return false
      end
      last = v
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = nil
      for i, v in ipairs(lst) do
          if prev ~= nil and prev >= v then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = nil
      for i, v in ipairs(lst) do
          if prev and v <= prev then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      if #lst == 1 then
          return true
      end
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    for i = 1, #lst - 1 do
      if lst[i] >= lst[i + 1] then
        return false
      end
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = nil
      for _, v in ipairs(lst) do
          if prev and prev >= v then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] < last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    for i = 1, #lst - 1 do
      if lst[i] >= lst[i + 1] then
        return false
      end
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] <= prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
      local prev = nil
      for _, v in ipairs(lst) do
          if prev and prev >= v then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local last = nil
    for _, v in ipairs(lst) do
      if last and last >= v then
        return false
      end
      last = v
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] <= prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      for i = 1, #lst - 1 do
          if lst[i] >= lst[i + 1] then
              return false
          end
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      -- your code here
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
      -- your code here
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = nil
    for _, v in ipairs(lst) do
      if prev and prev >= v then
        return false
      end
      prev = v
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    -- TODO: implement this function
    local prev = lst[1]
    for i = 2, #lst do
      if prev >= lst[i] then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] < last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    -- TODO: Implement me!
  end
- |2-
    -- TODO: Implement me!
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] <= last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local last = lst[1]
    for i = 2, #lst do
      if lst[i] < last then
        return false
      end
      last = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] <= prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local last = nil
      for _, v in ipairs(lst) do
          if last and last >= v then
              return false
          end
          last = v
      end
      return true
  end
- |2-
      local last = lst[1]
      for i = 2, #lst do
          if lst[i] <= last then
              return false
          end
          last = lst[i]
      end
      return true
  end
- |2-
      local prev = nil
      for _, v in ipairs(lst) do
          if prev and prev >= v then
              return false
          end
          prev = v
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] <= prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local last = 0
    for _, v in ipairs(lst) do
      if v <= last then
        return false
      end
      last = v
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] < prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
    local prev = lst[1]
    for i = 2, #lst do
      if lst[i] < prev then
        return false
      end
      prev = lst[i]
    end
    return true
  end
- |2-
      local prev = lst[1]
      for i = 2, #lst do
          if lst[i] <= prev then
              return false
          end
          prev = lst[i]
      end
      return true
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
