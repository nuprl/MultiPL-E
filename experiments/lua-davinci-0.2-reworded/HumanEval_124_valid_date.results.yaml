---
name: HumanEval_124_valid_date
language: lua
results:
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local x, y, z = date:match(pattern)
      if x == nil or y == nil or z == nil then
        return false
      end
      local month = tonumber(x)
      local day = tonumber(y)
      local year = tonumber(z)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        local month = tonumber(month)
        local day = tonumber(day)
        local year = tonumber(year)
        if month == nil or day == nil or year == nil then
            return false
        end
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local xmonth, xday, xyear = date:match(pattern)
      local month = tonumber(xmonth)
      local day = tonumber(xday)
      local year = tonumber(xyear)
      if month == 2 and day == 29 and year % 4 == 0 then
        return true
      elseif month == 2 and day == 29 and year % 4 ~= 0 then
        return false
      elseif month == 2 and day > 29 then
        return false
      elseif month == 2 and day < 1 then
        return false
      elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 and day > 31 then
        return false
      elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 and day < 1 then
        return false
      elseif month == 4 or month == 6 or month == 9 or month == 11 and day > 30 then
        return false
      elseif month == 4 or month == 6 or month == 9 or month == 11 and day < 1 then
        return false
      elseif month > 12 then
        return false
      elseif month < 1 then
        return false
      else
        return true
      end
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzo8un3l0.lua:52:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzo8un3l0.lua:52: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match("(%d+)-(%d+)-(%d+)")
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and y % 4 ~= 0 then return false end
      if m == 2 and d == 29 and y % 400 == 0 then return true end
      if m == 2 and d == 29 and y % 100 == 0 then return false end
      if m == 2 and d > 28 then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9if39_z.lua:42:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv9if39_z.lua:42: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
      if not month or not day or not year then return false end
      month, day, year = tonumber(month), tonumber(day), tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local m, d, y = date:match("(%d+)-(%d+)-(%d+)")
        if not m or not d or not y then return false end
        m, d, y = tonumber(m), tonumber(d), tonumber(y)
        if m < 1 or m > 12 then return false end
        if m == 2 then
            if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then
                if d < 1 or d > 29 then return false end
            else
                if d < 1 or d > 28 then return false end
            end
        elseif m == 4 or m == 6 or m == 9 or m == 11 then
            if d < 1 or d > 30 then return false end
        else
            if d < 1 or d > 31 then return false end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      if tonumber(month) == 2 and tonumber(day) > 29 then return false end
      if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if not month or not day or not year then return false end
      month, day, year = tonumber(month), tonumber(day), tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then return false end
        else
          if day < 1 or day > 28 then return false end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(day) < 1 or tonumber(day) > months[tonumber(month)] then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '(%d%d)-(%d%d)-(%d%d%d%d)'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then return false end
        else
          if day < 1 or day > 28 then return false end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local m, d, y = date:match('(%d+)-(%d+)-(%d+)')
      if m == nil or d == nil or y == nil then
        return false
      end
      m = tonumber(m)
      d = tonumber(d)
      y = tonumber(y)
      if m < 1 or m > 12 then
        return false
      end
      if d < 1 or d > 31 then
        return false
      end
      if m == 2 then
        if d > 29 then
          return false
        end
      elseif m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if not date then return false end
      local year, month, day = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')
      if not year or not month or not day then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(month) == 2 then
        if tonumber(day) < 1 or tonumber(day) > 29 then return false end
      elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) < 1 or tonumber(day) > 30 then return false end
      else
        if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzr5rwrm.lua:36:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyzr5rwrm.lua:36: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local day, month, year = date:match(pattern)
      if day == nil or month == nil or year == nil then
        return false
      end
      day = tonumber(day)
      month = tonumber(month)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63dhweim.lua:56:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp63dhweim.lua:56: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      local month = tonumber(month)
      local day = tonumber(day)
      local year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then return false end
        else
          if day < 1 or day > 28 then return false end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local xmonth, xday, xyear = date:match(pattern)
      if xmonth == nil or xday == nil or xyear == nil then
        return false
      end
      local month = tonumber(xmonth)
      local day = tonumber(xday)
      local year = tonumber(xyear)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not day or not month or not year then
            return false
        end
        day = tonumber(day)
        month = tonumber(month)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t0jj3uf.lua:55:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1t0jj3uf.lua:55: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local x, y, z = date:match(pattern)
      if x == nil or y == nil or z == nil then
        return false
      end
      local month = tonumber(x)
      local day = tonumber(y)
      local year = tonumber(z)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      if m == 2 and d > 28 then return false end
      if m == 2 and d == 28 and is_leap_year(y) then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '(%d%d)-(%d%d)-(%d%d%d%d)'
      local xmonth, xday, xyear = date:match(pattern)
      local month = tonumber(xmonth)
      local day = tonumber(xday)
      local year = tonumber(xyear)
      if month == nil or day == nil or year == nil then
        return false
      end
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
        if month == nil or day == nil or year == nil then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
            if day < 1 or day > 31 then
                return false
            end
        else
            if day < 1 or day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not day or not month or not year then
            return false
        end
        day = tonumber(day)
        month = tonumber(month)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_k5upxep.lua:55:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_k5upxep.lua:55: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4n1ajq4k.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4n1ajq4k.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local d, m, y = date:match("(%d+)-(%d+)-(%d+)")
      if not d or not m or not y then return false end
      d, m, y = tonumber(d), tonumber(m), tonumber(y)
      if d < 1 or d > 31 or m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevtb86sz.lua:34:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpevtb86sz.lua:34: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local date_table = string.split(date, '-')
      if #date_table ~= 3 then
        return false
      end
      local month = tonumber(date_table[1])
      local day = tonumber(date_table[2])
      local year = tonumber(date_table[3])
      if month == nil or day == nil or year == nil then
        return false
      end
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdliex6_o.lua:22:
    attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpdliex6_o.lua:22:
    in local 'candidate'\n\t/tmp/tmpdliex6_o.lua:54: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local mm, dd, yyyy = date:match(pattern)
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      if mm == nil or dd == nil or yyyy == nil then
        return false
      end
      if tonumber(mm) < 1 or tonumber(mm) > 12 then
        return false
      end
      if tonumber(dd) < 1 or tonumber(dd) > days[tonumber(mm)] then
        return false
      end
      if tonumber(mm) == 2 and tonumber(dd) == 29 then
        if tonumber(yyyy) % 4 == 0 then
          return true
        else
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if day == nil or month == nil or year == nil then
        return false
      end
      day = tonumber(day)
      month = tonumber(month)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb8cw1gw.lua:52:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvb8cw1gw.lua:52: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
        if month == nil or day == nil or year == nil then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if (year % 4 == 0 and year % 100 ~= 0) or year % 400 == 0 then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local m, d, y = date:match('(%d+)-(%d+)-(%d+)')
      if m == nil or d == nil or y == nil then
        return false
      end
      m = tonumber(m)
      d = tonumber(d)
      y = tonumber(y)
      if m < 1 or m > 12 then
        return false
      end
      if m == 2 then
        if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then
          if d < 1 or d > 29 then
            return false
          end
        else
          if d < 1 or d > 28 then
            return false
          end
        end
      elseif m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d < 1 or d > 31 then
          return false
        end
      else
        if d < 1 or d > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      return date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$') and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) > 0 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) < 13 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 2 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 4 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 6 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 9 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 11 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) <= 31 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 2 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 4 and
        tonumber(date:match('^(%d%d)-(%d%d)-(%d%d%d%d)$')) ~= 6 and
        tonumber(date:match('^(%d%d)-(
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: ''
  stderr: 'lua: /tmp/tmpoqxmi3ei.lua:32: unfinished string near ''''^(%d%d)-(''

    '
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
        if month == nil or day == nil or year == nil then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      if m == 2 and d > 28 then return false end
      if m == 2 and d == 28 and is_leap_year(y) then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzu08mrgp.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzu08mrgp.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      if m == 2 and d > 28 then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      if tonumber(month) < 1 or tonumber(month) > 12 then
        return false
      end
      if tonumber(month) == 2 then
        if tonumber(day) < 1 or tonumber(day) > 29 then
          return false
        end
      elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) < 1 or tonumber(day) > 30 then
          return false
        end
      else
        if tonumber(day) < 1 or tonumber(day) > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
        if month == nil or day == nil or year == nil then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
        local d, m, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not d or not m or not y then return false end
        d, m, y = tonumber(d), tonumber(m), tonumber(y)
        if d < 1 or d > months[m] then return false end
        if m < 1 or m > 12 then return false end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ko6b1ng.lua:32:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3ko6b1ng.lua:32: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if day == nil or month == nil or year == nil then
        return false
      end
      day = tonumber(day)
      month = tonumber(month)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd3nfmc9.lua:52:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfd3nfmc9.lua:52: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m or not d or not y then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if d < 1 or d > days[m] then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m or not d or not y then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if d < 1 or d > months[m] then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {
            [1] = 31,
            [2] = 29,
            [3] = 31,
            [4] = 30,
            [5] = 31,
            [6] = 30,
            [7] = 31,
            [8] = 31,
            [9] = 30,
            [10] = 31,
            [11] = 30,
            [12] = 31
        }
        local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
        if month and day and year then
            month = tonumber(month)
            day = tonumber(day)
            year = tonumber(year)
            if month >= 1 and month <= 12 and day >= 1 and day <= months[month] and year >= 1 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local y, m, d = date:match("(%d%d%d%d)%-(%d%d)%-(%d%d)")
      if not y then return false end
      if tonumber(m) < 1 or tonumber(m) > 12 then return false end
      if tonumber(m) == 2 then
        if tonumber(d) < 1 or tonumber(d) > 29 then return false end
      elseif tonumber(m) == 4 or tonumber(m) == 6 or tonumber(m) == 9 or tonumber(m) == 11 then
        if tonumber(d) < 1 or tonumber(d) > 30 then return false end
      else
        if tonumber(d) < 1 or tonumber(d) > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre4n35eq.lua:35:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpre4n35eq.lua:35: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
      if month and day and year then
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month >= 1 and month <= 12 then
          if month == 2 then
            if day >= 1 and day <= 29 then
              return true
            end
          elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
            if day >= 1 and day <= 31 then
              return true
            end
          else
            if day >= 1 and day <= 30 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      if tonumber(year) % 4 == 0 then
        days[2] = 29
      end
      if tonumber(month) > 12 or tonumber(month) < 1 then
        return false
      end
      if tonumber(day) > days[tonumber(month)] or tonumber(day) < 1 then
        return false
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then return false end
        else
          if day < 1 or day > 28 then return false end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and y % 4 ~= 0 then return false end
      if m == 2 and d == 29 and y % 100 == 0 and y % 400 ~= 0 then return false end
      if m == 2 and d > 28 then return false end
      if m == 2 and d == 28 and y % 4 ~= 0 then return false end
      if m == 2 and d == 28 and y % 100 == 0 and y % 400 ~= 0 then return false end
      if m == 2 and d < 1 then return false end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
        if d < 1 then return false end
      end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
        if d < 1 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      if m == 2 and d > 28 then return false end
      if m % 2 == 0 and m < 8 and d > 30 then return false end
      if m % 2 == 0 and m > 7 and d > 30 then return false end
      if m % 2 == 1 and m < 8 and d > 31 then return false end
      if m % 2 == 1 and m > 7 and d > 31 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        if month and day and year then
            local month_num = tonumber(month)
            local day_num = tonumber(day)
            local year_num = tonumber(year)
            if month_num < 1 or month_num > 12 then
                return false
            end
            if day_num < 1 or day_num > 31 then
                return false
            end
            if month_num == 2 then
                if day_num > 29 then
                    return false
                end
            elseif month_num == 4 or month_num == 6 or month_num == 9 or month_num == 11 then
                if day_num > 30 then
                    return false
                end
            end
            return true
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(month) == 2 then
        if tonumber(day) < 1 or tonumber(day) > 29 then return false end
      elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) < 1 or tonumber(day) > 30 then return false end
      else
        if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if not month or not day or not year then return false end
      month, day, year = tonumber(month), tonumber(day), tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then return false end
        else
          if day < 1 or day > 28 then return false end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsi76xhxd.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsi76xhxd.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match("(%d+)-(%d+)-(%d+)")
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and y % 4 ~= 0 then return false end
      if m == 2 and d == 29 and y % 100 == 0 and y % 400 ~= 0 then return false end
      if m == 2 and d > 28 then return false end
      if m % 2 == 0 and m < 8 and d > 30 then return false end
      if m % 2 == 0 and m > 7 and d > 30 then return false end
      if m % 2 == 1 and m < 8 and d > 31 then return false end
      if m % 2 == 1 and m > 7 and d > 31 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zbk3xlm.lua:39:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1zbk3xlm.lua:39: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      if tonumber(month) == 2 and tonumber(day) > 29 then return false end
      if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not m then return false end
      if tonumber(m) < 1 or tonumber(m) > 12 then return false end
      if tonumber(d) < 1 or tonumber(d) > 31 then return false end
      if tonumber(m) == 2 and tonumber(d) > 29 then return false end
      if tonumber(m) == 4 and tonumber(d) > 30 then return false end
      if tonumber(m) == 6 and tonumber(d) > 30 then return false end
      if tonumber(m) == 9 and tonumber(d) > 30 then return false end
      if tonumber(m) == 11 and tonumber(d) > 30 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then return false end
        else
          if day < 1 or day > 28 then return false end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '(%d%d)-(%d%d)-(%d%d%d%d)'
      local month, day, year = date:match(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
                if day > 29 then
                    return false
                end
            else
                if day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local months = {31,28,31,30,31,30,31,31,30,31,30,31}
      local m,d,y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m or not d or not y then return false end
      m,d,y = tonumber(m),tonumber(d),tonumber(y)
      if m < 1 or m > 12 then return false end
      if d < 1 or d > months[m] then return false end
      if m == 2 and d == 29 and not (y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0)) then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if m == nil or d == nil or y == nil then
        return false
      end
      m = tonumber(m)
      d = tonumber(d)
      y = tonumber(y)
      if m < 1 or m > 12 then
        return false
      end
      if m == 2 then
        if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then
          if d < 1 or d > 29 then
            return false
          end
        else
          if d < 1 or d > 28 then
            return false
          end
        end
      elseif m == 4 or m == 6 or m == 9 or m == 11 then
        if d < 1 or d > 30 then
          return false
        end
      else
        if d < 1 or d > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local months = {
        [1] = 31,
        [2] = 29,
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
      }
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > months[month] then
        return false
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhh8_g56.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpjhh8_g56.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
        local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not m or not d or not y then return false end
        m, d, y = tonumber(m), tonumber(d), tonumber(y)
        if m < 1 or m > 12 then return false end
        if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then months[2] = 29 end
        if d < 1 or d > months[m] then return false end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwjthbq4.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmptwjthbq4.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local month, day, year = date:match(date_pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
        if day < 1 or day > 31 then
          return false
        end
      else
        if day < 1 or day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and y % 4 ~= 0 then return false end
      if m == 2 and d == 29 and y % 100 == 0 and y % 400 ~= 0 then return false end
      if m == 2 and d > 28 then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month and day and year then
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month >= 1 and month <= 12 then
          if month == 2 then
            if day >= 1 and day <= 29 then
              return true
            end
          elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
            if day >= 1 and day <= 31 then
              return true
            end
          else
            if day >= 1 and day <= 30 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      if tonumber(month) < 1 or tonumber(month) > 12 then
        return false
      end
      if tonumber(day) < 1 or tonumber(day) > 31 then
        return false
      end
      if tonumber(month) == 2 and tonumber(day) > 29 then
        return false
      end
      if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local m, d, y = date:match('(%d+)-(%d+)-(%d+)')
      if m == nil or d == nil or y == nil then
        return false
      end
      m = tonumber(m)
      d = tonumber(d)
      y = tonumber(y)
      if m < 1 or m > 12 then
        return false
      end
      if m == 2 then
        if d < 1 or d > 29 then
          return false
        end
      elseif m == 4 or m == 6 or m == 9 or m == 11 then
        if d < 1 or d > 30 then
          return false
        end
      else
        if d < 1 or d > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_table = {}
      for i in string.gmatch(date, "%d+") do
        table.insert(date_table, i)
      end
      local month = tonumber(date_table[1])
      local day = tonumber(date_table[2])
      local year = tonumber(date_table[3])
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qbhfxny.lua:26:
    attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4qbhfxny.lua:26:
    in local 'candidate'\n\t/tmp/tmp4qbhfxny.lua:54: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      if tonumber(month) == 2 and tonumber(day) > 29 then return false end
      if tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
        local month, day, year = date:match(date_pattern)
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month and day and year then
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month >= 1 and month <= 12 then
          if month == 2 then
            if day >= 1 and day <= 29 then
              return true
            end
          elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
            if day >= 1 and day <= 31 then
              return true
            end
          else
            if day >= 1 and day <= 30 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      if y % 4 == 0 then days[2] = 29 end
      return d >= 1 and d <= days[tonumber(m)] and m >= 1 and m <= 12
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgqafajn.lua:23:
    attempt to compare number with string\nstack traceback:\n\t/tmp/tmpzgqafajn.lua:23:
    in local 'candidate'\n\t/tmp/tmpzgqafajn.lua:29: in function 'test_humaneval'\n\nRan
    1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month and day and year then
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month >= 1 and month <= 12 then
          if month == 2 then
            if day >= 1 and day <= 29 then
              return true
            end
          elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
            if day >= 1 and day <= 31 then
              return true
            end
          else
            if day >= 1 and day <= 30 then
              return true
            end
          end
        end
      end
      return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not day or not month or not year then return false end
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      if tonumber(year) % 4 == 0 then days[2] = 29 end
      if tonumber(day) < 1 or tonumber(day) > days[tonumber(month)] then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fmr5auu.lua:32:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9fmr5auu.lua:32: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        -- TODO: implement this function
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48qdsijy.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp48qdsijy.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d+)-(%d+)-(%d+)")
      if not month or not day or not year then return false end
      month, day, year = tonumber(month), tonumber(day), tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
        if month == nil or day == nil or year == nil then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      if tonumber(month) == 2 and tonumber(day) > 29 then return false end
      if tonumber(month) == 4 and tonumber(day) > 30 then return false end
      if tonumber(month) == 6 and tonumber(day) > 30 then return false end
      if tonumber(month) == 9 and tonumber(day) > 30 then return false end
      if tonumber(month) == 11 and tonumber(day) > 30 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local day, month, year = date:match('(%d+)-(%d+)-(%d+)')
      if day == nil or month == nil or year == nil then
        return false
      end
      day = tonumber(day)
      month = tonumber(month)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkyh73lu.lua:52:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjkyh73lu.lua:52: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {
            [1] = 31,
            [2] = 29,
            [3] = 31,
            [4] = 30,
            [5] = 31,
            [6] = 30,
            [7] = 31,
            [8] = 31,
            [9] = 30,
            [10] = 31,
            [11] = 30,
            [12] = 31
        }
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if month and day and year then
            month = tonumber(month)
            day = tonumber(day)
            year = tonumber(year)
            if month >= 1 and month <= 12 and day >= 1 and day <= months[month] and year >= 1 then
                return true
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local month, day, year = date:match(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if (month == 4 or month == 6 or month == 9 or month == 11) and day > 30 then
        return false
      end
      if month == 2 and day > 29 then
        return false
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and year % 100 ~= 0 or year % 400 == 0 then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local m, d, y = date:match(pattern)
      if not m or not d or not y then
        return false
      end
      m = tonumber(m)
      d = tonumber(d)
      y = tonumber(y)
      if m < 1 or m > 12 then
        return false
      end
      if m == 2 then
        if y % 4 == 0 and (y % 100 ~= 0 or y % 400 == 0) then
          if d < 1 or d > 29 then
            return false
          end
        else
          if d < 1 or d > 28 then
            return false
          end
        end
      elseif m == 4 or m == 6 or m == 9 or m == 11 then
        if d < 1 or d > 30 then
          return false
        end
      else
        if d < 1 or d > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > months[month] then
            return false
        end
        if month == 2 and day == 29 and not is_leap_year(year) then
            return false
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local month, day, year = date:match(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynueyupc.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpynueyupc.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if (month == 4 or month == 6 or month == 9 or month == 11) and day > 30 then
            return false
        end
        if month == 2 and day > 29 then
            return false
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m % 2 == 0 and m < 8 and d > 30 then return false end
      if m % 2 == 1 and m > 8 and d > 30 then return false end
      if m % 2 == 1 and m < 8 and d > 31 then return false end
      if m % 2 == 0 and m > 8 and d > 31 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == '' then
        return false
      end
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if day and month and year then
            day = tonumber(day)
            month = tonumber(month)
            year = tonumber(year)
            if month == 2 then
                if day >= 1 and day <= 29 then
                    return true
                end
            elseif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12 then
                if day >= 1 and day <= 31 then
                    return true
                end
            elseif month == 4 or month == 6 or month == 9 or month == 11 then
                if day >= 1 and day <= 30 then
                    return true
                end
            end
        end
        return false
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxyugtrg.lua:45:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwxyugtrg.lua:45: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(month) == 2 then
        if tonumber(day) < 1 or tonumber(day) > 29 then return false end
      elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) < 1 or tonumber(day) > 30 then return false end
      else
        if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local month, day, year = date:match(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
        local month = tonumber(month)
        local day = tonumber(day)
        local year = tonumber(year)
        if month == nil or day == nil or year == nil then
            return false
        end
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == '' then
        return false
      end
      local day, month, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not day or not month or not year then
        return false
      end
      if tonumber(day) < 1 or tonumber(day) > 31 then
        return false
      end
      if tonumber(month) < 1 or tonumber(month) > 12 then
        return false
      end
      if tonumber(day) > 30 and (tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11) then
        return false
      end
      if tonumber(day) > 29 and tonumber(month) == 2 then
        return false
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhhbm722.lua:45:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzhhbm722.lua:45: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not month or not day or not year then return false end
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      if tonumber(year) % 4 == 0 then days[2] = 29 end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(day) < 1 or tonumber(day) > days[tonumber(month)] then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if day < 1 or day > 31 then return false end
      if month == 2 and day > 29 then return false end
      if month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {
            [1] = 31,
            [2] = 29,
            [3] = 31,
            [4] = 30,
            [5] = 31,
            [6] = 30,
            [7] = 31,
            [8] = 31,
            [9] = 30,
            [10] = 31,
            [11] = 30,
            [12] = 31
        }
        local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > months[month] then
            return false
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(month) == 2 then
        if tonumber(day) < 1 or tonumber(day) > 29 then return false end
      elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) < 1 or tonumber(day) > 30 then return false end
      else
        if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local d, m, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not d or not m or not y then return false end
      if tonumber(d) < 1 or tonumber(d) > 31 then return false end
      if tonumber(m) < 1 or tonumber(m) > 12 then return false end
      if tonumber(m) == 2 and tonumber(d) > 29 then return false end
      if tonumber(m) == 4 and tonumber(d) > 30 then return false end
      if tonumber(m) == 6 and tonumber(d) > 30 then return false end
      if tonumber(m) == 9 and tonumber(d) > 30 then return false end
      if tonumber(m) == 11 and tonumber(d) > 30 then return false end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptspvvp08.lua:35:
    expected: false, actual: true\nstack traceback:\n\t/tmp/tmptspvvp08.lua:35: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      if tonumber(month) < 1 or tonumber(month) > 12 then return false end
      if tonumber(month) == 2 then
        if tonumber(day) < 1 or tonumber(day) > 29 then return false end
      elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
        if tonumber(day) < 1 or tonumber(day) > 30 then return false end
      else
        if tonumber(day) < 1 or tonumber(day) > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = "(%d%d)-(%d%d)-(%d%d%d%d)"
      local _, _, month, day, year = date:find(pattern)
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local y, m, d = date:match('(%d%d%d%d)%-(%d%d)%-(%d%d)')
      if not y then return false end
      local days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
      if tonumber(y) % 4 == 0 then days[2] = 29 end
      return tonumber(d) >= 1 and tonumber(d) <= days[tonumber(m)]
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvqvnvtl.lua:29:
    expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxvqvnvtl.lua:29: in
    function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local months = {
        [1] = 31,
        [2] = 29,
        [3] = 31,
        [4] = 30,
        [5] = 31,
        [6] = 30,
        [7] = 31,
        [8] = 31,
        [9] = 30,
        [10] = 31,
        [11] = 30,
        [12] = 31
      }
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > months[month] then
        return false
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54bs89h7.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp54bs89h7.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and y % 4 ~= 0 then return false end
      if m == 2 and d == 29 and y % 100 == 0 and y % 400 ~= 0 then return false end
      if m == 2 and d > 28 then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
                if day < 1 or day > 29 then
                    return false
                end
            else
                if day < 1 or day > 28 then
                    return false
                end
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rl3dnvm.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_rl3dnvm.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {
            [1] = 31,
            [2] = 29,
            [3] = 31,
            [4] = 30,
            [5] = 31,
            [6] = 30,
            [7] = 31,
            [8] = 31,
            [9] = 30,
            [10] = 31,
            [11] = 30,
            [12] = 31
        }
        local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > months[month] then
            return false
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local date_pattern = '^(%d%d)-(%d%d)-(%d%d%d%d)$'
      local month, day, year = date:match(date_pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if day < 1 or day > 31 then
        return false
      end
      if month == 2 then
        if day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day > 30 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      if date == nil or date == '' then
        return false
      end
      local month, day, year = date:match('(%d+)-(%d+)-(%d+)')
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
        local m, d, y = date:match('(%d+)-(%d+)-(%d+)')
        if not m or not d or not y then return false end
        m, d, y = tonumber(m), tonumber(d), tonumber(y)
        if m < 1 or m > 12 then return false end
        if d < 1 or d > months[m] then return false end
        if m == 2 and d == 29 and not is_leap_year(y) then return false end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if not month or not day or not year then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if day < 1 or day > 31 then
            return false
        end
        if month == 2 then
            if day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day > 30 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
        if month == nil or day == nil or year == nil then
            return false
        end
        month = tonumber(month)
        day = tonumber(day)
        year = tonumber(year)
        if month < 1 or month > 12 then
            return false
        end
        if month == 2 then
            if day < 1 or day > 29 then
                return false
            end
        elseif month == 4 or month == 6 or month == 9 or month == 11 then
            if day < 1 or day > 30 then
                return false
            end
        else
            if day < 1 or day > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
      if month == nil or day == nil or year == nil then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if year % 4 == 0 and (year % 100 ~= 0 or year % 400 == 0) then
          if day < 1 or day > 29 then
            return false
          end
        else
          if day < 1 or day > 28 then
            return false
          end
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local pattern = '(%d%d)-(%d%d)-(%d%d%d%d)'
      local month, day, year = date:match(pattern)
      if not month or not day or not year then
        return false
      end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then
        return false
      end
      if month == 2 then
        if day < 1 or day > 29 then
          return false
        end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then
          return false
        end
      else
        if day < 1 or day > 31 then
          return false
        end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local month, day, year = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not month or not day or not year then return false end
      month = tonumber(month)
      day = tonumber(day)
      year = tonumber(year)
      if month < 1 or month > 12 then return false end
      if month == 2 then
        if day < 1 or day > 29 then return false end
      elseif month == 4 or month == 6 or month == 9 or month == 11 then
        if day < 1 or day > 30 then return false end
      else
        if day < 1 or day > 31 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
        local month, day, year = date:match("(%d%d)-(%d%d)-(%d%d%d%d)")
        if not month or not day or not year then
            return false
        end
        if tonumber(month) < 1 or tonumber(month) > 12 then
            return false
        end
        if tonumber(month) == 2 then
            if tonumber(day) < 1 or tonumber(day) > 29 then
                return false
            end
        elseif tonumber(month) == 4 or tonumber(month) == 6 or tonumber(month) == 9 or tonumber(month) == 11 then
            if tonumber(day) < 1 or tonumber(day) > 30 then
                return false
            end
        else
            if tonumber(day) < 1 or tonumber(day) > 31 then
                return false
            end
        end
        return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      local m, d, y = date:match('(%d%d)-(%d%d)-(%d%d%d%d)')
      if not m then return false end
      m, d, y = tonumber(m), tonumber(d), tonumber(y)
      if m < 1 or m > 12 then return false end
      if m == 2 and d > 29 then return false end
      if m == 2 and d == 29 and not is_leap_year(y) then return false end
      if m == 2 and d < 1 then return false end
      if m == 4 or m == 6 or m == 9 or m == 11 then
        if d > 30 then return false end
        if d < 1 then return false end
      end
      if m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12 then
        if d > 31 then return false end
        if d < 1 then return false end
      end
      return true
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: |
    .
    Ran 1 tests in 0.000 seconds, 1 success, 0 failures
    OK
  stderr: ''
  exit_code: 0
  status: OK
- program: |-
    -- You have to write a function which validates a given date string and
    -- returns true if the date is valid otherwise false.
    -- The date is valid if all of the following rules are satisfied:
    -- 1. The date string is not empty.
    -- 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    -- 3. The months should not be less than 1 or higher than 12.
    -- 4. The date should be in the format: mm-dd-yyyy
    -- >>> valid_date('03-11-2000')
    -- true
    -- >>> valid_date('15-01-2012')
    -- false
    -- >>> valid_date('04-0-2040')
    -- false
    -- >>> valid_date('06-04-2020')
    -- true
    -- >>> valid_date('06/04/2020')
    -- false
    local function valid_date(date)
      -- your code here
    end
    lu = require('luaunit')

    function test_humaneval()
    local candidate = valid_date
        lu.assertEquals(candidate('03-11-2000'), true)
        lu.assertEquals(candidate('15-01-2012'), false)
        lu.assertEquals(candidate('04-0-2040'), false)
        lu.assertEquals(candidate('06-04-2020'), true)
        lu.assertEquals(candidate('01-01-2007'), true)
        lu.assertEquals(candidate('03-32-2011'), false)
        lu.assertEquals(candidate(''), false)
        lu.assertEquals(candidate('04-31-3000'), false)
        lu.assertEquals(candidate('06-06-2005'), true)
        lu.assertEquals(candidate('21-31-2000'), false)
        lu.assertEquals(candidate('04-12-2003'), true)
        lu.assertEquals(candidate('04122003'), false)
        lu.assertEquals(candidate('20030412'), false)
        lu.assertEquals(candidate('2003-04'), false)
        lu.assertEquals(candidate('2003-04-12'), false)
        lu.assertEquals(candidate('04-2003'), false)
    end

    os.exit(lu.LuaUnit.run())
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpue31n6wo.lua:25:
    expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpue31n6wo.lua:25: in function
    'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
