---
name: HumanEval_58_common
language: lua
prompt: |
  -- Return sorted unique common elements for two tables.
  -- >>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})
  -- {1, 5, 653}
  -- >>> common({5, 3, 2, 8}, {3, 2})
  -- {2, 3}
  local function common(l1, l2)
tests: |-
  lu = require('luaunit')

  function test_humaneval()
  local candidate = common
      lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})
      lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})
      lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})
      lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})
  end

  os.exit(lu.LuaUnit.run())
completions:
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local res = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(res, v)
          end
      end
      return sort(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for k, v in pairs(l1) do
      if l2[v] then
        t[v] = true
      end
    end
    local r = {}
    for k, v in pairs(t) do
      r[#r + 1] = k
    end
    table.sort(r)
    return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return unique(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for k, v in pairs(l1) do
      if l2[v] then
        t[v] = true
      end
    end
    local r = {}
    for k, v in pairs(t) do
      table.insert(r, k)
    end
    table.sort(r)
    return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      sort(t)
      return t
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        table.insert(t, v)
      end
    end
    return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return unique(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return set(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local r = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              r[#r + 1] = v
          end
      end
      return sort(r)
  end
- |2-
      local res = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(res, v)
          end
      end
      return sort(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for k, v in pairs(l1) do
          if l2[v] then
              t[v] = true
          end
      end
      local l = {}
      for k, v in pairs(t) do
          l[#l + 1] = k
      end
      table.sort(l)
      return l
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              insert(t, v)
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      local r = {}
      for _, v in ipairs(l1) do
          t[v] = true
      end
      for _, v in ipairs(l2) do
          if t[v] then
              table.insert(r, v)
          end
      end
      table.sort(r)
      return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for i = 1, #l1 do
          local v = l1[i]
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
    local t = {}
    for k, v in pairs(l1) do
      if l2[v] then
        t[v] = true
      end
    end
    return sorted_keys(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local ret = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              ret[#ret + 1] = v
          end
      end
      return sort(ret)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return unique(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local s = {}
      for _, v in ipairs(l1) do
          s[v] = true
      end
      local r = {}
      for _, v in ipairs(l2) do
          if s[v] then
              r[#r+1] = v
          end
      end
      return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local res = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(res, v)
          end
      end
      return sort(res)
  end
- |2-
      local t = {}
      for k, v in pairs(l1) do
          if l2[v] then
              t[v] = true
          end
      end
      local r = {}
      for k, v in pairs(t) do
          table.insert(r, k)
      end
      table.sort(r)
      return r
  end
- |2-
      local t = {}
      for k, v in pairs(l1) do
          if l2[v] then
              t[v] = true
          end
      end
      local r = {}
      for k, v in pairs(t) do
          table.insert(r, k)
      end
      table.sort(r)
      return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
    local res = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        res[#res + 1] = v
      end
    end
    return sort(res)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sorted(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local r = {}
      for k, v in pairs(l1) do
          if l2[v] then
              r[v] = true
          end
      end
      return sorted(r)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      table.sort(t)
      return t
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        table.insert(t, v)
      end
    end
    return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for i, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local r = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              r[#r + 1] = v
          end
      end
      return sort(r)
  end
- |2-
    local res = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        res[#res + 1] = v
      end
    end
    return sort(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local res = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              res[#res + 1] = v
          end
      end
      return sort(res)
  end
- |2-
      local t = {}
      local r = {}
      for _, v in ipairs(l1) do
          t[v] = true
      end
      for _, v in ipairs(l2) do
          if t[v] then
              table.insert(r, v)
          end
      end
      table.sort(r)
      return r
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return unique(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local res = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        res[#res + 1] = v
      end
    end
    return sort(res)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local ret = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(ret, v)
          end
      end
      return sorted(ret)
  end
- |2-
      local res = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              res[#res + 1] = v
          end
      end
      return sort(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return unique(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for k, v in pairs(l1) do
      t[v] = true
    end
    for k, v in pairs(l2) do
      if t[v] then
        t[v] = nil
        t[#t + 1] = v
      end
    end
    return t
  end
- "\tlocal t = {}\n\tfor _, v in ipairs(l1) do\n\t\tif contains(l2, v) then\n\t\t\tt[#t
  + 1] = v\n\t\tend\n\tend\n\treturn unique(t)\nend"
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
    local res = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        res[#res + 1] = v
      end
    end
    return sort(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
    local res = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        table.insert(res, v)
      end
    end
    return sorted(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local r = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              r[#r + 1] = v
          end
      end
      return sort(r)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local res = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(res, v)
          end
      end
      return sort(res)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              table.insert(t, v)
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t+1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sorted(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
    local t = {}
    for _, v in ipairs(l1) do
      if contains(l2, v) then
        t[#t + 1] = v
      end
    end
    return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
- |2-
      local t = {}
      for k, v in pairs(l1) do
          if l2[v] then
              t[v] = true
          end
      end
      return keys(t)
  end
- |2-
      local t = {}
      for _, v in ipairs(l1) do
          if contains(l2, v) then
              t[#t + 1] = v
          end
      end
      return sort(t)
  end
stop_tokens:
- |2-

  local
- |2-

  function
- |2-

  --
- "\n\n"
